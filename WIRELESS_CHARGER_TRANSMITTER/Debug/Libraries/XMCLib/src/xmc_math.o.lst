   1              	 .cpu cortex-m0
   2              	 .fpu softvfp
   3              	 .eabi_attribute 20,1
   4              	 .eabi_attribute 21,1
   5              	 .eabi_attribute 23,3
   6              	 .eabi_attribute 24,1
   7              	 .eabi_attribute 25,1
   8              	 .eabi_attribute 26,1
   9              	 .eabi_attribute 30,6
  10              	 .eabi_attribute 34,0
  11              	 .eabi_attribute 18,4
  12              	 .code 16
  13              	 .file "xmc_math.c"
  14              	 .text
  15              	.Ltext0:
  16              	 .cfi_sections .debug_frame
  17              	 .section .text.XMC_MATH_DIV_IsBusy,"ax",%progbits
  18              	 .align 2
  19              	 .global XMC_MATH_DIV_IsBusy
  20              	 .code 16
  21              	 .thumb_func
  23              	XMC_MATH_DIV_IsBusy:
  24              	.LFB67:
  25              	 .file 1 "../Libraries/XMCLib/src/xmc_math.c"
   1:../Libraries/XMCLib/src/xmc_math.c **** 
   2:../Libraries/XMCLib/src/xmc_math.c **** /**
   3:../Libraries/XMCLib/src/xmc_math.c ****  * @file xmc_math.c
   4:../Libraries/XMCLib/src/xmc_math.c ****  * @date 2017-04-20
   5:../Libraries/XMCLib/src/xmc_math.c ****  *
   6:../Libraries/XMCLib/src/xmc_math.c ****  * @cond
   7:../Libraries/XMCLib/src/xmc_math.c ****  **********************************************************************************
   8:../Libraries/XMCLib/src/xmc_math.c ****  * XMClib v2.1.16 - XMC Peripheral Driver Library 
   9:../Libraries/XMCLib/src/xmc_math.c ****  *
  10:../Libraries/XMCLib/src/xmc_math.c ****  * Copyright (c) 2015-2017, Infineon Technologies AG
  11:../Libraries/XMCLib/src/xmc_math.c ****  * All rights reserved.                        
  12:../Libraries/XMCLib/src/xmc_math.c ****  *                                             
  13:../Libraries/XMCLib/src/xmc_math.c ****  * Redistribution and use in source and binary forms, with or without           
  14:../Libraries/XMCLib/src/xmc_math.c ****  * modification,are permitted provided that the following conditions are met:   
  15:../Libraries/XMCLib/src/xmc_math.c ****  *                                                                              
  16:../Libraries/XMCLib/src/xmc_math.c ****  *   Redistributions of source code must retain the above copyright notice,      
  17:../Libraries/XMCLib/src/xmc_math.c ****  *   this list of conditions and the following disclaimer.                        
  18:../Libraries/XMCLib/src/xmc_math.c ****  * 
  19:../Libraries/XMCLib/src/xmc_math.c ****  *   Redistributions in binary form must reproduce the above copyright notice,   
  20:../Libraries/XMCLib/src/xmc_math.c ****  *   this list of conditions and the following disclaimer in the documentation    
  21:../Libraries/XMCLib/src/xmc_math.c ****  *   and/or other materials provided with the distribution.                       
  22:../Libraries/XMCLib/src/xmc_math.c ****  * 
  23:../Libraries/XMCLib/src/xmc_math.c ****  *   Neither the name of the copyright holders nor the names of its contributors 
  24:../Libraries/XMCLib/src/xmc_math.c ****  *   may be used to endorse or promote products derived from this software without
  25:../Libraries/XMCLib/src/xmc_math.c ****  *   specific prior written permission.                                           
  26:../Libraries/XMCLib/src/xmc_math.c ****  *                                                                              
  27:../Libraries/XMCLib/src/xmc_math.c ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"  
  28:../Libraries/XMCLib/src/xmc_math.c ****  * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE    
  29:../Libraries/XMCLib/src/xmc_math.c ****  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE   
  30:../Libraries/XMCLib/src/xmc_math.c ****  * ARE  DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE   
  31:../Libraries/XMCLib/src/xmc_math.c ****  * LIABLE  FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR         
  32:../Libraries/XMCLib/src/xmc_math.c ****  * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF         
  33:../Libraries/XMCLib/src/xmc_math.c ****  * SUBSTITUTE GOODS OR  SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS    
  34:../Libraries/XMCLib/src/xmc_math.c ****  * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN      
  35:../Libraries/XMCLib/src/xmc_math.c ****  * CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)       
  36:../Libraries/XMCLib/src/xmc_math.c ****  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE   
  37:../Libraries/XMCLib/src/xmc_math.c ****  * POSSIBILITY OF SUCH DAMAGE.                                                  
  38:../Libraries/XMCLib/src/xmc_math.c ****  *                                                                              
  39:../Libraries/XMCLib/src/xmc_math.c ****  * To improve the quality of the software, users are encouraged to share        
  40:../Libraries/XMCLib/src/xmc_math.c ****  * modifications, enhancements or bug fixes with Infineon Technologies AG       
  41:../Libraries/XMCLib/src/xmc_math.c ****  * dave@infineon.com).                                                          
  42:../Libraries/XMCLib/src/xmc_math.c ****  **********************************************************************************
  43:../Libraries/XMCLib/src/xmc_math.c ****  *
  44:../Libraries/XMCLib/src/xmc_math.c ****  * Change History
  45:../Libraries/XMCLib/src/xmc_math.c ****  * --------------
  46:../Libraries/XMCLib/src/xmc_math.c ****  *
  47:../Libraries/XMCLib/src/xmc_math.c ****  * 2015-06-20: 
  48:../Libraries/XMCLib/src/xmc_math.c ****  *     - Removed version macros and declaration of GetDriverVersion API <br>
  49:../Libraries/XMCLib/src/xmc_math.c ****  *     - Updated copyright and change history section.
  50:../Libraries/XMCLib/src/xmc_math.c ****  *
  51:../Libraries/XMCLib/src/xmc_math.c ****  * 2015-09-23: 
  52:../Libraries/XMCLib/src/xmc_math.c ****  *     - Added SQRT functions
  53:../Libraries/XMCLib/src/xmc_math.c ****  *
  54:../Libraries/XMCLib/src/xmc_math.c ****  * 2015-10-08:
  55:../Libraries/XMCLib/src/xmc_math.c ****  *     - Return values for sin(), cos(), sinh(), cosh(), arctan() are corrected.
  56:../Libraries/XMCLib/src/xmc_math.c ****  *
  57:../Libraries/XMCLib/src/xmc_math.c ****  * 2017-04-20:
  58:../Libraries/XMCLib/src/xmc_math.c ****  *     - Foward declaration of __aeabi_* to fix link time optimization (-flto) compilation errors
  59:../Libraries/XMCLib/src/xmc_math.c ****  * 
  60:../Libraries/XMCLib/src/xmc_math.c ****  * @endcond
  61:../Libraries/XMCLib/src/xmc_math.c ****  *
  62:../Libraries/XMCLib/src/xmc_math.c ****  */
  63:../Libraries/XMCLib/src/xmc_math.c **** 
  64:../Libraries/XMCLib/src/xmc_math.c **** /**
  65:../Libraries/XMCLib/src/xmc_math.c ****  *
  66:../Libraries/XMCLib/src/xmc_math.c ****  * @brief MATH driver - API implementation for XMC13 family MATH libraries. <br>
  67:../Libraries/XMCLib/src/xmc_math.c ****  * 
  68:../Libraries/XMCLib/src/xmc_math.c ****  * <b>Detailed description of file</b> <br>
  69:../Libraries/XMCLib/src/xmc_math.c ****  * APIs provided in this file cover the following functional blocks of MATH: <br>
  70:../Libraries/XMCLib/src/xmc_math.c ****  *
  71:../Libraries/XMCLib/src/xmc_math.c ****  */
  72:../Libraries/XMCLib/src/xmc_math.c **** 
  73:../Libraries/XMCLib/src/xmc_math.c **** /**************************************************************************************************
  74:../Libraries/XMCLib/src/xmc_math.c ****  * HEADER FILES
  75:../Libraries/XMCLib/src/xmc_math.c ****  **************************************************************************************************
  76:../Libraries/XMCLib/src/xmc_math.c **** #include <xmc_math.h>
  77:../Libraries/XMCLib/src/xmc_math.c **** 
  78:../Libraries/XMCLib/src/xmc_math.c **** #if defined (MATH)
  79:../Libraries/XMCLib/src/xmc_math.c **** /**************************************************************************************************
  80:../Libraries/XMCLib/src/xmc_math.c ****  * MACROS
  81:../Libraries/XMCLib/src/xmc_math.c ****  **************************************************************************************************
  82:../Libraries/XMCLib/src/xmc_math.c **** /* Reciprocal of Circular gain in XMC_MATH_Q0_23_t format ((2^23)/1.646760258121) */
  83:../Libraries/XMCLib/src/xmc_math.c **** #define XMC_MATH_RECIPROC_CIRCULAR_GAIN_IN_Q023       (0x4DBA76U)
  84:../Libraries/XMCLib/src/xmc_math.c **** /* Reciprocal of Hyperbolic gain in XMC_MATH_Q1_22_t format ((2^22)/0.828159360960) */
  85:../Libraries/XMCLib/src/xmc_math.c **** #define XMC_MATH_RECIPROC_HYPERBOLIC_GAIN_IN_Q1_22    (0x4D47A1U)
  86:../Libraries/XMCLib/src/xmc_math.c **** /* Signed division is selected */
  87:../Libraries/XMCLib/src/xmc_math.c **** #define XMC_MATH_SIGNED_DIVISION                      ((uint32_t) 0 << MATH_DIVCON_USIGN_Pos)
  88:../Libraries/XMCLib/src/xmc_math.c **** /* Unsigned division is selected */
  89:../Libraries/XMCLib/src/xmc_math.c **** #define XMC_MATH_UNSIGNED_DIVISION                    ((uint32_t) 1 << MATH_DIVCON_USIGN_Pos)
  90:../Libraries/XMCLib/src/xmc_math.c **** 
  91:../Libraries/XMCLib/src/xmc_math.c **** /**************************************************************************************************
  92:../Libraries/XMCLib/src/xmc_math.c ****  * ENUMS
  93:../Libraries/XMCLib/src/xmc_math.c ****  **************************************************************************************************
  94:../Libraries/XMCLib/src/xmc_math.c **** 
  95:../Libraries/XMCLib/src/xmc_math.c **** /**************************************************************************************************
  96:../Libraries/XMCLib/src/xmc_math.c ****  * GLOBAL DATA
  97:../Libraries/XMCLib/src/xmc_math.c ****  **************************************************************************************************
  98:../Libraries/XMCLib/src/xmc_math.c **** 
  99:../Libraries/XMCLib/src/xmc_math.c **** /**************************************************************************************************
 100:../Libraries/XMCLib/src/xmc_math.c ****  * DATA STRUCTURES
 101:../Libraries/XMCLib/src/xmc_math.c ****  **************************************************************************************************
 102:../Libraries/XMCLib/src/xmc_math.c **** 
 103:../Libraries/XMCLib/src/xmc_math.c **** /**************************************************************************************************
 104:../Libraries/XMCLib/src/xmc_math.c ****  * LOCAL ROUTINES
 105:../Libraries/XMCLib/src/xmc_math.c ****  **************************************************************************************************
 106:../Libraries/XMCLib/src/xmc_math.c **** 
 107:../Libraries/XMCLib/src/xmc_math.c **** /**************************************************************************************************
 108:../Libraries/XMCLib/src/xmc_math.c ****  * API IMPLEMENTATION - Utility functions
 109:../Libraries/XMCLib/src/xmc_math.c ****  **************************************************************************************************
 110:../Libraries/XMCLib/src/xmc_math.c **** 
 111:../Libraries/XMCLib/src/xmc_math.c **** /* Utility function to check if the DIV unit is busy */
 112:../Libraries/XMCLib/src/xmc_math.c **** bool XMC_MATH_DIV_IsBusy(void)
 113:../Libraries/XMCLib/src/xmc_math.c **** {
  26              	 .loc 1 113 0
  27              	 .cfi_startproc
  28 0000 80B5     	 push {r7,lr}
  29              	.LCFI0:
  30              	 .cfi_def_cfa_offset 8
  31              	 .cfi_offset 7,-8
  32              	 .cfi_offset 14,-4
  33 0002 82B0     	 sub sp,sp,#8
  34              	.LCFI1:
  35              	 .cfi_def_cfa_offset 16
  36 0004 00AF     	 add r7,sp,#0
  37              	.LCFI2:
  38              	 .cfi_def_cfa_register 7
 114:../Libraries/XMCLib/src/xmc_math.c ****   bool status;
 115:../Libraries/XMCLib/src/xmc_math.c ****   if (MATH->DIVST & MATH_DIVST_BSY_Msk)
  39              	 .loc 1 115 0
  40 0006 094B     	 ldr r3,.L5
  41 0008 1B6B     	 ldr r3,[r3,#48]
  42 000a 0122     	 mov r2,#1
  43 000c 1340     	 and r3,r2
  44 000e 03D0     	 beq .L2
 116:../Libraries/XMCLib/src/xmc_math.c ****   {
 117:../Libraries/XMCLib/src/xmc_math.c ****     status = true;  /* DIV unit is busy running a division operation */ 
  45              	 .loc 1 117 0
  46 0010 FB1D     	 add r3,r7,#7
  47 0012 0122     	 mov r2,#1
  48 0014 1A70     	 strb r2,[r3]
  49 0016 02E0     	 b .L3
  50              	.L2:
 118:../Libraries/XMCLib/src/xmc_math.c ****   }
 119:../Libraries/XMCLib/src/xmc_math.c ****   else
 120:../Libraries/XMCLib/src/xmc_math.c ****   {
 121:../Libraries/XMCLib/src/xmc_math.c ****     status = false; /* DIV unit is idle */ 
  51              	 .loc 1 121 0
  52 0018 FB1D     	 add r3,r7,#7
  53 001a 0022     	 mov r2,#0
  54 001c 1A70     	 strb r2,[r3]
  55              	.L3:
 122:../Libraries/XMCLib/src/xmc_math.c ****   }
 123:../Libraries/XMCLib/src/xmc_math.c **** 
 124:../Libraries/XMCLib/src/xmc_math.c ****   return (status);
  56              	 .loc 1 124 0
  57 001e FB1D     	 add r3,r7,#7
  58 0020 1B78     	 ldrb r3,[r3]
 125:../Libraries/XMCLib/src/xmc_math.c **** }
  59              	 .loc 1 125 0
  60 0022 181C     	 mov r0,r3
  61 0024 BD46     	 mov sp,r7
  62 0026 02B0     	 add sp,sp,#8
  63              	 
  64 0028 80BD     	 pop {r7,pc}
  65              	.L6:
  66 002a C046     	 .align 2
  67              	.L5:
  68 002c 00000340 	 .word 1073938432
  69              	 .cfi_endproc
  70              	.LFE67:
  72              	 .section .text.XMC_MATH_CORDIC_IsBusy,"ax",%progbits
  73              	 .align 2
  74              	 .global XMC_MATH_CORDIC_IsBusy
  75              	 .code 16
  76              	 .thumb_func
  78              	XMC_MATH_CORDIC_IsBusy:
  79              	.LFB68:
 126:../Libraries/XMCLib/src/xmc_math.c **** 
 127:../Libraries/XMCLib/src/xmc_math.c **** /* Utility function to check if the CORDIC unit is busy */
 128:../Libraries/XMCLib/src/xmc_math.c **** bool XMC_MATH_CORDIC_IsBusy(void)
 129:../Libraries/XMCLib/src/xmc_math.c **** {
  80              	 .loc 1 129 0
  81              	 .cfi_startproc
  82 0000 80B5     	 push {r7,lr}
  83              	.LCFI3:
  84              	 .cfi_def_cfa_offset 8
  85              	 .cfi_offset 7,-8
  86              	 .cfi_offset 14,-4
  87 0002 82B0     	 sub sp,sp,#8
  88              	.LCFI4:
  89              	 .cfi_def_cfa_offset 16
  90 0004 00AF     	 add r7,sp,#0
  91              	.LCFI5:
  92              	 .cfi_def_cfa_register 7
 130:../Libraries/XMCLib/src/xmc_math.c ****   bool status;
 131:../Libraries/XMCLib/src/xmc_math.c ****   if (MATH->STATC & MATH_STATC_BSY_Msk)
  93              	 .loc 1 131 0
  94 0006 094B     	 ldr r3,.L11
  95 0008 1B6C     	 ldr r3,[r3,#64]
  96 000a 0122     	 mov r2,#1
  97 000c 1340     	 and r3,r2
  98 000e 03D0     	 beq .L8
 132:../Libraries/XMCLib/src/xmc_math.c ****   {
 133:../Libraries/XMCLib/src/xmc_math.c ****     status = true;  /* CORDIC unit is busy running an operation */  
  99              	 .loc 1 133 0
 100 0010 FB1D     	 add r3,r7,#7
 101 0012 0122     	 mov r2,#1
 102 0014 1A70     	 strb r2,[r3]
 103 0016 02E0     	 b .L9
 104              	.L8:
 134:../Libraries/XMCLib/src/xmc_math.c ****   }
 135:../Libraries/XMCLib/src/xmc_math.c ****   else
 136:../Libraries/XMCLib/src/xmc_math.c ****   {
 137:../Libraries/XMCLib/src/xmc_math.c ****     status = false; /* CORDIC unit is idle */   
 105              	 .loc 1 137 0
 106 0018 FB1D     	 add r3,r7,#7
 107 001a 0022     	 mov r2,#0
 108 001c 1A70     	 strb r2,[r3]
 109              	.L9:
 138:../Libraries/XMCLib/src/xmc_math.c ****   }
 139:../Libraries/XMCLib/src/xmc_math.c **** 
 140:../Libraries/XMCLib/src/xmc_math.c ****   return (status);
 110              	 .loc 1 140 0
 111 001e FB1D     	 add r3,r7,#7
 112 0020 1B78     	 ldrb r3,[r3]
 141:../Libraries/XMCLib/src/xmc_math.c **** }
 113              	 .loc 1 141 0
 114 0022 181C     	 mov r0,r3
 115 0024 BD46     	 mov sp,r7
 116 0026 02B0     	 add sp,sp,#8
 117              	 
 118 0028 80BD     	 pop {r7,pc}
 119              	.L12:
 120 002a C046     	 .align 2
 121              	.L11:
 122 002c 00000340 	 .word 1073938432
 123              	 .cfi_endproc
 124              	.LFE68:
 126              	 .section .text.XMC_MATH_GetEventStatus,"ax",%progbits
 127              	 .align 2
 128              	 .global XMC_MATH_GetEventStatus
 129              	 .code 16
 130              	 .thumb_func
 132              	XMC_MATH_GetEventStatus:
 133              	.LFB69:
 142:../Libraries/XMCLib/src/xmc_math.c **** 
 143:../Libraries/XMCLib/src/xmc_math.c **** /* This functions returns the status of a requested event */
 144:../Libraries/XMCLib/src/xmc_math.c **** bool XMC_MATH_GetEventStatus(const XMC_MATH_EVENT_t event)
 145:../Libraries/XMCLib/src/xmc_math.c **** {
 134              	 .loc 1 145 0
 135              	 .cfi_startproc
 136 0000 80B5     	 push {r7,lr}
 137              	.LCFI6:
 138              	 .cfi_def_cfa_offset 8
 139              	 .cfi_offset 7,-8
 140              	 .cfi_offset 14,-4
 141 0002 84B0     	 sub sp,sp,#16
 142              	.LCFI7:
 143              	 .cfi_def_cfa_offset 24
 144 0004 00AF     	 add r7,sp,#0
 145              	.LCFI8:
 146              	 .cfi_def_cfa_register 7
 147 0006 021C     	 mov r2,r0
 148 0008 FB1D     	 add r3,r7,#7
 149 000a 1A70     	 strb r2,[r3]
 146:../Libraries/XMCLib/src/xmc_math.c ****   bool status;
 147:../Libraries/XMCLib/src/xmc_math.c ****   if (MATH->EVFR & (uint32_t) event)
 150              	 .loc 1 147 0
 151 000c 0A4B     	 ldr r3,.L17
 152 000e 1B69     	 ldr r3,[r3,#16]
 153 0010 FA1D     	 add r2,r7,#7
 154 0012 1278     	 ldrb r2,[r2]
 155 0014 1340     	 and r3,r2
 156 0016 04D0     	 beq .L14
 148:../Libraries/XMCLib/src/xmc_math.c ****   {
 149:../Libraries/XMCLib/src/xmc_math.c ****     status = true; /* Requested event has been detected */
 157              	 .loc 1 149 0
 158 0018 0F23     	 mov r3,#15
 159 001a FB18     	 add r3,r7,r3
 160 001c 0122     	 mov r2,#1
 161 001e 1A70     	 strb r2,[r3]
 162 0020 03E0     	 b .L15
 163              	.L14:
 150:../Libraries/XMCLib/src/xmc_math.c ****   }
 151:../Libraries/XMCLib/src/xmc_math.c ****   else
 152:../Libraries/XMCLib/src/xmc_math.c ****   {
 153:../Libraries/XMCLib/src/xmc_math.c ****     status = false; /* Requested event has not been detected */
 164              	 .loc 1 153 0
 165 0022 0F23     	 mov r3,#15
 166 0024 FB18     	 add r3,r7,r3
 167 0026 0022     	 mov r2,#0
 168 0028 1A70     	 strb r2,[r3]
 169              	.L15:
 154:../Libraries/XMCLib/src/xmc_math.c ****   }
 155:../Libraries/XMCLib/src/xmc_math.c ****   return (status);
 170              	 .loc 1 155 0
 171 002a 0F23     	 mov r3,#15
 172 002c FB18     	 add r3,r7,r3
 173 002e 1B78     	 ldrb r3,[r3]
 156:../Libraries/XMCLib/src/xmc_math.c **** }
 174              	 .loc 1 156 0
 175 0030 181C     	 mov r0,r3
 176 0032 BD46     	 mov sp,r7
 177 0034 04B0     	 add sp,sp,#16
 178              	 
 179 0036 80BD     	 pop {r7,pc}
 180              	.L18:
 181              	 .align 2
 182              	.L17:
 183 0038 00000340 	 .word 1073938432
 184              	 .cfi_endproc
 185              	.LFE69:
 187              	 .section .text.__aeabi_uidiv,"ax",%progbits
 188              	 .align 2
 189              	 .global __aeabi_uidiv
 190              	 .code 16
 191              	 .thumb_func
 193              	__aeabi_uidiv:
 194              	.LFB70:
 157:../Libraries/XMCLib/src/xmc_math.c **** 
 158:../Libraries/XMCLib/src/xmc_math.c **** #ifndef XMC_MATH_DISABLE_DIV_ABI
 159:../Libraries/XMCLib/src/xmc_math.c **** 
 160:../Libraries/XMCLib/src/xmc_math.c **** /* Forward prototypes.  */
 161:../Libraries/XMCLib/src/xmc_math.c **** uint32_t __aeabi_uidiv(uint32_t dividend, uint32_t divisor) __attribute__((externally_visible));
 162:../Libraries/XMCLib/src/xmc_math.c **** int32_t __aeabi_idiv(int32_t dividend, int32_t divisor) __attribute__((externally_visible));
 163:../Libraries/XMCLib/src/xmc_math.c **** uint64_t __aeabi_uidivmod(uint32_t dividend, uint32_t divisor) __attribute__((externally_visible));
 164:../Libraries/XMCLib/src/xmc_math.c **** int64_t __aeabi_idivmod(int32_t dividend, int32_t divisor) __attribute__((externally_visible));
 165:../Libraries/XMCLib/src/xmc_math.c **** 
 166:../Libraries/XMCLib/src/xmc_math.c **** /**************************************************************************************************
 167:../Libraries/XMCLib/src/xmc_math.c ****  * API IMPLEMENTATION - aeabi routines
 168:../Libraries/XMCLib/src/xmc_math.c ****  **************************************************************************************************
 169:../Libraries/XMCLib/src/xmc_math.c **** /* This function performs unsigned integer division */
 170:../Libraries/XMCLib/src/xmc_math.c **** uint32_t __aeabi_uidiv(uint32_t dividend, uint32_t divisor)
 171:../Libraries/XMCLib/src/xmc_math.c **** {
 195              	 .loc 1 171 0
 196              	 .cfi_startproc
 197 0000 80B5     	 push {r7,lr}
 198              	.LCFI9:
 199              	 .cfi_def_cfa_offset 8
 200              	 .cfi_offset 7,-8
 201              	 .cfi_offset 14,-4
 202 0002 82B0     	 sub sp,sp,#8
 203              	.LCFI10:
 204              	 .cfi_def_cfa_offset 16
 205 0004 00AF     	 add r7,sp,#0
 206              	.LCFI11:
 207              	 .cfi_def_cfa_register 7
 208 0006 7860     	 str r0,[r7,#4]
 209 0008 3960     	 str r1,[r7]
 172:../Libraries/XMCLib/src/xmc_math.c ****   MATH->DIVCON  = XMC_MATH_UNSIGNED_DIVISION;
 210              	 .loc 1 172 0
 211 000a 074B     	 ldr r3,.L21
 212 000c 0422     	 mov r2,#4
 213 000e 5A63     	 str r2,[r3,#52]
 173:../Libraries/XMCLib/src/xmc_math.c ****   MATH->DVD     = dividend;
 214              	 .loc 1 173 0
 215 0010 054B     	 ldr r3,.L21
 216 0012 7A68     	 ldr r2,[r7,#4]
 217 0014 1A62     	 str r2,[r3,#32]
 174:../Libraries/XMCLib/src/xmc_math.c ****   MATH->DVS     = divisor;
 218              	 .loc 1 174 0
 219 0016 044B     	 ldr r3,.L21
 220 0018 3A68     	 ldr r2,[r7]
 221 001a 5A62     	 str r2,[r3,#36]
 175:../Libraries/XMCLib/src/xmc_math.c **** 
 176:../Libraries/XMCLib/src/xmc_math.c ****   return ((uint32_t) MATH->QUOT);
 222              	 .loc 1 176 0
 223 001c 024B     	 ldr r3,.L21
 224 001e 9B6A     	 ldr r3,[r3,#40]
 177:../Libraries/XMCLib/src/xmc_math.c **** }
 225              	 .loc 1 177 0
 226 0020 181C     	 mov r0,r3
 227 0022 BD46     	 mov sp,r7
 228 0024 02B0     	 add sp,sp,#8
 229              	 
 230 0026 80BD     	 pop {r7,pc}
 231              	.L22:
 232              	 .align 2
 233              	.L21:
 234 0028 00000340 	 .word 1073938432
 235              	 .cfi_endproc
 236              	.LFE70:
 238              	 .section .text.__aeabi_idiv,"ax",%progbits
 239              	 .align 2
 240              	 .global __aeabi_idiv
 241              	 .code 16
 242              	 .thumb_func
 244              	__aeabi_idiv:
 245              	.LFB71:
 178:../Libraries/XMCLib/src/xmc_math.c **** 
 179:../Libraries/XMCLib/src/xmc_math.c **** /* This function performs signed integer division */
 180:../Libraries/XMCLib/src/xmc_math.c **** int32_t __aeabi_idiv(int32_t dividend, int32_t divisor)
 181:../Libraries/XMCLib/src/xmc_math.c **** {
 246              	 .loc 1 181 0
 247              	 .cfi_startproc
 248 0000 80B5     	 push {r7,lr}
 249              	.LCFI12:
 250              	 .cfi_def_cfa_offset 8
 251              	 .cfi_offset 7,-8
 252              	 .cfi_offset 14,-4
 253 0002 82B0     	 sub sp,sp,#8
 254              	.LCFI13:
 255              	 .cfi_def_cfa_offset 16
 256 0004 00AF     	 add r7,sp,#0
 257              	.LCFI14:
 258              	 .cfi_def_cfa_register 7
 259 0006 7860     	 str r0,[r7,#4]
 260 0008 3960     	 str r1,[r7]
 182:../Libraries/XMCLib/src/xmc_math.c ****   MATH->DIVCON  = XMC_MATH_SIGNED_DIVISION;
 261              	 .loc 1 182 0
 262 000a 074B     	 ldr r3,.L25
 263 000c 0022     	 mov r2,#0
 264 000e 5A63     	 str r2,[r3,#52]
 183:../Libraries/XMCLib/src/xmc_math.c ****   MATH->DVD     = dividend;
 265              	 .loc 1 183 0
 266 0010 054B     	 ldr r3,.L25
 267 0012 7A68     	 ldr r2,[r7,#4]
 268 0014 1A62     	 str r2,[r3,#32]
 184:../Libraries/XMCLib/src/xmc_math.c ****   MATH->DVS     = divisor;
 269              	 .loc 1 184 0
 270 0016 044B     	 ldr r3,.L25
 271 0018 3A68     	 ldr r2,[r7]
 272 001a 5A62     	 str r2,[r3,#36]
 185:../Libraries/XMCLib/src/xmc_math.c **** 
 186:../Libraries/XMCLib/src/xmc_math.c ****   return ((int32_t) MATH->QUOT);
 273              	 .loc 1 186 0
 274 001c 024B     	 ldr r3,.L25
 275 001e 9B6A     	 ldr r3,[r3,#40]
 187:../Libraries/XMCLib/src/xmc_math.c **** }
 276              	 .loc 1 187 0
 277 0020 181C     	 mov r0,r3
 278 0022 BD46     	 mov sp,r7
 279 0024 02B0     	 add sp,sp,#8
 280              	 
 281 0026 80BD     	 pop {r7,pc}
 282              	.L26:
 283              	 .align 2
 284              	.L25:
 285 0028 00000340 	 .word 1073938432
 286              	 .cfi_endproc
 287              	.LFE71:
 289              	 .section .text.__aeabi_uidivmod,"ax",%progbits
 290              	 .align 2
 291              	 .global __aeabi_uidivmod
 292              	 .code 16
 293              	 .thumb_func
 295              	__aeabi_uidivmod:
 296              	.LFB72:
 188:../Libraries/XMCLib/src/xmc_math.c **** 
 189:../Libraries/XMCLib/src/xmc_math.c **** /* This function performs unsigned integer division modulo */
 190:../Libraries/XMCLib/src/xmc_math.c **** uint64_t __aeabi_uidivmod(uint32_t dividend, uint32_t divisor)
 191:../Libraries/XMCLib/src/xmc_math.c **** {
 297              	 .loc 1 191 0
 298              	 .cfi_startproc
 299 0000 F0B5     	 push {r4,r5,r6,r7,lr}
 300              	.LCFI15:
 301              	 .cfi_def_cfa_offset 20
 302              	 .cfi_offset 4,-20
 303              	 .cfi_offset 5,-16
 304              	 .cfi_offset 6,-12
 305              	 .cfi_offset 7,-8
 306              	 .cfi_offset 14,-4
 307 0002 87B0     	 sub sp,sp,#28
 308              	.LCFI16:
 309              	 .cfi_def_cfa_offset 48
 310 0004 00AF     	 add r7,sp,#0
 311              	.LCFI17:
 312              	 .cfi_def_cfa_register 7
 313 0006 F860     	 str r0,[r7,#12]
 314 0008 B960     	 str r1,[r7,#8]
 192:../Libraries/XMCLib/src/xmc_math.c ****   uint64_t remainder;
 193:../Libraries/XMCLib/src/xmc_math.c **** 
 194:../Libraries/XMCLib/src/xmc_math.c ****   MATH->DIVCON  = XMC_MATH_UNSIGNED_DIVISION;
 315              	 .loc 1 194 0
 316 000a 124A     	 ldr r2,.L29
 317 000c 0421     	 mov r1,#4
 318 000e 5163     	 str r1,[r2,#52]
 195:../Libraries/XMCLib/src/xmc_math.c ****   MATH->DVD     = dividend;
 319              	 .loc 1 195 0
 320 0010 104A     	 ldr r2,.L29
 321 0012 F968     	 ldr r1,[r7,#12]
 322 0014 1162     	 str r1,[r2,#32]
 196:../Libraries/XMCLib/src/xmc_math.c ****   MATH->DVS     = divisor;
 323              	 .loc 1 196 0
 324 0016 0F4A     	 ldr r2,.L29
 325 0018 B968     	 ldr r1,[r7,#8]
 326 001a 5162     	 str r1,[r2,#36]
 197:../Libraries/XMCLib/src/xmc_math.c **** 
 198:../Libraries/XMCLib/src/xmc_math.c ****   remainder = ((uint64_t) MATH->RMD) << 32U;
 327              	 .loc 1 198 0
 328 001c 0D4A     	 ldr r2,.L29
 329 001e D26A     	 ldr r2,[r2,#44]
 330 0020 3A60     	 str r2,[r7]
 331 0022 0022     	 mov r2,#0
 332 0024 7A60     	 str r2,[r7,#4]
 333 0026 3A68     	 ldr r2,[r7]
 334 0028 1200     	 lsl r2,r2,#0
 335 002a 7A61     	 str r2,[r7,#20]
 336 002c 0022     	 mov r2,#0
 337 002e 3A61     	 str r2,[r7,#16]
 199:../Libraries/XMCLib/src/xmc_math.c ****   return (remainder | MATH->QUOT);
 338              	 .loc 1 199 0
 339 0030 084A     	 ldr r2,.L29
 340 0032 926A     	 ldr r2,[r2,#40]
 341 0034 131C     	 mov r3,r2
 342 0036 0022     	 mov r2,#0
 343 0038 141C     	 mov r4,r2
 344 003a 3A69     	 ldr r2,[r7,#16]
 345 003c 1A43     	 orr r2,r3
 346 003e 151C     	 mov r5,r2
 347 0040 7A69     	 ldr r2,[r7,#20]
 348 0042 2243     	 orr r2,r4
 349 0044 161C     	 mov r6,r2
 350 0046 2B1C     	 mov r3,r5
 351 0048 341C     	 mov r4,r6
 200:../Libraries/XMCLib/src/xmc_math.c **** }
 352              	 .loc 1 200 0
 353 004a 181C     	 mov r0,r3
 354 004c 211C     	 mov r1,r4
 355 004e BD46     	 mov sp,r7
 356 0050 07B0     	 add sp,sp,#28
 357              	 
 358 0052 F0BD     	 pop {r4,r5,r6,r7,pc}
 359              	.L30:
 360              	 .align 2
 361              	.L29:
 362 0054 00000340 	 .word 1073938432
 363              	 .cfi_endproc
 364              	.LFE72:
 366              	 .section .text.__aeabi_idivmod,"ax",%progbits
 367              	 .align 2
 368              	 .global __aeabi_idivmod
 369              	 .code 16
 370              	 .thumb_func
 372              	__aeabi_idivmod:
 373              	.LFB73:
 201:../Libraries/XMCLib/src/xmc_math.c **** 
 202:../Libraries/XMCLib/src/xmc_math.c **** /* This function performs signed integer division modulo */
 203:../Libraries/XMCLib/src/xmc_math.c **** int64_t __aeabi_idivmod(int32_t dividend, int32_t divisor)
 204:../Libraries/XMCLib/src/xmc_math.c **** {
 374              	 .loc 1 204 0
 375              	 .cfi_startproc
 376 0000 F0B5     	 push {r4,r5,r6,r7,lr}
 377              	.LCFI18:
 378              	 .cfi_def_cfa_offset 20
 379              	 .cfi_offset 4,-20
 380              	 .cfi_offset 5,-16
 381              	 .cfi_offset 6,-12
 382              	 .cfi_offset 7,-8
 383              	 .cfi_offset 14,-4
 384 0002 87B0     	 sub sp,sp,#28
 385              	.LCFI19:
 386              	 .cfi_def_cfa_offset 48
 387 0004 00AF     	 add r7,sp,#0
 388              	.LCFI20:
 389              	 .cfi_def_cfa_register 7
 390 0006 7860     	 str r0,[r7,#4]
 391 0008 3960     	 str r1,[r7]
 205:../Libraries/XMCLib/src/xmc_math.c ****   uint64_t remainder;
 206:../Libraries/XMCLib/src/xmc_math.c ****   uint64_t result;
 207:../Libraries/XMCLib/src/xmc_math.c **** 
 208:../Libraries/XMCLib/src/xmc_math.c ****   MATH->DIVCON  = XMC_MATH_SIGNED_DIVISION;
 392              	 .loc 1 208 0
 393 000a 124A     	 ldr r2,.L33
 394 000c 0021     	 mov r1,#0
 395 000e 5163     	 str r1,[r2,#52]
 209:../Libraries/XMCLib/src/xmc_math.c ****   MATH->DVD     = dividend;
 396              	 .loc 1 209 0
 397 0010 104A     	 ldr r2,.L33
 398 0012 7968     	 ldr r1,[r7,#4]
 399 0014 1162     	 str r1,[r2,#32]
 210:../Libraries/XMCLib/src/xmc_math.c ****   MATH->DVS     = divisor;
 400              	 .loc 1 210 0
 401 0016 0F4A     	 ldr r2,.L33
 402 0018 3968     	 ldr r1,[r7]
 403 001a 5162     	 str r1,[r2,#36]
 211:../Libraries/XMCLib/src/xmc_math.c **** 
 212:../Libraries/XMCLib/src/xmc_math.c ****   remainder = ((uint64_t) MATH->RMD) << 32U;
 404              	 .loc 1 212 0
 405 001c 0D4A     	 ldr r2,.L33
 406 001e D26A     	 ldr r2,[r2,#44]
 407 0020 151C     	 mov r5,r2
 408 0022 0022     	 mov r2,#0
 409 0024 161C     	 mov r6,r2
 410 0026 2A00     	 lsl r2,r5,#0
 411 0028 7A61     	 str r2,[r7,#20]
 412 002a 0022     	 mov r2,#0
 413 002c 3A61     	 str r2,[r7,#16]
 213:../Libraries/XMCLib/src/xmc_math.c ****   result    = (remainder | MATH->QUOT);
 414              	 .loc 1 213 0
 415 002e 094A     	 ldr r2,.L33
 416 0030 926A     	 ldr r2,[r2,#40]
 417 0032 131C     	 mov r3,r2
 418 0034 0022     	 mov r2,#0
 419 0036 141C     	 mov r4,r2
 420 0038 3A69     	 ldr r2,[r7,#16]
 421 003a 1A43     	 orr r2,r3
 422 003c BA60     	 str r2,[r7,#8]
 423 003e 7A69     	 ldr r2,[r7,#20]
 424 0040 2243     	 orr r2,r4
 425 0042 131C     	 mov r3,r2
 426 0044 FB60     	 str r3,[r7,#12]
 214:../Libraries/XMCLib/src/xmc_math.c ****   return ((int64_t) result);
 427              	 .loc 1 214 0
 428 0046 BB68     	 ldr r3,[r7,#8]
 429 0048 FC68     	 ldr r4,[r7,#12]
 215:../Libraries/XMCLib/src/xmc_math.c **** }
 430              	 .loc 1 215 0
 431 004a 181C     	 mov r0,r3
 432 004c 211C     	 mov r1,r4
 433 004e BD46     	 mov sp,r7
 434 0050 07B0     	 add sp,sp,#28
 435              	 
 436 0052 F0BD     	 pop {r4,r5,r6,r7,pc}
 437              	.L34:
 438              	 .align 2
 439              	.L33:
 440 0054 00000340 	 .word 1073938432
 441              	 .cfi_endproc
 442              	.LFE73:
 444              	 .section .text.XMC_MATH_CORDIC_Cos,"ax",%progbits
 445              	 .align 2
 446              	 .global XMC_MATH_CORDIC_Cos
 447              	 .code 16
 448              	 .thumb_func
 450              	XMC_MATH_CORDIC_Cos:
 451              	.LFB74:
 216:../Libraries/XMCLib/src/xmc_math.c **** #endif
 217:../Libraries/XMCLib/src/xmc_math.c **** 
 218:../Libraries/XMCLib/src/xmc_math.c **** /**************************************************************************************************
 219:../Libraries/XMCLib/src/xmc_math.c ****  * API IMPLEMENTATION - Blocking functions
 220:../Libraries/XMCLib/src/xmc_math.c ****  **************************************************************************************************
 221:../Libraries/XMCLib/src/xmc_math.c **** /* This function computes the cosine of a given angle in radians */
 222:../Libraries/XMCLib/src/xmc_math.c **** XMC_MATH_Q0_23_t XMC_MATH_CORDIC_Cos(XMC_MATH_Q0_23_t angle_in_radians)
 223:../Libraries/XMCLib/src/xmc_math.c **** {
 452              	 .loc 1 223 0
 453              	 .cfi_startproc
 454 0000 80B5     	 push {r7,lr}
 455              	.LCFI21:
 456              	 .cfi_def_cfa_offset 8
 457              	 .cfi_offset 7,-8
 458              	 .cfi_offset 14,-4
 459 0002 84B0     	 sub sp,sp,#16
 460              	.LCFI22:
 461              	 .cfi_def_cfa_offset 24
 462 0004 00AF     	 add r7,sp,#0
 463              	.LCFI23:
 464              	 .cfi_def_cfa_register 7
 465 0006 7860     	 str r0,[r7,#4]
 224:../Libraries/XMCLib/src/xmc_math.c ****   int32_t result;
 225:../Libraries/XMCLib/src/xmc_math.c ****   MATH->STATC = 0U; /* Clear register */
 466              	 .loc 1 225 0
 467 0008 0C4B     	 ldr r3,.L37
 468 000a 0022     	 mov r2,#0
 469 000c 1A64     	 str r2,[r3,#64]
 226:../Libraries/XMCLib/src/xmc_math.c ****   MATH->CON   = (uint32_t) XMC_MATH_CORDIC_OPERATING_MODE_CIRCULAR + \
 470              	 .loc 1 226 0
 471 000e 0B4B     	 ldr r3,.L37
 472 0010 0A22     	 mov r2,#10
 473 0012 5A64     	 str r2,[r3,#68]
 227:../Libraries/XMCLib/src/xmc_math.c ****                 (uint32_t) XMC_MATH_CORDIC_ROTVEC_MODE_ROTATION;
 228:../Libraries/XMCLib/src/xmc_math.c ****   MATH->CORDZ = ((uint32_t) angle_in_radians) << MATH_CORDZ_DATA_Pos;
 474              	 .loc 1 228 0
 475 0014 094B     	 ldr r3,.L37
 476 0016 7A68     	 ldr r2,[r7,#4]
 477 0018 1202     	 lsl r2,r2,#8
 478 001a 1A65     	 str r2,[r3,#80]
 229:../Libraries/XMCLib/src/xmc_math.c ****   MATH->CORDY = 0U;  /* Clear register */
 479              	 .loc 1 229 0
 480 001c 074B     	 ldr r3,.L37
 481 001e 0022     	 mov r2,#0
 482 0020 DA64     	 str r2,[r3,#76]
 230:../Libraries/XMCLib/src/xmc_math.c ****   MATH->CORDX = XMC_MATH_RECIPROC_CIRCULAR_GAIN_IN_Q023 << MATH_CORDX_DATA_Pos;
 483              	 .loc 1 230 0
 484 0022 064B     	 ldr r3,.L37
 485 0024 064A     	 ldr r2,.L37+4
 486 0026 9A64     	 str r2,[r3,#72]
 231:../Libraries/XMCLib/src/xmc_math.c ****   result      = ((int32_t)MATH->CORRX) >> MATH_CORRX_RESULT_Pos;
 487              	 .loc 1 231 0
 488 0028 044B     	 ldr r3,.L37
 489 002a 5B6D     	 ldr r3,[r3,#84]
 490 002c 1B12     	 asr r3,r3,#8
 491 002e FB60     	 str r3,[r7,#12]
 232:../Libraries/XMCLib/src/xmc_math.c ****   return ((XMC_MATH_Q0_23_t) result);
 492              	 .loc 1 232 0
 493 0030 FB68     	 ldr r3,[r7,#12]
 233:../Libraries/XMCLib/src/xmc_math.c **** }
 494              	 .loc 1 233 0
 495 0032 181C     	 mov r0,r3
 496 0034 BD46     	 mov sp,r7
 497 0036 04B0     	 add sp,sp,#16
 498              	 
 499 0038 80BD     	 pop {r7,pc}
 500              	.L38:
 501 003a C046     	 .align 2
 502              	.L37:
 503 003c 00000340 	 .word 1073938432
 504 0040 0076BA4D 	 .word 1304065536
 505              	 .cfi_endproc
 506              	.LFE74:
 508              	 .section .text.XMC_MATH_CORDIC_Sin,"ax",%progbits
 509              	 .align 2
 510              	 .global XMC_MATH_CORDIC_Sin
 511              	 .code 16
 512              	 .thumb_func
 514              	XMC_MATH_CORDIC_Sin:
 515              	.LFB75:
 234:../Libraries/XMCLib/src/xmc_math.c **** 
 235:../Libraries/XMCLib/src/xmc_math.c **** /* This function computes the sine of a given angle in radians */
 236:../Libraries/XMCLib/src/xmc_math.c **** XMC_MATH_Q0_23_t XMC_MATH_CORDIC_Sin(XMC_MATH_Q0_23_t angle_in_radians)
 237:../Libraries/XMCLib/src/xmc_math.c **** {
 516              	 .loc 1 237 0
 517              	 .cfi_startproc
 518 0000 80B5     	 push {r7,lr}
 519              	.LCFI24:
 520              	 .cfi_def_cfa_offset 8
 521              	 .cfi_offset 7,-8
 522              	 .cfi_offset 14,-4
 523 0002 84B0     	 sub sp,sp,#16
 524              	.LCFI25:
 525              	 .cfi_def_cfa_offset 24
 526 0004 00AF     	 add r7,sp,#0
 527              	.LCFI26:
 528              	 .cfi_def_cfa_register 7
 529 0006 7860     	 str r0,[r7,#4]
 238:../Libraries/XMCLib/src/xmc_math.c ****   int32_t result;
 239:../Libraries/XMCLib/src/xmc_math.c ****   MATH->STATC = 0U; /* Clear register */
 530              	 .loc 1 239 0
 531 0008 0C4B     	 ldr r3,.L41
 532 000a 0022     	 mov r2,#0
 533 000c 1A64     	 str r2,[r3,#64]
 240:../Libraries/XMCLib/src/xmc_math.c ****   MATH->CON   = (uint32_t) XMC_MATH_CORDIC_OPERATING_MODE_CIRCULAR + \
 534              	 .loc 1 240 0
 535 000e 0B4B     	 ldr r3,.L41
 536 0010 0A22     	 mov r2,#10
 537 0012 5A64     	 str r2,[r3,#68]
 241:../Libraries/XMCLib/src/xmc_math.c ****                 (uint32_t) XMC_MATH_CORDIC_ROTVEC_MODE_ROTATION;
 242:../Libraries/XMCLib/src/xmc_math.c ****   MATH->CORDZ = ((uint32_t)angle_in_radians) << MATH_CORDZ_DATA_Pos;
 538              	 .loc 1 242 0
 539 0014 094B     	 ldr r3,.L41
 540 0016 7A68     	 ldr r2,[r7,#4]
 541 0018 1202     	 lsl r2,r2,#8
 542 001a 1A65     	 str r2,[r3,#80]
 243:../Libraries/XMCLib/src/xmc_math.c ****   MATH->CORDY = 0U; /* Clear register */
 543              	 .loc 1 243 0
 544 001c 074B     	 ldr r3,.L41
 545 001e 0022     	 mov r2,#0
 546 0020 DA64     	 str r2,[r3,#76]
 244:../Libraries/XMCLib/src/xmc_math.c ****   MATH->CORDX = XMC_MATH_RECIPROC_CIRCULAR_GAIN_IN_Q023 << MATH_CORDX_DATA_Pos;
 547              	 .loc 1 244 0
 548 0022 064B     	 ldr r3,.L41
 549 0024 064A     	 ldr r2,.L41+4
 550 0026 9A64     	 str r2,[r3,#72]
 245:../Libraries/XMCLib/src/xmc_math.c ****   result      = ((int32_t)MATH->CORRY) >> MATH_CORRY_RESULT_Pos;
 551              	 .loc 1 245 0
 552 0028 044B     	 ldr r3,.L41
 553 002a 9B6D     	 ldr r3,[r3,#88]
 554 002c 1B12     	 asr r3,r3,#8
 555 002e FB60     	 str r3,[r7,#12]
 246:../Libraries/XMCLib/src/xmc_math.c ****   return ((XMC_MATH_Q0_23_t) result);
 556              	 .loc 1 246 0
 557 0030 FB68     	 ldr r3,[r7,#12]
 247:../Libraries/XMCLib/src/xmc_math.c **** }
 558              	 .loc 1 247 0
 559 0032 181C     	 mov r0,r3
 560 0034 BD46     	 mov sp,r7
 561 0036 04B0     	 add sp,sp,#16
 562              	 
 563 0038 80BD     	 pop {r7,pc}
 564              	.L42:
 565 003a C046     	 .align 2
 566              	.L41:
 567 003c 00000340 	 .word 1073938432
 568 0040 0076BA4D 	 .word 1304065536
 569              	 .cfi_endproc
 570              	.LFE75:
 572              	 .section .text.XMC_MATH_CORDIC_Tan,"ax",%progbits
 573              	 .align 2
 574              	 .global XMC_MATH_CORDIC_Tan
 575              	 .code 16
 576              	 .thumb_func
 578              	XMC_MATH_CORDIC_Tan:
 579              	.LFB76:
 248:../Libraries/XMCLib/src/xmc_math.c **** 
 249:../Libraries/XMCLib/src/xmc_math.c **** /* This function computes the tangent of a given angle in radians */
 250:../Libraries/XMCLib/src/xmc_math.c **** XMC_MATH_Q0_11_t XMC_MATH_CORDIC_Tan(XMC_MATH_Q0_23_t angle_in_radians)
 251:../Libraries/XMCLib/src/xmc_math.c **** {
 580              	 .loc 1 251 0
 581              	 .cfi_startproc
 582 0000 80B5     	 push {r7,lr}
 583              	.LCFI27:
 584              	 .cfi_def_cfa_offset 8
 585              	 .cfi_offset 7,-8
 586              	 .cfi_offset 14,-4
 587 0002 84B0     	 sub sp,sp,#16
 588              	.LCFI28:
 589              	 .cfi_def_cfa_offset 24
 590 0004 00AF     	 add r7,sp,#0
 591              	.LCFI29:
 592              	 .cfi_def_cfa_register 7
 593 0006 7860     	 str r0,[r7,#4]
 252:../Libraries/XMCLib/src/xmc_math.c ****   uint32_t result;
 253:../Libraries/XMCLib/src/xmc_math.c ****   MATH->GLBCON = (uint32_t) XMC_MATH_DIV_DVDRC_CORRY_IS_SOURCE + \
 594              	 .loc 1 253 0
 595 0008 0F4B     	 ldr r3,.L45
 596 000a 1C22     	 mov r2,#28
 597 000c 5A60     	 str r2,[r3,#4]
 254:../Libraries/XMCLib/src/xmc_math.c ****                  (uint32_t) XMC_MATH_DIV_DVSRC_CORRX_IS_SOURCE;      /* Chain the results of CORDIC
 255:../Libraries/XMCLib/src/xmc_math.c ****   MATH->DIVCON = (uint32_t) 11 << MATH_DIVCON_DVSSRC_Pos;            /* Right Shifts Divisor by 11 
 598              	 .loc 1 255 0
 599 000e 0E4B     	 ldr r3,.L45
 600 0010 B022     	 mov r2,#176
 601 0012 1205     	 lsl r2,r2,#20
 602 0014 5A63     	 str r2,[r3,#52]
 256:../Libraries/XMCLib/src/xmc_math.c ****   MATH->STATC  = 0U; /* Clear register */
 603              	 .loc 1 256 0
 604 0016 0C4B     	 ldr r3,.L45
 605 0018 0022     	 mov r2,#0
 606 001a 1A64     	 str r2,[r3,#64]
 257:../Libraries/XMCLib/src/xmc_math.c ****   MATH->CON    = (uint32_t) XMC_MATH_CORDIC_OPERATING_MODE_CIRCULAR + \
 607              	 .loc 1 257 0
 608 001c 0A4B     	 ldr r3,.L45
 609 001e 0A22     	 mov r2,#10
 610 0020 5A64     	 str r2,[r3,#68]
 258:../Libraries/XMCLib/src/xmc_math.c ****                  (uint32_t) XMC_MATH_CORDIC_ROTVEC_MODE_ROTATION;
 259:../Libraries/XMCLib/src/xmc_math.c ****   MATH->CORDZ  = ((uint32_t)angle_in_radians) << MATH_CORDZ_DATA_Pos;
 611              	 .loc 1 259 0
 612 0022 094B     	 ldr r3,.L45
 613 0024 7A68     	 ldr r2,[r7,#4]
 614 0026 1202     	 lsl r2,r2,#8
 615 0028 1A65     	 str r2,[r3,#80]
 260:../Libraries/XMCLib/src/xmc_math.c ****   MATH->CORDY  = 0U; /* Clear register */
 616              	 .loc 1 260 0
 617 002a 074B     	 ldr r3,.L45
 618 002c 0022     	 mov r2,#0
 619 002e DA64     	 str r2,[r3,#76]
 261:../Libraries/XMCLib/src/xmc_math.c ****   MATH->CORDX  = XMC_MATH_RECIPROC_CIRCULAR_GAIN_IN_Q023 << MATH_CORDX_DATA_Pos;
 620              	 .loc 1 261 0
 621 0030 054B     	 ldr r3,.L45
 622 0032 064A     	 ldr r2,.L45+4
 623 0034 9A64     	 str r2,[r3,#72]
 262:../Libraries/XMCLib/src/xmc_math.c ****   result       = MATH->QUOT;
 624              	 .loc 1 262 0
 625 0036 044B     	 ldr r3,.L45
 626 0038 9B6A     	 ldr r3,[r3,#40]
 627 003a FB60     	 str r3,[r7,#12]
 263:../Libraries/XMCLib/src/xmc_math.c ****   return ((XMC_MATH_Q0_11_t) result);
 628              	 .loc 1 263 0
 629 003c FB68     	 ldr r3,[r7,#12]
 264:../Libraries/XMCLib/src/xmc_math.c **** }
 630              	 .loc 1 264 0
 631 003e 181C     	 mov r0,r3
 632 0040 BD46     	 mov sp,r7
 633 0042 04B0     	 add sp,sp,#16
 634              	 
 635 0044 80BD     	 pop {r7,pc}
 636              	.L46:
 637 0046 C046     	 .align 2
 638              	.L45:
 639 0048 00000340 	 .word 1073938432
 640 004c 0076BA4D 	 .word 1304065536
 641              	 .cfi_endproc
 642              	.LFE76:
 644              	 .section .text.XMC_MATH_CORDIC_ArcTan,"ax",%progbits
 645              	 .align 2
 646              	 .global XMC_MATH_CORDIC_ArcTan
 647              	 .code 16
 648              	 .thumb_func
 650              	XMC_MATH_CORDIC_ArcTan:
 651              	.LFB77:
 265:../Libraries/XMCLib/src/xmc_math.c **** 
 266:../Libraries/XMCLib/src/xmc_math.c **** /* This function computes the arc tangent of a given angle in radians */
 267:../Libraries/XMCLib/src/xmc_math.c **** XMC_MATH_Q0_23_t XMC_MATH_CORDIC_ArcTan(XMC_MATH_Q8_15_t x, XMC_MATH_Q8_15_t y)
 268:../Libraries/XMCLib/src/xmc_math.c **** {
 652              	 .loc 1 268 0
 653              	 .cfi_startproc
 654 0000 80B5     	 push {r7,lr}
 655              	.LCFI30:
 656              	 .cfi_def_cfa_offset 8
 657              	 .cfi_offset 7,-8
 658              	 .cfi_offset 14,-4
 659 0002 84B0     	 sub sp,sp,#16
 660              	.LCFI31:
 661              	 .cfi_def_cfa_offset 24
 662 0004 00AF     	 add r7,sp,#0
 663              	.LCFI32:
 664              	 .cfi_def_cfa_register 7
 665 0006 7860     	 str r0,[r7,#4]
 666 0008 3960     	 str r1,[r7]
 269:../Libraries/XMCLib/src/xmc_math.c ****   uint32_t result;
 270:../Libraries/XMCLib/src/xmc_math.c ****   MATH->STATC = 0U; /* Clear register */
 667              	 .loc 1 270 0
 668 000a 0D4B     	 ldr r3,.L49
 669 000c 0022     	 mov r2,#0
 670 000e 1A64     	 str r2,[r3,#64]
 271:../Libraries/XMCLib/src/xmc_math.c ****   MATH->CON   = (uint32_t) XMC_MATH_CORDIC_OPERATING_MODE_CIRCULAR;
 671              	 .loc 1 271 0
 672 0010 0B4B     	 ldr r3,.L49
 673 0012 0222     	 mov r2,#2
 674 0014 5A64     	 str r2,[r3,#68]
 272:../Libraries/XMCLib/src/xmc_math.c ****   MATH->CORDZ = 0U; /* Clear register */
 675              	 .loc 1 272 0
 676 0016 0A4B     	 ldr r3,.L49
 677 0018 0022     	 mov r2,#0
 678 001a 1A65     	 str r2,[r3,#80]
 273:../Libraries/XMCLib/src/xmc_math.c ****   MATH->CORDY = ((uint32_t) y) << MATH_CORDY_DATA_Pos;
 679              	 .loc 1 273 0
 680 001c 084B     	 ldr r3,.L49
 681 001e 3A68     	 ldr r2,[r7]
 682 0020 1202     	 lsl r2,r2,#8
 683 0022 DA64     	 str r2,[r3,#76]
 274:../Libraries/XMCLib/src/xmc_math.c ****   MATH->CORDX = ((uint32_t) x) << MATH_CORDX_DATA_Pos;
 684              	 .loc 1 274 0
 685 0024 064B     	 ldr r3,.L49
 686 0026 7A68     	 ldr r2,[r7,#4]
 687 0028 1202     	 lsl r2,r2,#8
 688 002a 9A64     	 str r2,[r3,#72]
 275:../Libraries/XMCLib/src/xmc_math.c ****   result      = ((int32_t)MATH->CORRZ) >> MATH_CORRZ_RESULT_Pos;
 689              	 .loc 1 275 0
 690 002c 044B     	 ldr r3,.L49
 691 002e DB6D     	 ldr r3,[r3,#92]
 692 0030 1B12     	 asr r3,r3,#8
 693 0032 FB60     	 str r3,[r7,#12]
 276:../Libraries/XMCLib/src/xmc_math.c ****   return ((XMC_MATH_Q0_23_t) result);
 694              	 .loc 1 276 0
 695 0034 FB68     	 ldr r3,[r7,#12]
 277:../Libraries/XMCLib/src/xmc_math.c **** }
 696              	 .loc 1 277 0
 697 0036 181C     	 mov r0,r3
 698 0038 BD46     	 mov sp,r7
 699 003a 04B0     	 add sp,sp,#16
 700              	 
 701 003c 80BD     	 pop {r7,pc}
 702              	.L50:
 703 003e C046     	 .align 2
 704              	.L49:
 705 0040 00000340 	 .word 1073938432
 706              	 .cfi_endproc
 707              	.LFE77:
 709              	 .section .text.XMC_MATH_CORDIC_Cosh,"ax",%progbits
 710              	 .align 2
 711              	 .global XMC_MATH_CORDIC_Cosh
 712              	 .code 16
 713              	 .thumb_func
 715              	XMC_MATH_CORDIC_Cosh:
 716              	.LFB78:
 278:../Libraries/XMCLib/src/xmc_math.c **** 
 279:../Libraries/XMCLib/src/xmc_math.c **** /* This function computes the hyperbolic cosine of a given angle in radians */
 280:../Libraries/XMCLib/src/xmc_math.c **** XMC_MATH_Q1_22_t XMC_MATH_CORDIC_Cosh(XMC_MATH_Q0_23_t angle_in_radians)
 281:../Libraries/XMCLib/src/xmc_math.c **** {
 717              	 .loc 1 281 0
 718              	 .cfi_startproc
 719 0000 80B5     	 push {r7,lr}
 720              	.LCFI33:
 721              	 .cfi_def_cfa_offset 8
 722              	 .cfi_offset 7,-8
 723              	 .cfi_offset 14,-4
 724 0002 84B0     	 sub sp,sp,#16
 725              	.LCFI34:
 726              	 .cfi_def_cfa_offset 24
 727 0004 00AF     	 add r7,sp,#0
 728              	.LCFI35:
 729              	 .cfi_def_cfa_register 7
 730 0006 7860     	 str r0,[r7,#4]
 282:../Libraries/XMCLib/src/xmc_math.c ****   int32_t result;
 283:../Libraries/XMCLib/src/xmc_math.c ****   MATH->STATC = 0U; /* Clear register */
 731              	 .loc 1 283 0
 732 0008 0C4B     	 ldr r3,.L53
 733 000a 0022     	 mov r2,#0
 734 000c 1A64     	 str r2,[r3,#64]
 284:../Libraries/XMCLib/src/xmc_math.c ****   MATH->CON   = (uint32_t) XMC_MATH_CORDIC_OPERATING_MODE_HYPERBOLIC + \
 735              	 .loc 1 284 0
 736 000e 0B4B     	 ldr r3,.L53
 737 0010 0E22     	 mov r2,#14
 738 0012 5A64     	 str r2,[r3,#68]
 285:../Libraries/XMCLib/src/xmc_math.c ****                 (uint32_t) XMC_MATH_CORDIC_ROTVEC_MODE_ROTATION;
 286:../Libraries/XMCLib/src/xmc_math.c ****   MATH->CORDZ = ((uint32_t) angle_in_radians) << MATH_CORDZ_DATA_Pos;
 739              	 .loc 1 286 0
 740 0014 094B     	 ldr r3,.L53
 741 0016 7A68     	 ldr r2,[r7,#4]
 742 0018 1202     	 lsl r2,r2,#8
 743 001a 1A65     	 str r2,[r3,#80]
 287:../Libraries/XMCLib/src/xmc_math.c ****   MATH->CORDY = 0U; /* Clear register */
 744              	 .loc 1 287 0
 745 001c 074B     	 ldr r3,.L53
 746 001e 0022     	 mov r2,#0
 747 0020 DA64     	 str r2,[r3,#76]
 288:../Libraries/XMCLib/src/xmc_math.c ****   MATH->CORDX = XMC_MATH_RECIPROC_HYPERBOLIC_GAIN_IN_Q1_22 << MATH_CORDX_DATA_Pos;
 748              	 .loc 1 288 0
 749 0022 064B     	 ldr r3,.L53
 750 0024 064A     	 ldr r2,.L53+4
 751 0026 9A64     	 str r2,[r3,#72]
 289:../Libraries/XMCLib/src/xmc_math.c ****   result      = ((int32_t)MATH->CORRX) >> MATH_CORRX_RESULT_Pos;
 752              	 .loc 1 289 0
 753 0028 044B     	 ldr r3,.L53
 754 002a 5B6D     	 ldr r3,[r3,#84]
 755 002c 1B12     	 asr r3,r3,#8
 756 002e FB60     	 str r3,[r7,#12]
 290:../Libraries/XMCLib/src/xmc_math.c ****   return ((XMC_MATH_Q1_22_t) result);
 757              	 .loc 1 290 0
 758 0030 FB68     	 ldr r3,[r7,#12]
 291:../Libraries/XMCLib/src/xmc_math.c **** }
 759              	 .loc 1 291 0
 760 0032 181C     	 mov r0,r3
 761 0034 BD46     	 mov sp,r7
 762 0036 04B0     	 add sp,sp,#16
 763              	 
 764 0038 80BD     	 pop {r7,pc}
 765              	.L54:
 766 003a C046     	 .align 2
 767              	.L53:
 768 003c 00000340 	 .word 1073938432
 769 0040 00A1474D 	 .word 1296539904
 770              	 .cfi_endproc
 771              	.LFE78:
 773              	 .section .text.XMC_MATH_CORDIC_Sinh,"ax",%progbits
 774              	 .align 2
 775              	 .global XMC_MATH_CORDIC_Sinh
 776              	 .code 16
 777              	 .thumb_func
 779              	XMC_MATH_CORDIC_Sinh:
 780              	.LFB79:
 292:../Libraries/XMCLib/src/xmc_math.c **** 
 293:../Libraries/XMCLib/src/xmc_math.c **** /* This function computes the hyperbolic sine of a given angle in radians */
 294:../Libraries/XMCLib/src/xmc_math.c **** XMC_MATH_Q1_22_t XMC_MATH_CORDIC_Sinh(XMC_MATH_Q0_23_t angle_in_radians)
 295:../Libraries/XMCLib/src/xmc_math.c **** {
 781              	 .loc 1 295 0
 782              	 .cfi_startproc
 783 0000 80B5     	 push {r7,lr}
 784              	.LCFI36:
 785              	 .cfi_def_cfa_offset 8
 786              	 .cfi_offset 7,-8
 787              	 .cfi_offset 14,-4
 788 0002 84B0     	 sub sp,sp,#16
 789              	.LCFI37:
 790              	 .cfi_def_cfa_offset 24
 791 0004 00AF     	 add r7,sp,#0
 792              	.LCFI38:
 793              	 .cfi_def_cfa_register 7
 794 0006 7860     	 str r0,[r7,#4]
 296:../Libraries/XMCLib/src/xmc_math.c ****   int32_t result;
 297:../Libraries/XMCLib/src/xmc_math.c ****   MATH->STATC = 0U; /* Clear register */
 795              	 .loc 1 297 0
 796 0008 0C4B     	 ldr r3,.L57
 797 000a 0022     	 mov r2,#0
 798 000c 1A64     	 str r2,[r3,#64]
 298:../Libraries/XMCLib/src/xmc_math.c ****   MATH->CON   = (uint32_t) XMC_MATH_CORDIC_OPERATING_MODE_HYPERBOLIC + \
 799              	 .loc 1 298 0
 800 000e 0B4B     	 ldr r3,.L57
 801 0010 0E22     	 mov r2,#14
 802 0012 5A64     	 str r2,[r3,#68]
 299:../Libraries/XMCLib/src/xmc_math.c ****                 (uint32_t) XMC_MATH_CORDIC_ROTVEC_MODE_ROTATION;
 300:../Libraries/XMCLib/src/xmc_math.c ****   MATH->CORDZ = ((uint32_t)angle_in_radians) << MATH_CORDZ_DATA_Pos;
 803              	 .loc 1 300 0
 804 0014 094B     	 ldr r3,.L57
 805 0016 7A68     	 ldr r2,[r7,#4]
 806 0018 1202     	 lsl r2,r2,#8
 807 001a 1A65     	 str r2,[r3,#80]
 301:../Libraries/XMCLib/src/xmc_math.c ****   MATH->CORDY = 0U; /* Clear register */
 808              	 .loc 1 301 0
 809 001c 074B     	 ldr r3,.L57
 810 001e 0022     	 mov r2,#0
 811 0020 DA64     	 str r2,[r3,#76]
 302:../Libraries/XMCLib/src/xmc_math.c ****   MATH->CORDX = XMC_MATH_RECIPROC_HYPERBOLIC_GAIN_IN_Q1_22 << MATH_CORDX_DATA_Pos;
 812              	 .loc 1 302 0
 813 0022 064B     	 ldr r3,.L57
 814 0024 064A     	 ldr r2,.L57+4
 815 0026 9A64     	 str r2,[r3,#72]
 303:../Libraries/XMCLib/src/xmc_math.c ****   result      = ((int32_t)MATH->CORRY) >> MATH_CORRY_RESULT_Pos;
 816              	 .loc 1 303 0
 817 0028 044B     	 ldr r3,.L57
 818 002a 9B6D     	 ldr r3,[r3,#88]
 819 002c 1B12     	 asr r3,r3,#8
 820 002e FB60     	 str r3,[r7,#12]
 304:../Libraries/XMCLib/src/xmc_math.c ****   return ((XMC_MATH_Q1_22_t) result);
 821              	 .loc 1 304 0
 822 0030 FB68     	 ldr r3,[r7,#12]
 305:../Libraries/XMCLib/src/xmc_math.c **** }
 823              	 .loc 1 305 0
 824 0032 181C     	 mov r0,r3
 825 0034 BD46     	 mov sp,r7
 826 0036 04B0     	 add sp,sp,#16
 827              	 
 828 0038 80BD     	 pop {r7,pc}
 829              	.L58:
 830 003a C046     	 .align 2
 831              	.L57:
 832 003c 00000340 	 .word 1073938432
 833 0040 00A1474D 	 .word 1296539904
 834              	 .cfi_endproc
 835              	.LFE79:
 837              	 .section .text.XMC_MATH_CORDIC_Tanh,"ax",%progbits
 838              	 .align 2
 839              	 .global XMC_MATH_CORDIC_Tanh
 840              	 .code 16
 841              	 .thumb_func
 843              	XMC_MATH_CORDIC_Tanh:
 844              	.LFB80:
 306:../Libraries/XMCLib/src/xmc_math.c **** 
 307:../Libraries/XMCLib/src/xmc_math.c **** /* This function computes the hyperbolic tangent of a given angle in radians */
 308:../Libraries/XMCLib/src/xmc_math.c **** XMC_MATH_Q0_11_t XMC_MATH_CORDIC_Tanh(XMC_MATH_Q0_23_t angle_in_radians)
 309:../Libraries/XMCLib/src/xmc_math.c **** {
 845              	 .loc 1 309 0
 846              	 .cfi_startproc
 847 0000 80B5     	 push {r7,lr}
 848              	.LCFI39:
 849              	 .cfi_def_cfa_offset 8
 850              	 .cfi_offset 7,-8
 851              	 .cfi_offset 14,-4
 852 0002 84B0     	 sub sp,sp,#16
 853              	.LCFI40:
 854              	 .cfi_def_cfa_offset 24
 855 0004 00AF     	 add r7,sp,#0
 856              	.LCFI41:
 857              	 .cfi_def_cfa_register 7
 858 0006 7860     	 str r0,[r7,#4]
 310:../Libraries/XMCLib/src/xmc_math.c ****   uint32_t result;
 311:../Libraries/XMCLib/src/xmc_math.c ****   MATH->GLBCON = (uint32_t) XMC_MATH_DIV_DVDRC_CORRY_IS_SOURCE + \
 859              	 .loc 1 311 0
 860 0008 0F4B     	 ldr r3,.L61
 861 000a 1C22     	 mov r2,#28
 862 000c 5A60     	 str r2,[r3,#4]
 312:../Libraries/XMCLib/src/xmc_math.c ****                  (uint32_t) XMC_MATH_DIV_DVSRC_CORRX_IS_SOURCE;      /* Chain the results of CORDIC
 313:../Libraries/XMCLib/src/xmc_math.c ****   MATH->DIVCON = (uint32_t) 11 << MATH_DIVCON_DVSSRC_Pos;            /* Right Shifts Divisor by 11 
 863              	 .loc 1 313 0
 864 000e 0E4B     	 ldr r3,.L61
 865 0010 B022     	 mov r2,#176
 866 0012 1205     	 lsl r2,r2,#20
 867 0014 5A63     	 str r2,[r3,#52]
 314:../Libraries/XMCLib/src/xmc_math.c ****   MATH->STATC  = 0U; /* Clear register */
 868              	 .loc 1 314 0
 869 0016 0C4B     	 ldr r3,.L61
 870 0018 0022     	 mov r2,#0
 871 001a 1A64     	 str r2,[r3,#64]
 315:../Libraries/XMCLib/src/xmc_math.c ****   MATH->CON    = (uint32_t) XMC_MATH_CORDIC_OPERATING_MODE_HYPERBOLIC + \
 872              	 .loc 1 315 0
 873 001c 0A4B     	 ldr r3,.L61
 874 001e 0E22     	 mov r2,#14
 875 0020 5A64     	 str r2,[r3,#68]
 316:../Libraries/XMCLib/src/xmc_math.c ****                  (uint32_t) XMC_MATH_CORDIC_ROTVEC_MODE_ROTATION;
 317:../Libraries/XMCLib/src/xmc_math.c ****   MATH->CORDZ  = ((uint32_t) angle_in_radians) << MATH_CORDZ_DATA_Pos;
 876              	 .loc 1 317 0
 877 0022 094B     	 ldr r3,.L61
 878 0024 7A68     	 ldr r2,[r7,#4]
 879 0026 1202     	 lsl r2,r2,#8
 880 0028 1A65     	 str r2,[r3,#80]
 318:../Libraries/XMCLib/src/xmc_math.c ****   MATH->CORDY  = 0U; /* Clear register */
 881              	 .loc 1 318 0
 882 002a 074B     	 ldr r3,.L61
 883 002c 0022     	 mov r2,#0
 884 002e DA64     	 str r2,[r3,#76]
 319:../Libraries/XMCLib/src/xmc_math.c ****   MATH->CORDX  = XMC_MATH_RECIPROC_HYPERBOLIC_GAIN_IN_Q1_22 << MATH_CORDX_DATA_Pos;
 885              	 .loc 1 319 0
 886 0030 054B     	 ldr r3,.L61
 887 0032 064A     	 ldr r2,.L61+4
 888 0034 9A64     	 str r2,[r3,#72]
 320:../Libraries/XMCLib/src/xmc_math.c ****   result       = MATH->QUOT;
 889              	 .loc 1 320 0
 890 0036 044B     	 ldr r3,.L61
 891 0038 9B6A     	 ldr r3,[r3,#40]
 892 003a FB60     	 str r3,[r7,#12]
 321:../Libraries/XMCLib/src/xmc_math.c ****   return ((XMC_MATH_Q0_11_t) result);
 893              	 .loc 1 321 0
 894 003c FB68     	 ldr r3,[r7,#12]
 322:../Libraries/XMCLib/src/xmc_math.c **** }
 895              	 .loc 1 322 0
 896 003e 181C     	 mov r0,r3
 897 0040 BD46     	 mov sp,r7
 898 0042 04B0     	 add sp,sp,#16
 899              	 
 900 0044 80BD     	 pop {r7,pc}
 901              	.L62:
 902 0046 C046     	 .align 2
 903              	.L61:
 904 0048 00000340 	 .word 1073938432
 905 004c 00A1474D 	 .word 1296539904
 906              	 .cfi_endproc
 907              	.LFE80:
 909              	 .section .text.XMC_MATH_CORDIC_CosNB,"ax",%progbits
 910              	 .align 2
 911              	 .global XMC_MATH_CORDIC_CosNB
 912              	 .code 16
 913              	 .thumb_func
 915              	XMC_MATH_CORDIC_CosNB:
 916              	.LFB81:
 323:../Libraries/XMCLib/src/xmc_math.c **** 
 324:../Libraries/XMCLib/src/xmc_math.c **** /**************************************************************************************************
 325:../Libraries/XMCLib/src/xmc_math.c ****  * API IMPLEMENTATION - Non blocking functions
 326:../Libraries/XMCLib/src/xmc_math.c ****  **************************************************************************************************
 327:../Libraries/XMCLib/src/xmc_math.c **** /* This function computes the cosine of a given angle in radians */
 328:../Libraries/XMCLib/src/xmc_math.c **** void XMC_MATH_CORDIC_CosNB(XMC_MATH_Q0_23_t angle_in_radians)
 329:../Libraries/XMCLib/src/xmc_math.c **** {
 917              	 .loc 1 329 0
 918              	 .cfi_startproc
 919 0000 80B5     	 push {r7,lr}
 920              	.LCFI42:
 921              	 .cfi_def_cfa_offset 8
 922              	 .cfi_offset 7,-8
 923              	 .cfi_offset 14,-4
 924 0002 82B0     	 sub sp,sp,#8
 925              	.LCFI43:
 926              	 .cfi_def_cfa_offset 16
 927 0004 00AF     	 add r7,sp,#0
 928              	.LCFI44:
 929              	 .cfi_def_cfa_register 7
 930 0006 7860     	 str r0,[r7,#4]
 330:../Libraries/XMCLib/src/xmc_math.c ****   MATH->STATC = 0U; /* Clear register */
 931              	 .loc 1 330 0
 932 0008 094B     	 ldr r3,.L64
 933 000a 0022     	 mov r2,#0
 934 000c 1A64     	 str r2,[r3,#64]
 331:../Libraries/XMCLib/src/xmc_math.c ****   MATH->CON   = (uint32_t) XMC_MATH_CORDIC_OPERATING_MODE_CIRCULAR + \
 935              	 .loc 1 331 0
 936 000e 084B     	 ldr r3,.L64
 937 0010 0A22     	 mov r2,#10
 938 0012 5A64     	 str r2,[r3,#68]
 332:../Libraries/XMCLib/src/xmc_math.c ****                 (uint32_t) XMC_MATH_CORDIC_ROTVEC_MODE_ROTATION;
 333:../Libraries/XMCLib/src/xmc_math.c ****   MATH->CORDZ = ((uint32_t) angle_in_radians) << MATH_CORDZ_DATA_Pos;
 939              	 .loc 1 333 0
 940 0014 064B     	 ldr r3,.L64
 941 0016 7A68     	 ldr r2,[r7,#4]
 942 0018 1202     	 lsl r2,r2,#8
 943 001a 1A65     	 str r2,[r3,#80]
 334:../Libraries/XMCLib/src/xmc_math.c ****   MATH->CORDY = 0U;  /* Clear register */
 944              	 .loc 1 334 0
 945 001c 044B     	 ldr r3,.L64
 946 001e 0022     	 mov r2,#0
 947 0020 DA64     	 str r2,[r3,#76]
 335:../Libraries/XMCLib/src/xmc_math.c ****   MATH->CORDX = XMC_MATH_RECIPROC_CIRCULAR_GAIN_IN_Q023 << MATH_CORDX_DATA_Pos;
 948              	 .loc 1 335 0
 949 0022 034B     	 ldr r3,.L64
 950 0024 034A     	 ldr r2,.L64+4
 951 0026 9A64     	 str r2,[r3,#72]
 336:../Libraries/XMCLib/src/xmc_math.c **** }
 952              	 .loc 1 336 0
 953 0028 BD46     	 mov sp,r7
 954 002a 02B0     	 add sp,sp,#8
 955              	 
 956 002c 80BD     	 pop {r7,pc}
 957              	.L65:
 958 002e C046     	 .align 2
 959              	.L64:
 960 0030 00000340 	 .word 1073938432
 961 0034 0076BA4D 	 .word 1304065536
 962              	 .cfi_endproc
 963              	.LFE81:
 965              	 .section .text.XMC_MATH_CORDIC_SinNB,"ax",%progbits
 966              	 .align 2
 967              	 .global XMC_MATH_CORDIC_SinNB
 968              	 .code 16
 969              	 .thumb_func
 971              	XMC_MATH_CORDIC_SinNB:
 972              	.LFB82:
 337:../Libraries/XMCLib/src/xmc_math.c **** 
 338:../Libraries/XMCLib/src/xmc_math.c **** /* This function computes the sine of a given angle in radians */
 339:../Libraries/XMCLib/src/xmc_math.c **** void XMC_MATH_CORDIC_SinNB(XMC_MATH_Q0_23_t angle_in_radians)
 340:../Libraries/XMCLib/src/xmc_math.c **** {
 973              	 .loc 1 340 0
 974              	 .cfi_startproc
 975 0000 80B5     	 push {r7,lr}
 976              	.LCFI45:
 977              	 .cfi_def_cfa_offset 8
 978              	 .cfi_offset 7,-8
 979              	 .cfi_offset 14,-4
 980 0002 82B0     	 sub sp,sp,#8
 981              	.LCFI46:
 982              	 .cfi_def_cfa_offset 16
 983 0004 00AF     	 add r7,sp,#0
 984              	.LCFI47:
 985              	 .cfi_def_cfa_register 7
 986 0006 7860     	 str r0,[r7,#4]
 341:../Libraries/XMCLib/src/xmc_math.c ****   MATH->STATC = 0U; /* Clear register */
 987              	 .loc 1 341 0
 988 0008 094B     	 ldr r3,.L67
 989 000a 0022     	 mov r2,#0
 990 000c 1A64     	 str r2,[r3,#64]
 342:../Libraries/XMCLib/src/xmc_math.c ****   MATH->CON   = (uint32_t) XMC_MATH_CORDIC_OPERATING_MODE_CIRCULAR + \
 991              	 .loc 1 342 0
 992 000e 084B     	 ldr r3,.L67
 993 0010 0A22     	 mov r2,#10
 994 0012 5A64     	 str r2,[r3,#68]
 343:../Libraries/XMCLib/src/xmc_math.c ****                 (uint32_t) XMC_MATH_CORDIC_ROTVEC_MODE_ROTATION;
 344:../Libraries/XMCLib/src/xmc_math.c ****   MATH->CORDZ = ((uint32_t)angle_in_radians) << MATH_CORDZ_DATA_Pos;
 995              	 .loc 1 344 0
 996 0014 064B     	 ldr r3,.L67
 997 0016 7A68     	 ldr r2,[r7,#4]
 998 0018 1202     	 lsl r2,r2,#8
 999 001a 1A65     	 str r2,[r3,#80]
 345:../Libraries/XMCLib/src/xmc_math.c ****   MATH->CORDY = 0U; /* Clear register */
 1000              	 .loc 1 345 0
 1001 001c 044B     	 ldr r3,.L67
 1002 001e 0022     	 mov r2,#0
 1003 0020 DA64     	 str r2,[r3,#76]
 346:../Libraries/XMCLib/src/xmc_math.c ****   MATH->CORDX = XMC_MATH_RECIPROC_CIRCULAR_GAIN_IN_Q023 << MATH_CORDX_DATA_Pos;
 1004              	 .loc 1 346 0
 1005 0022 034B     	 ldr r3,.L67
 1006 0024 034A     	 ldr r2,.L67+4
 1007 0026 9A64     	 str r2,[r3,#72]
 347:../Libraries/XMCLib/src/xmc_math.c **** }
 1008              	 .loc 1 347 0
 1009 0028 BD46     	 mov sp,r7
 1010 002a 02B0     	 add sp,sp,#8
 1011              	 
 1012 002c 80BD     	 pop {r7,pc}
 1013              	.L68:
 1014 002e C046     	 .align 2
 1015              	.L67:
 1016 0030 00000340 	 .word 1073938432
 1017 0034 0076BA4D 	 .word 1304065536
 1018              	 .cfi_endproc
 1019              	.LFE82:
 1021              	 .section .text.XMC_MATH_CORDIC_TanNB,"ax",%progbits
 1022              	 .align 2
 1023              	 .global XMC_MATH_CORDIC_TanNB
 1024              	 .code 16
 1025              	 .thumb_func
 1027              	XMC_MATH_CORDIC_TanNB:
 1028              	.LFB83:
 348:../Libraries/XMCLib/src/xmc_math.c **** 
 349:../Libraries/XMCLib/src/xmc_math.c **** /* This function computes the tangent of a given angle in radians */
 350:../Libraries/XMCLib/src/xmc_math.c **** void XMC_MATH_CORDIC_TanNB(XMC_MATH_Q0_23_t angle_in_radians)
 351:../Libraries/XMCLib/src/xmc_math.c **** {
 1029              	 .loc 1 351 0
 1030              	 .cfi_startproc
 1031 0000 80B5     	 push {r7,lr}
 1032              	.LCFI48:
 1033              	 .cfi_def_cfa_offset 8
 1034              	 .cfi_offset 7,-8
 1035              	 .cfi_offset 14,-4
 1036 0002 82B0     	 sub sp,sp,#8
 1037              	.LCFI49:
 1038              	 .cfi_def_cfa_offset 16
 1039 0004 00AF     	 add r7,sp,#0
 1040              	.LCFI50:
 1041              	 .cfi_def_cfa_register 7
 1042 0006 7860     	 str r0,[r7,#4]
 352:../Libraries/XMCLib/src/xmc_math.c ****   MATH->GLBCON = (uint32_t) XMC_MATH_DIV_DVDRC_CORRY_IS_SOURCE + \
 1043              	 .loc 1 352 0
 1044 0008 0C4B     	 ldr r3,.L70
 1045 000a 1C22     	 mov r2,#28
 1046 000c 5A60     	 str r2,[r3,#4]
 353:../Libraries/XMCLib/src/xmc_math.c ****                  (uint32_t) XMC_MATH_DIV_DVSRC_CORRX_IS_SOURCE;      /* Chain the results of CORDIC
 354:../Libraries/XMCLib/src/xmc_math.c ****   MATH->DIVCON = (uint32_t) 11 << MATH_DIVCON_DVSSRC_Pos;            /* Right Shifts Divisor by 11 
 1047              	 .loc 1 354 0
 1048 000e 0B4B     	 ldr r3,.L70
 1049 0010 B022     	 mov r2,#176
 1050 0012 1205     	 lsl r2,r2,#20
 1051 0014 5A63     	 str r2,[r3,#52]
 355:../Libraries/XMCLib/src/xmc_math.c **** 
 356:../Libraries/XMCLib/src/xmc_math.c ****   MATH->STATC  = 0U; /* Clear register */
 1052              	 .loc 1 356 0
 1053 0016 094B     	 ldr r3,.L70
 1054 0018 0022     	 mov r2,#0
 1055 001a 1A64     	 str r2,[r3,#64]
 357:../Libraries/XMCLib/src/xmc_math.c ****   MATH->CON    = (uint32_t) XMC_MATH_CORDIC_OPERATING_MODE_CIRCULAR + \
 1056              	 .loc 1 357 0
 1057 001c 074B     	 ldr r3,.L70
 1058 001e 0A22     	 mov r2,#10
 1059 0020 5A64     	 str r2,[r3,#68]
 358:../Libraries/XMCLib/src/xmc_math.c ****                  (uint32_t) XMC_MATH_CORDIC_ROTVEC_MODE_ROTATION;
 359:../Libraries/XMCLib/src/xmc_math.c ****   MATH->CORDZ  = ((uint32_t)angle_in_radians) << MATH_CORDZ_DATA_Pos;
 1060              	 .loc 1 359 0
 1061 0022 064B     	 ldr r3,.L70
 1062 0024 7A68     	 ldr r2,[r7,#4]
 1063 0026 1202     	 lsl r2,r2,#8
 1064 0028 1A65     	 str r2,[r3,#80]
 360:../Libraries/XMCLib/src/xmc_math.c ****   MATH->CORDY  = 0U; /* Clear register */
 1065              	 .loc 1 360 0
 1066 002a 044B     	 ldr r3,.L70
 1067 002c 0022     	 mov r2,#0
 1068 002e DA64     	 str r2,[r3,#76]
 361:../Libraries/XMCLib/src/xmc_math.c ****   MATH->CORDX  = XMC_MATH_RECIPROC_CIRCULAR_GAIN_IN_Q023 << MATH_CORDX_DATA_Pos;
 1069              	 .loc 1 361 0
 1070 0030 024B     	 ldr r3,.L70
 1071 0032 034A     	 ldr r2,.L70+4
 1072 0034 9A64     	 str r2,[r3,#72]
 362:../Libraries/XMCLib/src/xmc_math.c **** }
 1073              	 .loc 1 362 0
 1074 0036 BD46     	 mov sp,r7
 1075 0038 02B0     	 add sp,sp,#8
 1076              	 
 1077 003a 80BD     	 pop {r7,pc}
 1078              	.L71:
 1079              	 .align 2
 1080              	.L70:
 1081 003c 00000340 	 .word 1073938432
 1082 0040 0076BA4D 	 .word 1304065536
 1083              	 .cfi_endproc
 1084              	.LFE83:
 1086              	 .section .text.XMC_MATH_CORDIC_ArcTanNB,"ax",%progbits
 1087              	 .align 2
 1088              	 .global XMC_MATH_CORDIC_ArcTanNB
 1089              	 .code 16
 1090              	 .thumb_func
 1092              	XMC_MATH_CORDIC_ArcTanNB:
 1093              	.LFB84:
 363:../Libraries/XMCLib/src/xmc_math.c **** 
 364:../Libraries/XMCLib/src/xmc_math.c **** /* This function computes the arc tangent of a given value */
 365:../Libraries/XMCLib/src/xmc_math.c **** void XMC_MATH_CORDIC_ArcTanNB(XMC_MATH_Q8_15_t x, XMC_MATH_Q8_15_t y)
 366:../Libraries/XMCLib/src/xmc_math.c **** {
 1094              	 .loc 1 366 0
 1095              	 .cfi_startproc
 1096 0000 80B5     	 push {r7,lr}
 1097              	.LCFI51:
 1098              	 .cfi_def_cfa_offset 8
 1099              	 .cfi_offset 7,-8
 1100              	 .cfi_offset 14,-4
 1101 0002 82B0     	 sub sp,sp,#8
 1102              	.LCFI52:
 1103              	 .cfi_def_cfa_offset 16
 1104 0004 00AF     	 add r7,sp,#0
 1105              	.LCFI53:
 1106              	 .cfi_def_cfa_register 7
 1107 0006 7860     	 str r0,[r7,#4]
 1108 0008 3960     	 str r1,[r7]
 367:../Libraries/XMCLib/src/xmc_math.c ****   MATH->STATC = 0U; /* Clear register */
 1109              	 .loc 1 367 0
 1110 000a 0A4B     	 ldr r3,.L73
 1111 000c 0022     	 mov r2,#0
 1112 000e 1A64     	 str r2,[r3,#64]
 368:../Libraries/XMCLib/src/xmc_math.c ****   MATH->CON   = (uint32_t) XMC_MATH_CORDIC_OPERATING_MODE_CIRCULAR;
 1113              	 .loc 1 368 0
 1114 0010 084B     	 ldr r3,.L73
 1115 0012 0222     	 mov r2,#2
 1116 0014 5A64     	 str r2,[r3,#68]
 369:../Libraries/XMCLib/src/xmc_math.c ****   MATH->CORDZ = 0U; /* Clear register */
 1117              	 .loc 1 369 0
 1118 0016 074B     	 ldr r3,.L73
 1119 0018 0022     	 mov r2,#0
 1120 001a 1A65     	 str r2,[r3,#80]
 370:../Libraries/XMCLib/src/xmc_math.c ****   MATH->CORDY = ((uint32_t) y) << MATH_CORDY_DATA_Pos;
 1121              	 .loc 1 370 0
 1122 001c 054B     	 ldr r3,.L73
 1123 001e 3A68     	 ldr r2,[r7]
 1124 0020 1202     	 lsl r2,r2,#8
 1125 0022 DA64     	 str r2,[r3,#76]
 371:../Libraries/XMCLib/src/xmc_math.c ****   MATH->CORDX = ((uint32_t) x) << MATH_CORDX_DATA_Pos;
 1126              	 .loc 1 371 0
 1127 0024 034B     	 ldr r3,.L73
 1128 0026 7A68     	 ldr r2,[r7,#4]
 1129 0028 1202     	 lsl r2,r2,#8
 1130 002a 9A64     	 str r2,[r3,#72]
 372:../Libraries/XMCLib/src/xmc_math.c **** }
 1131              	 .loc 1 372 0
 1132 002c BD46     	 mov sp,r7
 1133 002e 02B0     	 add sp,sp,#8
 1134              	 
 1135 0030 80BD     	 pop {r7,pc}
 1136              	.L74:
 1137 0032 C046     	 .align 2
 1138              	.L73:
 1139 0034 00000340 	 .word 1073938432
 1140              	 .cfi_endproc
 1141              	.LFE84:
 1143              	 .section .text.XMC_MATH_CORDIC_CoshNB,"ax",%progbits
 1144              	 .align 2
 1145              	 .global XMC_MATH_CORDIC_CoshNB
 1146              	 .code 16
 1147              	 .thumb_func
 1149              	XMC_MATH_CORDIC_CoshNB:
 1150              	.LFB85:
 373:../Libraries/XMCLib/src/xmc_math.c **** 
 374:../Libraries/XMCLib/src/xmc_math.c **** /* This function computes the hyperbolic cosine of a given angle in radians */
 375:../Libraries/XMCLib/src/xmc_math.c **** void XMC_MATH_CORDIC_CoshNB(XMC_MATH_Q0_23_t angle_in_radians)
 376:../Libraries/XMCLib/src/xmc_math.c **** {
 1151              	 .loc 1 376 0
 1152              	 .cfi_startproc
 1153 0000 80B5     	 push {r7,lr}
 1154              	.LCFI54:
 1155              	 .cfi_def_cfa_offset 8
 1156              	 .cfi_offset 7,-8
 1157              	 .cfi_offset 14,-4
 1158 0002 82B0     	 sub sp,sp,#8
 1159              	.LCFI55:
 1160              	 .cfi_def_cfa_offset 16
 1161 0004 00AF     	 add r7,sp,#0
 1162              	.LCFI56:
 1163              	 .cfi_def_cfa_register 7
 1164 0006 7860     	 str r0,[r7,#4]
 377:../Libraries/XMCLib/src/xmc_math.c ****   MATH->STATC = 0U; /* Clear register */
 1165              	 .loc 1 377 0
 1166 0008 094B     	 ldr r3,.L76
 1167 000a 0022     	 mov r2,#0
 1168 000c 1A64     	 str r2,[r3,#64]
 378:../Libraries/XMCLib/src/xmc_math.c ****   MATH->CON   = (uint32_t) XMC_MATH_CORDIC_OPERATING_MODE_HYPERBOLIC + \
 1169              	 .loc 1 378 0
 1170 000e 084B     	 ldr r3,.L76
 1171 0010 0E22     	 mov r2,#14
 1172 0012 5A64     	 str r2,[r3,#68]
 379:../Libraries/XMCLib/src/xmc_math.c ****                 (uint32_t) XMC_MATH_CORDIC_ROTVEC_MODE_ROTATION;
 380:../Libraries/XMCLib/src/xmc_math.c ****   MATH->CORDZ = ((uint32_t)angle_in_radians) << MATH_CORDZ_DATA_Pos;
 1173              	 .loc 1 380 0
 1174 0014 064B     	 ldr r3,.L76
 1175 0016 7A68     	 ldr r2,[r7,#4]
 1176 0018 1202     	 lsl r2,r2,#8
 1177 001a 1A65     	 str r2,[r3,#80]
 381:../Libraries/XMCLib/src/xmc_math.c ****   MATH->CORDY = 0U; /* Clear register */
 1178              	 .loc 1 381 0
 1179 001c 044B     	 ldr r3,.L76
 1180 001e 0022     	 mov r2,#0
 1181 0020 DA64     	 str r2,[r3,#76]
 382:../Libraries/XMCLib/src/xmc_math.c ****   MATH->CORDX = XMC_MATH_RECIPROC_HYPERBOLIC_GAIN_IN_Q1_22 << MATH_CORDX_DATA_Pos;
 1182              	 .loc 1 382 0
 1183 0022 034B     	 ldr r3,.L76
 1184 0024 034A     	 ldr r2,.L76+4
 1185 0026 9A64     	 str r2,[r3,#72]
 383:../Libraries/XMCLib/src/xmc_math.c **** }
 1186              	 .loc 1 383 0
 1187 0028 BD46     	 mov sp,r7
 1188 002a 02B0     	 add sp,sp,#8
 1189              	 
 1190 002c 80BD     	 pop {r7,pc}
 1191              	.L77:
 1192 002e C046     	 .align 2
 1193              	.L76:
 1194 0030 00000340 	 .word 1073938432
 1195 0034 00A1474D 	 .word 1296539904
 1196              	 .cfi_endproc
 1197              	.LFE85:
 1199              	 .section .text.XMC_MATH_CORDIC_SinhNB,"ax",%progbits
 1200              	 .align 2
 1201              	 .global XMC_MATH_CORDIC_SinhNB
 1202              	 .code 16
 1203              	 .thumb_func
 1205              	XMC_MATH_CORDIC_SinhNB:
 1206              	.LFB86:
 384:../Libraries/XMCLib/src/xmc_math.c **** 
 385:../Libraries/XMCLib/src/xmc_math.c **** /* This function computes the hyperbolic sine of a given angle in radians */
 386:../Libraries/XMCLib/src/xmc_math.c **** void XMC_MATH_CORDIC_SinhNB(XMC_MATH_Q0_23_t angle_in_radians)
 387:../Libraries/XMCLib/src/xmc_math.c **** {
 1207              	 .loc 1 387 0
 1208              	 .cfi_startproc
 1209 0000 80B5     	 push {r7,lr}
 1210              	.LCFI57:
 1211              	 .cfi_def_cfa_offset 8
 1212              	 .cfi_offset 7,-8
 1213              	 .cfi_offset 14,-4
 1214 0002 82B0     	 sub sp,sp,#8
 1215              	.LCFI58:
 1216              	 .cfi_def_cfa_offset 16
 1217 0004 00AF     	 add r7,sp,#0
 1218              	.LCFI59:
 1219              	 .cfi_def_cfa_register 7
 1220 0006 7860     	 str r0,[r7,#4]
 388:../Libraries/XMCLib/src/xmc_math.c ****   MATH->STATC = 0U; /* Clear register */
 1221              	 .loc 1 388 0
 1222 0008 094B     	 ldr r3,.L79
 1223 000a 0022     	 mov r2,#0
 1224 000c 1A64     	 str r2,[r3,#64]
 389:../Libraries/XMCLib/src/xmc_math.c ****   MATH->CON   = (uint32_t) XMC_MATH_CORDIC_OPERATING_MODE_HYPERBOLIC + \
 1225              	 .loc 1 389 0
 1226 000e 084B     	 ldr r3,.L79
 1227 0010 0E22     	 mov r2,#14
 1228 0012 5A64     	 str r2,[r3,#68]
 390:../Libraries/XMCLib/src/xmc_math.c ****                 (uint32_t) XMC_MATH_CORDIC_ROTVEC_MODE_ROTATION;
 391:../Libraries/XMCLib/src/xmc_math.c ****   MATH->CORDZ = ((uint32_t)angle_in_radians) << MATH_CORDZ_DATA_Pos;
 1229              	 .loc 1 391 0
 1230 0014 064B     	 ldr r3,.L79
 1231 0016 7A68     	 ldr r2,[r7,#4]
 1232 0018 1202     	 lsl r2,r2,#8
 1233 001a 1A65     	 str r2,[r3,#80]
 392:../Libraries/XMCLib/src/xmc_math.c ****   MATH->CORDY = 0U; /* Clear register */
 1234              	 .loc 1 392 0
 1235 001c 044B     	 ldr r3,.L79
 1236 001e 0022     	 mov r2,#0
 1237 0020 DA64     	 str r2,[r3,#76]
 393:../Libraries/XMCLib/src/xmc_math.c ****   MATH->CORDX = XMC_MATH_RECIPROC_HYPERBOLIC_GAIN_IN_Q1_22 << MATH_CORDX_DATA_Pos;
 1238              	 .loc 1 393 0
 1239 0022 034B     	 ldr r3,.L79
 1240 0024 034A     	 ldr r2,.L79+4
 1241 0026 9A64     	 str r2,[r3,#72]
 394:../Libraries/XMCLib/src/xmc_math.c **** }
 1242              	 .loc 1 394 0
 1243 0028 BD46     	 mov sp,r7
 1244 002a 02B0     	 add sp,sp,#8
 1245              	 
 1246 002c 80BD     	 pop {r7,pc}
 1247              	.L80:
 1248 002e C046     	 .align 2
 1249              	.L79:
 1250 0030 00000340 	 .word 1073938432
 1251 0034 00A1474D 	 .word 1296539904
 1252              	 .cfi_endproc
 1253              	.LFE86:
 1255              	 .section .text.XMC_MATH_CORDIC_TanhNB,"ax",%progbits
 1256              	 .align 2
 1257              	 .global XMC_MATH_CORDIC_TanhNB
 1258              	 .code 16
 1259              	 .thumb_func
 1261              	XMC_MATH_CORDIC_TanhNB:
 1262              	.LFB87:
 395:../Libraries/XMCLib/src/xmc_math.c **** 
 396:../Libraries/XMCLib/src/xmc_math.c **** /* This function computes the hyperbolic tangent of a given angle in radians */
 397:../Libraries/XMCLib/src/xmc_math.c **** void XMC_MATH_CORDIC_TanhNB(XMC_MATH_Q0_23_t angle_in_radians)
 398:../Libraries/XMCLib/src/xmc_math.c **** {
 1263              	 .loc 1 398 0
 1264              	 .cfi_startproc
 1265 0000 80B5     	 push {r7,lr}
 1266              	.LCFI60:
 1267              	 .cfi_def_cfa_offset 8
 1268              	 .cfi_offset 7,-8
 1269              	 .cfi_offset 14,-4
 1270 0002 82B0     	 sub sp,sp,#8
 1271              	.LCFI61:
 1272              	 .cfi_def_cfa_offset 16
 1273 0004 00AF     	 add r7,sp,#0
 1274              	.LCFI62:
 1275              	 .cfi_def_cfa_register 7
 1276 0006 7860     	 str r0,[r7,#4]
 399:../Libraries/XMCLib/src/xmc_math.c ****   MATH->GLBCON = (uint32_t) XMC_MATH_DIV_DVDRC_CORRY_IS_SOURCE + \
 1277              	 .loc 1 399 0
 1278 0008 0C4B     	 ldr r3,.L82
 1279 000a 1C22     	 mov r2,#28
 1280 000c 5A60     	 str r2,[r3,#4]
 400:../Libraries/XMCLib/src/xmc_math.c ****                  (uint32_t) XMC_MATH_DIV_DVSRC_CORRX_IS_SOURCE;      /* Chain the results of CORDIC
 401:../Libraries/XMCLib/src/xmc_math.c ****   MATH->DIVCON = (uint32_t) 11 << MATH_DIVCON_DVSSRC_Pos;            /* Right Shifts Divisor by 11 
 1281              	 .loc 1 401 0
 1282 000e 0B4B     	 ldr r3,.L82
 1283 0010 B022     	 mov r2,#176
 1284 0012 1205     	 lsl r2,r2,#20
 1285 0014 5A63     	 str r2,[r3,#52]
 402:../Libraries/XMCLib/src/xmc_math.c ****   MATH->STATC  = 0U; /* Clear register */
 1286              	 .loc 1 402 0
 1287 0016 094B     	 ldr r3,.L82
 1288 0018 0022     	 mov r2,#0
 1289 001a 1A64     	 str r2,[r3,#64]
 403:../Libraries/XMCLib/src/xmc_math.c ****   MATH->CON    = (uint32_t) XMC_MATH_CORDIC_OPERATING_MODE_HYPERBOLIC + \
 1290              	 .loc 1 403 0
 1291 001c 074B     	 ldr r3,.L82
 1292 001e 0E22     	 mov r2,#14
 1293 0020 5A64     	 str r2,[r3,#68]
 404:../Libraries/XMCLib/src/xmc_math.c ****                  (uint32_t) XMC_MATH_CORDIC_ROTVEC_MODE_ROTATION;
 405:../Libraries/XMCLib/src/xmc_math.c ****   MATH->CORDZ  = ((uint32_t) angle_in_radians) << MATH_CORDZ_DATA_Pos;
 1294              	 .loc 1 405 0
 1295 0022 064B     	 ldr r3,.L82
 1296 0024 7A68     	 ldr r2,[r7,#4]
 1297 0026 1202     	 lsl r2,r2,#8
 1298 0028 1A65     	 str r2,[r3,#80]
 406:../Libraries/XMCLib/src/xmc_math.c ****   MATH->CORDY  = 0U; /* Clear register */
 1299              	 .loc 1 406 0
 1300 002a 044B     	 ldr r3,.L82
 1301 002c 0022     	 mov r2,#0
 1302 002e DA64     	 str r2,[r3,#76]
 407:../Libraries/XMCLib/src/xmc_math.c ****   MATH->CORDX  = XMC_MATH_RECIPROC_HYPERBOLIC_GAIN_IN_Q1_22 << MATH_CORDX_DATA_Pos;
 1303              	 .loc 1 407 0
 1304 0030 024B     	 ldr r3,.L82
 1305 0032 034A     	 ldr r2,.L82+4
 1306 0034 9A64     	 str r2,[r3,#72]
 408:../Libraries/XMCLib/src/xmc_math.c **** }
 1307              	 .loc 1 408 0
 1308 0036 BD46     	 mov sp,r7
 1309 0038 02B0     	 add sp,sp,#8
 1310              	 
 1311 003a 80BD     	 pop {r7,pc}
 1312              	.L83:
 1313              	 .align 2
 1314              	.L82:
 1315 003c 00000340 	 .word 1073938432
 1316 0040 00A1474D 	 .word 1296539904
 1317              	 .cfi_endproc
 1318              	.LFE87:
 1320              	 .section .text.XMC_MATH_DIV_UnsignedDivNB,"ax",%progbits
 1321              	 .align 2
 1322              	 .global XMC_MATH_DIV_UnsignedDivNB
 1323              	 .code 16
 1324              	 .thumb_func
 1326              	XMC_MATH_DIV_UnsignedDivNB:
 1327              	.LFB88:
 409:../Libraries/XMCLib/src/xmc_math.c **** 
 410:../Libraries/XMCLib/src/xmc_math.c **** /* This function performs division for given two unsigned arguments */
 411:../Libraries/XMCLib/src/xmc_math.c **** void XMC_MATH_DIV_UnsignedDivNB(uint32_t dividend, uint32_t divisor)
 412:../Libraries/XMCLib/src/xmc_math.c **** {
 1328              	 .loc 1 412 0
 1329              	 .cfi_startproc
 1330 0000 80B5     	 push {r7,lr}
 1331              	.LCFI63:
 1332              	 .cfi_def_cfa_offset 8
 1333              	 .cfi_offset 7,-8
 1334              	 .cfi_offset 14,-4
 1335 0002 82B0     	 sub sp,sp,#8
 1336              	.LCFI64:
 1337              	 .cfi_def_cfa_offset 16
 1338 0004 00AF     	 add r7,sp,#0
 1339              	.LCFI65:
 1340              	 .cfi_def_cfa_register 7
 1341 0006 7860     	 str r0,[r7,#4]
 1342 0008 3960     	 str r1,[r7]
 413:../Libraries/XMCLib/src/xmc_math.c ****   MATH->DIVCON = XMC_MATH_UNSIGNED_DIVISION;
 1343              	 .loc 1 413 0
 1344 000a 064B     	 ldr r3,.L85
 1345 000c 0422     	 mov r2,#4
 1346 000e 5A63     	 str r2,[r3,#52]
 414:../Libraries/XMCLib/src/xmc_math.c ****   MATH->DVD    = dividend;
 1347              	 .loc 1 414 0
 1348 0010 044B     	 ldr r3,.L85
 1349 0012 7A68     	 ldr r2,[r7,#4]
 1350 0014 1A62     	 str r2,[r3,#32]
 415:../Libraries/XMCLib/src/xmc_math.c ****   MATH->DVS    = divisor;
 1351              	 .loc 1 415 0
 1352 0016 034B     	 ldr r3,.L85
 1353 0018 3A68     	 ldr r2,[r7]
 1354 001a 5A62     	 str r2,[r3,#36]
 416:../Libraries/XMCLib/src/xmc_math.c **** }
 1355              	 .loc 1 416 0
 1356 001c BD46     	 mov sp,r7
 1357 001e 02B0     	 add sp,sp,#8
 1358              	 
 1359 0020 80BD     	 pop {r7,pc}
 1360              	.L86:
 1361 0022 C046     	 .align 2
 1362              	.L85:
 1363 0024 00000340 	 .word 1073938432
 1364              	 .cfi_endproc
 1365              	.LFE88:
 1367              	 .section .text.XMC_MATH_DIV_SignedDivNB,"ax",%progbits
 1368              	 .align 2
 1369              	 .global XMC_MATH_DIV_SignedDivNB
 1370              	 .code 16
 1371              	 .thumb_func
 1373              	XMC_MATH_DIV_SignedDivNB:
 1374              	.LFB89:
 417:../Libraries/XMCLib/src/xmc_math.c **** 
 418:../Libraries/XMCLib/src/xmc_math.c **** /* This function performs division for given two signed arguments */
 419:../Libraries/XMCLib/src/xmc_math.c **** void XMC_MATH_DIV_SignedDivNB(int32_t dividend, int32_t divisor)
 420:../Libraries/XMCLib/src/xmc_math.c **** {
 1375              	 .loc 1 420 0
 1376              	 .cfi_startproc
 1377 0000 80B5     	 push {r7,lr}
 1378              	.LCFI66:
 1379              	 .cfi_def_cfa_offset 8
 1380              	 .cfi_offset 7,-8
 1381              	 .cfi_offset 14,-4
 1382 0002 82B0     	 sub sp,sp,#8
 1383              	.LCFI67:
 1384              	 .cfi_def_cfa_offset 16
 1385 0004 00AF     	 add r7,sp,#0
 1386              	.LCFI68:
 1387              	 .cfi_def_cfa_register 7
 1388 0006 7860     	 str r0,[r7,#4]
 1389 0008 3960     	 str r1,[r7]
 421:../Libraries/XMCLib/src/xmc_math.c ****   MATH->DIVCON = XMC_MATH_SIGNED_DIVISION;
 1390              	 .loc 1 421 0
 1391 000a 064B     	 ldr r3,.L88
 1392 000c 0022     	 mov r2,#0
 1393 000e 5A63     	 str r2,[r3,#52]
 422:../Libraries/XMCLib/src/xmc_math.c ****   MATH->DVD    = dividend;
 1394              	 .loc 1 422 0
 1395 0010 044B     	 ldr r3,.L88
 1396 0012 7A68     	 ldr r2,[r7,#4]
 1397 0014 1A62     	 str r2,[r3,#32]
 423:../Libraries/XMCLib/src/xmc_math.c ****   MATH->DVS    = divisor;
 1398              	 .loc 1 423 0
 1399 0016 034B     	 ldr r3,.L88
 1400 0018 3A68     	 ldr r2,[r7]
 1401 001a 5A62     	 str r2,[r3,#36]
 424:../Libraries/XMCLib/src/xmc_math.c **** }
 1402              	 .loc 1 424 0
 1403 001c BD46     	 mov sp,r7
 1404 001e 02B0     	 add sp,sp,#8
 1405              	 
 1406 0020 80BD     	 pop {r7,pc}
 1407              	.L89:
 1408 0022 C046     	 .align 2
 1409              	.L88:
 1410 0024 00000340 	 .word 1073938432
 1411              	 .cfi_endproc
 1412              	.LFE89:
 1414              	 .section .text.XMC_MATH_DIV_UnsignedModNB,"ax",%progbits
 1415              	 .align 2
 1416              	 .global XMC_MATH_DIV_UnsignedModNB
 1417              	 .code 16
 1418              	 .thumb_func
 1420              	XMC_MATH_DIV_UnsignedModNB:
 1421              	.LFB90:
 425:../Libraries/XMCLib/src/xmc_math.c **** 
 426:../Libraries/XMCLib/src/xmc_math.c **** /* This function performs modulo operation for given two unsigned arguments */
 427:../Libraries/XMCLib/src/xmc_math.c **** void XMC_MATH_DIV_UnsignedModNB(uint32_t dividend, uint32_t divisor)
 428:../Libraries/XMCLib/src/xmc_math.c **** {
 1422              	 .loc 1 428 0
 1423              	 .cfi_startproc
 1424 0000 80B5     	 push {r7,lr}
 1425              	.LCFI69:
 1426              	 .cfi_def_cfa_offset 8
 1427              	 .cfi_offset 7,-8
 1428              	 .cfi_offset 14,-4
 1429 0002 82B0     	 sub sp,sp,#8
 1430              	.LCFI70:
 1431              	 .cfi_def_cfa_offset 16
 1432 0004 00AF     	 add r7,sp,#0
 1433              	.LCFI71:
 1434              	 .cfi_def_cfa_register 7
 1435 0006 7860     	 str r0,[r7,#4]
 1436 0008 3960     	 str r1,[r7]
 429:../Libraries/XMCLib/src/xmc_math.c ****   MATH->DIVCON = XMC_MATH_UNSIGNED_DIVISION;
 1437              	 .loc 1 429 0
 1438 000a 064B     	 ldr r3,.L91
 1439 000c 0422     	 mov r2,#4
 1440 000e 5A63     	 str r2,[r3,#52]
 430:../Libraries/XMCLib/src/xmc_math.c ****   MATH->DVD    = dividend;
 1441              	 .loc 1 430 0
 1442 0010 044B     	 ldr r3,.L91
 1443 0012 7A68     	 ldr r2,[r7,#4]
 1444 0014 1A62     	 str r2,[r3,#32]
 431:../Libraries/XMCLib/src/xmc_math.c ****   MATH->DVS    = divisor;
 1445              	 .loc 1 431 0
 1446 0016 034B     	 ldr r3,.L91
 1447 0018 3A68     	 ldr r2,[r7]
 1448 001a 5A62     	 str r2,[r3,#36]
 432:../Libraries/XMCLib/src/xmc_math.c **** }
 1449              	 .loc 1 432 0
 1450 001c BD46     	 mov sp,r7
 1451 001e 02B0     	 add sp,sp,#8
 1452              	 
 1453 0020 80BD     	 pop {r7,pc}
 1454              	.L92:
 1455 0022 C046     	 .align 2
 1456              	.L91:
 1457 0024 00000340 	 .word 1073938432
 1458              	 .cfi_endproc
 1459              	.LFE90:
 1461              	 .section .text.XMC_MATH_DIV_SignedModNB,"ax",%progbits
 1462              	 .align 2
 1463              	 .global XMC_MATH_DIV_SignedModNB
 1464              	 .code 16
 1465              	 .thumb_func
 1467              	XMC_MATH_DIV_SignedModNB:
 1468              	.LFB91:
 433:../Libraries/XMCLib/src/xmc_math.c **** 
 434:../Libraries/XMCLib/src/xmc_math.c **** /* This function performs modulo operation for given two signed arguments */
 435:../Libraries/XMCLib/src/xmc_math.c **** void XMC_MATH_DIV_SignedModNB(int32_t dividend, int32_t divisor)
 436:../Libraries/XMCLib/src/xmc_math.c **** {
 1469              	 .loc 1 436 0
 1470              	 .cfi_startproc
 1471 0000 80B5     	 push {r7,lr}
 1472              	.LCFI72:
 1473              	 .cfi_def_cfa_offset 8
 1474              	 .cfi_offset 7,-8
 1475              	 .cfi_offset 14,-4
 1476 0002 82B0     	 sub sp,sp,#8
 1477              	.LCFI73:
 1478              	 .cfi_def_cfa_offset 16
 1479 0004 00AF     	 add r7,sp,#0
 1480              	.LCFI74:
 1481              	 .cfi_def_cfa_register 7
 1482 0006 7860     	 str r0,[r7,#4]
 1483 0008 3960     	 str r1,[r7]
 437:../Libraries/XMCLib/src/xmc_math.c ****   MATH->DIVCON = XMC_MATH_SIGNED_DIVISION;
 1484              	 .loc 1 437 0
 1485 000a 064B     	 ldr r3,.L94
 1486 000c 0022     	 mov r2,#0
 1487 000e 5A63     	 str r2,[r3,#52]
 438:../Libraries/XMCLib/src/xmc_math.c ****   MATH->DVD    = dividend;
 1488              	 .loc 1 438 0
 1489 0010 044B     	 ldr r3,.L94
 1490 0012 7A68     	 ldr r2,[r7,#4]
 1491 0014 1A62     	 str r2,[r3,#32]
 439:../Libraries/XMCLib/src/xmc_math.c ****   MATH->DVS    = divisor;
 1492              	 .loc 1 439 0
 1493 0016 034B     	 ldr r3,.L94
 1494 0018 3A68     	 ldr r2,[r7]
 1495 001a 5A62     	 str r2,[r3,#36]
 440:../Libraries/XMCLib/src/xmc_math.c **** }
 1496              	 .loc 1 440 0
 1497 001c BD46     	 mov sp,r7
 1498 001e 02B0     	 add sp,sp,#8
 1499              	 
 1500 0020 80BD     	 pop {r7,pc}
 1501              	.L95:
 1502 0022 C046     	 .align 2
 1503              	.L94:
 1504 0024 00000340 	 .word 1073938432
 1505              	 .cfi_endproc
 1506              	.LFE91:
 1508              	 .section .text.XMC_MATH_CORDIC_Q15_Sqrt,"ax",%progbits
 1509              	 .align 2
 1510              	 .global XMC_MATH_CORDIC_Q15_Sqrt
 1511              	 .code 16
 1512              	 .thumb_func
 1514              	XMC_MATH_CORDIC_Q15_Sqrt:
 1515              	.LFB92:
 441:../Libraries/XMCLib/src/xmc_math.c **** 
 442:../Libraries/XMCLib/src/xmc_math.c **** int16_t XMC_MATH_CORDIC_Q15_Sqrt(int16_t x)
 443:../Libraries/XMCLib/src/xmc_math.c **** {
 1516              	 .loc 1 443 0
 1517              	 .cfi_startproc
 1518 0000 80B5     	 push {r7,lr}
 1519              	.LCFI75:
 1520              	 .cfi_def_cfa_offset 8
 1521              	 .cfi_offset 7,-8
 1522              	 .cfi_offset 14,-4
 1523 0002 84B0     	 sub sp,sp,#16
 1524              	.LCFI76:
 1525              	 .cfi_def_cfa_offset 24
 1526 0004 00AF     	 add r7,sp,#0
 1527              	.LCFI77:
 1528              	 .cfi_def_cfa_register 7
 1529 0006 021C     	 mov r2,r0
 1530 0008 BB1D     	 add r3,r7,#6
 1531 000a 1A80     	 strh r2,[r3]
 444:../Libraries/XMCLib/src/xmc_math.c ****   int32_t temp;
 445:../Libraries/XMCLib/src/xmc_math.c ****   MATH->STATC = 0U; /* Clear register */
 1532              	 .loc 1 445 0
 1533 000c 124B     	 ldr r3,.L98
 1534 000e 0022     	 mov r2,#0
 1535 0010 1A64     	 str r2,[r3,#64]
 446:../Libraries/XMCLib/src/xmc_math.c **** 
 447:../Libraries/XMCLib/src/xmc_math.c ****   MATH->CON   = (uint32_t)XMC_MATH_CORDIC_OPERATING_MODE_HYPERBOLIC |
 1536              	 .loc 1 447 0
 1537 0012 114B     	 ldr r3,.L98
 1538 0014 0622     	 mov r2,#6
 1539 0016 5A64     	 str r2,[r3,#68]
 448:../Libraries/XMCLib/src/xmc_math.c ****                 (uint32_t)XMC_MATH_CORDIC_ROTVEC_MODE_VECTORING;
 449:../Libraries/XMCLib/src/xmc_math.c **** 
 450:../Libraries/XMCLib/src/xmc_math.c ****   temp = (int32_t)x << 15; /* Q30 to handle numbers > 1.0 */
 1540              	 .loc 1 450 0
 1541 0018 BB1D     	 add r3,r7,#6
 1542 001a 0022     	 mov r2,#0
 1543 001c 9B5E     	 ldrsh r3,[r3,r2]
 1544 001e DB03     	 lsl r3,r3,#15
 1545 0020 FB60     	 str r3,[r7,#12]
 451:../Libraries/XMCLib/src/xmc_math.c **** 
 452:../Libraries/XMCLib/src/xmc_math.c ****   MATH->CORDY = (temp - 0x10000000U); /* x - 0.25 */
 1546              	 .loc 1 452 0
 1547 0022 0D4B     	 ldr r3,.L98
 1548 0024 FA68     	 ldr r2,[r7,#12]
 1549 0026 F021     	 mov r1,#240
 1550 0028 0906     	 lsl r1,r1,#24
 1551 002a 8C46     	 mov ip,r1
 1552 002c 6244     	 add r2,r2,ip
 1553 002e DA64     	 str r2,[r3,#76]
 453:../Libraries/XMCLib/src/xmc_math.c ****   MATH->CORDX = (temp + 0x10000000U); /* x + 0.25 */
 1554              	 .loc 1 453 0
 1555 0030 094B     	 ldr r3,.L98
 1556 0032 FA68     	 ldr r2,[r7,#12]
 1557 0034 8021     	 mov r1,#128
 1558 0036 4905     	 lsl r1,r1,#21
 1559 0038 8C46     	 mov ip,r1
 1560 003a 6244     	 add r2,r2,ip
 1561 003c 9A64     	 str r2,[r3,#72]
 454:../Libraries/XMCLib/src/xmc_math.c **** 
 455:../Libraries/XMCLib/src/xmc_math.c ****   return (int16_t)(((MATH->CORRX >> 14) * 39568) >> 16); /* Q16 * Q15 */
 1562              	 .loc 1 455 0
 1563 003e 064B     	 ldr r3,.L98
 1564 0040 5B6D     	 ldr r3,[r3,#84]
 1565 0042 9B0B     	 lsr r3,r3,#14
 1566 0044 054A     	 ldr r2,.L98+4
 1567 0046 5343     	 mul r3,r2
 1568 0048 1B0C     	 lsr r3,r3,#16
 1569 004a 9BB2     	 uxth r3,r3
 1570 004c 1BB2     	 sxth r3,r3
 456:../Libraries/XMCLib/src/xmc_math.c **** }
 1571              	 .loc 1 456 0
 1572 004e 181C     	 mov r0,r3
 1573 0050 BD46     	 mov sp,r7
 1574 0052 04B0     	 add sp,sp,#16
 1575              	 
 1576 0054 80BD     	 pop {r7,pc}
 1577              	.L99:
 1578 0056 C046     	 .align 2
 1579              	.L98:
 1580 0058 00000340 	 .word 1073938432
 1581 005c 909A0000 	 .word 39568
 1582              	 .cfi_endproc
 1583              	.LFE92:
 1585              	 .section .text.XMC_MATH_CORDIC_Q31_Sqrt,"ax",%progbits
 1586              	 .align 2
 1587              	 .global XMC_MATH_CORDIC_Q31_Sqrt
 1588              	 .code 16
 1589              	 .thumb_func
 1591              	XMC_MATH_CORDIC_Q31_Sqrt:
 1592              	.LFB93:
 457:../Libraries/XMCLib/src/xmc_math.c **** 
 458:../Libraries/XMCLib/src/xmc_math.c **** int32_t XMC_MATH_CORDIC_Q31_Sqrt(int32_t x)
 459:../Libraries/XMCLib/src/xmc_math.c **** {
 1593              	 .loc 1 459 0
 1594              	 .cfi_startproc
 1595 0000 80B5     	 push {r7,lr}
 1596              	.LCFI78:
 1597              	 .cfi_def_cfa_offset 8
 1598              	 .cfi_offset 7,-8
 1599              	 .cfi_offset 14,-4
 1600 0002 82B0     	 sub sp,sp,#8
 1601              	.LCFI79:
 1602              	 .cfi_def_cfa_offset 16
 1603 0004 00AF     	 add r7,sp,#0
 1604              	.LCFI80:
 1605              	 .cfi_def_cfa_register 7
 1606 0006 7860     	 str r0,[r7,#4]
 460:../Libraries/XMCLib/src/xmc_math.c ****   MATH->STATC = 0U; /* Clear register */
 1607              	 .loc 1 460 0
 1608 0008 0F4B     	 ldr r3,.L102
 1609 000a 0022     	 mov r2,#0
 1610 000c 1A64     	 str r2,[r3,#64]
 461:../Libraries/XMCLib/src/xmc_math.c **** 
 462:../Libraries/XMCLib/src/xmc_math.c ****   MATH->CON   = (uint32_t)XMC_MATH_CORDIC_OPERATING_MODE_HYPERBOLIC |
 1611              	 .loc 1 462 0
 1612 000e 0E4B     	 ldr r3,.L102
 1613 0010 0622     	 mov r2,#6
 1614 0012 5A64     	 str r2,[r3,#68]
 463:../Libraries/XMCLib/src/xmc_math.c ****                 (uint32_t)XMC_MATH_CORDIC_ROTVEC_MODE_VECTORING;
 464:../Libraries/XMCLib/src/xmc_math.c **** 
 465:../Libraries/XMCLib/src/xmc_math.c ****   x >>= 1;  /* Q30 to handle numbers > 1.0 */
 1615              	 .loc 1 465 0
 1616 0014 7B68     	 ldr r3,[r7,#4]
 1617 0016 5B10     	 asr r3,r3,#1
 1618 0018 7B60     	 str r3,[r7,#4]
 466:../Libraries/XMCLib/src/xmc_math.c **** 
 467:../Libraries/XMCLib/src/xmc_math.c ****   MATH->CORDY = (x - 0x10000000U); /* x - 0.25 */
 1619              	 .loc 1 467 0
 1620 001a 0B4B     	 ldr r3,.L102
 1621 001c 7A68     	 ldr r2,[r7,#4]
 1622 001e F021     	 mov r1,#240
 1623 0020 0906     	 lsl r1,r1,#24
 1624 0022 8C46     	 mov ip,r1
 1625 0024 6244     	 add r2,r2,ip
 1626 0026 DA64     	 str r2,[r3,#76]
 468:../Libraries/XMCLib/src/xmc_math.c ****   MATH->CORDX = (x + 0x10000000U); /* x + 0.25 */
 1627              	 .loc 1 468 0
 1628 0028 074B     	 ldr r3,.L102
 1629 002a 7A68     	 ldr r2,[r7,#4]
 1630 002c 8021     	 mov r1,#128
 1631 002e 4905     	 lsl r1,r1,#21
 1632 0030 8C46     	 mov ip,r1
 1633 0032 6244     	 add r2,r2,ip
 1634 0034 9A64     	 str r2,[r3,#72]
 469:../Libraries/XMCLib/src/xmc_math.c **** 
 470:../Libraries/XMCLib/src/xmc_math.c ****   return ((MATH->CORRX >> 14) * 39568); /* Q16 * Q15 */
 1635              	 .loc 1 470 0
 1636 0036 044B     	 ldr r3,.L102
 1637 0038 5B6D     	 ldr r3,[r3,#84]
 1638 003a 9B0B     	 lsr r3,r3,#14
 1639 003c 034A     	 ldr r2,.L102+4
 1640 003e 5343     	 mul r3,r2
 471:../Libraries/XMCLib/src/xmc_math.c **** }
 1641              	 .loc 1 471 0
 1642 0040 181C     	 mov r0,r3
 1643 0042 BD46     	 mov sp,r7
 1644 0044 02B0     	 add sp,sp,#8
 1645              	 
 1646 0046 80BD     	 pop {r7,pc}
 1647              	.L103:
 1648              	 .align 2
 1649              	.L102:
 1650 0048 00000340 	 .word 1073938432
 1651 004c 909A0000 	 .word 39568
 1652              	 .cfi_endproc
 1653              	.LFE93:
 1655              	 .text
 1656              	.Letext0:
 1657              	 .file 2 "c:\\users\\jutta.schuerba\\desktop\\dave-ide-4.4.2-64bit\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\machine\\_default_types.h"
 1658              	 .file 3 "c:\\users\\jutta.schuerba\\desktop\\dave-ide-4.4.2-64bit\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\stdint.h"
 1659              	 .file 4 "C:/Workspaces/DAVE-4.4.2-64Bit/WIRELESS_CHARGER_TRANSMTTER_delivered/Libraries/CMSIS/Infineon/XMC1300_series/Include/XMC1300.h"
 1660              	 .file 5 "C:/Workspaces/DAVE-4.4.2-64Bit/WIRELESS_CHARGER_TRANSMTTER_delivered/Libraries/XMCLib/inc/xmc_math.h"
 1661              	 .file 6 "C:/Workspaces/DAVE-4.4.2-64Bit/WIRELESS_CHARGER_TRANSMTTER_delivered/Libraries/CMSIS/Infineon/XMC1300_series/Include/system_XMC1300.h"
DEFINED SYMBOLS
                            *ABS*:00000000 xmc_math.c
    {standard input}:18     .text.XMC_MATH_DIV_IsBusy:00000000 $t
    {standard input}:23     .text.XMC_MATH_DIV_IsBusy:00000000 XMC_MATH_DIV_IsBusy
    {standard input}:68     .text.XMC_MATH_DIV_IsBusy:0000002c $d
    {standard input}:73     .text.XMC_MATH_CORDIC_IsBusy:00000000 $t
    {standard input}:78     .text.XMC_MATH_CORDIC_IsBusy:00000000 XMC_MATH_CORDIC_IsBusy
    {standard input}:122    .text.XMC_MATH_CORDIC_IsBusy:0000002c $d
    {standard input}:127    .text.XMC_MATH_GetEventStatus:00000000 $t
    {standard input}:132    .text.XMC_MATH_GetEventStatus:00000000 XMC_MATH_GetEventStatus
    {standard input}:183    .text.XMC_MATH_GetEventStatus:00000038 $d
    {standard input}:188    .text.__aeabi_uidiv:00000000 $t
    {standard input}:193    .text.__aeabi_uidiv:00000000 __aeabi_uidiv
    {standard input}:234    .text.__aeabi_uidiv:00000028 $d
    {standard input}:239    .text.__aeabi_idiv:00000000 $t
    {standard input}:244    .text.__aeabi_idiv:00000000 __aeabi_idiv
    {standard input}:285    .text.__aeabi_idiv:00000028 $d
    {standard input}:290    .text.__aeabi_uidivmod:00000000 $t
    {standard input}:295    .text.__aeabi_uidivmod:00000000 __aeabi_uidivmod
    {standard input}:362    .text.__aeabi_uidivmod:00000054 $d
    {standard input}:367    .text.__aeabi_idivmod:00000000 $t
    {standard input}:372    .text.__aeabi_idivmod:00000000 __aeabi_idivmod
    {standard input}:440    .text.__aeabi_idivmod:00000054 $d
    {standard input}:445    .text.XMC_MATH_CORDIC_Cos:00000000 $t
    {standard input}:450    .text.XMC_MATH_CORDIC_Cos:00000000 XMC_MATH_CORDIC_Cos
    {standard input}:503    .text.XMC_MATH_CORDIC_Cos:0000003c $d
    {standard input}:509    .text.XMC_MATH_CORDIC_Sin:00000000 $t
    {standard input}:514    .text.XMC_MATH_CORDIC_Sin:00000000 XMC_MATH_CORDIC_Sin
    {standard input}:567    .text.XMC_MATH_CORDIC_Sin:0000003c $d
    {standard input}:573    .text.XMC_MATH_CORDIC_Tan:00000000 $t
    {standard input}:578    .text.XMC_MATH_CORDIC_Tan:00000000 XMC_MATH_CORDIC_Tan
    {standard input}:639    .text.XMC_MATH_CORDIC_Tan:00000048 $d
    {standard input}:645    .text.XMC_MATH_CORDIC_ArcTan:00000000 $t
    {standard input}:650    .text.XMC_MATH_CORDIC_ArcTan:00000000 XMC_MATH_CORDIC_ArcTan
    {standard input}:705    .text.XMC_MATH_CORDIC_ArcTan:00000040 $d
    {standard input}:710    .text.XMC_MATH_CORDIC_Cosh:00000000 $t
    {standard input}:715    .text.XMC_MATH_CORDIC_Cosh:00000000 XMC_MATH_CORDIC_Cosh
    {standard input}:768    .text.XMC_MATH_CORDIC_Cosh:0000003c $d
    {standard input}:774    .text.XMC_MATH_CORDIC_Sinh:00000000 $t
    {standard input}:779    .text.XMC_MATH_CORDIC_Sinh:00000000 XMC_MATH_CORDIC_Sinh
    {standard input}:832    .text.XMC_MATH_CORDIC_Sinh:0000003c $d
    {standard input}:838    .text.XMC_MATH_CORDIC_Tanh:00000000 $t
    {standard input}:843    .text.XMC_MATH_CORDIC_Tanh:00000000 XMC_MATH_CORDIC_Tanh
    {standard input}:904    .text.XMC_MATH_CORDIC_Tanh:00000048 $d
    {standard input}:910    .text.XMC_MATH_CORDIC_CosNB:00000000 $t
    {standard input}:915    .text.XMC_MATH_CORDIC_CosNB:00000000 XMC_MATH_CORDIC_CosNB
    {standard input}:960    .text.XMC_MATH_CORDIC_CosNB:00000030 $d
    {standard input}:966    .text.XMC_MATH_CORDIC_SinNB:00000000 $t
    {standard input}:971    .text.XMC_MATH_CORDIC_SinNB:00000000 XMC_MATH_CORDIC_SinNB
    {standard input}:1016   .text.XMC_MATH_CORDIC_SinNB:00000030 $d
    {standard input}:1022   .text.XMC_MATH_CORDIC_TanNB:00000000 $t
    {standard input}:1027   .text.XMC_MATH_CORDIC_TanNB:00000000 XMC_MATH_CORDIC_TanNB
    {standard input}:1081   .text.XMC_MATH_CORDIC_TanNB:0000003c $d
    {standard input}:1087   .text.XMC_MATH_CORDIC_ArcTanNB:00000000 $t
    {standard input}:1092   .text.XMC_MATH_CORDIC_ArcTanNB:00000000 XMC_MATH_CORDIC_ArcTanNB
    {standard input}:1139   .text.XMC_MATH_CORDIC_ArcTanNB:00000034 $d
    {standard input}:1144   .text.XMC_MATH_CORDIC_CoshNB:00000000 $t
    {standard input}:1149   .text.XMC_MATH_CORDIC_CoshNB:00000000 XMC_MATH_CORDIC_CoshNB
    {standard input}:1194   .text.XMC_MATH_CORDIC_CoshNB:00000030 $d
    {standard input}:1200   .text.XMC_MATH_CORDIC_SinhNB:00000000 $t
    {standard input}:1205   .text.XMC_MATH_CORDIC_SinhNB:00000000 XMC_MATH_CORDIC_SinhNB
    {standard input}:1250   .text.XMC_MATH_CORDIC_SinhNB:00000030 $d
    {standard input}:1256   .text.XMC_MATH_CORDIC_TanhNB:00000000 $t
    {standard input}:1261   .text.XMC_MATH_CORDIC_TanhNB:00000000 XMC_MATH_CORDIC_TanhNB
    {standard input}:1315   .text.XMC_MATH_CORDIC_TanhNB:0000003c $d
    {standard input}:1321   .text.XMC_MATH_DIV_UnsignedDivNB:00000000 $t
    {standard input}:1326   .text.XMC_MATH_DIV_UnsignedDivNB:00000000 XMC_MATH_DIV_UnsignedDivNB
    {standard input}:1363   .text.XMC_MATH_DIV_UnsignedDivNB:00000024 $d
    {standard input}:1368   .text.XMC_MATH_DIV_SignedDivNB:00000000 $t
    {standard input}:1373   .text.XMC_MATH_DIV_SignedDivNB:00000000 XMC_MATH_DIV_SignedDivNB
    {standard input}:1410   .text.XMC_MATH_DIV_SignedDivNB:00000024 $d
    {standard input}:1415   .text.XMC_MATH_DIV_UnsignedModNB:00000000 $t
    {standard input}:1420   .text.XMC_MATH_DIV_UnsignedModNB:00000000 XMC_MATH_DIV_UnsignedModNB
    {standard input}:1457   .text.XMC_MATH_DIV_UnsignedModNB:00000024 $d
    {standard input}:1462   .text.XMC_MATH_DIV_SignedModNB:00000000 $t
    {standard input}:1467   .text.XMC_MATH_DIV_SignedModNB:00000000 XMC_MATH_DIV_SignedModNB
    {standard input}:1504   .text.XMC_MATH_DIV_SignedModNB:00000024 $d
    {standard input}:1509   .text.XMC_MATH_CORDIC_Q15_Sqrt:00000000 $t
    {standard input}:1514   .text.XMC_MATH_CORDIC_Q15_Sqrt:00000000 XMC_MATH_CORDIC_Q15_Sqrt
    {standard input}:1580   .text.XMC_MATH_CORDIC_Q15_Sqrt:00000058 $d
    {standard input}:1586   .text.XMC_MATH_CORDIC_Q31_Sqrt:00000000 $t
    {standard input}:1591   .text.XMC_MATH_CORDIC_Q31_Sqrt:00000000 XMC_MATH_CORDIC_Q31_Sqrt
    {standard input}:1650   .text.XMC_MATH_CORDIC_Q31_Sqrt:00000048 $d
                     .debug_frame:00000010 $d

NO UNDEFINED SYMBOLS
