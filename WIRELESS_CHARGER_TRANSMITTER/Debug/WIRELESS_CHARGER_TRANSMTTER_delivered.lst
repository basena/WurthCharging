
WIRELESS_CHARGER_TRANSMTTER_delivered.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000a9c0  10001000  10001000  00001000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .eh_frame     00000000  1000b9c0  1000b9c0  0000b9c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .VENEER_Code  00000138  2000000c  1000b9c0  0001000c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 Stack         00001004  20000144  00000000  00000144  2**0
                  ALLOC
  4 .data         000001c4  20001148  1000baf8  00011148  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          000005b4  2000130c  000011c8  0001130c  2**2
                  ALLOC
  6 .no_init      00000004  20003ffc  00003eb8  00000144  2**2
                  ALLOC
  7 .debug_aranges 00001130  00000000  00000000  00011310  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   00020183  00000000  00000000  00012440  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000034e0  00000000  00000000  000325c3  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   00008113  00000000  00000000  00035aa3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  0000456c  00000000  00000000  0003dbb8  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    0000d0e0  00000000  00000000  00042124  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00005fe4  00000000  00000000  0004f204  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000ed0  00000000  00000000  000551e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .build_attributes 00000f4b  00000000  00000000  000560b8  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

10001000 <__Vectors>:
10001000:	48 11 00 20 19 10 00 10 00 00 00 00 99 10 00 10     H.. ............
10001010:	00 04 01 00 00 01 00 00                             ........

10001018 <Reset_Handler>:
    .thumb_func 
    .globl  Reset_Handler
    .type   Reset_Handler, %function
Reset_Handler: 
/* Initialize interrupt veneer */
	ldr	r1, =eROData
10001018:	4911      	ldr	r1, [pc, #68]	; (10001060 <__copy_data+0xe>)
	ldr	r2, =VeneerStart
1000101a:	4a12      	ldr	r2, [pc, #72]	; (10001064 <__copy_data+0x12>)
	ldr	r3, =VeneerEnd
1000101c:	4b12      	ldr	r3, [pc, #72]	; (10001068 <__copy_data+0x16>)
	bl  __copy_data
1000101e:	f000 f818 	bl	10001052 <__copy_data>

    ldr  r0, =SystemInit
10001022:	4812      	ldr	r0, [pc, #72]	; (1000106c <__copy_data+0x1a>)
    blx  r0
10001024:	4780      	blx	r0
	
/* Initialize data */
	ldr	r1, =DataLoadAddr
10001026:	4912      	ldr	r1, [pc, #72]	; (10001070 <__copy_data+0x1e>)
	ldr	r2, =__data_start
10001028:	4a12      	ldr	r2, [pc, #72]	; (10001074 <__copy_data+0x22>)
	ldr	r3, =__data_end
1000102a:	4b13      	ldr	r3, [pc, #76]	; (10001078 <__copy_data+0x26>)
	bl  __copy_data
1000102c:	f000 f811 	bl	10001052 <__copy_data>

/* RAM code */
	ldr	r1, =__ram_code_load
10001030:	4912      	ldr	r1, [pc, #72]	; (1000107c <__copy_data+0x2a>)
	ldr	r2, =__ram_code_start
10001032:	4a13      	ldr	r2, [pc, #76]	; (10001080 <__copy_data+0x2e>)
	ldr	r3, =__ram_code_end
10001034:	4b13      	ldr	r3, [pc, #76]	; (10001084 <__copy_data+0x32>)
	bl  __copy_data
10001036:	f000 f80c 	bl	10001052 <__copy_data>
 *    __bss_end__: end of the BSS section.
 *
 *  Both addresses must be aligned to 4 bytes boundary.
 */
#ifndef __SKIP_BSS_CLEAR
	ldr	r1, =__bss_start
1000103a:	4913      	ldr	r1, [pc, #76]	; (10001088 <__copy_data+0x36>)
	ldr	r2, =__bss_end
1000103c:	4a13      	ldr	r2, [pc, #76]	; (1000108c <__copy_data+0x3a>)

	movs	r0, 0
1000103e:	2000      	movs	r0, #0

	subs	r2, r1
10001040:	1a52      	subs	r2, r2, r1
	ble	.L_loop3_done
10001042:	dd02      	ble.n	1000104a <Reset_Handler+0x32>

.L_loop3:
	subs	r2, #4
10001044:	3a04      	subs	r2, #4
	str	r0, [r1, r2]
10001046:	5088      	str	r0, [r1, r2]
	bgt	.L_loop3
10001048:	dcfc      	bgt.n	10001044 <Reset_Handler+0x2c>
.L_loop3_done:
#endif /* __SKIP_BSS_CLEAR */

#ifndef __SKIP_LIBC_INIT_ARRAY
    ldr  r0, =__libc_init_array
1000104a:	4811      	ldr	r0, [pc, #68]	; (10001090 <__copy_data+0x3e>)
    blx  r0
1000104c:	4780      	blx	r0
#endif

    ldr  r0, =main
1000104e:	4811      	ldr	r0, [pc, #68]	; (10001094 <__copy_data+0x42>)
    blx  r0
10001050:	4780      	blx	r0

10001052 <__copy_data>:
 *    r3: end of the section to copy to
 *
 *  All addresses must be aligned to 4 bytes boundary.
 *  Uses r0
 */
	subs	r3, r2
10001052:	1a9b      	subs	r3, r3, r2
	ble	.L_loop_done
10001054:	dd03      	ble.n	1000105e <__copy_data+0xc>

.L_loop:
	subs	r3, #4
10001056:	3b04      	subs	r3, #4
	ldr	r0, [r1,r3]
10001058:	58c8      	ldr	r0, [r1, r3]
	str	r0, [r2,r3]
1000105a:	50d0      	str	r0, [r2, r3]
	bgt	.L_loop
1000105c:	dcfb      	bgt.n	10001056 <__copy_data+0x4>

.L_loop_done:
	bx  lr
1000105e:	4770      	bx	lr
    .thumb_func 
    .globl  Reset_Handler
    .type   Reset_Handler, %function
Reset_Handler: 
/* Initialize interrupt veneer */
	ldr	r1, =eROData
10001060:	1000b9c0 	.word	0x1000b9c0
	ldr	r2, =VeneerStart
10001064:	2000000c 	.word	0x2000000c
	ldr	r3, =VeneerEnd
10001068:	20000144 	.word	0x20000144
	bl  __copy_data

    ldr  r0, =SystemInit
1000106c:	1000109d 	.word	0x1000109d
    blx  r0
	
/* Initialize data */
	ldr	r1, =DataLoadAddr
10001070:	1000baf8 	.word	0x1000baf8
	ldr	r2, =__data_start
10001074:	20001148 	.word	0x20001148
	ldr	r3, =__data_end
10001078:	2000130c 	.word	0x2000130c
	bl  __copy_data

/* RAM code */
	ldr	r1, =__ram_code_load
1000107c:	1000bcbc 	.word	0x1000bcbc
	ldr	r2, =__ram_code_start
10001080:	2000130c 	.word	0x2000130c
	ldr	r3, =__ram_code_end
10001084:	2000130c 	.word	0x2000130c
 *    __bss_end__: end of the BSS section.
 *
 *  Both addresses must be aligned to 4 bytes boundary.
 */
#ifndef __SKIP_BSS_CLEAR
	ldr	r1, =__bss_start
10001088:	2000130c 	.word	0x2000130c
	ldr	r2, =__bss_end
1000108c:	200018c0 	.word	0x200018c0
	bgt	.L_loop3
.L_loop3_done:
#endif /* __SKIP_BSS_CLEAR */

#ifndef __SKIP_LIBC_INIT_ARRAY
    ldr  r0, =__libc_init_array
10001090:	10007fd1 	.word	0x10007fd1
    blx  r0
#endif

    ldr  r0, =main
10001094:	10005765 	.word	0x10005765

10001098 <BCCU0_0_IRQHandler>:
    
    .thumb_func
    .weak Default_handler
    .type Default_handler, %function
Default_handler:
    b  .
10001098:	e7fe      	b.n	10001098 <BCCU0_0_IRQHandler>
	...

1000109c <SystemInit>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

__WEAK void SystemInit(void)
{    
1000109c:	b580      	push	{r7, lr}
1000109e:	af00      	add	r7, sp, #0
  SystemCoreSetup();
100010a0:	f003 fda2 	bl	10004be8 <SystemCoreSetup>
  SystemCoreClockSetup();
100010a4:	f003 fde6 	bl	10004c74 <SystemCoreClockSetup>
}
100010a8:	46bd      	mov	sp, r7
100010aa:	bd80      	pop	{r7, pc}

100010ac <SystemCoreClockUpdate>:

  SystemCoreClockUpdate();
}

__WEAK void SystemCoreClockUpdate(void)
{
100010ac:	b580      	push	{r7, lr}
100010ae:	af00      	add	r7, sp, #0
  static uint32_t IDIV, FDIV;

  IDIV = ((SCU_CLK->CLKCR) & SCU_CLK_CLKCR_IDIV_Msk) >> SCU_CLK_CLKCR_IDIV_Pos;
100010b0:	4b12      	ldr	r3, [pc, #72]	; (100010fc <SystemCoreClockUpdate+0x50>)
100010b2:	681a      	ldr	r2, [r3, #0]
100010b4:	23ff      	movs	r3, #255	; 0xff
100010b6:	021b      	lsls	r3, r3, #8
100010b8:	4013      	ands	r3, r2
100010ba:	0a1a      	lsrs	r2, r3, #8
100010bc:	4b10      	ldr	r3, [pc, #64]	; (10001100 <SystemCoreClockUpdate+0x54>)
100010be:	601a      	str	r2, [r3, #0]
  FDIV = ((SCU_CLK->CLKCR) & SCU_CLK_CLKCR_FDIV_Msk) >> SCU_CLK_CLKCR_FDIV_Pos;
100010c0:	4b0e      	ldr	r3, [pc, #56]	; (100010fc <SystemCoreClockUpdate+0x50>)
100010c2:	681b      	ldr	r3, [r3, #0]
100010c4:	22ff      	movs	r2, #255	; 0xff
100010c6:	401a      	ands	r2, r3
100010c8:	4b0e      	ldr	r3, [pc, #56]	; (10001104 <SystemCoreClockUpdate+0x58>)
100010ca:	601a      	str	r2, [r3, #0]
  
  if (IDIV != 0)
100010cc:	4b0c      	ldr	r3, [pc, #48]	; (10001100 <SystemCoreClockUpdate+0x54>)
100010ce:	681b      	ldr	r3, [r3, #0]
100010d0:	2b00      	cmp	r3, #0
100010d2:	d00e      	beq.n	100010f2 <SystemCoreClockUpdate+0x46>
  {
    /* Fractional divider is enabled and used */
    SystemCoreClock = ((DCO1_FREQUENCY << 6U) / ((IDIV << 8) + FDIV)) << 1U;
100010d4:	4b0a      	ldr	r3, [pc, #40]	; (10001100 <SystemCoreClockUpdate+0x54>)
100010d6:	681b      	ldr	r3, [r3, #0]
100010d8:	021a      	lsls	r2, r3, #8
100010da:	4b0a      	ldr	r3, [pc, #40]	; (10001104 <SystemCoreClockUpdate+0x58>)
100010dc:	681b      	ldr	r3, [r3, #0]
100010de:	18d3      	adds	r3, r2, r3
100010e0:	4809      	ldr	r0, [pc, #36]	; (10001108 <SystemCoreClockUpdate+0x5c>)
100010e2:	1c19      	adds	r1, r3, #0
100010e4:	f001 f958 	bl	10002398 <__aeabi_uidiv>
100010e8:	1c03      	adds	r3, r0, #0
100010ea:	005a      	lsls	r2, r3, #1
100010ec:	4b07      	ldr	r3, [pc, #28]	; (1000110c <SystemCoreClockUpdate+0x60>)
100010ee:	601a      	str	r2, [r3, #0]
100010f0:	e002      	b.n	100010f8 <SystemCoreClockUpdate+0x4c>
  }
  else
  {
    /* Fractional divider bypassed. Simply divide DCO_DCLK by 2 */
    SystemCoreClock = DCO1_FREQUENCY >> 1U;
100010f2:	4b06      	ldr	r3, [pc, #24]	; (1000110c <SystemCoreClockUpdate+0x60>)
100010f4:	4a06      	ldr	r2, [pc, #24]	; (10001110 <SystemCoreClockUpdate+0x64>)
100010f6:	601a      	str	r2, [r3, #0]
  }
}
100010f8:	46bd      	mov	sp, r7
100010fa:	bd80      	pop	{r7, pc}
100010fc:	40010300 	.word	0x40010300
10001100:	2000130c 	.word	0x2000130c
10001104:	20001310 	.word	0x20001310
10001108:	f4240000 	.word	0xf4240000
1000110c:	20003ffc 	.word	0x20003ffc
10001110:	01e84800 	.word	0x01e84800

10001114 <XMC_GPIO_Init>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

void XMC_GPIO_Init(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_CONFIG_t *const config)
{
10001114:	b590      	push	{r4, r7, lr}
10001116:	b085      	sub	sp, #20
10001118:	af00      	add	r7, sp, #0
1000111a:	60f8      	str	r0, [r7, #12]
1000111c:	607a      	str	r2, [r7, #4]
1000111e:	230b      	movs	r3, #11
10001120:	18fb      	adds	r3, r7, r3
10001122:	1c0a      	adds	r2, r1, #0
10001124:	701a      	strb	r2, [r3, #0]
  XMC_ASSERT("XMC_GPIO_Init: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_Init: Invalid mode", XMC_GPIO_IsModeValid(config->mode));
  XMC_ASSERT("XMC_GPIO_Init: Invalid input hysteresis", XMC_GPIO_CHECK_INPUT_HYSTERESIS(config->input_hysteresis));
  
  /* Switch to input */
  port->IOCR[pin >> 2U] &= ~(uint32_t)((uint32_t)PORT_IOCR_PC_Msk << (PORT_IOCR_PC_Size * (pin & 0x3U)));
10001126:	230b      	movs	r3, #11
10001128:	18fb      	adds	r3, r7, r3
1000112a:	781b      	ldrb	r3, [r3, #0]
1000112c:	089b      	lsrs	r3, r3, #2
1000112e:	b2db      	uxtb	r3, r3
10001130:	1c18      	adds	r0, r3, #0
10001132:	230b      	movs	r3, #11
10001134:	18fb      	adds	r3, r7, r3
10001136:	781b      	ldrb	r3, [r3, #0]
10001138:	089b      	lsrs	r3, r3, #2
1000113a:	b2db      	uxtb	r3, r3
1000113c:	1c1a      	adds	r2, r3, #0
1000113e:	68fb      	ldr	r3, [r7, #12]
10001140:	3204      	adds	r2, #4
10001142:	0092      	lsls	r2, r2, #2
10001144:	58d3      	ldr	r3, [r2, r3]
10001146:	220b      	movs	r2, #11
10001148:	18ba      	adds	r2, r7, r2
1000114a:	7812      	ldrb	r2, [r2, #0]
1000114c:	2103      	movs	r1, #3
1000114e:	400a      	ands	r2, r1
10001150:	00d2      	lsls	r2, r2, #3
10001152:	1c11      	adds	r1, r2, #0
10001154:	22f8      	movs	r2, #248	; 0xf8
10001156:	408a      	lsls	r2, r1
10001158:	43d2      	mvns	r2, r2
1000115a:	401a      	ands	r2, r3
1000115c:	1c11      	adds	r1, r2, #0
1000115e:	68fb      	ldr	r3, [r7, #12]
10001160:	1d02      	adds	r2, r0, #4
10001162:	0092      	lsls	r2, r2, #2
10001164:	50d1      	str	r1, [r2, r3]

  /* HW port control is disabled */
  port->HWSEL &= ~(uint32_t)((uint32_t)PORT_HWSEL_Msk << ((uint32_t)pin << 1U));
10001166:	68fb      	ldr	r3, [r7, #12]
10001168:	6f5b      	ldr	r3, [r3, #116]	; 0x74
1000116a:	220b      	movs	r2, #11
1000116c:	18ba      	adds	r2, r7, r2
1000116e:	7812      	ldrb	r2, [r2, #0]
10001170:	0052      	lsls	r2, r2, #1
10001172:	1c11      	adds	r1, r2, #0
10001174:	2203      	movs	r2, #3
10001176:	408a      	lsls	r2, r1
10001178:	43d2      	mvns	r2, r2
1000117a:	401a      	ands	r2, r3
1000117c:	68fb      	ldr	r3, [r7, #12]
1000117e:	675a      	str	r2, [r3, #116]	; 0x74

  /* Set input hysteresis */
  port->PHCR[(uint32_t)pin >> 3U] &= ~(uint32_t)((uint32_t)PORT_PHCR_Msk << ((uint32_t)PORT_PHCR_Size * ((uint32_t)pin & 0x7U)));
10001180:	230b      	movs	r3, #11
10001182:	18fb      	adds	r3, r7, r3
10001184:	781b      	ldrb	r3, [r3, #0]
10001186:	08db      	lsrs	r3, r3, #3
10001188:	b2db      	uxtb	r3, r3
1000118a:	1c18      	adds	r0, r3, #0
1000118c:	230b      	movs	r3, #11
1000118e:	18fb      	adds	r3, r7, r3
10001190:	781b      	ldrb	r3, [r3, #0]
10001192:	08db      	lsrs	r3, r3, #3
10001194:	b2db      	uxtb	r3, r3
10001196:	1c1a      	adds	r2, r3, #0
10001198:	68fb      	ldr	r3, [r7, #12]
1000119a:	3210      	adds	r2, #16
1000119c:	0092      	lsls	r2, r2, #2
1000119e:	58d3      	ldr	r3, [r2, r3]
100011a0:	220b      	movs	r2, #11
100011a2:	18ba      	adds	r2, r7, r2
100011a4:	7812      	ldrb	r2, [r2, #0]
100011a6:	2107      	movs	r1, #7
100011a8:	400a      	ands	r2, r1
100011aa:	0092      	lsls	r2, r2, #2
100011ac:	1c11      	adds	r1, r2, #0
100011ae:	2204      	movs	r2, #4
100011b0:	408a      	lsls	r2, r1
100011b2:	43d2      	mvns	r2, r2
100011b4:	401a      	ands	r2, r3
100011b6:	1c11      	adds	r1, r2, #0
100011b8:	68fb      	ldr	r3, [r7, #12]
100011ba:	1c02      	adds	r2, r0, #0
100011bc:	3210      	adds	r2, #16
100011be:	0092      	lsls	r2, r2, #2
100011c0:	50d1      	str	r1, [r2, r3]
  port->PHCR[(uint32_t)pin >> 3U] |= (uint32_t)config->input_hysteresis << ((uint32_t)PORT_PHCR_Size * ((uint32_t)pin & 0x7U));
100011c2:	230b      	movs	r3, #11
100011c4:	18fb      	adds	r3, r7, r3
100011c6:	781b      	ldrb	r3, [r3, #0]
100011c8:	08db      	lsrs	r3, r3, #3
100011ca:	b2db      	uxtb	r3, r3
100011cc:	1c18      	adds	r0, r3, #0
100011ce:	230b      	movs	r3, #11
100011d0:	18fb      	adds	r3, r7, r3
100011d2:	781b      	ldrb	r3, [r3, #0]
100011d4:	08db      	lsrs	r3, r3, #3
100011d6:	b2db      	uxtb	r3, r3
100011d8:	1c1a      	adds	r2, r3, #0
100011da:	68fb      	ldr	r3, [r7, #12]
100011dc:	3210      	adds	r2, #16
100011de:	0092      	lsls	r2, r2, #2
100011e0:	58d2      	ldr	r2, [r2, r3]
100011e2:	687b      	ldr	r3, [r7, #4]
100011e4:	785b      	ldrb	r3, [r3, #1]
100011e6:	1c1c      	adds	r4, r3, #0
100011e8:	230b      	movs	r3, #11
100011ea:	18fb      	adds	r3, r7, r3
100011ec:	781b      	ldrb	r3, [r3, #0]
100011ee:	2107      	movs	r1, #7
100011f0:	400b      	ands	r3, r1
100011f2:	009b      	lsls	r3, r3, #2
100011f4:	409c      	lsls	r4, r3
100011f6:	1c23      	adds	r3, r4, #0
100011f8:	431a      	orrs	r2, r3
100011fa:	1c11      	adds	r1, r2, #0
100011fc:	68fb      	ldr	r3, [r7, #12]
100011fe:	1c02      	adds	r2, r0, #0
10001200:	3210      	adds	r2, #16
10001202:	0092      	lsls	r2, r2, #2
10001204:	50d1      	str	r1, [r2, r3]
    
  /* Enable digital input */
  if (XMC_GPIO_CHECK_ANALOG_PORT(port))
10001206:	68fb      	ldr	r3, [r7, #12]
10001208:	4a1d      	ldr	r2, [pc, #116]	; (10001280 <XMC_GPIO_Init+0x16c>)
1000120a:	4293      	cmp	r3, r2
1000120c:	d10b      	bne.n	10001226 <XMC_GPIO_Init+0x112>
  {    
    port->PDISC &= ~(uint32_t)((uint32_t)0x1U << pin);
1000120e:	68fb      	ldr	r3, [r7, #12]
10001210:	6e1b      	ldr	r3, [r3, #96]	; 0x60
10001212:	220b      	movs	r2, #11
10001214:	18ba      	adds	r2, r7, r2
10001216:	7812      	ldrb	r2, [r2, #0]
10001218:	2101      	movs	r1, #1
1000121a:	4091      	lsls	r1, r2
1000121c:	1c0a      	adds	r2, r1, #0
1000121e:	43d2      	mvns	r2, r2
10001220:	401a      	ands	r2, r3
10001222:	68fb      	ldr	r3, [r7, #12]
10001224:	661a      	str	r2, [r3, #96]	; 0x60
  }
  /* Set output level */
  port->OMR = (uint32_t)config->output_level << pin;
10001226:	687b      	ldr	r3, [r7, #4]
10001228:	685a      	ldr	r2, [r3, #4]
1000122a:	230b      	movs	r3, #11
1000122c:	18fb      	adds	r3, r7, r3
1000122e:	781b      	ldrb	r3, [r3, #0]
10001230:	409a      	lsls	r2, r3
10001232:	68fb      	ldr	r3, [r7, #12]
10001234:	605a      	str	r2, [r3, #4]
  
  /* Set mode */
  port->IOCR[pin >> 2U] |= (uint32_t)config->mode << (PORT_IOCR_PC_Size * (pin & 0x3U));
10001236:	230b      	movs	r3, #11
10001238:	18fb      	adds	r3, r7, r3
1000123a:	781b      	ldrb	r3, [r3, #0]
1000123c:	089b      	lsrs	r3, r3, #2
1000123e:	b2db      	uxtb	r3, r3
10001240:	1c18      	adds	r0, r3, #0
10001242:	230b      	movs	r3, #11
10001244:	18fb      	adds	r3, r7, r3
10001246:	781b      	ldrb	r3, [r3, #0]
10001248:	089b      	lsrs	r3, r3, #2
1000124a:	b2db      	uxtb	r3, r3
1000124c:	1c1a      	adds	r2, r3, #0
1000124e:	68fb      	ldr	r3, [r7, #12]
10001250:	3204      	adds	r2, #4
10001252:	0092      	lsls	r2, r2, #2
10001254:	58d2      	ldr	r2, [r2, r3]
10001256:	687b      	ldr	r3, [r7, #4]
10001258:	781b      	ldrb	r3, [r3, #0]
1000125a:	1c1c      	adds	r4, r3, #0
1000125c:	230b      	movs	r3, #11
1000125e:	18fb      	adds	r3, r7, r3
10001260:	781b      	ldrb	r3, [r3, #0]
10001262:	2103      	movs	r1, #3
10001264:	400b      	ands	r3, r1
10001266:	00db      	lsls	r3, r3, #3
10001268:	409c      	lsls	r4, r3
1000126a:	1c23      	adds	r3, r4, #0
1000126c:	431a      	orrs	r2, r3
1000126e:	1c11      	adds	r1, r2, #0
10001270:	68fb      	ldr	r3, [r7, #12]
10001272:	1d02      	adds	r2, r0, #4
10001274:	0092      	lsls	r2, r2, #2
10001276:	50d1      	str	r1, [r2, r3]
}
10001278:	46bd      	mov	sp, r7
1000127a:	b005      	add	sp, #20
1000127c:	bd90      	pop	{r4, r7, pc}
1000127e:	46c0      	nop			; (mov r8, r8)
10001280:	40040200 	.word	0x40040200

10001284 <XMC_SCU_LockProtectedBits>:
#endif
}

/* API to lock protected bitfields from being modified */
void XMC_SCU_LockProtectedBits(void)
{
10001284:	b580      	push	{r7, lr}
10001286:	af00      	add	r7, sp, #0
  SCU_GENERAL->PASSWD = SCU_GCU_PASSWD_PROT_ENABLE;
10001288:	4b02      	ldr	r3, [pc, #8]	; (10001294 <XMC_SCU_LockProtectedBits+0x10>)
1000128a:	22c3      	movs	r2, #195	; 0xc3
1000128c:	625a      	str	r2, [r3, #36]	; 0x24
}
1000128e:	46bd      	mov	sp, r7
10001290:	bd80      	pop	{r7, pc}
10001292:	46c0      	nop			; (mov r8, r8)
10001294:	40010000 	.word	0x40010000

10001298 <XMC_SCU_UnlockProtectedBits>:

/* API to make protected bitfields available for modification */
void XMC_SCU_UnlockProtectedBits(void)
{
10001298:	b580      	push	{r7, lr}
1000129a:	af00      	add	r7, sp, #0
  SCU_GENERAL->PASSWD = SCU_GCU_PASSWD_PROT_DISABLE;
1000129c:	4b05      	ldr	r3, [pc, #20]	; (100012b4 <XMC_SCU_UnlockProtectedBits+0x1c>)
1000129e:	22c0      	movs	r2, #192	; 0xc0
100012a0:	625a      	str	r2, [r3, #36]	; 0x24

  while(((SCU_GENERAL->PASSWD) & SCU_GENERAL_PASSWD_PROTS_Msk))
100012a2:	46c0      	nop			; (mov r8, r8)
100012a4:	4b03      	ldr	r3, [pc, #12]	; (100012b4 <XMC_SCU_UnlockProtectedBits+0x1c>)
100012a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100012a8:	2204      	movs	r2, #4
100012aa:	4013      	ands	r3, r2
100012ac:	d1fa      	bne.n	100012a4 <XMC_SCU_UnlockProtectedBits+0xc>
  {
    /* Loop until the lock is removed */
  }
}
100012ae:	46bd      	mov	sp, r7
100012b0:	bd80      	pop	{r7, pc}
100012b2:	46c0      	nop			; (mov r8, r8)
100012b4:	40010000 	.word	0x40010000

100012b8 <XMC_SCU_CLOCK_Init>:
}


/* API which initializes the clock tree ofthe device */
void XMC_SCU_CLOCK_Init(const XMC_SCU_CLOCK_CONFIG_t *const config)
{
100012b8:	b580      	push	{r7, lr}
100012ba:	b082      	sub	sp, #8
100012bc:	af00      	add	r7, sp, #0
100012be:	6078      	str	r0, [r7, #4]
  /* Remove protection */
  XMC_SCU_UnlockProtectedBits();
100012c0:	f7ff ffea 	bl	10001298 <XMC_SCU_UnlockProtectedBits>
  SCU_CLK->CLKCR1 = (SCU_CLK->CLKCR1 & ~SCU_CLK_CLKCR1_DCLKSEL_Msk) |
                    config->dclk_src;

#endif
  /* Update PCLK selection mux. */
  SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_PCLKSEL_Msk | SCU_CLK_CLKCR_RTCCLKSEL_Msk)) |
100012c4:	4a0c      	ldr	r2, [pc, #48]	; (100012f8 <XMC_SCU_CLOCK_Init+0x40>)
100012c6:	4b0c      	ldr	r3, [pc, #48]	; (100012f8 <XMC_SCU_CLOCK_Init+0x40>)
100012c8:	681b      	ldr	r3, [r3, #0]
100012ca:	490c      	ldr	r1, [pc, #48]	; (100012fc <XMC_SCU_CLOCK_Init+0x44>)
100012cc:	4019      	ands	r1, r3
                   config->rtc_src |
100012ce:	687b      	ldr	r3, [r7, #4]
100012d0:	689b      	ldr	r3, [r3, #8]
  SCU_CLK->CLKCR1 = (SCU_CLK->CLKCR1 & ~SCU_CLK_CLKCR1_DCLKSEL_Msk) |
                    config->dclk_src;

#endif
  /* Update PCLK selection mux. */
  SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_PCLKSEL_Msk | SCU_CLK_CLKCR_RTCCLKSEL_Msk)) |
100012d2:	4319      	orrs	r1, r3
                   config->rtc_src |
                   config->pclk_src;
100012d4:	687b      	ldr	r3, [r7, #4]
100012d6:	685b      	ldr	r3, [r3, #4]
                    config->dclk_src;

#endif
  /* Update PCLK selection mux. */
  SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_PCLKSEL_Msk | SCU_CLK_CLKCR_RTCCLKSEL_Msk)) |
                   config->rtc_src |
100012d8:	430b      	orrs	r3, r1
  SCU_CLK->CLKCR1 = (SCU_CLK->CLKCR1 & ~SCU_CLK_CLKCR1_DCLKSEL_Msk) |
                    config->dclk_src;

#endif
  /* Update PCLK selection mux. */
  SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_PCLKSEL_Msk | SCU_CLK_CLKCR_RTCCLKSEL_Msk)) |
100012da:	6013      	str	r3, [r2, #0]
                   config->rtc_src |
                   config->pclk_src;

  /* Close the lock opened above. */
  XMC_SCU_LockProtectedBits();
100012dc:	f7ff ffd2 	bl	10001284 <XMC_SCU_LockProtectedBits>

  /* Update the dividers now */
  XMC_SCU_CLOCK_ScaleMCLKFrequency(config->idiv, config->fdiv);
100012e0:	687b      	ldr	r3, [r7, #4]
100012e2:	785b      	ldrb	r3, [r3, #1]
100012e4:	1c1a      	adds	r2, r3, #0
100012e6:	687b      	ldr	r3, [r7, #4]
100012e8:	781b      	ldrb	r3, [r3, #0]
100012ea:	1c10      	adds	r0, r2, #0
100012ec:	1c19      	adds	r1, r3, #0
100012ee:	f000 f839 	bl	10001364 <XMC_SCU_CLOCK_ScaleMCLKFrequency>

}
100012f2:	46bd      	mov	sp, r7
100012f4:	b002      	add	sp, #8
100012f6:	bd80      	pop	{r7, pc}
100012f8:	40010300 	.word	0x40010300
100012fc:	fff0ffff 	.word	0xfff0ffff

10001300 <XMC_SCU_CLOCK_UngatePeripheralClock>:
  XMC_SCU_LockProtectedBits();
}

/* API which ungates a clock note at its source */
void XMC_SCU_CLOCK_UngatePeripheralClock(const XMC_SCU_PERIPHERAL_CLOCK_t peripheral)
{
10001300:	b580      	push	{r7, lr}
10001302:	b082      	sub	sp, #8
10001304:	af00      	add	r7, sp, #0
10001306:	1c02      	adds	r2, r0, #0
10001308:	1dbb      	adds	r3, r7, #6
1000130a:	801a      	strh	r2, [r3, #0]
  XMC_SCU_UnlockProtectedBits();
1000130c:	f7ff ffc4 	bl	10001298 <XMC_SCU_UnlockProtectedBits>
  SCU_CLK->CGATCLR0 |= (uint32_t)peripheral;
10001310:	4b09      	ldr	r3, [pc, #36]	; (10001338 <XMC_SCU_CLOCK_UngatePeripheralClock+0x38>)
10001312:	4a09      	ldr	r2, [pc, #36]	; (10001338 <XMC_SCU_CLOCK_UngatePeripheralClock+0x38>)
10001314:	6911      	ldr	r1, [r2, #16]
10001316:	1dba      	adds	r2, r7, #6
10001318:	8812      	ldrh	r2, [r2, #0]
1000131a:	430a      	orrs	r2, r1
1000131c:	611a      	str	r2, [r3, #16]
  while ((SCU_CLK->CLKCR) & SCU_CLK_CLKCR_VDDC2LOW_Msk)
1000131e:	46c0      	nop			; (mov r8, r8)
10001320:	4b05      	ldr	r3, [pc, #20]	; (10001338 <XMC_SCU_CLOCK_UngatePeripheralClock+0x38>)
10001322:	681a      	ldr	r2, [r3, #0]
10001324:	2380      	movs	r3, #128	; 0x80
10001326:	05db      	lsls	r3, r3, #23
10001328:	4013      	ands	r3, r2
1000132a:	d1f9      	bne.n	10001320 <XMC_SCU_CLOCK_UngatePeripheralClock+0x20>
  {
    /* Wait voltage suply stabilization */
  }
  XMC_SCU_LockProtectedBits();
1000132c:	f7ff ffaa 	bl	10001284 <XMC_SCU_LockProtectedBits>
}
10001330:	46bd      	mov	sp, r7
10001332:	b002      	add	sp, #8
10001334:	bd80      	pop	{r7, pc}
10001336:	46c0      	nop			; (mov r8, r8)
10001338:	40010300 	.word	0x40010300

1000133c <XMC_SCU_CLOCK_IsPeripheralClockGated>:

/* Checks the status of peripheral clock gating */
bool XMC_SCU_CLOCK_IsPeripheralClockGated(const XMC_SCU_PERIPHERAL_CLOCK_t peripheral)
{
1000133c:	b580      	push	{r7, lr}
1000133e:	b082      	sub	sp, #8
10001340:	af00      	add	r7, sp, #0
10001342:	1c02      	adds	r2, r0, #0
10001344:	1dbb      	adds	r3, r7, #6
10001346:	801a      	strh	r2, [r3, #0]
  return (bool)((SCU_CLK->CGATSTAT0 & peripheral) != 0);
10001348:	4b05      	ldr	r3, [pc, #20]	; (10001360 <XMC_SCU_CLOCK_IsPeripheralClockGated+0x24>)
1000134a:	689b      	ldr	r3, [r3, #8]
1000134c:	1dba      	adds	r2, r7, #6
1000134e:	8812      	ldrh	r2, [r2, #0]
10001350:	4013      	ands	r3, r2
10001352:	1e5a      	subs	r2, r3, #1
10001354:	4193      	sbcs	r3, r2
10001356:	b2db      	uxtb	r3, r3
}
10001358:	1c18      	adds	r0, r3, #0
1000135a:	46bd      	mov	sp, r7
1000135c:	b002      	add	sp, #8
1000135e:	bd80      	pop	{r7, pc}
10001360:	40010300 	.word	0x40010300

10001364 <XMC_SCU_CLOCK_ScaleMCLKFrequency>:
}


/* A utility routine which updates the fractional dividers in steps */
void XMC_SCU_CLOCK_ScaleMCLKFrequency(uint32_t idiv, uint32_t fdiv)
{
10001364:	b580      	push	{r7, lr}
10001366:	b084      	sub	sp, #16
10001368:	af00      	add	r7, sp, #0
1000136a:	6078      	str	r0, [r7, #4]
1000136c:	6039      	str	r1, [r7, #0]
  /* Find out current and target value of idiv */
  uint32_t curr_idiv;

  XMC_SCU_UnlockProtectedBits();
1000136e:	f7ff ff93 	bl	10001298 <XMC_SCU_UnlockProtectedBits>

  /* Take a snapshot of value already programmed into IDIV */
  curr_idiv = (SCU_CLK->CLKCR & SCU_CLK_CLKCR_IDIV_Msk) >> SCU_CLK_CLKCR_IDIV_Pos;
10001372:	4b21      	ldr	r3, [pc, #132]	; (100013f8 <XMC_SCU_CLOCK_ScaleMCLKFrequency+0x94>)
10001374:	681a      	ldr	r2, [r3, #0]
10001376:	23ff      	movs	r3, #255	; 0xff
10001378:	021b      	lsls	r3, r3, #8
1000137a:	4013      	ands	r3, r2
1000137c:	0a1b      	lsrs	r3, r3, #8
1000137e:	60fb      	str	r3, [r7, #12]

  SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_FDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)) |
                   (uint32_t)((fdiv & 0xffU) << SCU_CLK_CLKCR_FDIV_Pos) |
                   (uint32_t)(1023UL << SCU_CLK_CLKCR_CNTADJ_Pos);
#else
  SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_FDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)) |
10001380:	4b1d      	ldr	r3, [pc, #116]	; (100013f8 <XMC_SCU_CLOCK_ScaleMCLKFrequency+0x94>)
10001382:	4a1d      	ldr	r2, [pc, #116]	; (100013f8 <XMC_SCU_CLOCK_ScaleMCLKFrequency+0x94>)
10001384:	6812      	ldr	r2, [r2, #0]
10001386:	491d      	ldr	r1, [pc, #116]	; (100013fc <XMC_SCU_CLOCK_ScaleMCLKFrequency+0x98>)
10001388:	4011      	ands	r1, r2
1000138a:	683a      	ldr	r2, [r7, #0]
1000138c:	430a      	orrs	r2, r1
                   (uint32_t)(fdiv << SCU_CLK_CLKCR_FDIV_Pos) |
1000138e:	491c      	ldr	r1, [pc, #112]	; (10001400 <XMC_SCU_CLOCK_ScaleMCLKFrequency+0x9c>)
10001390:	430a      	orrs	r2, r1

  SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_FDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)) |
                   (uint32_t)((fdiv & 0xffU) << SCU_CLK_CLKCR_FDIV_Pos) |
                   (uint32_t)(1023UL << SCU_CLK_CLKCR_CNTADJ_Pos);
#else
  SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_FDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)) |
10001392:	601a      	str	r2, [r3, #0]
                   (uint32_t)(fdiv << SCU_CLK_CLKCR_FDIV_Pos) |
                   (uint32_t)(1023UL << SCU_CLK_CLKCR_CNTADJ_Pos);
#endif

  while ((SCU_CLK->CLKCR)& SCU_CLK_CLKCR_VDDC2LOW_Msk)
10001394:	46c0      	nop			; (mov r8, r8)
10001396:	4b18      	ldr	r3, [pc, #96]	; (100013f8 <XMC_SCU_CLOCK_ScaleMCLKFrequency+0x94>)
10001398:	681a      	ldr	r2, [r3, #0]
1000139a:	2380      	movs	r3, #128	; 0x80
1000139c:	05db      	lsls	r3, r3, #23
1000139e:	4013      	ands	r3, r2
100013a0:	d1f9      	bne.n	10001396 <XMC_SCU_CLOCK_ScaleMCLKFrequency+0x32>
  {
    /* Spin until the core supply stabilizes */
  }

  if(curr_idiv <= idiv)
100013a2:	68fa      	ldr	r2, [r7, #12]
100013a4:	687b      	ldr	r3, [r7, #4]
100013a6:	429a      	cmp	r2, r3
100013a8:	d806      	bhi.n	100013b8 <XMC_SCU_CLOCK_ScaleMCLKFrequency+0x54>
  {
    /* Requested IDIV is greater than currently programmed IDIV. So downscale the frequency */
    XMC_SCU_CLOCK_lFrequencyDownScaling(curr_idiv, idiv);
100013aa:	68fa      	ldr	r2, [r7, #12]
100013ac:	687b      	ldr	r3, [r7, #4]
100013ae:	1c10      	adds	r0, r2, #0
100013b0:	1c19      	adds	r1, r3, #0
100013b2:	f000 f853 	bl	1000145c <XMC_SCU_CLOCK_lFrequencyDownScaling>
100013b6:	e005      	b.n	100013c4 <XMC_SCU_CLOCK_ScaleMCLKFrequency+0x60>
  }
  else
  {
    /* Requested IDIV is lower than currently programmed IDIV. So upscale the frequency */
    XMC_SCU_CLOCK_lFrequencyUpScaling(curr_idiv, idiv);
100013b8:	68fa      	ldr	r2, [r7, #12]
100013ba:	687b      	ldr	r3, [r7, #4]
100013bc:	1c10      	adds	r0, r2, #0
100013be:	1c19      	adds	r1, r3, #0
100013c0:	f000 f822 	bl	10001408 <XMC_SCU_CLOCK_lFrequencyUpScaling>
  }

  SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_IDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)) |
100013c4:	4b0c      	ldr	r3, [pc, #48]	; (100013f8 <XMC_SCU_CLOCK_ScaleMCLKFrequency+0x94>)
100013c6:	4a0c      	ldr	r2, [pc, #48]	; (100013f8 <XMC_SCU_CLOCK_ScaleMCLKFrequency+0x94>)
100013c8:	6812      	ldr	r2, [r2, #0]
100013ca:	490e      	ldr	r1, [pc, #56]	; (10001404 <XMC_SCU_CLOCK_ScaleMCLKFrequency+0xa0>)
100013cc:	4011      	ands	r1, r2
                   (uint32_t)(idiv << SCU_CLK_CLKCR_IDIV_Pos) | (uint32_t)(1023UL << SCU_CLK_CLKCR_CNTADJ_Pos);
100013ce:	687a      	ldr	r2, [r7, #4]
100013d0:	0212      	lsls	r2, r2, #8
  {
    /* Requested IDIV is lower than currently programmed IDIV. So upscale the frequency */
    XMC_SCU_CLOCK_lFrequencyUpScaling(curr_idiv, idiv);
  }

  SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_IDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)) |
100013d2:	430a      	orrs	r2, r1
                   (uint32_t)(idiv << SCU_CLK_CLKCR_IDIV_Pos) | (uint32_t)(1023UL << SCU_CLK_CLKCR_CNTADJ_Pos);
100013d4:	490a      	ldr	r1, [pc, #40]	; (10001400 <XMC_SCU_CLOCK_ScaleMCLKFrequency+0x9c>)
100013d6:	430a      	orrs	r2, r1
  {
    /* Requested IDIV is lower than currently programmed IDIV. So upscale the frequency */
    XMC_SCU_CLOCK_lFrequencyUpScaling(curr_idiv, idiv);
  }

  SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_IDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)) |
100013d8:	601a      	str	r2, [r3, #0]
                   (uint32_t)(idiv << SCU_CLK_CLKCR_IDIV_Pos) | (uint32_t)(1023UL << SCU_CLK_CLKCR_CNTADJ_Pos);

  while ((SCU_CLK->CLKCR) & SCU_CLK_CLKCR_VDDC2LOW_Msk)
100013da:	46c0      	nop			; (mov r8, r8)
100013dc:	4b06      	ldr	r3, [pc, #24]	; (100013f8 <XMC_SCU_CLOCK_ScaleMCLKFrequency+0x94>)
100013de:	681a      	ldr	r2, [r3, #0]
100013e0:	2380      	movs	r3, #128	; 0x80
100013e2:	05db      	lsls	r3, r3, #23
100013e4:	4013      	ands	r3, r2
100013e6:	d1f9      	bne.n	100013dc <XMC_SCU_CLOCK_ScaleMCLKFrequency+0x78>
  {
    /* Wait voltage suply stabilization */
  }

  XMC_SCU_LockProtectedBits();
100013e8:	f7ff ff4c 	bl	10001284 <XMC_SCU_LockProtectedBits>

  SystemCoreClockUpdate();
100013ec:	f7ff fe5e 	bl	100010ac <SystemCoreClockUpdate>

}
100013f0:	46bd      	mov	sp, r7
100013f2:	b004      	add	sp, #16
100013f4:	bd80      	pop	{r7, pc}
100013f6:	46c0      	nop			; (mov r8, r8)
100013f8:	40010300 	.word	0x40010300
100013fc:	c00fff00 	.word	0xc00fff00
10001400:	3ff00000 	.word	0x3ff00000
10001404:	c00f00ff 	.word	0xc00f00ff

10001408 <XMC_SCU_CLOCK_lFrequencyUpScaling>:

/* Utility routine to perform frequency up scaling */
static void XMC_SCU_CLOCK_lFrequencyUpScaling(uint32_t curr_idiv, uint32_t target_idiv)
{
10001408:	b580      	push	{r7, lr}
1000140a:	b082      	sub	sp, #8
1000140c:	af00      	add	r7, sp, #0
1000140e:	6078      	str	r0, [r7, #4]
10001410:	6039      	str	r1, [r7, #0]
  while (curr_idiv > (target_idiv * 4UL))
10001412:	e014      	b.n	1000143e <XMC_SCU_CLOCK_lFrequencyUpScaling+0x36>
  {
    curr_idiv = (uint32_t)(curr_idiv >> 2UL);   /* Divide by 4. */
10001414:	687b      	ldr	r3, [r7, #4]
10001416:	089b      	lsrs	r3, r3, #2
10001418:	607b      	str	r3, [r7, #4]

    SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_IDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)) |
1000141a:	4b0d      	ldr	r3, [pc, #52]	; (10001450 <XMC_SCU_CLOCK_lFrequencyUpScaling+0x48>)
1000141c:	4a0c      	ldr	r2, [pc, #48]	; (10001450 <XMC_SCU_CLOCK_lFrequencyUpScaling+0x48>)
1000141e:	6812      	ldr	r2, [r2, #0]
10001420:	490c      	ldr	r1, [pc, #48]	; (10001454 <XMC_SCU_CLOCK_lFrequencyUpScaling+0x4c>)
10001422:	4011      	ands	r1, r2
                     (uint32_t)(curr_idiv << SCU_CLK_CLKCR_IDIV_Pos) | 
10001424:	687a      	ldr	r2, [r7, #4]
10001426:	0212      	lsls	r2, r2, #8
{
  while (curr_idiv > (target_idiv * 4UL))
  {
    curr_idiv = (uint32_t)(curr_idiv >> 2UL);   /* Divide by 4. */

    SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_IDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)) |
10001428:	430a      	orrs	r2, r1
                     (uint32_t)(curr_idiv << SCU_CLK_CLKCR_IDIV_Pos) | 
1000142a:	490b      	ldr	r1, [pc, #44]	; (10001458 <XMC_SCU_CLOCK_lFrequencyUpScaling+0x50>)
1000142c:	430a      	orrs	r2, r1
{
  while (curr_idiv > (target_idiv * 4UL))
  {
    curr_idiv = (uint32_t)(curr_idiv >> 2UL);   /* Divide by 4. */

    SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_IDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)) |
1000142e:	601a      	str	r2, [r3, #0]
                     (uint32_t)(curr_idiv << SCU_CLK_CLKCR_IDIV_Pos) | 
                     (uint32_t)(1023UL << SCU_CLK_CLKCR_CNTADJ_Pos);

    while (SCU_CLK->CLKCR & SCU_CLK_CLKCR_VDDC2LOW_Msk)
10001430:	46c0      	nop			; (mov r8, r8)
10001432:	4b07      	ldr	r3, [pc, #28]	; (10001450 <XMC_SCU_CLOCK_lFrequencyUpScaling+0x48>)
10001434:	681a      	ldr	r2, [r3, #0]
10001436:	2380      	movs	r3, #128	; 0x80
10001438:	05db      	lsls	r3, r3, #23
1000143a:	4013      	ands	r3, r2
1000143c:	d1f9      	bne.n	10001432 <XMC_SCU_CLOCK_lFrequencyUpScaling+0x2a>
}

/* Utility routine to perform frequency up scaling */
static void XMC_SCU_CLOCK_lFrequencyUpScaling(uint32_t curr_idiv, uint32_t target_idiv)
{
  while (curr_idiv > (target_idiv * 4UL))
1000143e:	683b      	ldr	r3, [r7, #0]
10001440:	009a      	lsls	r2, r3, #2
10001442:	687b      	ldr	r3, [r7, #4]
10001444:	429a      	cmp	r2, r3
10001446:	d3e5      	bcc.n	10001414 <XMC_SCU_CLOCK_lFrequencyUpScaling+0xc>
    while (SCU_CLK->CLKCR & SCU_CLK_CLKCR_VDDC2LOW_Msk)
    {
    /* Wait voltage suply stabilization */
    }
  }
}
10001448:	46bd      	mov	sp, r7
1000144a:	b002      	add	sp, #8
1000144c:	bd80      	pop	{r7, pc}
1000144e:	46c0      	nop			; (mov r8, r8)
10001450:	40010300 	.word	0x40010300
10001454:	c00f00ff 	.word	0xc00f00ff
10001458:	3ff00000 	.word	0x3ff00000

1000145c <XMC_SCU_CLOCK_lFrequencyDownScaling>:

/* Utility routine to perform frequency down scaling */
static void XMC_SCU_CLOCK_lFrequencyDownScaling(uint32_t curr_idiv, uint32_t target_idiv)
{
1000145c:	b580      	push	{r7, lr}
1000145e:	b082      	sub	sp, #8
10001460:	af00      	add	r7, sp, #0
10001462:	6078      	str	r0, [r7, #4]
10001464:	6039      	str	r1, [r7, #0]

  while ((curr_idiv * 4UL) < target_idiv)
10001466:	e019      	b.n	1000149c <XMC_SCU_CLOCK_lFrequencyDownScaling+0x40>
  {
    if(0U == curr_idiv)
10001468:	687b      	ldr	r3, [r7, #4]
1000146a:	2b00      	cmp	r3, #0
1000146c:	d101      	bne.n	10001472 <XMC_SCU_CLOCK_lFrequencyDownScaling+0x16>
    {
      curr_idiv = 1U;
1000146e:	2301      	movs	r3, #1
10001470:	607b      	str	r3, [r7, #4]
    }
    curr_idiv  = (uint32_t)(curr_idiv << 2UL);   /* Multiply by 4. */
10001472:	687b      	ldr	r3, [r7, #4]
10001474:	009b      	lsls	r3, r3, #2
10001476:	607b      	str	r3, [r7, #4]
    SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_IDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)) |
10001478:	4b0c      	ldr	r3, [pc, #48]	; (100014ac <XMC_SCU_CLOCK_lFrequencyDownScaling+0x50>)
1000147a:	4a0c      	ldr	r2, [pc, #48]	; (100014ac <XMC_SCU_CLOCK_lFrequencyDownScaling+0x50>)
1000147c:	6812      	ldr	r2, [r2, #0]
1000147e:	490c      	ldr	r1, [pc, #48]	; (100014b0 <XMC_SCU_CLOCK_lFrequencyDownScaling+0x54>)
10001480:	4011      	ands	r1, r2
                     (uint32_t)(curr_idiv << SCU_CLK_CLKCR_IDIV_Pos) |
10001482:	687a      	ldr	r2, [r7, #4]
10001484:	0212      	lsls	r2, r2, #8
    if(0U == curr_idiv)
    {
      curr_idiv = 1U;
    }
    curr_idiv  = (uint32_t)(curr_idiv << 2UL);   /* Multiply by 4. */
    SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_IDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)) |
10001486:	430a      	orrs	r2, r1
                     (uint32_t)(curr_idiv << SCU_CLK_CLKCR_IDIV_Pos) |
10001488:	490a      	ldr	r1, [pc, #40]	; (100014b4 <XMC_SCU_CLOCK_lFrequencyDownScaling+0x58>)
1000148a:	430a      	orrs	r2, r1
    if(0U == curr_idiv)
    {
      curr_idiv = 1U;
    }
    curr_idiv  = (uint32_t)(curr_idiv << 2UL);   /* Multiply by 4. */
    SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_IDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)) |
1000148c:	601a      	str	r2, [r3, #0]
                     (uint32_t)(curr_idiv << SCU_CLK_CLKCR_IDIV_Pos) |
                     (uint32_t)(1023UL << SCU_CLK_CLKCR_CNTADJ_Pos);

    while (SCU_CLK->CLKCR & SCU_CLK_CLKCR_VDDC2LOW_Msk)
1000148e:	46c0      	nop			; (mov r8, r8)
10001490:	4b06      	ldr	r3, [pc, #24]	; (100014ac <XMC_SCU_CLOCK_lFrequencyDownScaling+0x50>)
10001492:	681a      	ldr	r2, [r3, #0]
10001494:	2380      	movs	r3, #128	; 0x80
10001496:	05db      	lsls	r3, r3, #23
10001498:	4013      	ands	r3, r2
1000149a:	d1f9      	bne.n	10001490 <XMC_SCU_CLOCK_lFrequencyDownScaling+0x34>

/* Utility routine to perform frequency down scaling */
static void XMC_SCU_CLOCK_lFrequencyDownScaling(uint32_t curr_idiv, uint32_t target_idiv)
{

  while ((curr_idiv * 4UL) < target_idiv)
1000149c:	687b      	ldr	r3, [r7, #4]
1000149e:	009a      	lsls	r2, r3, #2
100014a0:	683b      	ldr	r3, [r7, #0]
100014a2:	429a      	cmp	r2, r3
100014a4:	d3e0      	bcc.n	10001468 <XMC_SCU_CLOCK_lFrequencyDownScaling+0xc>
    while (SCU_CLK->CLKCR & SCU_CLK_CLKCR_VDDC2LOW_Msk)
    {
    /* Wait voltage suply stabilization */
    }
  }
}
100014a6:	46bd      	mov	sp, r7
100014a8:	b002      	add	sp, #8
100014aa:	bd80      	pop	{r7, pc}
100014ac:	40010300 	.word	0x40010300
100014b0:	c00f00ff 	.word	0xc00f00ff
100014b4:	3ff00000 	.word	0x3ff00000

100014b8 <XMC_SCU_CLOCK_GetPeripheralClockFrequency>:

/*
 * API to retrieve clock frequency of peripherals on the peripheral bus using a shared functional clock
 */
uint32_t XMC_SCU_CLOCK_GetPeripheralClockFrequency(void)
{
100014b8:	b580      	push	{r7, lr}
100014ba:	af00      	add	r7, sp, #0
  return (SystemCoreClock);
100014bc:	4b02      	ldr	r3, [pc, #8]	; (100014c8 <XMC_SCU_CLOCK_GetPeripheralClockFrequency+0x10>)
100014be:	681b      	ldr	r3, [r3, #0]
}
100014c0:	1c18      	adds	r0, r3, #0
100014c2:	46bd      	mov	sp, r7
100014c4:	bd80      	pop	{r7, pc}
100014c6:	46c0      	nop			; (mov r8, r8)
100014c8:	20003ffc 	.word	0x20003ffc

100014cc <XMC_CCU4_StartPrescaler>:
 * \par<b>Related APIs:</b><br>
 * XMC_CCU4_Init()<BR> XMC_CCU4_EnableClock()<BR> XMC_CCU4_DisableClock()<BR> XMC_CCU4_StartPrescaler()<BR>
 * XMC_CCU4_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU4_StartPrescaler(XMC_CCU4_MODULE_t *const module)
{
100014cc:	b580      	push	{r7, lr}
100014ce:	b082      	sub	sp, #8
100014d0:	af00      	add	r7, sp, #0
100014d2:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_StartPrescaler:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
  module->GIDLC |= (uint32_t) CCU4_GIDLC_SPRB_Msk;
100014d4:	687b      	ldr	r3, [r7, #4]
100014d6:	68db      	ldr	r3, [r3, #12]
100014d8:	2280      	movs	r2, #128	; 0x80
100014da:	0052      	lsls	r2, r2, #1
100014dc:	431a      	orrs	r2, r3
100014de:	687b      	ldr	r3, [r7, #4]
100014e0:	60da      	str	r2, [r3, #12]
}
100014e2:	46bd      	mov	sp, r7
100014e4:	b002      	add	sp, #8
100014e6:	bd80      	pop	{r7, pc}

100014e8 <XMC_CCU4_lUngateClock>:
    XMC_ASSERT("XMC_CCU4_lGateClock:Invalid Module Pointer", 0);
  }
}

__STATIC_INLINE void XMC_CCU4_lUngateClock(const XMC_CCU4_MODULE_t *const module)
{
100014e8:	b580      	push	{r7, lr}
100014ea:	b082      	sub	sp, #8
100014ec:	af00      	add	r7, sp, #0
100014ee:	6078      	str	r0, [r7, #4]
  if (module == CCU40)
100014f0:	687b      	ldr	r3, [r7, #4]
100014f2:	4a04      	ldr	r2, [pc, #16]	; (10001504 <XMC_CCU4_lUngateClock+0x1c>)
100014f4:	4293      	cmp	r3, r2
100014f6:	d102      	bne.n	100014fe <XMC_CCU4_lUngateClock+0x16>
  {
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_CCU40);
100014f8:	2004      	movs	r0, #4
100014fa:	f7ff ff01 	bl	10001300 <XMC_SCU_CLOCK_UngatePeripheralClock>
#endif
  else
  {
    XMC_ASSERT("XMC_CCU4_lUngateClock:Invalid Module Pointer", 0);
  }
}
100014fe:	46bd      	mov	sp, r7
10001500:	b002      	add	sp, #8
10001502:	bd80      	pop	{r7, pc}
10001504:	48040000 	.word	0x48040000

10001508 <XMC_CCU4_EnableModule>:
/*********************************************************************************************************************
 * API IMPLEMENTATION
 ********************************************************************************************************************/

void XMC_CCU4_EnableModule(XMC_CCU4_MODULE_t *const module)
{
10001508:	b580      	push	{r7, lr}
1000150a:	b082      	sub	sp, #8
1000150c:	af00      	add	r7, sp, #0
1000150e:	6078      	str	r0, [r7, #4]
  /* Enable CCU4 module clock */
  XMC_SCU_CLOCK_EnableClock(XMC_SCU_CLOCK_CCU);
#endif
  
#if defined(CLOCK_GATING_SUPPORTED)
  XMC_CCU4_lUngateClock(module);
10001510:	687b      	ldr	r3, [r7, #4]
10001512:	1c18      	adds	r0, r3, #0
10001514:	f7ff ffe8 	bl	100014e8 <XMC_CCU4_lUngateClock>
#endif

#if defined(PERIPHERAL_RESET_SUPPORTED)
  XMC_CCU4_lDeassertReset(module);
#endif
}
10001518:	46bd      	mov	sp, r7
1000151a:	b002      	add	sp, #8
1000151c:	bd80      	pop	{r7, pc}
1000151e:	46c0      	nop			; (mov r8, r8)

10001520 <XMC_CCU4_Init>:
#endif
}

/* API to initialize CCU4 global resources  */
void XMC_CCU4_Init(XMC_CCU4_MODULE_t *const module, const XMC_CCU4_SLICE_MCMS_ACTION_t mcs_action)
{
10001520:	b580      	push	{r7, lr}
10001522:	b084      	sub	sp, #16
10001524:	af00      	add	r7, sp, #0
10001526:	6078      	str	r0, [r7, #4]
10001528:	1c0a      	adds	r2, r1, #0
1000152a:	1cfb      	adds	r3, r7, #3
1000152c:	701a      	strb	r2, [r3, #0]
  
  XMC_ASSERT("XMC_CCU4_Init:Invalid module pointer", XMC_CCU4_IsValidModule(module));
  XMC_ASSERT("XMC_CCU4_Init:Invalid mcs action", XMC_CCU4_SLICE_CHECK_MCS_ACTION(mcs_action));

  /* Enable CCU4 module */
  XMC_CCU4_EnableModule(module);
1000152e:	687b      	ldr	r3, [r7, #4]
10001530:	1c18      	adds	r0, r3, #0
10001532:	f7ff ffe9 	bl	10001508 <XMC_CCU4_EnableModule>
  /* Start the prescaler */
  XMC_CCU4_StartPrescaler(module);
10001536:	687b      	ldr	r3, [r7, #4]
10001538:	1c18      	adds	r0, r3, #0
1000153a:	f7ff ffc7 	bl	100014cc <XMC_CCU4_StartPrescaler>
  
  gctrl = module->GCTRL;
1000153e:	687b      	ldr	r3, [r7, #4]
10001540:	681b      	ldr	r3, [r3, #0]
10001542:	60fb      	str	r3, [r7, #12]
  gctrl &= ~((uint32_t) CCU4_GCTRL_MSDE_Msk);
10001544:	68fb      	ldr	r3, [r7, #12]
10001546:	4a07      	ldr	r2, [pc, #28]	; (10001564 <XMC_CCU4_Init+0x44>)
10001548:	4013      	ands	r3, r2
1000154a:	60fb      	str	r3, [r7, #12]
  gctrl |= ((uint32_t) mcs_action) << CCU4_GCTRL_MSDE_Pos;
1000154c:	1cfb      	adds	r3, r7, #3
1000154e:	781b      	ldrb	r3, [r3, #0]
10001550:	039b      	lsls	r3, r3, #14
10001552:	68fa      	ldr	r2, [r7, #12]
10001554:	4313      	orrs	r3, r2
10001556:	60fb      	str	r3, [r7, #12]
  
  module->GCTRL = gctrl;
10001558:	687b      	ldr	r3, [r7, #4]
1000155a:	68fa      	ldr	r2, [r7, #12]
1000155c:	601a      	str	r2, [r3, #0]
}
1000155e:	46bd      	mov	sp, r7
10001560:	b004      	add	sp, #16
10001562:	bd80      	pop	{r7, pc}
10001564:	ffff3fff 	.word	0xffff3fff

10001568 <XMC_CCU4_SetMultiChannelShadowTransferMode>:
  module->GCTRL = gctrl;
}

/* API to configure the multichannel shadow transfer request via SW and via the CCU4x.MCSS input. */
void XMC_CCU4_SetMultiChannelShadowTransferMode(XMC_CCU4_MODULE_t *const module, const uint32_t slice_mode_msk)
{
10001568:	b580      	push	{r7, lr}
1000156a:	b084      	sub	sp, #16
1000156c:	af00      	add	r7, sp, #0
1000156e:	6078      	str	r0, [r7, #4]
10001570:	6039      	str	r1, [r7, #0]
  uint32_t gctrl;

  XMC_ASSERT("XMC_CCU4_SetMultiChannelShadowTransferMode:Invalid module Pointer", XMC_CCU4_IsValidModule(module));
  
  gctrl = module->GCTRL;
10001572:	687b      	ldr	r3, [r7, #4]
10001574:	681b      	ldr	r3, [r3, #0]
10001576:	60fb      	str	r3, [r7, #12]
  gctrl &= ~((uint32_t)slice_mode_msk >> 16U);
10001578:	683b      	ldr	r3, [r7, #0]
1000157a:	0c1b      	lsrs	r3, r3, #16
1000157c:	43da      	mvns	r2, r3
1000157e:	68fb      	ldr	r3, [r7, #12]
10001580:	4013      	ands	r3, r2
10001582:	60fb      	str	r3, [r7, #12]
  gctrl |= ((uint32_t)slice_mode_msk & 0xFFFFU);
10001584:	683b      	ldr	r3, [r7, #0]
10001586:	041b      	lsls	r3, r3, #16
10001588:	0c1b      	lsrs	r3, r3, #16
1000158a:	68fa      	ldr	r2, [r7, #12]
1000158c:	4313      	orrs	r3, r2
1000158e:	60fb      	str	r3, [r7, #12]
  module->GCTRL = gctrl;
10001590:	687b      	ldr	r3, [r7, #4]
10001592:	68fa      	ldr	r2, [r7, #12]
10001594:	601a      	str	r2, [r3, #0]
}
10001596:	46bd      	mov	sp, r7
10001598:	b004      	add	sp, #16
1000159a:	bd80      	pop	{r7, pc}

1000159c <XMC_CCU4_SLICE_CompareInit>:

/* API to configure CC4 Slice as Timer */
void XMC_CCU4_SLICE_CompareInit(XMC_CCU4_SLICE_t *const slice,
                                const XMC_CCU4_SLICE_COMPARE_CONFIG_t *const compare_init)
{
1000159c:	b580      	push	{r7, lr}
1000159e:	b082      	sub	sp, #8
100015a0:	af00      	add	r7, sp, #0
100015a2:	6078      	str	r0, [r7, #4]
100015a4:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_CCU4_SLICE_CompareInit:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_CompareInit:Compare Init Pointer is NULL",
             (XMC_CCU4_SLICE_COMPARE_CONFIG_t *) NULL != compare_init);

  /* Program the timer mode */
  slice->TC = compare_init->tc;
100015a6:	683b      	ldr	r3, [r7, #0]
100015a8:	681a      	ldr	r2, [r3, #0]
100015aa:	687b      	ldr	r3, [r7, #4]
100015ac:	615a      	str	r2, [r3, #20]
  /* Enable the timer concatenation */
  slice->CMC = ((uint32_t) compare_init->timer_concatenation << CCU4_CC4_CMC_TCE_Pos);
100015ae:	683b      	ldr	r3, [r7, #0]
100015b0:	795b      	ldrb	r3, [r3, #5]
100015b2:	069b      	lsls	r3, r3, #26
100015b4:	0fdb      	lsrs	r3, r3, #31
100015b6:	b2db      	uxtb	r3, r3
100015b8:	051a      	lsls	r2, r3, #20
100015ba:	687b      	ldr	r3, [r7, #4]
100015bc:	605a      	str	r2, [r3, #4]
  /* Program initial prescaler divider value */
  slice->PSC = (uint32_t) compare_init->prescaler_initval;
100015be:	683b      	ldr	r3, [r7, #0]
100015c0:	791b      	ldrb	r3, [r3, #4]
100015c2:	071b      	lsls	r3, r3, #28
100015c4:	0f1b      	lsrs	r3, r3, #28
100015c6:	b2db      	uxtb	r3, r3
100015c8:	1c1a      	adds	r2, r3, #0
100015ca:	687b      	ldr	r3, [r7, #4]
100015cc:	625a      	str	r2, [r3, #36]	; 0x24
  /* Program the dither compare value */
  slice->DITS = (uint32_t) compare_init->dither_limit;
100015ce:	683b      	ldr	r3, [r7, #0]
100015d0:	795b      	ldrb	r3, [r3, #5]
100015d2:	071b      	lsls	r3, r3, #28
100015d4:	0f1b      	lsrs	r3, r3, #28
100015d6:	b2db      	uxtb	r3, r3
100015d8:	1c1a      	adds	r2, r3, #0
100015da:	687b      	ldr	r3, [r7, #4]
100015dc:	621a      	str	r2, [r3, #32]
  /* Program timer output passive level */
  slice->PSL = (uint32_t) compare_init->passive_level;
100015de:	683b      	ldr	r3, [r7, #0]
100015e0:	795b      	ldrb	r3, [r3, #5]
100015e2:	06db      	lsls	r3, r3, #27
100015e4:	0fdb      	lsrs	r3, r3, #31
100015e6:	b2db      	uxtb	r3, r3
100015e8:	1c1a      	adds	r2, r3, #0
100015ea:	687b      	ldr	r3, [r7, #4]
100015ec:	619a      	str	r2, [r3, #24]
  /* Program floating prescaler compare value */
  slice->FPCS = (uint32_t) compare_init->float_limit;
100015ee:	683b      	ldr	r3, [r7, #0]
100015f0:	791b      	ldrb	r3, [r3, #4]
100015f2:	061b      	lsls	r3, r3, #24
100015f4:	0f1b      	lsrs	r3, r3, #28
100015f6:	b2db      	uxtb	r3, r3
100015f8:	1c1a      	adds	r2, r3, #0
100015fa:	687b      	ldr	r3, [r7, #4]
100015fc:	62da      	str	r2, [r3, #44]	; 0x2c
}
100015fe:	46bd      	mov	sp, r7
10001600:	b002      	add	sp, #8
10001602:	bd80      	pop	{r7, pc}

10001604 <XMC_CCU4_SLICE_StartConfig>:

/* API to configure the Start trigger function of a slice */
void XMC_CCU4_SLICE_StartConfig(XMC_CCU4_SLICE_t *const slice,
                            const XMC_CCU4_SLICE_EVENT_t event,
                                const XMC_CCU4_SLICE_START_MODE_t start_mode)
{
10001604:	b580      	push	{r7, lr}
10001606:	b084      	sub	sp, #16
10001608:	af00      	add	r7, sp, #0
1000160a:	6078      	str	r0, [r7, #4]
1000160c:	1c08      	adds	r0, r1, #0
1000160e:	1c11      	adds	r1, r2, #0
10001610:	1cfb      	adds	r3, r7, #3
10001612:	1c02      	adds	r2, r0, #0
10001614:	701a      	strb	r2, [r3, #0]
10001616:	1cbb      	adds	r3, r7, #2
10001618:	1c0a      	adds	r2, r1, #0
1000161a:	701a      	strb	r2, [r3, #0]
  XMC_ASSERT("XMC_CCU4_SLICE_StartConfig:Invalid Event ID", XMC_CCU4_SLICE_CHECK_EVENT_ID(event));
  XMC_ASSERT("XMC_CCU4_SLICE_StartConfig:Invalid Start Mode", 
             ((start_mode == XMC_CCU4_SLICE_START_MODE_TIMER_START_CLEAR) ||\
              (start_mode == XMC_CCU4_SLICE_START_MODE_TIMER_START)));
  /* First, Bind the event with the stop function */
  cmc = slice->CMC;
1000161c:	687b      	ldr	r3, [r7, #4]
1000161e:	685b      	ldr	r3, [r3, #4]
10001620:	60bb      	str	r3, [r7, #8]
  cmc &= ~((uint32_t) CCU4_CC4_CMC_STRTS_Msk);
10001622:	68bb      	ldr	r3, [r7, #8]
10001624:	2203      	movs	r2, #3
10001626:	4393      	bics	r3, r2
10001628:	60bb      	str	r3, [r7, #8]
  cmc |= ((uint32_t) event) << CCU4_CC4_CMC_STRTS_Pos;
1000162a:	1cfb      	adds	r3, r7, #3
1000162c:	781b      	ldrb	r3, [r3, #0]
1000162e:	68ba      	ldr	r2, [r7, #8]
10001630:	4313      	orrs	r3, r2
10001632:	60bb      	str	r3, [r7, #8]

  slice->CMC = cmc;
10001634:	687b      	ldr	r3, [r7, #4]
10001636:	68ba      	ldr	r2, [r7, #8]
10001638:	605a      	str	r2, [r3, #4]
  
  tc  = slice->TC;
1000163a:	687b      	ldr	r3, [r7, #4]
1000163c:	695b      	ldr	r3, [r3, #20]
1000163e:	60fb      	str	r3, [r7, #12]
  /* Next, Configure the start mode */
  if (start_mode == XMC_CCU4_SLICE_START_MODE_TIMER_START_CLEAR)
10001640:	1cbb      	adds	r3, r7, #2
10001642:	781b      	ldrb	r3, [r3, #0]
10001644:	2b01      	cmp	r3, #1
10001646:	d105      	bne.n	10001654 <XMC_CCU4_SLICE_StartConfig+0x50>
  {
    tc |= (uint32_t)CCU4_CC4_TC_STRM_Msk;
10001648:	68fb      	ldr	r3, [r7, #12]
1000164a:	2280      	movs	r2, #128	; 0x80
1000164c:	00d2      	lsls	r2, r2, #3
1000164e:	4313      	orrs	r3, r2
10001650:	60fb      	str	r3, [r7, #12]
10001652:	e003      	b.n	1000165c <XMC_CCU4_SLICE_StartConfig+0x58>
  }
  else
  {
    tc &= ~((uint32_t)CCU4_CC4_TC_STRM_Msk);
10001654:	68fb      	ldr	r3, [r7, #12]
10001656:	4a04      	ldr	r2, [pc, #16]	; (10001668 <XMC_CCU4_SLICE_StartConfig+0x64>)
10001658:	4013      	ands	r3, r2
1000165a:	60fb      	str	r3, [r7, #12]
  }
  
  slice->TC = tc;
1000165c:	687b      	ldr	r3, [r7, #4]
1000165e:	68fa      	ldr	r2, [r7, #12]
10001660:	615a      	str	r2, [r3, #20]
}
10001662:	46bd      	mov	sp, r7
10001664:	b004      	add	sp, #16
10001666:	bd80      	pop	{r7, pc}
10001668:	fffffbff 	.word	0xfffffbff

1000166c <XMC_CCU4_SLICE_StopConfig>:

/* API to configure the Stop trigger function of a slice */
void XMC_CCU4_SLICE_StopConfig(XMC_CCU4_SLICE_t *const slice,
                           const XMC_CCU4_SLICE_EVENT_t event,
                               const XMC_CCU4_SLICE_END_MODE_t end_mode)
{
1000166c:	b580      	push	{r7, lr}
1000166e:	b084      	sub	sp, #16
10001670:	af00      	add	r7, sp, #0
10001672:	6078      	str	r0, [r7, #4]
10001674:	1c08      	adds	r0, r1, #0
10001676:	1c11      	adds	r1, r2, #0
10001678:	1cfb      	adds	r3, r7, #3
1000167a:	1c02      	adds	r2, r0, #0
1000167c:	701a      	strb	r2, [r3, #0]
1000167e:	1cbb      	adds	r3, r7, #2
10001680:	1c0a      	adds	r2, r1, #0
10001682:	701a      	strb	r2, [r3, #0]
  XMC_ASSERT("XMC_CCU4_SLICE_StopConfig:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_StopConfig:Invalid Event ID", XMC_CCU4_SLICE_CHECK_EVENT_ID(event));
  XMC_ASSERT("XMC_CCU4_SLICE_StopConfig:Invalid Start Mode", XMC_CCU4_CHECK_END_MODE(end_mode));
  
  /* First, Bind the event with the stop function */
  cmc = slice->CMC;
10001684:	687b      	ldr	r3, [r7, #4]
10001686:	685b      	ldr	r3, [r3, #4]
10001688:	60fb      	str	r3, [r7, #12]
  cmc &= ~((uint32_t) CCU4_CC4_CMC_ENDS_Msk);
1000168a:	68fb      	ldr	r3, [r7, #12]
1000168c:	220c      	movs	r2, #12
1000168e:	4393      	bics	r3, r2
10001690:	60fb      	str	r3, [r7, #12]
  cmc |= ((uint32_t) event) << CCU4_CC4_CMC_ENDS_Pos;
10001692:	1cfb      	adds	r3, r7, #3
10001694:	781b      	ldrb	r3, [r3, #0]
10001696:	009b      	lsls	r3, r3, #2
10001698:	68fa      	ldr	r2, [r7, #12]
1000169a:	4313      	orrs	r3, r2
1000169c:	60fb      	str	r3, [r7, #12]

  slice->CMC = cmc;
1000169e:	687b      	ldr	r3, [r7, #4]
100016a0:	68fa      	ldr	r2, [r7, #12]
100016a2:	605a      	str	r2, [r3, #4]
  
  /* Next, Configure the stop mode */
  tc = slice->TC;
100016a4:	687b      	ldr	r3, [r7, #4]
100016a6:	695b      	ldr	r3, [r3, #20]
100016a8:	60bb      	str	r3, [r7, #8]
  tc &= ~((uint32_t) CCU4_CC4_TC_ENDM_Msk);
100016aa:	68bb      	ldr	r3, [r7, #8]
100016ac:	4a07      	ldr	r2, [pc, #28]	; (100016cc <XMC_CCU4_SLICE_StopConfig+0x60>)
100016ae:	4013      	ands	r3, r2
100016b0:	60bb      	str	r3, [r7, #8]
  tc |= ((uint32_t) end_mode) << CCU4_CC4_TC_ENDM_Pos;
100016b2:	1cbb      	adds	r3, r7, #2
100016b4:	781b      	ldrb	r3, [r3, #0]
100016b6:	021b      	lsls	r3, r3, #8
100016b8:	68ba      	ldr	r2, [r7, #8]
100016ba:	4313      	orrs	r3, r2
100016bc:	60bb      	str	r3, [r7, #8]

  slice->TC = tc;
100016be:	687b      	ldr	r3, [r7, #4]
100016c0:	68ba      	ldr	r2, [r7, #8]
100016c2:	615a      	str	r2, [r3, #20]
}
100016c4:	46bd      	mov	sp, r7
100016c6:	b004      	add	sp, #16
100016c8:	bd80      	pop	{r7, pc}
100016ca:	46c0      	nop			; (mov r8, r8)
100016cc:	fffffcff 	.word	0xfffffcff

100016d0 <XMC_CCU4_SLICE_LoadConfig>:

/* API to configure the Load trigger function of a slice */
void XMC_CCU4_SLICE_LoadConfig(XMC_CCU4_SLICE_t *const slice, const XMC_CCU4_SLICE_EVENT_t event)
{
100016d0:	b580      	push	{r7, lr}
100016d2:	b084      	sub	sp, #16
100016d4:	af00      	add	r7, sp, #0
100016d6:	6078      	str	r0, [r7, #4]
100016d8:	1c0a      	adds	r2, r1, #0
100016da:	1cfb      	adds	r3, r7, #3
100016dc:	701a      	strb	r2, [r3, #0]
  
  XMC_ASSERT("XMC_CCU4_SLICE_LoadConfig:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_LoadConfig:Invalid Event ID", XMC_CCU4_SLICE_CHECK_EVENT_ID(event));
  
  /* Bind the event with the load function */
  cmc = slice->CMC;
100016de:	687b      	ldr	r3, [r7, #4]
100016e0:	685b      	ldr	r3, [r3, #4]
100016e2:	60fb      	str	r3, [r7, #12]
  cmc &= ~((uint32_t) CCU4_CC4_CMC_LDS_Msk);
100016e4:	68fb      	ldr	r3, [r7, #12]
100016e6:	4a07      	ldr	r2, [pc, #28]	; (10001704 <XMC_CCU4_SLICE_LoadConfig+0x34>)
100016e8:	4013      	ands	r3, r2
100016ea:	60fb      	str	r3, [r7, #12]
  cmc |= ((uint32_t) event) << CCU4_CC4_CMC_LDS_Pos;
100016ec:	1cfb      	adds	r3, r7, #3
100016ee:	781b      	ldrb	r3, [r3, #0]
100016f0:	031b      	lsls	r3, r3, #12
100016f2:	68fa      	ldr	r2, [r7, #12]
100016f4:	4313      	orrs	r3, r2
100016f6:	60fb      	str	r3, [r7, #12]

  slice->CMC = cmc;
100016f8:	687b      	ldr	r3, [r7, #4]
100016fa:	68fa      	ldr	r2, [r7, #12]
100016fc:	605a      	str	r2, [r3, #4]
}
100016fe:	46bd      	mov	sp, r7
10001700:	b004      	add	sp, #16
10001702:	bd80      	pop	{r7, pc}
10001704:	ffffcfff 	.word	0xffffcfff

10001708 <XMC_CCU4_SLICE_ModulationConfig>:
/* API to configure the slice modulation function */
void XMC_CCU4_SLICE_ModulationConfig(XMC_CCU4_SLICE_t *const slice,
                                     const XMC_CCU4_SLICE_EVENT_t event,
                                     const XMC_CCU4_SLICE_MODULATION_MODE_t mod_mode,
                                     const bool synch_with_pwm)
{
10001708:	b590      	push	{r4, r7, lr}
1000170a:	b085      	sub	sp, #20
1000170c:	af00      	add	r7, sp, #0
1000170e:	6078      	str	r0, [r7, #4]
10001710:	1c0c      	adds	r4, r1, #0
10001712:	1c10      	adds	r0, r2, #0
10001714:	1c19      	adds	r1, r3, #0
10001716:	1cfb      	adds	r3, r7, #3
10001718:	1c22      	adds	r2, r4, #0
1000171a:	701a      	strb	r2, [r3, #0]
1000171c:	1cbb      	adds	r3, r7, #2
1000171e:	1c02      	adds	r2, r0, #0
10001720:	701a      	strb	r2, [r3, #0]
10001722:	1c7b      	adds	r3, r7, #1
10001724:	1c0a      	adds	r2, r1, #0
10001726:	701a      	strb	r2, [r3, #0]
  XMC_ASSERT("XMC_CCU4_SLICE_ModulationConfig:Invalid Event ID", XMC_CCU4_SLICE_CHECK_EVENT_ID(event));
  XMC_ASSERT("XMC_CCU4_SLICE_ModulationConfig:Invalid Modulation Mode",
             ((mod_mode == XMC_CCU4_SLICE_MODULATION_MODE_CLEAR_OUT) ||\
              (mod_mode == XMC_CCU4_SLICE_MODULATION_MODE_CLEAR_ST_OUT)));
  
  tc  = slice->TC;
10001728:	687b      	ldr	r3, [r7, #4]
1000172a:	695b      	ldr	r3, [r3, #20]
1000172c:	60fb      	str	r3, [r7, #12]
  cmc = slice->CMC;
1000172e:	687b      	ldr	r3, [r7, #4]
10001730:	685b      	ldr	r3, [r3, #4]
10001732:	60bb      	str	r3, [r7, #8]
  
  /* First, Bind the event with the modulation function */
  cmc &= ~((uint32_t) CCU4_CC4_CMC_MOS_Msk);
10001734:	68bb      	ldr	r3, [r7, #8]
10001736:	4a17      	ldr	r2, [pc, #92]	; (10001794 <XMC_CCU4_SLICE_ModulationConfig+0x8c>)
10001738:	4013      	ands	r3, r2
1000173a:	60bb      	str	r3, [r7, #8]
  cmc |= ((uint32_t) event) << CCU4_CC4_CMC_MOS_Pos;
1000173c:	1cfb      	adds	r3, r7, #3
1000173e:	781b      	ldrb	r3, [r3, #0]
10001740:	049b      	lsls	r3, r3, #18
10001742:	68ba      	ldr	r2, [r7, #8]
10001744:	4313      	orrs	r3, r2
10001746:	60bb      	str	r3, [r7, #8]
  slice->CMC = cmc;
10001748:	687b      	ldr	r3, [r7, #4]
1000174a:	68ba      	ldr	r2, [r7, #8]
1000174c:	605a      	str	r2, [r3, #4]
  
  /* Next, Modulation mode */
  if (mod_mode == XMC_CCU4_SLICE_MODULATION_MODE_CLEAR_OUT)
1000174e:	1cbb      	adds	r3, r7, #2
10001750:	781b      	ldrb	r3, [r3, #0]
10001752:	2b01      	cmp	r3, #1
10001754:	d105      	bne.n	10001762 <XMC_CCU4_SLICE_ModulationConfig+0x5a>
  {
    tc |= (uint32_t) CCU4_CC4_TC_EMT_Msk;
10001756:	68fb      	ldr	r3, [r7, #12]
10001758:	2280      	movs	r2, #128	; 0x80
1000175a:	0452      	lsls	r2, r2, #17
1000175c:	4313      	orrs	r3, r2
1000175e:	60fb      	str	r3, [r7, #12]
10001760:	e003      	b.n	1000176a <XMC_CCU4_SLICE_ModulationConfig+0x62>
  }
  else
  {
    tc &= ~((uint32_t) CCU4_CC4_TC_EMT_Msk);
10001762:	68fb      	ldr	r3, [r7, #12]
10001764:	4a0c      	ldr	r2, [pc, #48]	; (10001798 <XMC_CCU4_SLICE_ModulationConfig+0x90>)
10001766:	4013      	ands	r3, r2
10001768:	60fb      	str	r3, [r7, #12]
  }

  /* Synchronization of modulation effect with PWM cycle */
  if (synch_with_pwm == (bool) true)
1000176a:	1c7b      	adds	r3, r7, #1
1000176c:	781b      	ldrb	r3, [r3, #0]
1000176e:	2b00      	cmp	r3, #0
10001770:	d005      	beq.n	1000177e <XMC_CCU4_SLICE_ModulationConfig+0x76>
  {
    tc |= (uint32_t) CCU4_CC4_TC_EMS_Msk;
10001772:	68fb      	ldr	r3, [r7, #12]
10001774:	2280      	movs	r2, #128	; 0x80
10001776:	0412      	lsls	r2, r2, #16
10001778:	4313      	orrs	r3, r2
1000177a:	60fb      	str	r3, [r7, #12]
1000177c:	e003      	b.n	10001786 <XMC_CCU4_SLICE_ModulationConfig+0x7e>
  }
  else
  {
    tc &= ~((uint32_t) CCU4_CC4_TC_EMS_Msk);
1000177e:	68fb      	ldr	r3, [r7, #12]
10001780:	4a06      	ldr	r2, [pc, #24]	; (1000179c <XMC_CCU4_SLICE_ModulationConfig+0x94>)
10001782:	4013      	ands	r3, r2
10001784:	60fb      	str	r3, [r7, #12]
  }
  
  slice->TC = tc;
10001786:	687b      	ldr	r3, [r7, #4]
10001788:	68fa      	ldr	r2, [r7, #12]
1000178a:	615a      	str	r2, [r3, #20]
}
1000178c:	46bd      	mov	sp, r7
1000178e:	b005      	add	sp, #20
10001790:	bd90      	pop	{r4, r7, pc}
10001792:	46c0      	nop			; (mov r8, r8)
10001794:	fff3ffff 	.word	0xfff3ffff
10001798:	feffffff 	.word	0xfeffffff
1000179c:	ff7fffff 	.word	0xff7fffff

100017a0 <XMC_CCU4_SLICE_CountConfig>:

/* API to configure the slice count function */
void XMC_CCU4_SLICE_CountConfig(XMC_CCU4_SLICE_t *const slice, const XMC_CCU4_SLICE_EVENT_t event)
{
100017a0:	b580      	push	{r7, lr}
100017a2:	b084      	sub	sp, #16
100017a4:	af00      	add	r7, sp, #0
100017a6:	6078      	str	r0, [r7, #4]
100017a8:	1c0a      	adds	r2, r1, #0
100017aa:	1cfb      	adds	r3, r7, #3
100017ac:	701a      	strb	r2, [r3, #0]
  
  XMC_ASSERT("XMC_CCU4_SLICE_CountConfig:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_CountConfig:Invalid Event ID", XMC_CCU4_SLICE_CHECK_EVENT_ID(event));

  /* Bind the event with the count function */
  cmc = slice->CMC;
100017ae:	687b      	ldr	r3, [r7, #4]
100017b0:	685b      	ldr	r3, [r3, #4]
100017b2:	60fb      	str	r3, [r7, #12]
  cmc &= ~((uint32_t) CCU4_CC4_CMC_CNTS_Msk);
100017b4:	68fb      	ldr	r3, [r7, #12]
100017b6:	4a07      	ldr	r2, [pc, #28]	; (100017d4 <XMC_CCU4_SLICE_CountConfig+0x34>)
100017b8:	4013      	ands	r3, r2
100017ba:	60fb      	str	r3, [r7, #12]
  cmc |= ((uint32_t) event) << CCU4_CC4_CMC_CNTS_Pos;
100017bc:	1cfb      	adds	r3, r7, #3
100017be:	781b      	ldrb	r3, [r3, #0]
100017c0:	039b      	lsls	r3, r3, #14
100017c2:	68fa      	ldr	r2, [r7, #12]
100017c4:	4313      	orrs	r3, r2
100017c6:	60fb      	str	r3, [r7, #12]

  slice->CMC = cmc;
100017c8:	687b      	ldr	r3, [r7, #4]
100017ca:	68fa      	ldr	r2, [r7, #12]
100017cc:	605a      	str	r2, [r3, #4]
}
100017ce:	46bd      	mov	sp, r7
100017d0:	b004      	add	sp, #16
100017d2:	bd80      	pop	{r7, pc}
100017d4:	ffff3fff 	.word	0xffff3fff

100017d8 <XMC_CCU4_SLICE_GateConfig>:

/* API to configure slice gate function */
void XMC_CCU4_SLICE_GateConfig(XMC_CCU4_SLICE_t *const slice, const XMC_CCU4_SLICE_EVENT_t event)
{
100017d8:	b580      	push	{r7, lr}
100017da:	b084      	sub	sp, #16
100017dc:	af00      	add	r7, sp, #0
100017de:	6078      	str	r0, [r7, #4]
100017e0:	1c0a      	adds	r2, r1, #0
100017e2:	1cfb      	adds	r3, r7, #3
100017e4:	701a      	strb	r2, [r3, #0]
  
  XMC_ASSERT("XMC_CCU4_SLICE_GateConfig:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_GateConfig:Invalid Event ID", XMC_CCU4_SLICE_CHECK_EVENT_ID(event));
  
  /* Bind the event with the gate function */
  cmc = slice->CMC;
100017e6:	687b      	ldr	r3, [r7, #4]
100017e8:	685b      	ldr	r3, [r3, #4]
100017ea:	60fb      	str	r3, [r7, #12]
  cmc &= ~((uint32_t) CCU4_CC4_CMC_GATES_Msk);
100017ec:	68fb      	ldr	r3, [r7, #12]
100017ee:	4a07      	ldr	r2, [pc, #28]	; (1000180c <XMC_CCU4_SLICE_GateConfig+0x34>)
100017f0:	4013      	ands	r3, r2
100017f2:	60fb      	str	r3, [r7, #12]
  cmc |= ((uint32_t) event) << CCU4_CC4_CMC_GATES_Pos;
100017f4:	1cfb      	adds	r3, r7, #3
100017f6:	781b      	ldrb	r3, [r3, #0]
100017f8:	021b      	lsls	r3, r3, #8
100017fa:	68fa      	ldr	r2, [r7, #12]
100017fc:	4313      	orrs	r3, r2
100017fe:	60fb      	str	r3, [r7, #12]

  slice->CMC = cmc;
10001800:	687b      	ldr	r3, [r7, #4]
10001802:	68fa      	ldr	r2, [r7, #12]
10001804:	605a      	str	r2, [r3, #4]
}
10001806:	46bd      	mov	sp, r7
10001808:	b004      	add	sp, #16
1000180a:	bd80      	pop	{r7, pc}
1000180c:	fffffcff 	.word	0xfffffcff

10001810 <XMC_CCU4_SLICE_DirectionConfig>:
  slice->CMC = cmc;
}

/* API to configure direction function */
void XMC_CCU4_SLICE_DirectionConfig(XMC_CCU4_SLICE_t *const slice, const XMC_CCU4_SLICE_EVENT_t event)
{
10001810:	b580      	push	{r7, lr}
10001812:	b084      	sub	sp, #16
10001814:	af00      	add	r7, sp, #0
10001816:	6078      	str	r0, [r7, #4]
10001818:	1c0a      	adds	r2, r1, #0
1000181a:	1cfb      	adds	r3, r7, #3
1000181c:	701a      	strb	r2, [r3, #0]
  
  XMC_ASSERT("XMC_CCU4_SLICE_DirectionConfig:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_DirectionConfig:Invalid Event ID", XMC_CCU4_SLICE_CHECK_EVENT_ID(event));
  
  /* Bind the event with the direction function */
  cmc = slice->CMC;
1000181e:	687b      	ldr	r3, [r7, #4]
10001820:	685b      	ldr	r3, [r3, #4]
10001822:	60fb      	str	r3, [r7, #12]
  cmc &= ~((uint32_t) CCU4_CC4_CMC_UDS_Msk);
10001824:	68fb      	ldr	r3, [r7, #12]
10001826:	4a07      	ldr	r2, [pc, #28]	; (10001844 <XMC_CCU4_SLICE_DirectionConfig+0x34>)
10001828:	4013      	ands	r3, r2
1000182a:	60fb      	str	r3, [r7, #12]
  cmc |= ((uint32_t) event) << CCU4_CC4_CMC_UDS_Pos;
1000182c:	1cfb      	adds	r3, r7, #3
1000182e:	781b      	ldrb	r3, [r3, #0]
10001830:	029b      	lsls	r3, r3, #10
10001832:	68fa      	ldr	r2, [r7, #12]
10001834:	4313      	orrs	r3, r2
10001836:	60fb      	str	r3, [r7, #12]
  
  slice->CMC = cmc;
10001838:	687b      	ldr	r3, [r7, #4]
1000183a:	68fa      	ldr	r2, [r7, #12]
1000183c:	605a      	str	r2, [r3, #4]
}
1000183e:	46bd      	mov	sp, r7
10001840:	b004      	add	sp, #16
10001842:	bd80      	pop	{r7, pc}
10001844:	fffff3ff 	.word	0xfffff3ff

10001848 <XMC_CCU4_SLICE_StatusBitOverrideConfig>:

/* API to configure slice status bit override function */
void XMC_CCU4_SLICE_StatusBitOverrideConfig(XMC_CCU4_SLICE_t *const slice)
{
10001848:	b580      	push	{r7, lr}
1000184a:	b084      	sub	sp, #16
1000184c:	af00      	add	r7, sp, #0
1000184e:	6078      	str	r0, [r7, #4]
  uint32_t cmc;
  
  XMC_ASSERT("XMC_CCU4_SLICE_StatusBitOverrideConfig:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  
  /* Bind the event with the override function */
  cmc = slice->CMC;
10001850:	687b      	ldr	r3, [r7, #4]
10001852:	685b      	ldr	r3, [r3, #4]
10001854:	60fb      	str	r3, [r7, #12]
  /* Map status bit trigger override to Event 1 & 
         status bit value override to Event 2 */
  cmc &= ~((uint32_t) CCU4_CC4_CMC_OFS_Msk);
10001856:	68fb      	ldr	r3, [r7, #12]
10001858:	4a06      	ldr	r2, [pc, #24]	; (10001874 <XMC_CCU4_SLICE_StatusBitOverrideConfig+0x2c>)
1000185a:	4013      	ands	r3, r2
1000185c:	60fb      	str	r3, [r7, #12]
  cmc |= ((uint32_t) 1) << CCU4_CC4_CMC_OFS_Pos;
1000185e:	68fb      	ldr	r3, [r7, #12]
10001860:	2280      	movs	r2, #128	; 0x80
10001862:	0252      	lsls	r2, r2, #9
10001864:	4313      	orrs	r3, r2
10001866:	60fb      	str	r3, [r7, #12]

  slice->CMC = cmc;
10001868:	687b      	ldr	r3, [r7, #4]
1000186a:	68fa      	ldr	r2, [r7, #12]
1000186c:	605a      	str	r2, [r3, #4]
}
1000186e:	46bd      	mov	sp, r7
10001870:	b004      	add	sp, #16
10001872:	bd80      	pop	{r7, pc}
10001874:	fffeffff 	.word	0xfffeffff

10001878 <XMC_CCU4_SLICE_TrapConfig>:

/* API to configure trap function */
void XMC_CCU4_SLICE_TrapConfig(XMC_CCU4_SLICE_t *const slice,
                               const XMC_CCU4_SLICE_TRAP_EXIT_MODE_t exit_mode,
                               const bool synch_with_pwm)
{
10001878:	b580      	push	{r7, lr}
1000187a:	b084      	sub	sp, #16
1000187c:	af00      	add	r7, sp, #0
1000187e:	6078      	str	r0, [r7, #4]
10001880:	1c08      	adds	r0, r1, #0
10001882:	1c11      	adds	r1, r2, #0
10001884:	1cfb      	adds	r3, r7, #3
10001886:	1c02      	adds	r2, r0, #0
10001888:	701a      	strb	r2, [r3, #0]
1000188a:	1cbb      	adds	r3, r7, #2
1000188c:	1c0a      	adds	r2, r1, #0
1000188e:	701a      	strb	r2, [r3, #0]
  XMC_ASSERT("XMC_CCU4_SLICE_TrapConfig:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_TrapConfig:Invalid Exit Mode", ((exit_mode == XMC_CCU4_SLICE_TRAP_EXIT_MODE_AUTOMATIC) ||\
                                                             (exit_mode == XMC_CCU4_SLICE_TRAP_EXIT_MODE_SW)));
    
  /* First, Map trap function to Event 2 */
  cmc = slice->CMC;
10001890:	687b      	ldr	r3, [r7, #4]
10001892:	685b      	ldr	r3, [r3, #4]
10001894:	60bb      	str	r3, [r7, #8]
  cmc &= ~((uint32_t) CCU4_CC4_CMC_TS_Msk);
10001896:	68bb      	ldr	r3, [r7, #8]
10001898:	4a17      	ldr	r2, [pc, #92]	; (100018f8 <XMC_CCU4_SLICE_TrapConfig+0x80>)
1000189a:	4013      	ands	r3, r2
1000189c:	60bb      	str	r3, [r7, #8]
  cmc |= ((uint32_t) 1) << CCU4_CC4_CMC_TS_Pos;
1000189e:	68bb      	ldr	r3, [r7, #8]
100018a0:	2280      	movs	r2, #128	; 0x80
100018a2:	0292      	lsls	r2, r2, #10
100018a4:	4313      	orrs	r3, r2
100018a6:	60bb      	str	r3, [r7, #8]
  slice->CMC = cmc;
100018a8:	687b      	ldr	r3, [r7, #4]
100018aa:	68ba      	ldr	r2, [r7, #8]
100018ac:	605a      	str	r2, [r3, #4]
  
  /* Next, Configure synchronization option */
  tc = slice->TC;
100018ae:	687b      	ldr	r3, [r7, #4]
100018b0:	695b      	ldr	r3, [r3, #20]
100018b2:	60fb      	str	r3, [r7, #12]

  if (synch_with_pwm == (bool) true)
100018b4:	1cbb      	adds	r3, r7, #2
100018b6:	781b      	ldrb	r3, [r3, #0]
100018b8:	2b00      	cmp	r3, #0
100018ba:	d005      	beq.n	100018c8 <XMC_CCU4_SLICE_TrapConfig+0x50>
  {
    tc |= (uint32_t) CCU4_CC4_TC_TRPSE_Msk;
100018bc:	68fb      	ldr	r3, [r7, #12]
100018be:	2280      	movs	r2, #128	; 0x80
100018c0:	0392      	lsls	r2, r2, #14
100018c2:	4313      	orrs	r3, r2
100018c4:	60fb      	str	r3, [r7, #12]
100018c6:	e003      	b.n	100018d0 <XMC_CCU4_SLICE_TrapConfig+0x58>
  }
  else
  {
    tc &= ~((uint32_t) CCU4_CC4_TC_TRPSE_Msk);
100018c8:	68fb      	ldr	r3, [r7, #12]
100018ca:	4a0c      	ldr	r2, [pc, #48]	; (100018fc <XMC_CCU4_SLICE_TrapConfig+0x84>)
100018cc:	4013      	ands	r3, r2
100018ce:	60fb      	str	r3, [r7, #12]
  }
  
  /* Configure exit mode */
  if (exit_mode == XMC_CCU4_SLICE_TRAP_EXIT_MODE_SW)
100018d0:	1cfb      	adds	r3, r7, #3
100018d2:	781b      	ldrb	r3, [r3, #0]
100018d4:	2b01      	cmp	r3, #1
100018d6:	d105      	bne.n	100018e4 <XMC_CCU4_SLICE_TrapConfig+0x6c>
  {
    tc |= (uint32_t) CCU4_CC4_TC_TRPSW_Msk;
100018d8:	68fb      	ldr	r3, [r7, #12]
100018da:	2280      	movs	r2, #128	; 0x80
100018dc:	03d2      	lsls	r2, r2, #15
100018de:	4313      	orrs	r3, r2
100018e0:	60fb      	str	r3, [r7, #12]
100018e2:	e003      	b.n	100018ec <XMC_CCU4_SLICE_TrapConfig+0x74>
  }
  else
  {
    tc &= ~((uint32_t) CCU4_CC4_TC_TRPSW_Msk);
100018e4:	68fb      	ldr	r3, [r7, #12]
100018e6:	4a06      	ldr	r2, [pc, #24]	; (10001900 <XMC_CCU4_SLICE_TrapConfig+0x88>)
100018e8:	4013      	ands	r3, r2
100018ea:	60fb      	str	r3, [r7, #12]
  }
  
  slice->TC = tc;
100018ec:	687b      	ldr	r3, [r7, #4]
100018ee:	68fa      	ldr	r2, [r7, #12]
100018f0:	615a      	str	r2, [r3, #20]
}
100018f2:	46bd      	mov	sp, r7
100018f4:	b004      	add	sp, #16
100018f6:	bd80      	pop	{r7, pc}
100018f8:	fffdffff 	.word	0xfffdffff
100018fc:	ffdfffff 	.word	0xffdfffff
10001900:	ffbfffff 	.word	0xffbfffff

10001904 <XMC_CCU4_SLICE_ConfigureStatusBitOverrideEvent>:

/* API to configure a slice Status Bit Override event */
void XMC_CCU4_SLICE_ConfigureStatusBitOverrideEvent(XMC_CCU4_SLICE_t *const slice,
                                                    const XMC_CCU4_SLICE_EVENT_CONFIG_t *const ev1_config,
                                                    const XMC_CCU4_SLICE_EVENT_CONFIG_t *const ev2_config)
{
10001904:	b580      	push	{r7, lr}
10001906:	b086      	sub	sp, #24
10001908:	af00      	add	r7, sp, #0
1000190a:	60f8      	str	r0, [r7, #12]
1000190c:	60b9      	str	r1, [r7, #8]
1000190e:	607a      	str	r2, [r7, #4]
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_INPUT_CONFIG_MASK) << CCU4_CC4_INS1_EV2IS_Pos);
  ins |= ((uint32_t) ev2_config->mapped_input) << CCU4_CC4_INS1_EV2IS_Pos;
  
  slice->INS1 = ins;
#else
  ins = slice->INS;
10001910:	68fb      	ldr	r3, [r7, #12]
10001912:	681b      	ldr	r3, [r3, #0]
10001914:	617b      	str	r3, [r7, #20]

  /* Configure the edge sensitivity for event 1 */
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_EDGE_CONFIG_MASK) << CCU4_CC4_INS_EV1EM_Pos);
10001916:	697b      	ldr	r3, [r7, #20]
10001918:	4a2a      	ldr	r2, [pc, #168]	; (100019c4 <XMC_CCU4_SLICE_ConfigureStatusBitOverrideEvent+0xc0>)
1000191a:	4013      	ands	r3, r2
1000191c:	617b      	str	r3, [r7, #20]
  ins |= ((uint32_t) ev1_config->edge) << CCU4_CC4_INS_EV1EM_Pos;
1000191e:	68bb      	ldr	r3, [r7, #8]
10001920:	785b      	ldrb	r3, [r3, #1]
10001922:	049b      	lsls	r3, r3, #18
10001924:	697a      	ldr	r2, [r7, #20]
10001926:	4313      	orrs	r3, r2
10001928:	617b      	str	r3, [r7, #20]
  
  /* Configure the edge sensitivity for event 2 */
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_EDGE_CONFIG_MASK) << CCU4_CC4_INS_EV2EM_Pos);
1000192a:	697b      	ldr	r3, [r7, #20]
1000192c:	4a26      	ldr	r2, [pc, #152]	; (100019c8 <XMC_CCU4_SLICE_ConfigureStatusBitOverrideEvent+0xc4>)
1000192e:	4013      	ands	r3, r2
10001930:	617b      	str	r3, [r7, #20]
  ins |= ((uint32_t) ev2_config->edge) << CCU4_CC4_INS_EV2EM_Pos;
10001932:	687b      	ldr	r3, [r7, #4]
10001934:	785b      	ldrb	r3, [r3, #1]
10001936:	051b      	lsls	r3, r3, #20
10001938:	697a      	ldr	r2, [r7, #20]
1000193a:	4313      	orrs	r3, r2
1000193c:	617b      	str	r3, [r7, #20]
  
  /* Configure the level sensitivity for event 1 */
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_LEVEL_CONFIG_MASK) << CCU4_CC4_INS_EV1LM_Pos);
1000193e:	697b      	ldr	r3, [r7, #20]
10001940:	4a22      	ldr	r2, [pc, #136]	; (100019cc <XMC_CCU4_SLICE_ConfigureStatusBitOverrideEvent+0xc8>)
10001942:	4013      	ands	r3, r2
10001944:	617b      	str	r3, [r7, #20]
  ins |= ((uint32_t) ev1_config->level) << CCU4_CC4_INS_EV1LM_Pos;
10001946:	68bb      	ldr	r3, [r7, #8]
10001948:	789b      	ldrb	r3, [r3, #2]
1000194a:	05db      	lsls	r3, r3, #23
1000194c:	697a      	ldr	r2, [r7, #20]
1000194e:	4313      	orrs	r3, r2
10001950:	617b      	str	r3, [r7, #20]
  
  /* Configure the level sensitivity for event 2 */
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_LEVEL_CONFIG_MASK) << CCU4_CC4_INS_EV2LM_Pos);
10001952:	697b      	ldr	r3, [r7, #20]
10001954:	4a1e      	ldr	r2, [pc, #120]	; (100019d0 <XMC_CCU4_SLICE_ConfigureStatusBitOverrideEvent+0xcc>)
10001956:	4013      	ands	r3, r2
10001958:	617b      	str	r3, [r7, #20]
  ins |= ((uint32_t) ev2_config->level) << CCU4_CC4_INS_EV2LM_Pos;
1000195a:	687b      	ldr	r3, [r7, #4]
1000195c:	789b      	ldrb	r3, [r3, #2]
1000195e:	061b      	lsls	r3, r3, #24
10001960:	697a      	ldr	r2, [r7, #20]
10001962:	4313      	orrs	r3, r2
10001964:	617b      	str	r3, [r7, #20]
  
  /* Configure the debounce filter for event 1 */
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_FILTER_CONFIG_MASK) << CCU4_CC4_INS_LPF1M_Pos);
10001966:	697b      	ldr	r3, [r7, #20]
10001968:	4a1a      	ldr	r2, [pc, #104]	; (100019d4 <XMC_CCU4_SLICE_ConfigureStatusBitOverrideEvent+0xd0>)
1000196a:	4013      	ands	r3, r2
1000196c:	617b      	str	r3, [r7, #20]
  ins |= ((uint32_t) ev1_config->duration) << CCU4_CC4_INS_LPF1M_Pos;
1000196e:	68bb      	ldr	r3, [r7, #8]
10001970:	78db      	ldrb	r3, [r3, #3]
10001972:	06db      	lsls	r3, r3, #27
10001974:	697a      	ldr	r2, [r7, #20]
10001976:	4313      	orrs	r3, r2
10001978:	617b      	str	r3, [r7, #20]

  /* Configure the debounce filter for event 2 */
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_FILTER_CONFIG_MASK) << CCU4_CC4_INS_LPF2M_Pos);
1000197a:	697b      	ldr	r3, [r7, #20]
1000197c:	4a16      	ldr	r2, [pc, #88]	; (100019d8 <XMC_CCU4_SLICE_ConfigureStatusBitOverrideEvent+0xd4>)
1000197e:	4013      	ands	r3, r2
10001980:	617b      	str	r3, [r7, #20]
  ins |= ((uint32_t) ev2_config->duration) << CCU4_CC4_INS_LPF2M_Pos;
10001982:	687b      	ldr	r3, [r7, #4]
10001984:	78db      	ldrb	r3, [r3, #3]
10001986:	075b      	lsls	r3, r3, #29
10001988:	697a      	ldr	r2, [r7, #20]
1000198a:	4313      	orrs	r3, r2
1000198c:	617b      	str	r3, [r7, #20]
  
  /* Next, the input for Event1 */
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_INPUT_CONFIG_MASK) << CCU4_CC4_INS_EV1IS_Pos);
1000198e:	697b      	ldr	r3, [r7, #20]
10001990:	22f0      	movs	r2, #240	; 0xf0
10001992:	4393      	bics	r3, r2
10001994:	617b      	str	r3, [r7, #20]
  ins |= ((uint32_t) ev1_config->mapped_input) << CCU4_CC4_INS_EV1IS_Pos;
10001996:	68bb      	ldr	r3, [r7, #8]
10001998:	781b      	ldrb	r3, [r3, #0]
1000199a:	011b      	lsls	r3, r3, #4
1000199c:	697a      	ldr	r2, [r7, #20]
1000199e:	4313      	orrs	r3, r2
100019a0:	617b      	str	r3, [r7, #20]

  /* Finally, the input for Event2 */
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_INPUT_CONFIG_MASK) << CCU4_CC4_INS_EV2IS_Pos);
100019a2:	697b      	ldr	r3, [r7, #20]
100019a4:	4a0d      	ldr	r2, [pc, #52]	; (100019dc <XMC_CCU4_SLICE_ConfigureStatusBitOverrideEvent+0xd8>)
100019a6:	4013      	ands	r3, r2
100019a8:	617b      	str	r3, [r7, #20]
  ins |= ((uint32_t) ev2_config->mapped_input) << CCU4_CC4_INS_EV2IS_Pos;
100019aa:	687b      	ldr	r3, [r7, #4]
100019ac:	781b      	ldrb	r3, [r3, #0]
100019ae:	021b      	lsls	r3, r3, #8
100019b0:	697a      	ldr	r2, [r7, #20]
100019b2:	4313      	orrs	r3, r2
100019b4:	617b      	str	r3, [r7, #20]
  
  slice->INS = ins;
100019b6:	68fb      	ldr	r3, [r7, #12]
100019b8:	697a      	ldr	r2, [r7, #20]
100019ba:	601a      	str	r2, [r3, #0]
#endif
}
100019bc:	46bd      	mov	sp, r7
100019be:	b006      	add	sp, #24
100019c0:	bd80      	pop	{r7, pc}
100019c2:	46c0      	nop			; (mov r8, r8)
100019c4:	fff3ffff 	.word	0xfff3ffff
100019c8:	ffcfffff 	.word	0xffcfffff
100019cc:	ff7fffff 	.word	0xff7fffff
100019d0:	feffffff 	.word	0xfeffffff
100019d4:	e7ffffff 	.word	0xe7ffffff
100019d8:	9fffffff 	.word	0x9fffffff
100019dc:	fffff0ff 	.word	0xfffff0ff

100019e0 <XMC_CCU4_SLICE_ConfigureEvent>:

/* API to configure a slice trigger event */
void XMC_CCU4_SLICE_ConfigureEvent(XMC_CCU4_SLICE_t *const slice,
                                   const XMC_CCU4_SLICE_EVENT_t event,
                                   const XMC_CCU4_SLICE_EVENT_CONFIG_t *const config)
{
100019e0:	b580      	push	{r7, lr}
100019e2:	b088      	sub	sp, #32
100019e4:	af00      	add	r7, sp, #0
100019e6:	60f8      	str	r0, [r7, #12]
100019e8:	607a      	str	r2, [r7, #4]
100019ea:	230b      	movs	r3, #11
100019ec:	18fb      	adds	r3, r7, r3
100019ee:	1c0a      	adds	r2, r1, #0
100019f0:	701a      	strb	r2, [r3, #0]
             ((config->level == XMC_CCU4_SLICE_EVENT_LEVEL_SENSITIVITY_ACTIVE_HIGH) ||\
              (config->level == XMC_CCU4_SLICE_EVENT_LEVEL_SENSITIVITY_ACTIVE_LOW)));
  XMC_ASSERT("XMC_CCU4_SLICE_ConfigureEvent:Invalid Debounce Period", 
             XMC_CCU4_SLICE_CHECK_EVENT_FILTER(config->duration));
  /* Calculate offset with reference to event */
  offset = ((uint8_t) event) - 1U;
100019f2:	231f      	movs	r3, #31
100019f4:	18fb      	adds	r3, r7, r3
100019f6:	220b      	movs	r2, #11
100019f8:	18ba      	adds	r2, r7, r2
100019fa:	7812      	ldrb	r2, [r2, #0]
100019fc:	3a01      	subs	r2, #1
100019fe:	701a      	strb	r2, [r3, #0]
  ins |= ((uint32_t) config->mapped_input) << pos;

  slice->INS1 = ins;

#else
  ins = slice->INS;
10001a00:	68fb      	ldr	r3, [r7, #12]
10001a02:	681b      	ldr	r3, [r3, #0]
10001a04:	61bb      	str	r3, [r7, #24]
  
  /* First, configure the edge sensitivity */
  pos = ((uint8_t) CCU4_CC4_INS_EV0EM_Pos) + (uint8_t)(offset << 1U);
10001a06:	231f      	movs	r3, #31
10001a08:	18fb      	adds	r3, r7, r3
10001a0a:	781b      	ldrb	r3, [r3, #0]
10001a0c:	18db      	adds	r3, r3, r3
10001a0e:	b2da      	uxtb	r2, r3
10001a10:	2317      	movs	r3, #23
10001a12:	18fb      	adds	r3, r7, r3
10001a14:	3210      	adds	r2, #16
10001a16:	701a      	strb	r2, [r3, #0]
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_EDGE_CONFIG_MASK) << pos);
10001a18:	2317      	movs	r3, #23
10001a1a:	18fb      	adds	r3, r7, r3
10001a1c:	781b      	ldrb	r3, [r3, #0]
10001a1e:	2203      	movs	r2, #3
10001a20:	409a      	lsls	r2, r3
10001a22:	1c13      	adds	r3, r2, #0
10001a24:	43da      	mvns	r2, r3
10001a26:	69bb      	ldr	r3, [r7, #24]
10001a28:	4013      	ands	r3, r2
10001a2a:	61bb      	str	r3, [r7, #24]
  ins |= ((uint32_t) config->edge) << pos;
10001a2c:	687b      	ldr	r3, [r7, #4]
10001a2e:	785b      	ldrb	r3, [r3, #1]
10001a30:	1c1a      	adds	r2, r3, #0
10001a32:	2317      	movs	r3, #23
10001a34:	18fb      	adds	r3, r7, r3
10001a36:	781b      	ldrb	r3, [r3, #0]
10001a38:	409a      	lsls	r2, r3
10001a3a:	1c13      	adds	r3, r2, #0
10001a3c:	69ba      	ldr	r2, [r7, #24]
10001a3e:	4313      	orrs	r3, r2
10001a40:	61bb      	str	r3, [r7, #24]
  
  /* Next, the level */
  pos = ((uint8_t) CCU4_CC4_INS_EV0LM_Pos) + offset;
10001a42:	2317      	movs	r3, #23
10001a44:	18fb      	adds	r3, r7, r3
10001a46:	221f      	movs	r2, #31
10001a48:	18ba      	adds	r2, r7, r2
10001a4a:	7812      	ldrb	r2, [r2, #0]
10001a4c:	3216      	adds	r2, #22
10001a4e:	701a      	strb	r2, [r3, #0]
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_LEVEL_CONFIG_MASK) << pos);
10001a50:	2317      	movs	r3, #23
10001a52:	18fb      	adds	r3, r7, r3
10001a54:	781b      	ldrb	r3, [r3, #0]
10001a56:	2201      	movs	r2, #1
10001a58:	409a      	lsls	r2, r3
10001a5a:	1c13      	adds	r3, r2, #0
10001a5c:	43da      	mvns	r2, r3
10001a5e:	69bb      	ldr	r3, [r7, #24]
10001a60:	4013      	ands	r3, r2
10001a62:	61bb      	str	r3, [r7, #24]
  ins |= ((uint32_t) config->level) << pos;
10001a64:	687b      	ldr	r3, [r7, #4]
10001a66:	789b      	ldrb	r3, [r3, #2]
10001a68:	1c1a      	adds	r2, r3, #0
10001a6a:	2317      	movs	r3, #23
10001a6c:	18fb      	adds	r3, r7, r3
10001a6e:	781b      	ldrb	r3, [r3, #0]
10001a70:	409a      	lsls	r2, r3
10001a72:	1c13      	adds	r3, r2, #0
10001a74:	69ba      	ldr	r2, [r7, #24]
10001a76:	4313      	orrs	r3, r2
10001a78:	61bb      	str	r3, [r7, #24]
  
  /* Next, the debounce filter */
  pos = ((uint8_t) CCU4_CC4_INS_LPF0M_Pos) + (uint8_t)(offset << 1U);
10001a7a:	231f      	movs	r3, #31
10001a7c:	18fb      	adds	r3, r7, r3
10001a7e:	781b      	ldrb	r3, [r3, #0]
10001a80:	18db      	adds	r3, r3, r3
10001a82:	b2da      	uxtb	r2, r3
10001a84:	2317      	movs	r3, #23
10001a86:	18fb      	adds	r3, r7, r3
10001a88:	3219      	adds	r2, #25
10001a8a:	701a      	strb	r2, [r3, #0]
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_FILTER_CONFIG_MASK) << pos);
10001a8c:	2317      	movs	r3, #23
10001a8e:	18fb      	adds	r3, r7, r3
10001a90:	781b      	ldrb	r3, [r3, #0]
10001a92:	2203      	movs	r2, #3
10001a94:	409a      	lsls	r2, r3
10001a96:	1c13      	adds	r3, r2, #0
10001a98:	43da      	mvns	r2, r3
10001a9a:	69bb      	ldr	r3, [r7, #24]
10001a9c:	4013      	ands	r3, r2
10001a9e:	61bb      	str	r3, [r7, #24]
  ins |= ((uint32_t) config->duration) << pos;
10001aa0:	687b      	ldr	r3, [r7, #4]
10001aa2:	78db      	ldrb	r3, [r3, #3]
10001aa4:	1c1a      	adds	r2, r3, #0
10001aa6:	2317      	movs	r3, #23
10001aa8:	18fb      	adds	r3, r7, r3
10001aaa:	781b      	ldrb	r3, [r3, #0]
10001aac:	409a      	lsls	r2, r3
10001aae:	1c13      	adds	r3, r2, #0
10001ab0:	69ba      	ldr	r2, [r7, #24]
10001ab2:	4313      	orrs	r3, r2
10001ab4:	61bb      	str	r3, [r7, #24]

  /* Finally the input */
  pos = ((uint8_t) CCU4_CC4_INS_EV0IS_Pos) + (uint8_t)(offset << 2U);
10001ab6:	2317      	movs	r3, #23
10001ab8:	18fb      	adds	r3, r7, r3
10001aba:	221f      	movs	r2, #31
10001abc:	18ba      	adds	r2, r7, r2
10001abe:	7812      	ldrb	r2, [r2, #0]
10001ac0:	0092      	lsls	r2, r2, #2
10001ac2:	701a      	strb	r2, [r3, #0]
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_INPUT_CONFIG_MASK) << pos);
10001ac4:	2317      	movs	r3, #23
10001ac6:	18fb      	adds	r3, r7, r3
10001ac8:	781b      	ldrb	r3, [r3, #0]
10001aca:	220f      	movs	r2, #15
10001acc:	409a      	lsls	r2, r3
10001ace:	1c13      	adds	r3, r2, #0
10001ad0:	43da      	mvns	r2, r3
10001ad2:	69bb      	ldr	r3, [r7, #24]
10001ad4:	4013      	ands	r3, r2
10001ad6:	61bb      	str	r3, [r7, #24]
  ins |= ((uint32_t) config->mapped_input) << pos;
10001ad8:	687b      	ldr	r3, [r7, #4]
10001ada:	781b      	ldrb	r3, [r3, #0]
10001adc:	1c1a      	adds	r2, r3, #0
10001ade:	2317      	movs	r3, #23
10001ae0:	18fb      	adds	r3, r7, r3
10001ae2:	781b      	ldrb	r3, [r3, #0]
10001ae4:	409a      	lsls	r2, r3
10001ae6:	1c13      	adds	r3, r2, #0
10001ae8:	69ba      	ldr	r2, [r7, #24]
10001aea:	4313      	orrs	r3, r2
10001aec:	61bb      	str	r3, [r7, #24]

  slice->INS = ins;
10001aee:	68fb      	ldr	r3, [r7, #12]
10001af0:	69ba      	ldr	r2, [r7, #24]
10001af2:	601a      	str	r2, [r3, #0]
#endif
}
10001af4:	46bd      	mov	sp, r7
10001af6:	b008      	add	sp, #32
10001af8:	bd80      	pop	{r7, pc}
10001afa:	46c0      	nop			; (mov r8, r8)

10001afc <XMC_CCU4_SLICE_SetInterruptNode>:

/* Binds a capcom event to an NVIC node  */
void XMC_CCU4_SLICE_SetInterruptNode(XMC_CCU4_SLICE_t *const slice,
                                     const XMC_CCU4_SLICE_IRQ_ID_t event,
                                     const XMC_CCU4_SLICE_SR_ID_t sr)
{
10001afc:	b580      	push	{r7, lr}
10001afe:	b086      	sub	sp, #24
10001b00:	af00      	add	r7, sp, #0
10001b02:	6078      	str	r0, [r7, #4]
10001b04:	1c08      	adds	r0, r1, #0
10001b06:	1c11      	adds	r1, r2, #0
10001b08:	1cfb      	adds	r3, r7, #3
10001b0a:	1c02      	adds	r2, r0, #0
10001b0c:	701a      	strb	r2, [r3, #0]
10001b0e:	1cbb      	adds	r3, r7, #2
10001b10:	1c0a      	adds	r2, r1, #0
10001b12:	701a      	strb	r2, [r3, #0]

  XMC_ASSERT("XMC_CCU4_SLICE_SetInterruptNode:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_SetInterruptNode:Invalid SR ID ", XMC_CCU4_SLICE_CHECK_SR_ID(sr));
  XMC_ASSERT("XMC_CCU4_SLICE_SetInterruptNode:Invalid event", XMC_CCU4_SLICE_CHECK_INTERRUPT(event));
  
  srs = slice->SRS;
10001b14:	687b      	ldr	r3, [r7, #4]
10001b16:	22a8      	movs	r2, #168	; 0xa8
10001b18:	589b      	ldr	r3, [r3, r2]
10001b1a:	60fb      	str	r3, [r7, #12]
  
  switch(event)
10001b1c:	1cfb      	adds	r3, r7, #3
10001b1e:	781b      	ldrb	r3, [r3, #0]
10001b20:	2b09      	cmp	r3, #9
10001b22:	d81a      	bhi.n	10001b5a <XMC_CCU4_SLICE_SetInterruptNode+0x5e>
10001b24:	009a      	lsls	r2, r3, #2
10001b26:	4b1a      	ldr	r3, [pc, #104]	; (10001b90 <XMC_CCU4_SLICE_SetInterruptNode+0x94>)
10001b28:	18d3      	adds	r3, r2, r3
10001b2a:	681b      	ldr	r3, [r3, #0]
10001b2c:	469f      	mov	pc, r3
  {
    case XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH:
    case XMC_CCU4_SLICE_IRQ_ID_ONE_MATCH:
      mask = ((uint32_t) CCU4_CC4_SRS_POSR_Msk);
10001b2e:	2303      	movs	r3, #3
10001b30:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_POSR_Pos;
10001b32:	2300      	movs	r3, #0
10001b34:	617b      	str	r3, [r7, #20]
      break;
10001b36:	e016      	b.n	10001b66 <XMC_CCU4_SLICE_SetInterruptNode+0x6a>

    case XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_UP:
    case XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_DOWN:
      mask = ((uint32_t) CCU4_CC4_SRS_CMSR_Msk);
10001b38:	230c      	movs	r3, #12
10001b3a:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_CMSR_Pos;
10001b3c:	2302      	movs	r3, #2
10001b3e:	617b      	str	r3, [r7, #20]
      break;
10001b40:	e011      	b.n	10001b66 <XMC_CCU4_SLICE_SetInterruptNode+0x6a>

    case XMC_CCU4_SLICE_IRQ_ID_EVENT0:
      mask = ((uint32_t) CCU4_CC4_SRS_E0SR_Msk);
10001b42:	23c0      	movs	r3, #192	; 0xc0
10001b44:	009b      	lsls	r3, r3, #2
10001b46:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_E0SR_Pos;
10001b48:	2308      	movs	r3, #8
10001b4a:	617b      	str	r3, [r7, #20]
      break;
10001b4c:	e00b      	b.n	10001b66 <XMC_CCU4_SLICE_SetInterruptNode+0x6a>

    case XMC_CCU4_SLICE_IRQ_ID_EVENT1:
      mask = ((uint32_t) CCU4_CC4_SRS_E1SR_Msk);
10001b4e:	23c0      	movs	r3, #192	; 0xc0
10001b50:	011b      	lsls	r3, r3, #4
10001b52:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_E1SR_Pos;
10001b54:	230a      	movs	r3, #10
10001b56:	617b      	str	r3, [r7, #20]
      break;
10001b58:	e005      	b.n	10001b66 <XMC_CCU4_SLICE_SetInterruptNode+0x6a>

    default:
      mask = ((uint32_t) CCU4_CC4_SRS_E2SR_Msk);
10001b5a:	23c0      	movs	r3, #192	; 0xc0
10001b5c:	019b      	lsls	r3, r3, #6
10001b5e:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_E2SR_Pos;
10001b60:	230c      	movs	r3, #12
10001b62:	617b      	str	r3, [r7, #20]
      break;
10001b64:	46c0      	nop			; (mov r8, r8)
  }
  
  srs &= ~mask; 
10001b66:	693b      	ldr	r3, [r7, #16]
10001b68:	43da      	mvns	r2, r3
10001b6a:	68fb      	ldr	r3, [r7, #12]
10001b6c:	4013      	ands	r3, r2
10001b6e:	60fb      	str	r3, [r7, #12]
  srs |= (uint32_t)sr << pos;
10001b70:	1cbb      	adds	r3, r7, #2
10001b72:	781a      	ldrb	r2, [r3, #0]
10001b74:	697b      	ldr	r3, [r7, #20]
10001b76:	409a      	lsls	r2, r3
10001b78:	1c13      	adds	r3, r2, #0
10001b7a:	68fa      	ldr	r2, [r7, #12]
10001b7c:	4313      	orrs	r3, r2
10001b7e:	60fb      	str	r3, [r7, #12]
  slice->SRS = srs;
10001b80:	687b      	ldr	r3, [r7, #4]
10001b82:	21a8      	movs	r1, #168	; 0xa8
10001b84:	68fa      	ldr	r2, [r7, #12]
10001b86:	505a      	str	r2, [r3, r1]
}
10001b88:	46bd      	mov	sp, r7
10001b8a:	b006      	add	sp, #24
10001b8c:	bd80      	pop	{r7, pc}
10001b8e:	46c0      	nop			; (mov r8, r8)
10001b90:	1000b1b8 	.word	0x1000b1b8

10001b94 <XMC_CCU8_StartPrescaler>:
 * \par<b>Related APIs:</b><br>
 * XMC_CCU8_Init()<BR>  XMC_CCU8_EnableClock()<BR>  XMC_CCU8_DisableClock()<BR>  XMC_CCU8_StartPrescaler()<BR> 
 *  XMC_CCU8_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU8_StartPrescaler(XMC_CCU8_MODULE_t *const module)
{
10001b94:	b580      	push	{r7, lr}
10001b96:	b082      	sub	sp, #8
10001b98:	af00      	add	r7, sp, #0
10001b9a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU8_StartPrescaler:Invalid Module Pointer", XMC_CCU8_IsValidModule(module));
  module->GIDLC |= (uint32_t) CCU8_GIDLC_SPRB_Msk;
10001b9c:	687b      	ldr	r3, [r7, #4]
10001b9e:	68db      	ldr	r3, [r3, #12]
10001ba0:	2280      	movs	r2, #128	; 0x80
10001ba2:	0052      	lsls	r2, r2, #1
10001ba4:	431a      	orrs	r2, r3
10001ba6:	687b      	ldr	r3, [r7, #4]
10001ba8:	60da      	str	r2, [r3, #12]
}
10001baa:	46bd      	mov	sp, r7
10001bac:	b002      	add	sp, #8
10001bae:	bd80      	pop	{r7, pc}

10001bb0 <XMC_CCU8_SLICE_StopTimer>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU8_SLICE_StartTimer().
 */
__STATIC_INLINE void XMC_CCU8_SLICE_StopTimer(XMC_CCU8_SLICE_t *const slice)
{
10001bb0:	b580      	push	{r7, lr}
10001bb2:	b082      	sub	sp, #8
10001bb4:	af00      	add	r7, sp, #0
10001bb6:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU8_SLICE_StopTimer:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  slice->TCCLR = (uint32_t) CCU8_CC8_TCCLR_TRBC_Msk;
10001bb8:	687b      	ldr	r3, [r7, #4]
10001bba:	2201      	movs	r2, #1
10001bbc:	611a      	str	r2, [r3, #16]
}
10001bbe:	46bd      	mov	sp, r7
10001bc0:	b002      	add	sp, #8
10001bc2:	bd80      	pop	{r7, pc}

10001bc4 <XMC_CCU8_lUngateClock>:
    XMC_ASSERT("XMC_CCU8_lGateClock:Invalid Module Pointer", 0);
  }
}

__STATIC_INLINE void XMC_CCU8_lUngateClock(XMC_CCU8_MODULE_t *const module)
{
10001bc4:	b580      	push	{r7, lr}
10001bc6:	b082      	sub	sp, #8
10001bc8:	af00      	add	r7, sp, #0
10001bca:	6078      	str	r0, [r7, #4]
  if (module == CCU80)
10001bcc:	687a      	ldr	r2, [r7, #4]
10001bce:	23a0      	movs	r3, #160	; 0xa0
10001bd0:	05db      	lsls	r3, r3, #23
10001bd2:	429a      	cmp	r2, r3
10001bd4:	d102      	bne.n	10001bdc <XMC_CCU8_lUngateClock+0x18>
  {
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_CCU80);
10001bd6:	2002      	movs	r0, #2
10001bd8:	f7ff fb92 	bl	10001300 <XMC_SCU_CLOCK_UngatePeripheralClock>
#endif
  else
  {
    XMC_ASSERT("XMC_CCU8_lUngateClock:Invalid Module Pointer", 0);
  }
}
10001bdc:	46bd      	mov	sp, r7
10001bde:	b002      	add	sp, #8
10001be0:	bd80      	pop	{r7, pc}
10001be2:	46c0      	nop			; (mov r8, r8)

10001be4 <XMC_CCU8_EnableModule>:
 * API IMPLEMENTATION
 ********************************************************************************************************************/

/* API to set the CCU8 module as active and enable the clock  */
void XMC_CCU8_EnableModule(XMC_CCU8_MODULE_t *const module)
{
10001be4:	b580      	push	{r7, lr}
10001be6:	b082      	sub	sp, #8
10001be8:	af00      	add	r7, sp, #0
10001bea:	6078      	str	r0, [r7, #4]
  /* Enable CCU8 module clock */
  XMC_SCU_CLOCK_EnableClock(XMC_SCU_CLOCK_CCU);
#endif

#if defined(CLOCK_GATING_SUPPORTED)
  XMC_CCU8_lUngateClock(module);
10001bec:	687b      	ldr	r3, [r7, #4]
10001bee:	1c18      	adds	r0, r3, #0
10001bf0:	f7ff ffe8 	bl	10001bc4 <XMC_CCU8_lUngateClock>
#endif

#if defined(PERIPHERAL_RESET_SUPPORTED)
  XMC_CCU8_lDeassertReset(module);
#endif
}
10001bf4:	46bd      	mov	sp, r7
10001bf6:	b002      	add	sp, #8
10001bf8:	bd80      	pop	{r7, pc}
10001bfa:	46c0      	nop			; (mov r8, r8)

10001bfc <XMC_CCU8_Init>:
#endif
}

/* API to initialize CCU8 global resources  */
void XMC_CCU8_Init(XMC_CCU8_MODULE_t *const module, const XMC_CCU8_SLICE_MCMS_ACTION_t mcs_action)
{
10001bfc:	b580      	push	{r7, lr}
10001bfe:	b084      	sub	sp, #16
10001c00:	af00      	add	r7, sp, #0
10001c02:	6078      	str	r0, [r7, #4]
10001c04:	1c0a      	adds	r2, r1, #0
10001c06:	1cfb      	adds	r3, r7, #3
10001c08:	701a      	strb	r2, [r3, #0]

  XMC_ASSERT("XMC_CCU8_Init:Invalid Module Pointer", XMC_CCU8_IsValidModule(module));
  XMC_ASSERT("XMC_CCU8_Init:Invalid mcs action", XMC_CCU8_SLICE_CHECK_MCS_ACTION(mcs_action));

  /* Enable CCU8 module */
  XMC_CCU8_EnableModule(module);
10001c0a:	687b      	ldr	r3, [r7, #4]
10001c0c:	1c18      	adds	r0, r3, #0
10001c0e:	f7ff ffe9 	bl	10001be4 <XMC_CCU8_EnableModule>
  /* Start the prescaler */
  XMC_CCU8_StartPrescaler(module);
10001c12:	687b      	ldr	r3, [r7, #4]
10001c14:	1c18      	adds	r0, r3, #0
10001c16:	f7ff ffbd 	bl	10001b94 <XMC_CCU8_StartPrescaler>
  
  gctrl = module->GCTRL;
10001c1a:	687b      	ldr	r3, [r7, #4]
10001c1c:	681b      	ldr	r3, [r3, #0]
10001c1e:	60fb      	str	r3, [r7, #12]
  gctrl &= ~((uint32_t) CCU8_GCTRL_MSDE_Msk);
10001c20:	68fb      	ldr	r3, [r7, #12]
10001c22:	4a07      	ldr	r2, [pc, #28]	; (10001c40 <XMC_CCU8_Init+0x44>)
10001c24:	4013      	ands	r3, r2
10001c26:	60fb      	str	r3, [r7, #12]
  gctrl |= (uint32_t)mcs_action << CCU8_GCTRL_MSDE_Pos;
10001c28:	1cfb      	adds	r3, r7, #3
10001c2a:	781b      	ldrb	r3, [r3, #0]
10001c2c:	039b      	lsls	r3, r3, #14
10001c2e:	68fa      	ldr	r2, [r7, #12]
10001c30:	4313      	orrs	r3, r2
10001c32:	60fb      	str	r3, [r7, #12]
  
  module->GCTRL = gctrl;
10001c34:	687b      	ldr	r3, [r7, #4]
10001c36:	68fa      	ldr	r2, [r7, #12]
10001c38:	601a      	str	r2, [r3, #0]
}
10001c3a:	46bd      	mov	sp, r7
10001c3c:	b004      	add	sp, #16
10001c3e:	bd80      	pop	{r7, pc}
10001c40:	ffff3fff 	.word	0xffff3fff

10001c44 <XMC_CCU8_SLICE_CompareInit>:
}

/* API to configure CC8 Slice in Compare mode */
void XMC_CCU8_SLICE_CompareInit(XMC_CCU8_SLICE_t *const slice,
                                const XMC_CCU8_SLICE_COMPARE_CONFIG_t *const compare_init)
{
10001c44:	b580      	push	{r7, lr}
10001c46:	b082      	sub	sp, #8
10001c48:	af00      	add	r7, sp, #0
10001c4a:	6078      	str	r0, [r7, #4]
10001c4c:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_CCU8_SLICE_CompareInit:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU8_SLICE_CompareInit:Timer Init Pointer is NULL",
             (XMC_CCU8_SLICE_COMPARE_CONFIG_t *) NULL != compare_init);
  /* Stops the timer */
  XMC_CCU8_SLICE_StopTimer(slice);
10001c4e:	687b      	ldr	r3, [r7, #4]
10001c50:	1c18      	adds	r0, r3, #0
10001c52:	f7ff ffad 	bl	10001bb0 <XMC_CCU8_SLICE_StopTimer>
  /* Program the timer mode */
  slice->TC = compare_init->tc;
10001c56:	683b      	ldr	r3, [r7, #0]
10001c58:	681a      	ldr	r2, [r3, #0]
10001c5a:	687b      	ldr	r3, [r7, #4]
10001c5c:	615a      	str	r2, [r3, #20]
  /* Enable the timer concatenation */
  slice->CMC =  (uint32_t)compare_init->timer_concatenation << CCU8_CC8_CMC_TCE_Pos;
10001c5e:	683b      	ldr	r3, [r7, #0]
10001c60:	7b5b      	ldrb	r3, [r3, #13]
10001c62:	06db      	lsls	r3, r3, #27
10001c64:	0fdb      	lsrs	r3, r3, #31
10001c66:	b2db      	uxtb	r3, r3
10001c68:	051a      	lsls	r2, r3, #20
10001c6a:	687b      	ldr	r3, [r7, #4]
10001c6c:	605a      	str	r2, [r3, #4]
  /* Program initial prescaler divider value */
  slice->PSC = (uint32_t) compare_init->prescaler_initval;
10001c6e:	683b      	ldr	r3, [r7, #0]
10001c70:	7b1b      	ldrb	r3, [r3, #12]
10001c72:	071b      	lsls	r3, r3, #28
10001c74:	0f1b      	lsrs	r3, r3, #28
10001c76:	b2db      	uxtb	r3, r3
10001c78:	1c1a      	adds	r2, r3, #0
10001c7a:	687b      	ldr	r3, [r7, #4]
10001c7c:	625a      	str	r2, [r3, #36]	; 0x24
  /* Program floating prescaler compare value */
  slice->FPCS = (uint32_t) compare_init->float_limit;
10001c7e:	683b      	ldr	r3, [r7, #0]
10001c80:	7b1b      	ldrb	r3, [r3, #12]
10001c82:	061b      	lsls	r3, r3, #24
10001c84:	0f1b      	lsrs	r3, r3, #28
10001c86:	b2db      	uxtb	r3, r3
10001c88:	1c1a      	adds	r2, r3, #0
10001c8a:	687b      	ldr	r3, [r7, #4]
10001c8c:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Program the dither compare value */
  slice->DITS = (uint32_t) compare_init->dither_limit;
10001c8e:	683b      	ldr	r3, [r7, #0]
10001c90:	7b5b      	ldrb	r3, [r3, #13]
10001c92:	071b      	lsls	r3, r3, #28
10001c94:	0f1b      	lsrs	r3, r3, #28
10001c96:	b2db      	uxtb	r3, r3
10001c98:	1c1a      	adds	r2, r3, #0
10001c9a:	687b      	ldr	r3, [r7, #4]
10001c9c:	621a      	str	r2, [r3, #32]
  /* Program timer output passive level */
  slice->PSL = (uint32_t) compare_init->psl;
10001c9e:	683b      	ldr	r3, [r7, #0]
10001ca0:	685a      	ldr	r2, [r3, #4]
10001ca2:	687b      	ldr	r3, [r7, #4]
10001ca4:	619a      	str	r2, [r3, #24]
  /* Asymmetric PWM and Slice output routing configuration */
#if defined(CCU8V3) /* Defined for XMC1400 devices only */
  slice->CHC = (uint32_t) compare_init->chc;
#else
  slice->CHC = (uint32_t)((uint32_t)compare_init->chc ^ XMC_CCU8_SLICE_CHC_CONFIG_MASK);
10001ca6:	683b      	ldr	r3, [r7, #0]
10001ca8:	689b      	ldr	r3, [r3, #8]
10001caa:	2214      	movs	r2, #20
10001cac:	405a      	eors	r2, r3
10001cae:	687b      	ldr	r3, [r7, #4]
10001cb0:	649a      	str	r2, [r3, #72]	; 0x48
#endif
}
10001cb2:	46bd      	mov	sp, r7
10001cb4:	b002      	add	sp, #8
10001cb6:	bd80      	pop	{r7, pc}

10001cb8 <XMC_CCU8_SetMultiChannelShadowTransferMode>:
  slice->CHC = chc;
}

/* API to configure the multichannel shadow transfer request via SW and via the CCU8x.MCSS input. */
void XMC_CCU8_SetMultiChannelShadowTransferMode(XMC_CCU8_MODULE_t *const module, const uint32_t slice_mode_msk)
{
10001cb8:	b580      	push	{r7, lr}
10001cba:	b084      	sub	sp, #16
10001cbc:	af00      	add	r7, sp, #0
10001cbe:	6078      	str	r0, [r7, #4]
10001cc0:	6039      	str	r1, [r7, #0]
  uint32_t gctrl;

  XMC_ASSERT("XMC_CCU8_SetMultiChannelShadowTransferMode:Invalid module Pointer", XMC_CCU8_IsValidModule(module));
  
  gctrl = module->GCTRL;
10001cc2:	687b      	ldr	r3, [r7, #4]
10001cc4:	681b      	ldr	r3, [r3, #0]
10001cc6:	60fb      	str	r3, [r7, #12]
  gctrl &= ~((uint32_t)slice_mode_msk >> 16U);
10001cc8:	683b      	ldr	r3, [r7, #0]
10001cca:	0c1b      	lsrs	r3, r3, #16
10001ccc:	43da      	mvns	r2, r3
10001cce:	68fb      	ldr	r3, [r7, #12]
10001cd0:	4013      	ands	r3, r2
10001cd2:	60fb      	str	r3, [r7, #12]
  gctrl |= ((uint32_t)slice_mode_msk & 0xFFFFU);
10001cd4:	683b      	ldr	r3, [r7, #0]
10001cd6:	041b      	lsls	r3, r3, #16
10001cd8:	0c1b      	lsrs	r3, r3, #16
10001cda:	68fa      	ldr	r2, [r7, #12]
10001cdc:	4313      	orrs	r3, r2
10001cde:	60fb      	str	r3, [r7, #12]
  module->GCTRL = gctrl;
10001ce0:	687b      	ldr	r3, [r7, #4]
10001ce2:	68fa      	ldr	r2, [r7, #12]
10001ce4:	601a      	str	r2, [r3, #0]
}
10001ce6:	46bd      	mov	sp, r7
10001ce8:	b004      	add	sp, #16
10001cea:	bd80      	pop	{r7, pc}

10001cec <XMC_CCU8_SLICE_StartConfig>:

/* API to configure the Start trigger function of a slice*/
void XMC_CCU8_SLICE_StartConfig(XMC_CCU8_SLICE_t *const slice,
                                const XMC_CCU8_SLICE_EVENT_t event,
                                const XMC_CCU8_SLICE_START_MODE_t start_mode)
{
10001cec:	b580      	push	{r7, lr}
10001cee:	b084      	sub	sp, #16
10001cf0:	af00      	add	r7, sp, #0
10001cf2:	6078      	str	r0, [r7, #4]
10001cf4:	1c08      	adds	r0, r1, #0
10001cf6:	1c11      	adds	r1, r2, #0
10001cf8:	1cfb      	adds	r3, r7, #3
10001cfa:	1c02      	adds	r2, r0, #0
10001cfc:	701a      	strb	r2, [r3, #0]
10001cfe:	1cbb      	adds	r3, r7, #2
10001d00:	1c0a      	adds	r2, r1, #0
10001d02:	701a      	strb	r2, [r3, #0]
  XMC_ASSERT("XMC_CCU8_SLICE_StartConfig:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU8_SLICE_StartConfig:Invalid Event ID", XMC_CCU8_SLICE_CHECK_EVENT_ID(event));
  XMC_ASSERT("XMC_CCU8_SLICE_StartConfig:Invalid Start Mode", 
             ((start_mode == XMC_CCU8_SLICE_START_MODE_TIMER_START) ||\
              (start_mode == XMC_CCU8_SLICE_START_MODE_TIMER_START_CLEAR)));
  cmc = slice->CMC;
10001d04:	687b      	ldr	r3, [r7, #4]
10001d06:	685b      	ldr	r3, [r3, #4]
10001d08:	60bb      	str	r3, [r7, #8]

  cmc &= ~((uint32_t) CCU8_CC8_CMC_STRTS_Msk);
10001d0a:	68bb      	ldr	r3, [r7, #8]
10001d0c:	2203      	movs	r2, #3
10001d0e:	4393      	bics	r3, r2
10001d10:	60bb      	str	r3, [r7, #8]
  cmc |= ((uint32_t) event) << CCU8_CC8_CMC_STRTS_Pos;
10001d12:	1cfb      	adds	r3, r7, #3
10001d14:	781b      	ldrb	r3, [r3, #0]
10001d16:	68ba      	ldr	r2, [r7, #8]
10001d18:	4313      	orrs	r3, r2
10001d1a:	60bb      	str	r3, [r7, #8]

  slice->CMC = cmc;
10001d1c:	687b      	ldr	r3, [r7, #4]
10001d1e:	68ba      	ldr	r2, [r7, #8]
10001d20:	605a      	str	r2, [r3, #4]

  tc  = slice->TC;
10001d22:	687b      	ldr	r3, [r7, #4]
10001d24:	695b      	ldr	r3, [r3, #20]
10001d26:	60fb      	str	r3, [r7, #12]

  if(start_mode == XMC_CCU8_SLICE_START_MODE_TIMER_START_CLEAR)
10001d28:	1cbb      	adds	r3, r7, #2
10001d2a:	781b      	ldrb	r3, [r3, #0]
10001d2c:	2b01      	cmp	r3, #1
10001d2e:	d105      	bne.n	10001d3c <XMC_CCU8_SLICE_StartConfig+0x50>
  {
    tc |= (uint32_t) CCU8_CC8_TC_STRM_Msk;
10001d30:	68fb      	ldr	r3, [r7, #12]
10001d32:	2280      	movs	r2, #128	; 0x80
10001d34:	00d2      	lsls	r2, r2, #3
10001d36:	4313      	orrs	r3, r2
10001d38:	60fb      	str	r3, [r7, #12]
10001d3a:	e003      	b.n	10001d44 <XMC_CCU8_SLICE_StartConfig+0x58>
  }
  else
  {
    tc &= ~((uint32_t) CCU8_CC8_TC_STRM_Msk);
10001d3c:	68fb      	ldr	r3, [r7, #12]
10001d3e:	4a04      	ldr	r2, [pc, #16]	; (10001d50 <XMC_CCU8_SLICE_StartConfig+0x64>)
10001d40:	4013      	ands	r3, r2
10001d42:	60fb      	str	r3, [r7, #12]
  }

  slice->TC = tc;
10001d44:	687b      	ldr	r3, [r7, #4]
10001d46:	68fa      	ldr	r2, [r7, #12]
10001d48:	615a      	str	r2, [r3, #20]
}
10001d4a:	46bd      	mov	sp, r7
10001d4c:	b004      	add	sp, #16
10001d4e:	bd80      	pop	{r7, pc}
10001d50:	fffffbff 	.word	0xfffffbff

10001d54 <XMC_CCU8_SLICE_StopConfig>:

/* API to configure the Stop trigger function of a slice */
void XMC_CCU8_SLICE_StopConfig(XMC_CCU8_SLICE_t *const slice,
                               const XMC_CCU8_SLICE_EVENT_t event,
                               const XMC_CCU8_SLICE_END_MODE_t end_mode)
{
10001d54:	b580      	push	{r7, lr}
10001d56:	b084      	sub	sp, #16
10001d58:	af00      	add	r7, sp, #0
10001d5a:	6078      	str	r0, [r7, #4]
10001d5c:	1c08      	adds	r0, r1, #0
10001d5e:	1c11      	adds	r1, r2, #0
10001d60:	1cfb      	adds	r3, r7, #3
10001d62:	1c02      	adds	r2, r0, #0
10001d64:	701a      	strb	r2, [r3, #0]
10001d66:	1cbb      	adds	r3, r7, #2
10001d68:	1c0a      	adds	r2, r1, #0
10001d6a:	701a      	strb	r2, [r3, #0]

  XMC_ASSERT("XMC_CCU8_SLICE_StopConfig:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU8_SLICE_StopConfig:Invalid Event ID", XMC_CCU8_SLICE_CHECK_EVENT_ID(event));
  XMC_ASSERT("XMC_CCU8_SLICE_StopConfig:Invalid End Mode", XMC_CCU8_SLICE_CHECK_END_MODE(end_mode));

  cmc = slice->CMC;
10001d6c:	687b      	ldr	r3, [r7, #4]
10001d6e:	685b      	ldr	r3, [r3, #4]
10001d70:	60fb      	str	r3, [r7, #12]
  /* First, Bind the event with the stop function */
  cmc &= ~((uint32_t) CCU8_CC8_CMC_ENDS_Msk);
10001d72:	68fb      	ldr	r3, [r7, #12]
10001d74:	220c      	movs	r2, #12
10001d76:	4393      	bics	r3, r2
10001d78:	60fb      	str	r3, [r7, #12]
  cmc |= ((uint32_t) event) << CCU8_CC8_CMC_ENDS_Pos;
10001d7a:	1cfb      	adds	r3, r7, #3
10001d7c:	781b      	ldrb	r3, [r3, #0]
10001d7e:	009b      	lsls	r3, r3, #2
10001d80:	68fa      	ldr	r2, [r7, #12]
10001d82:	4313      	orrs	r3, r2
10001d84:	60fb      	str	r3, [r7, #12]

  slice->CMC = cmc;
10001d86:	687b      	ldr	r3, [r7, #4]
10001d88:	68fa      	ldr	r2, [r7, #12]
10001d8a:	605a      	str	r2, [r3, #4]

  /* Configure the stop mode */
  tc = slice->TC;
10001d8c:	687b      	ldr	r3, [r7, #4]
10001d8e:	695b      	ldr	r3, [r3, #20]
10001d90:	60bb      	str	r3, [r7, #8]
  tc &= ~((uint32_t) CCU8_CC8_TC_ENDM_Msk);
10001d92:	68bb      	ldr	r3, [r7, #8]
10001d94:	4a07      	ldr	r2, [pc, #28]	; (10001db4 <XMC_CCU8_SLICE_StopConfig+0x60>)
10001d96:	4013      	ands	r3, r2
10001d98:	60bb      	str	r3, [r7, #8]
  tc |= ((uint32_t) end_mode) << CCU8_CC8_TC_ENDM_Pos;
10001d9a:	1cbb      	adds	r3, r7, #2
10001d9c:	781b      	ldrb	r3, [r3, #0]
10001d9e:	021b      	lsls	r3, r3, #8
10001da0:	68ba      	ldr	r2, [r7, #8]
10001da2:	4313      	orrs	r3, r2
10001da4:	60bb      	str	r3, [r7, #8]

  slice->TC = tc;
10001da6:	687b      	ldr	r3, [r7, #4]
10001da8:	68ba      	ldr	r2, [r7, #8]
10001daa:	615a      	str	r2, [r3, #20]
}
10001dac:	46bd      	mov	sp, r7
10001dae:	b004      	add	sp, #16
10001db0:	bd80      	pop	{r7, pc}
10001db2:	46c0      	nop			; (mov r8, r8)
10001db4:	fffffcff 	.word	0xfffffcff

10001db8 <XMC_CCU8_SLICE_LoadConfig>:

/* API to configure the Load trigger function of a slice*/
void XMC_CCU8_SLICE_LoadConfig(XMC_CCU8_SLICE_t *const slice, const XMC_CCU8_SLICE_EVENT_t event)
{
10001db8:	b580      	push	{r7, lr}
10001dba:	b084      	sub	sp, #16
10001dbc:	af00      	add	r7, sp, #0
10001dbe:	6078      	str	r0, [r7, #4]
10001dc0:	1c0a      	adds	r2, r1, #0
10001dc2:	1cfb      	adds	r3, r7, #3
10001dc4:	701a      	strb	r2, [r3, #0]
  uint32_t cmc;

  XMC_ASSERT("XMC_CCU8_SLICE_LoadConfig:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU8_SLICE_LoadConfig:Invalid Event ID", XMC_CCU8_SLICE_CHECK_EVENT_ID(event));

  cmc = slice->CMC;
10001dc6:	687b      	ldr	r3, [r7, #4]
10001dc8:	685b      	ldr	r3, [r3, #4]
10001dca:	60fb      	str	r3, [r7, #12]

  /* First, Bind the event with the load function */
  cmc &= ~((uint32_t) CCU8_CC8_CMC_LDS_Msk);
10001dcc:	68fb      	ldr	r3, [r7, #12]
10001dce:	4a07      	ldr	r2, [pc, #28]	; (10001dec <XMC_CCU8_SLICE_LoadConfig+0x34>)
10001dd0:	4013      	ands	r3, r2
10001dd2:	60fb      	str	r3, [r7, #12]
  cmc |= ((uint32_t) event) << CCU8_CC8_CMC_LDS_Pos;
10001dd4:	1cfb      	adds	r3, r7, #3
10001dd6:	781b      	ldrb	r3, [r3, #0]
10001dd8:	031b      	lsls	r3, r3, #12
10001dda:	68fa      	ldr	r2, [r7, #12]
10001ddc:	4313      	orrs	r3, r2
10001dde:	60fb      	str	r3, [r7, #12]

  slice->CMC = cmc;
10001de0:	687b      	ldr	r3, [r7, #4]
10001de2:	68fa      	ldr	r2, [r7, #12]
10001de4:	605a      	str	r2, [r3, #4]
}
10001de6:	46bd      	mov	sp, r7
10001de8:	b004      	add	sp, #16
10001dea:	bd80      	pop	{r7, pc}
10001dec:	ffffcfff 	.word	0xffffcfff

10001df0 <XMC_CCU8_SLICE_LoadSelector>:

/* API to configure, which compare register value has to be loaded during external load event */
void XMC_CCU8_SLICE_LoadSelector(XMC_CCU8_SLICE_t *const slice, const XMC_CCU8_SLICE_COMPARE_CHANNEL_t ch_num)
{
10001df0:	b580      	push	{r7, lr}
10001df2:	b084      	sub	sp, #16
10001df4:	af00      	add	r7, sp, #0
10001df6:	6078      	str	r0, [r7, #4]
10001df8:	1c0a      	adds	r2, r1, #0
10001dfa:	1cfb      	adds	r3, r7, #3
10001dfc:	701a      	strb	r2, [r3, #0]
  uint32_t tc;

  XMC_ASSERT("XMC_CCU8_SLICE_LoadSelector:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU8_SLICE_LoadSelector:Invalid Channel number", XMC_CCU8_SLICE_CHECK_COMP_CHANNEL(ch_num));

  tc = slice->TC;
10001dfe:	687b      	ldr	r3, [r7, #4]
10001e00:	695b      	ldr	r3, [r3, #20]
10001e02:	60fb      	str	r3, [r7, #12]

  /* First, Bind the event with the load function */
  tc &= ~((uint32_t) CCU8_CC8_TC_TLS_Msk);
10001e04:	68fb      	ldr	r3, [r7, #12]
10001e06:	2280      	movs	r2, #128	; 0x80
10001e08:	4393      	bics	r3, r2
10001e0a:	60fb      	str	r3, [r7, #12]
  tc |= (uint32_t)ch_num << CCU8_CC8_TC_TLS_Pos;
10001e0c:	1cfb      	adds	r3, r7, #3
10001e0e:	781b      	ldrb	r3, [r3, #0]
10001e10:	01db      	lsls	r3, r3, #7
10001e12:	68fa      	ldr	r2, [r7, #12]
10001e14:	4313      	orrs	r3, r2
10001e16:	60fb      	str	r3, [r7, #12]

  slice->TC = tc;
10001e18:	687b      	ldr	r3, [r7, #4]
10001e1a:	68fa      	ldr	r2, [r7, #12]
10001e1c:	615a      	str	r2, [r3, #20]
}
10001e1e:	46bd      	mov	sp, r7
10001e20:	b004      	add	sp, #16
10001e22:	bd80      	pop	{r7, pc}

10001e24 <XMC_CCU8_SLICE_ModulationConfig>:
void XMC_CCU8_SLICE_ModulationConfig(XMC_CCU8_SLICE_t *const slice,
                                     const XMC_CCU8_SLICE_EVENT_t event,
                                     const XMC_CCU8_SLICE_MODULATION_MODE_t mod_mode,
                                     const XMC_CCU8_SLICE_MODULATION_CHANNEL_t channel,
                                     const bool synch_with_pwm)
{
10001e24:	b590      	push	{r4, r7, lr}
10001e26:	b085      	sub	sp, #20
10001e28:	af00      	add	r7, sp, #0
10001e2a:	6078      	str	r0, [r7, #4]
10001e2c:	1c0c      	adds	r4, r1, #0
10001e2e:	1c10      	adds	r0, r2, #0
10001e30:	1c19      	adds	r1, r3, #0
10001e32:	1cfb      	adds	r3, r7, #3
10001e34:	1c22      	adds	r2, r4, #0
10001e36:	701a      	strb	r2, [r3, #0]
10001e38:	1cbb      	adds	r3, r7, #2
10001e3a:	1c02      	adds	r2, r0, #0
10001e3c:	701a      	strb	r2, [r3, #0]
10001e3e:	1c7b      	adds	r3, r7, #1
10001e40:	1c0a      	adds	r2, r1, #0
10001e42:	701a      	strb	r2, [r3, #0]
             XMC_CCU8_SLICE_CHECK_MODULATION_CHANNEL(channel));
  XMC_ASSERT("XMC_CCU8_SLICE_ModulationConfig:Invalid Modulation Mode", 
             ((mod_mode == XMC_CCU8_SLICE_MODULATION_MODE_CLEAR_ST_OUT) ||\
              (mod_mode == XMC_CCU8_SLICE_MODULATION_MODE_CLEAR_OUT)));

  cmc = slice->CMC;
10001e44:	687b      	ldr	r3, [r7, #4]
10001e46:	685b      	ldr	r3, [r3, #4]
10001e48:	60bb      	str	r3, [r7, #8]

  /* First, Bind the event with the modulation function */
  cmc &= ~((uint32_t) CCU8_CC8_CMC_MOS_Msk);
10001e4a:	68bb      	ldr	r3, [r7, #8]
10001e4c:	4a1d      	ldr	r2, [pc, #116]	; (10001ec4 <XMC_CCU8_SLICE_ModulationConfig+0xa0>)
10001e4e:	4013      	ands	r3, r2
10001e50:	60bb      	str	r3, [r7, #8]
  cmc |= ((uint32_t) event) << CCU8_CC8_CMC_MOS_Pos;
10001e52:	1cfb      	adds	r3, r7, #3
10001e54:	781b      	ldrb	r3, [r3, #0]
10001e56:	049b      	lsls	r3, r3, #18
10001e58:	68ba      	ldr	r2, [r7, #8]
10001e5a:	4313      	orrs	r3, r2
10001e5c:	60bb      	str	r3, [r7, #8]

  slice->CMC = cmc;
10001e5e:	687b      	ldr	r3, [r7, #4]
10001e60:	68ba      	ldr	r2, [r7, #8]
10001e62:	605a      	str	r2, [r3, #4]

  tc  = slice->TC;
10001e64:	687b      	ldr	r3, [r7, #4]
10001e66:	695b      	ldr	r3, [r3, #20]
10001e68:	60fb      	str	r3, [r7, #12]

  /* Next, Modulation mode */
  if(mod_mode == XMC_CCU8_SLICE_MODULATION_MODE_CLEAR_OUT)
10001e6a:	1cbb      	adds	r3, r7, #2
10001e6c:	781b      	ldrb	r3, [r3, #0]
10001e6e:	2b01      	cmp	r3, #1
10001e70:	d105      	bne.n	10001e7e <XMC_CCU8_SLICE_ModulationConfig+0x5a>
  {
    tc |= (uint32_t) CCU8_CC8_TC_EMT_Msk;
10001e72:	68fb      	ldr	r3, [r7, #12]
10001e74:	2280      	movs	r2, #128	; 0x80
10001e76:	0452      	lsls	r2, r2, #17
10001e78:	4313      	orrs	r3, r2
10001e7a:	60fb      	str	r3, [r7, #12]
10001e7c:	e003      	b.n	10001e86 <XMC_CCU8_SLICE_ModulationConfig+0x62>
  }
  else
  {
    tc &= ~((uint32_t) CCU8_CC8_TC_EMT_Msk);
10001e7e:	68fb      	ldr	r3, [r7, #12]
10001e80:	4a11      	ldr	r2, [pc, #68]	; (10001ec8 <XMC_CCU8_SLICE_ModulationConfig+0xa4>)
10001e82:	4013      	ands	r3, r2
10001e84:	60fb      	str	r3, [r7, #12]
  }

  /* Synchronization of modulation effect with PWM cycle */
  if(synch_with_pwm == true)
10001e86:	2320      	movs	r3, #32
10001e88:	18fb      	adds	r3, r7, r3
10001e8a:	781b      	ldrb	r3, [r3, #0]
10001e8c:	2b00      	cmp	r3, #0
10001e8e:	d005      	beq.n	10001e9c <XMC_CCU8_SLICE_ModulationConfig+0x78>
  {
    tc |= (uint32_t) CCU8_CC8_TC_EMS_Msk;
10001e90:	68fb      	ldr	r3, [r7, #12]
10001e92:	2280      	movs	r2, #128	; 0x80
10001e94:	0412      	lsls	r2, r2, #16
10001e96:	4313      	orrs	r3, r2
10001e98:	60fb      	str	r3, [r7, #12]
10001e9a:	e003      	b.n	10001ea4 <XMC_CCU8_SLICE_ModulationConfig+0x80>
  }
  else
  {
    tc &= ~((uint32_t) CCU8_CC8_TC_EMS_Msk);
10001e9c:	68fb      	ldr	r3, [r7, #12]
10001e9e:	4a0b      	ldr	r2, [pc, #44]	; (10001ecc <XMC_CCU8_SLICE_ModulationConfig+0xa8>)
10001ea0:	4013      	ands	r3, r2
10001ea2:	60fb      	str	r3, [r7, #12]
  }
  
  /* Configure on which channel external modulation to be applied */
  tc &= ~((uint32_t) CCU8_CC8_TC_EME_Msk);
10001ea4:	68fb      	ldr	r3, [r7, #12]
10001ea6:	4a0a      	ldr	r2, [pc, #40]	; (10001ed0 <XMC_CCU8_SLICE_ModulationConfig+0xac>)
10001ea8:	4013      	ands	r3, r2
10001eaa:	60fb      	str	r3, [r7, #12]
  tc |= (uint32_t)channel << CCU8_CC8_TC_EME_Pos;
10001eac:	1c7b      	adds	r3, r7, #1
10001eae:	781b      	ldrb	r3, [r3, #0]
10001eb0:	06db      	lsls	r3, r3, #27
10001eb2:	68fa      	ldr	r2, [r7, #12]
10001eb4:	4313      	orrs	r3, r2
10001eb6:	60fb      	str	r3, [r7, #12]

  slice->TC = tc;
10001eb8:	687b      	ldr	r3, [r7, #4]
10001eba:	68fa      	ldr	r2, [r7, #12]
10001ebc:	615a      	str	r2, [r3, #20]
}
10001ebe:	46bd      	mov	sp, r7
10001ec0:	b005      	add	sp, #20
10001ec2:	bd90      	pop	{r4, r7, pc}
10001ec4:	fff3ffff 	.word	0xfff3ffff
10001ec8:	feffffff 	.word	0xfeffffff
10001ecc:	ff7fffff 	.word	0xff7fffff
10001ed0:	e7ffffff 	.word	0xe7ffffff

10001ed4 <XMC_CCU8_SLICE_CountConfig>:

/* API to configure the slice count function */
void XMC_CCU8_SLICE_CountConfig(XMC_CCU8_SLICE_t *const slice, const XMC_CCU8_SLICE_EVENT_t event)
{
10001ed4:	b580      	push	{r7, lr}
10001ed6:	b084      	sub	sp, #16
10001ed8:	af00      	add	r7, sp, #0
10001eda:	6078      	str	r0, [r7, #4]
10001edc:	1c0a      	adds	r2, r1, #0
10001ede:	1cfb      	adds	r3, r7, #3
10001ee0:	701a      	strb	r2, [r3, #0]
  uint32_t cmc;

  XMC_ASSERT("XMC_CCU8_SLICE_CountConfig:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU8_SLICE_CountConfig:Invalid Event ID", XMC_CCU8_SLICE_CHECK_EVENT_ID(event));

  cmc = slice->CMC;
10001ee2:	687b      	ldr	r3, [r7, #4]
10001ee4:	685b      	ldr	r3, [r3, #4]
10001ee6:	60fb      	str	r3, [r7, #12]

  /* First, Bind the event with the count function */
  cmc &= ~((uint32_t) CCU8_CC8_CMC_CNTS_Msk);
10001ee8:	68fb      	ldr	r3, [r7, #12]
10001eea:	4a07      	ldr	r2, [pc, #28]	; (10001f08 <XMC_CCU8_SLICE_CountConfig+0x34>)
10001eec:	4013      	ands	r3, r2
10001eee:	60fb      	str	r3, [r7, #12]
  cmc |= ((uint32_t) event) << CCU8_CC8_CMC_CNTS_Pos;
10001ef0:	1cfb      	adds	r3, r7, #3
10001ef2:	781b      	ldrb	r3, [r3, #0]
10001ef4:	039b      	lsls	r3, r3, #14
10001ef6:	68fa      	ldr	r2, [r7, #12]
10001ef8:	4313      	orrs	r3, r2
10001efa:	60fb      	str	r3, [r7, #12]

  slice->CMC = cmc;
10001efc:	687b      	ldr	r3, [r7, #4]
10001efe:	68fa      	ldr	r2, [r7, #12]
10001f00:	605a      	str	r2, [r3, #4]
}
10001f02:	46bd      	mov	sp, r7
10001f04:	b004      	add	sp, #16
10001f06:	bd80      	pop	{r7, pc}
10001f08:	ffff3fff 	.word	0xffff3fff

10001f0c <XMC_CCU8_SLICE_GateConfig>:

/* API to configure slice gate function */
void XMC_CCU8_SLICE_GateConfig(XMC_CCU8_SLICE_t *const slice, const XMC_CCU8_SLICE_EVENT_t event)
{
10001f0c:	b580      	push	{r7, lr}
10001f0e:	b084      	sub	sp, #16
10001f10:	af00      	add	r7, sp, #0
10001f12:	6078      	str	r0, [r7, #4]
10001f14:	1c0a      	adds	r2, r1, #0
10001f16:	1cfb      	adds	r3, r7, #3
10001f18:	701a      	strb	r2, [r3, #0]
  uint32_t cmc;

  XMC_ASSERT("XMC_CCU8_SLICE_GateConfig:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU8_SLICE_GateConfig:Invalid Event ID", XMC_CCU8_SLICE_CHECK_EVENT_ID(event));

  cmc = slice->CMC;
10001f1a:	687b      	ldr	r3, [r7, #4]
10001f1c:	685b      	ldr	r3, [r3, #4]
10001f1e:	60fb      	str	r3, [r7, #12]

  /* First, Bind the event with the gate function */
  cmc &= ~((uint32_t) CCU8_CC8_CMC_GATES_Msk);
10001f20:	68fb      	ldr	r3, [r7, #12]
10001f22:	4a07      	ldr	r2, [pc, #28]	; (10001f40 <XMC_CCU8_SLICE_GateConfig+0x34>)
10001f24:	4013      	ands	r3, r2
10001f26:	60fb      	str	r3, [r7, #12]
  cmc |= ((uint32_t) event) << CCU8_CC8_CMC_GATES_Pos;
10001f28:	1cfb      	adds	r3, r7, #3
10001f2a:	781b      	ldrb	r3, [r3, #0]
10001f2c:	021b      	lsls	r3, r3, #8
10001f2e:	68fa      	ldr	r2, [r7, #12]
10001f30:	4313      	orrs	r3, r2
10001f32:	60fb      	str	r3, [r7, #12]

  slice->CMC = cmc;
10001f34:	687b      	ldr	r3, [r7, #4]
10001f36:	68fa      	ldr	r2, [r7, #12]
10001f38:	605a      	str	r2, [r3, #4]
}
10001f3a:	46bd      	mov	sp, r7
10001f3c:	b004      	add	sp, #16
10001f3e:	bd80      	pop	{r7, pc}
10001f40:	fffffcff 	.word	0xfffffcff

10001f44 <XMC_CCU8_SLICE_DirectionConfig>:
  slice->CMC = cmc;
}

/* API to configure direction function */
void XMC_CCU8_SLICE_DirectionConfig(XMC_CCU8_SLICE_t *const slice, const XMC_CCU8_SLICE_EVENT_t event)
{
10001f44:	b580      	push	{r7, lr}
10001f46:	b084      	sub	sp, #16
10001f48:	af00      	add	r7, sp, #0
10001f4a:	6078      	str	r0, [r7, #4]
10001f4c:	1c0a      	adds	r2, r1, #0
10001f4e:	1cfb      	adds	r3, r7, #3
10001f50:	701a      	strb	r2, [r3, #0]
  uint32_t cmc;

  XMC_ASSERT("XMC_CCU8_SLICE_DirectionConfig:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU8_SLICE_DirectionConfig:Invalid Event ID", XMC_CCU8_SLICE_CHECK_EVENT_ID(event));

  cmc = slice->CMC;
10001f52:	687b      	ldr	r3, [r7, #4]
10001f54:	685b      	ldr	r3, [r3, #4]
10001f56:	60fb      	str	r3, [r7, #12]

  /* First, Bind the event with the direction function */
  cmc &= ~((uint32_t) CCU8_CC8_CMC_UDS_Msk);
10001f58:	68fb      	ldr	r3, [r7, #12]
10001f5a:	4a07      	ldr	r2, [pc, #28]	; (10001f78 <XMC_CCU8_SLICE_DirectionConfig+0x34>)
10001f5c:	4013      	ands	r3, r2
10001f5e:	60fb      	str	r3, [r7, #12]
  cmc |= ((uint32_t) event) << CCU8_CC8_CMC_UDS_Pos;
10001f60:	1cfb      	adds	r3, r7, #3
10001f62:	781b      	ldrb	r3, [r3, #0]
10001f64:	029b      	lsls	r3, r3, #10
10001f66:	68fa      	ldr	r2, [r7, #12]
10001f68:	4313      	orrs	r3, r2
10001f6a:	60fb      	str	r3, [r7, #12]

  slice->CMC = cmc;
10001f6c:	687b      	ldr	r3, [r7, #4]
10001f6e:	68fa      	ldr	r2, [r7, #12]
10001f70:	605a      	str	r2, [r3, #4]
}
10001f72:	46bd      	mov	sp, r7
10001f74:	b004      	add	sp, #16
10001f76:	bd80      	pop	{r7, pc}
10001f78:	fffff3ff 	.word	0xfffff3ff

10001f7c <XMC_CCU8_SLICE_StatusBitOverrideConfig>:

/* API to configure slice status bit override function */
void XMC_CCU8_SLICE_StatusBitOverrideConfig(XMC_CCU8_SLICE_t *const slice)
{
10001f7c:	b580      	push	{r7, lr}
10001f7e:	b084      	sub	sp, #16
10001f80:	af00      	add	r7, sp, #0
10001f82:	6078      	str	r0, [r7, #4]
  uint32_t cmc;

  XMC_ASSERT("XMC_CCU8_SLICE_StatusBitOverrideConfig:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));

  cmc = slice->CMC;
10001f84:	687b      	ldr	r3, [r7, #4]
10001f86:	685b      	ldr	r3, [r3, #4]
10001f88:	60fb      	str	r3, [r7, #12]

  /* Map status bit trigger override to Event 1 &
         status bit value override to Event 2 */
  cmc &= ~((uint32_t) CCU8_CC8_CMC_OFS_Msk);
10001f8a:	68fb      	ldr	r3, [r7, #12]
10001f8c:	4a06      	ldr	r2, [pc, #24]	; (10001fa8 <XMC_CCU8_SLICE_StatusBitOverrideConfig+0x2c>)
10001f8e:	4013      	ands	r3, r2
10001f90:	60fb      	str	r3, [r7, #12]
  cmc |= ((uint32_t) 1) << CCU8_CC8_CMC_OFS_Pos;
10001f92:	68fb      	ldr	r3, [r7, #12]
10001f94:	2280      	movs	r2, #128	; 0x80
10001f96:	0252      	lsls	r2, r2, #9
10001f98:	4313      	orrs	r3, r2
10001f9a:	60fb      	str	r3, [r7, #12]

  slice->CMC = cmc;
10001f9c:	687b      	ldr	r3, [r7, #4]
10001f9e:	68fa      	ldr	r2, [r7, #12]
10001fa0:	605a      	str	r2, [r3, #4]
}
10001fa2:	46bd      	mov	sp, r7
10001fa4:	b004      	add	sp, #16
10001fa6:	bd80      	pop	{r7, pc}
10001fa8:	fffeffff 	.word	0xfffeffff

10001fac <XMC_CCU8_SLICE_TrapConfig>:

/* API to configure trap function*/
void XMC_CCU8_SLICE_TrapConfig(XMC_CCU8_SLICE_t *const slice,
                               const XMC_CCU8_SLICE_TRAP_EXIT_MODE_t exit_mode,
                               const bool synch_with_pwm)
{
10001fac:	b580      	push	{r7, lr}
10001fae:	b084      	sub	sp, #16
10001fb0:	af00      	add	r7, sp, #0
10001fb2:	6078      	str	r0, [r7, #4]
10001fb4:	1c08      	adds	r0, r1, #0
10001fb6:	1c11      	adds	r1, r2, #0
10001fb8:	1cfb      	adds	r3, r7, #3
10001fba:	1c02      	adds	r2, r0, #0
10001fbc:	701a      	strb	r2, [r3, #0]
10001fbe:	1cbb      	adds	r3, r7, #2
10001fc0:	1c0a      	adds	r2, r1, #0
10001fc2:	701a      	strb	r2, [r3, #0]

  XMC_ASSERT("XMC_CCU8_SLICE_TrapConfig:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU8_SLICE_TrapConfig:Invalid Exit Mode", ((exit_mode == XMC_CCU8_SLICE_TRAP_EXIT_MODE_AUTOMATIC) ||\
                                                             (exit_mode == XMC_CCU8_SLICE_TRAP_EXIT_MODE_SW)));

  cmc = slice->CMC;
10001fc4:	687b      	ldr	r3, [r7, #4]
10001fc6:	685b      	ldr	r3, [r3, #4]
10001fc8:	60bb      	str	r3, [r7, #8]

  /* Map trap function to Event 2 */
  cmc &= ~((uint32_t) CCU8_CC8_CMC_TS_Msk);
10001fca:	68bb      	ldr	r3, [r7, #8]
10001fcc:	4a17      	ldr	r2, [pc, #92]	; (1000202c <XMC_CCU8_SLICE_TrapConfig+0x80>)
10001fce:	4013      	ands	r3, r2
10001fd0:	60bb      	str	r3, [r7, #8]
  cmc |= ((uint32_t) 1) << CCU8_CC8_CMC_TS_Pos;
10001fd2:	68bb      	ldr	r3, [r7, #8]
10001fd4:	2280      	movs	r2, #128	; 0x80
10001fd6:	0292      	lsls	r2, r2, #10
10001fd8:	4313      	orrs	r3, r2
10001fda:	60bb      	str	r3, [r7, #8]

  slice->CMC = cmc;
10001fdc:	687b      	ldr	r3, [r7, #4]
10001fde:	68ba      	ldr	r2, [r7, #8]
10001fe0:	605a      	str	r2, [r3, #4]

  tc = slice->TC;
10001fe2:	687b      	ldr	r3, [r7, #4]
10001fe4:	695b      	ldr	r3, [r3, #20]
10001fe6:	60fb      	str	r3, [r7, #12]

  /* Configure synchronization option */
  if(synch_with_pwm == true)
10001fe8:	1cbb      	adds	r3, r7, #2
10001fea:	781b      	ldrb	r3, [r3, #0]
10001fec:	2b00      	cmp	r3, #0
10001fee:	d005      	beq.n	10001ffc <XMC_CCU8_SLICE_TrapConfig+0x50>
  {
    tc |= (uint32_t) CCU8_CC8_TC_TRPSE_Msk;
10001ff0:	68fb      	ldr	r3, [r7, #12]
10001ff2:	2280      	movs	r2, #128	; 0x80
10001ff4:	0392      	lsls	r2, r2, #14
10001ff6:	4313      	orrs	r3, r2
10001ff8:	60fb      	str	r3, [r7, #12]
10001ffa:	e003      	b.n	10002004 <XMC_CCU8_SLICE_TrapConfig+0x58>
  }
  else
  {
    tc &= ~((uint32_t) CCU8_CC8_TC_TRPSE_Msk);
10001ffc:	68fb      	ldr	r3, [r7, #12]
10001ffe:	4a0c      	ldr	r2, [pc, #48]	; (10002030 <XMC_CCU8_SLICE_TrapConfig+0x84>)
10002000:	4013      	ands	r3, r2
10002002:	60fb      	str	r3, [r7, #12]
  }

  /* Configure exit mode */
  if(exit_mode == XMC_CCU8_SLICE_TRAP_EXIT_MODE_SW)
10002004:	1cfb      	adds	r3, r7, #3
10002006:	781b      	ldrb	r3, [r3, #0]
10002008:	2b01      	cmp	r3, #1
1000200a:	d105      	bne.n	10002018 <XMC_CCU8_SLICE_TrapConfig+0x6c>
  {
    tc |= (uint32_t) CCU8_CC8_TC_TRPSW_Msk;
1000200c:	68fb      	ldr	r3, [r7, #12]
1000200e:	2280      	movs	r2, #128	; 0x80
10002010:	03d2      	lsls	r2, r2, #15
10002012:	4313      	orrs	r3, r2
10002014:	60fb      	str	r3, [r7, #12]
10002016:	e003      	b.n	10002020 <XMC_CCU8_SLICE_TrapConfig+0x74>
  }
  else
  {
    tc &= ~((uint32_t) CCU8_CC8_TC_TRPSW_Msk);
10002018:	68fb      	ldr	r3, [r7, #12]
1000201a:	4a06      	ldr	r2, [pc, #24]	; (10002034 <XMC_CCU8_SLICE_TrapConfig+0x88>)
1000201c:	4013      	ands	r3, r2
1000201e:	60fb      	str	r3, [r7, #12]
  }

  slice->TC = tc;
10002020:	687b      	ldr	r3, [r7, #4]
10002022:	68fa      	ldr	r2, [r7, #12]
10002024:	615a      	str	r2, [r3, #20]
}
10002026:	46bd      	mov	sp, r7
10002028:	b004      	add	sp, #16
1000202a:	bd80      	pop	{r7, pc}
1000202c:	fffdffff 	.word	0xfffdffff
10002030:	ffdfffff 	.word	0xffdfffff
10002034:	ffbfffff 	.word	0xffbfffff

10002038 <XMC_CCU8_SLICE_ConfigureStatusBitOverrideEvent>:

/* API to configure a slice Status Bit Override event */
void XMC_CCU8_SLICE_ConfigureStatusBitOverrideEvent(XMC_CCU8_SLICE_t *const slice,
                                                    const XMC_CCU8_SLICE_EVENT_CONFIG_t *const ev1_config,
                                                    const XMC_CCU8_SLICE_EVENT_CONFIG_t *const ev2_config)
{
10002038:	b580      	push	{r7, lr}
1000203a:	b086      	sub	sp, #24
1000203c:	af00      	add	r7, sp, #0
1000203e:	60f8      	str	r0, [r7, #12]
10002040:	60b9      	str	r1, [r7, #8]
10002042:	607a      	str	r2, [r7, #4]
  ins &= ~(((uint32_t) XMC_CCU8_SLICE_EVENT_INPUT_CONFIG_MASK) << CCU8_CC8_INS1_EV2IS_Pos);
  ins |= ((uint32_t) ev2_config->mapped_input) << CCU8_CC8_INS1_EV2IS_Pos;

  slice->INS1 = ins;  
#else
  ins = slice->INS;
10002044:	68fb      	ldr	r3, [r7, #12]
10002046:	681b      	ldr	r3, [r3, #0]
10002048:	617b      	str	r3, [r7, #20]

  /* Configure the edge sensitivity for event 1 */
  ins &= ~(((uint32_t) XMC_CCU8_SLICE_EVENT_EDGE_CONFIG_MASK) << CCU8_CC8_INS_EV1EM_Pos);
1000204a:	697b      	ldr	r3, [r7, #20]
1000204c:	4a2a      	ldr	r2, [pc, #168]	; (100020f8 <XMC_CCU8_SLICE_ConfigureStatusBitOverrideEvent+0xc0>)
1000204e:	4013      	ands	r3, r2
10002050:	617b      	str	r3, [r7, #20]
  ins |= ((uint32_t) ev1_config->edge) << CCU8_CC8_INS_EV1EM_Pos;
10002052:	68bb      	ldr	r3, [r7, #8]
10002054:	785b      	ldrb	r3, [r3, #1]
10002056:	049b      	lsls	r3, r3, #18
10002058:	697a      	ldr	r2, [r7, #20]
1000205a:	4313      	orrs	r3, r2
1000205c:	617b      	str	r3, [r7, #20]

  /* Configure the edge sensitivity for event 2 */
  ins &= ~(((uint32_t) XMC_CCU8_SLICE_EVENT_EDGE_CONFIG_MASK) << CCU8_CC8_INS_EV2EM_Pos);
1000205e:	697b      	ldr	r3, [r7, #20]
10002060:	4a26      	ldr	r2, [pc, #152]	; (100020fc <XMC_CCU8_SLICE_ConfigureStatusBitOverrideEvent+0xc4>)
10002062:	4013      	ands	r3, r2
10002064:	617b      	str	r3, [r7, #20]
  ins |= ((uint32_t) ev2_config->edge) << CCU8_CC8_INS_EV2EM_Pos;
10002066:	687b      	ldr	r3, [r7, #4]
10002068:	785b      	ldrb	r3, [r3, #1]
1000206a:	051b      	lsls	r3, r3, #20
1000206c:	697a      	ldr	r2, [r7, #20]
1000206e:	4313      	orrs	r3, r2
10002070:	617b      	str	r3, [r7, #20]

  /* Configure the level sensitivity for event 1 */
  ins &= ~(((uint32_t) XMC_CCU8_SLICE_EVENT_LEVEL_CONFIG_MASK) << CCU8_CC8_INS_EV1LM_Pos);
10002072:	697b      	ldr	r3, [r7, #20]
10002074:	4a22      	ldr	r2, [pc, #136]	; (10002100 <XMC_CCU8_SLICE_ConfigureStatusBitOverrideEvent+0xc8>)
10002076:	4013      	ands	r3, r2
10002078:	617b      	str	r3, [r7, #20]
  ins |= ((uint32_t) ev1_config->level) << CCU8_CC8_INS_EV1LM_Pos;
1000207a:	68bb      	ldr	r3, [r7, #8]
1000207c:	789b      	ldrb	r3, [r3, #2]
1000207e:	05db      	lsls	r3, r3, #23
10002080:	697a      	ldr	r2, [r7, #20]
10002082:	4313      	orrs	r3, r2
10002084:	617b      	str	r3, [r7, #20]

  /* Configure the level sensitivity for event 2 */
  ins &= ~(((uint32_t) XMC_CCU8_SLICE_EVENT_LEVEL_CONFIG_MASK) << CCU8_CC8_INS_EV2LM_Pos);
10002086:	697b      	ldr	r3, [r7, #20]
10002088:	4a1e      	ldr	r2, [pc, #120]	; (10002104 <XMC_CCU8_SLICE_ConfigureStatusBitOverrideEvent+0xcc>)
1000208a:	4013      	ands	r3, r2
1000208c:	617b      	str	r3, [r7, #20]
  ins |= ((uint32_t) ev2_config->level) << CCU8_CC8_INS_EV2LM_Pos;
1000208e:	687b      	ldr	r3, [r7, #4]
10002090:	789b      	ldrb	r3, [r3, #2]
10002092:	061b      	lsls	r3, r3, #24
10002094:	697a      	ldr	r2, [r7, #20]
10002096:	4313      	orrs	r3, r2
10002098:	617b      	str	r3, [r7, #20]

  /* Configure the debounce filter for event 1 */
  ins &= ~(((uint32_t) XMC_CCU8_SLICE_EVENT_FILTER_CONFIG_MASK) << CCU8_CC8_INS_LPF1M_Pos);
1000209a:	697b      	ldr	r3, [r7, #20]
1000209c:	4a1a      	ldr	r2, [pc, #104]	; (10002108 <XMC_CCU8_SLICE_ConfigureStatusBitOverrideEvent+0xd0>)
1000209e:	4013      	ands	r3, r2
100020a0:	617b      	str	r3, [r7, #20]
  ins |= ((uint32_t) ev1_config->duration) << CCU8_CC8_INS_LPF1M_Pos;
100020a2:	68bb      	ldr	r3, [r7, #8]
100020a4:	78db      	ldrb	r3, [r3, #3]
100020a6:	06db      	lsls	r3, r3, #27
100020a8:	697a      	ldr	r2, [r7, #20]
100020aa:	4313      	orrs	r3, r2
100020ac:	617b      	str	r3, [r7, #20]

  /* Configure the debounce filter for event 2 */
  ins &= ~(((uint32_t) XMC_CCU8_SLICE_EVENT_FILTER_CONFIG_MASK) << CCU8_CC8_INS_LPF2M_Pos);
100020ae:	697b      	ldr	r3, [r7, #20]
100020b0:	4a16      	ldr	r2, [pc, #88]	; (1000210c <XMC_CCU8_SLICE_ConfigureStatusBitOverrideEvent+0xd4>)
100020b2:	4013      	ands	r3, r2
100020b4:	617b      	str	r3, [r7, #20]
  ins |= ((uint32_t) ev2_config->duration) << CCU8_CC8_INS_LPF2M_Pos;
100020b6:	687b      	ldr	r3, [r7, #4]
100020b8:	78db      	ldrb	r3, [r3, #3]
100020ba:	075b      	lsls	r3, r3, #29
100020bc:	697a      	ldr	r2, [r7, #20]
100020be:	4313      	orrs	r3, r2
100020c0:	617b      	str	r3, [r7, #20]

  /* Next, the input for Event1 */
  ins &= ~(((uint32_t) XMC_CCU8_SLICE_EVENT_INPUT_CONFIG_MASK) << CCU8_CC8_INS_EV1IS_Pos);
100020c2:	697b      	ldr	r3, [r7, #20]
100020c4:	22f0      	movs	r2, #240	; 0xf0
100020c6:	4393      	bics	r3, r2
100020c8:	617b      	str	r3, [r7, #20]
  ins |= ((uint32_t) ev1_config->mapped_input) << CCU8_CC8_INS_EV1IS_Pos;
100020ca:	68bb      	ldr	r3, [r7, #8]
100020cc:	781b      	ldrb	r3, [r3, #0]
100020ce:	011b      	lsls	r3, r3, #4
100020d0:	697a      	ldr	r2, [r7, #20]
100020d2:	4313      	orrs	r3, r2
100020d4:	617b      	str	r3, [r7, #20]

  /* Finally, the input for Event2 */
  ins &= ~(((uint32_t) XMC_CCU8_SLICE_EVENT_INPUT_CONFIG_MASK) << CCU8_CC8_INS_EV2IS_Pos);
100020d6:	697b      	ldr	r3, [r7, #20]
100020d8:	4a0d      	ldr	r2, [pc, #52]	; (10002110 <XMC_CCU8_SLICE_ConfigureStatusBitOverrideEvent+0xd8>)
100020da:	4013      	ands	r3, r2
100020dc:	617b      	str	r3, [r7, #20]
  ins |= ((uint32_t) ev2_config->mapped_input) << CCU8_CC8_INS_EV2IS_Pos;
100020de:	687b      	ldr	r3, [r7, #4]
100020e0:	781b      	ldrb	r3, [r3, #0]
100020e2:	021b      	lsls	r3, r3, #8
100020e4:	697a      	ldr	r2, [r7, #20]
100020e6:	4313      	orrs	r3, r2
100020e8:	617b      	str	r3, [r7, #20]

  slice->INS = ins;
100020ea:	68fb      	ldr	r3, [r7, #12]
100020ec:	697a      	ldr	r2, [r7, #20]
100020ee:	601a      	str	r2, [r3, #0]
#endif
}
100020f0:	46bd      	mov	sp, r7
100020f2:	b006      	add	sp, #24
100020f4:	bd80      	pop	{r7, pc}
100020f6:	46c0      	nop			; (mov r8, r8)
100020f8:	fff3ffff 	.word	0xfff3ffff
100020fc:	ffcfffff 	.word	0xffcfffff
10002100:	ff7fffff 	.word	0xff7fffff
10002104:	feffffff 	.word	0xfeffffff
10002108:	e7ffffff 	.word	0xe7ffffff
1000210c:	9fffffff 	.word	0x9fffffff
10002110:	fffff0ff 	.word	0xfffff0ff

10002114 <XMC_CCU8_SLICE_ConfigureEvent>:

/* API to configure a slice trigger event */
void XMC_CCU8_SLICE_ConfigureEvent(XMC_CCU8_SLICE_t *const slice,
                                   const XMC_CCU8_SLICE_EVENT_t event,
                                   const XMC_CCU8_SLICE_EVENT_CONFIG_t *const config)
{
10002114:	b580      	push	{r7, lr}
10002116:	b088      	sub	sp, #32
10002118:	af00      	add	r7, sp, #0
1000211a:	60f8      	str	r0, [r7, #12]
1000211c:	607a      	str	r2, [r7, #4]
1000211e:	230b      	movs	r3, #11
10002120:	18fb      	adds	r3, r7, r3
10002122:	1c0a      	adds	r2, r1, #0
10002124:	701a      	strb	r2, [r3, #0]
              (config->level == XMC_CCU8_SLICE_EVENT_LEVEL_SENSITIVITY_ACTIVE_LOW)));
  XMC_ASSERT("XMC_CCU8_SLICE_ConfigureEvent:Invalid Debounce Period",
             XMC_CCU8_SLICE_CHECK_EVENT_FILTER(config->duration));

  /* Calculate offset with reference to event */
  offset = ((uint8_t) event) - 1U;
10002126:	231f      	movs	r3, #31
10002128:	18fb      	adds	r3, r7, r3
1000212a:	220b      	movs	r2, #11
1000212c:	18ba      	adds	r2, r7, r2
1000212e:	7812      	ldrb	r2, [r2, #0]
10002130:	3a01      	subs	r2, #1
10002132:	701a      	strb	r2, [r3, #0]
  ins |= ((uint32_t) config->mapped_input) << pos;

  slice->INS1 = ins;

#else
  ins = slice->INS;
10002134:	68fb      	ldr	r3, [r7, #12]
10002136:	681b      	ldr	r3, [r3, #0]
10002138:	61bb      	str	r3, [r7, #24]

  /* First, configure the edge sensitivity */
  pos = ((uint8_t) CCU8_CC8_INS_EV0EM_Pos) + (uint8_t)(offset << 1U);
1000213a:	231f      	movs	r3, #31
1000213c:	18fb      	adds	r3, r7, r3
1000213e:	781b      	ldrb	r3, [r3, #0]
10002140:	18db      	adds	r3, r3, r3
10002142:	b2da      	uxtb	r2, r3
10002144:	2317      	movs	r3, #23
10002146:	18fb      	adds	r3, r7, r3
10002148:	3210      	adds	r2, #16
1000214a:	701a      	strb	r2, [r3, #0]
  ins &= ~(((uint32_t) XMC_CCU8_SLICE_EVENT_EDGE_CONFIG_MASK) << pos);
1000214c:	2317      	movs	r3, #23
1000214e:	18fb      	adds	r3, r7, r3
10002150:	781b      	ldrb	r3, [r3, #0]
10002152:	2203      	movs	r2, #3
10002154:	409a      	lsls	r2, r3
10002156:	1c13      	adds	r3, r2, #0
10002158:	43da      	mvns	r2, r3
1000215a:	69bb      	ldr	r3, [r7, #24]
1000215c:	4013      	ands	r3, r2
1000215e:	61bb      	str	r3, [r7, #24]
  ins |= ((uint32_t) config->edge) << pos;
10002160:	687b      	ldr	r3, [r7, #4]
10002162:	785b      	ldrb	r3, [r3, #1]
10002164:	1c1a      	adds	r2, r3, #0
10002166:	2317      	movs	r3, #23
10002168:	18fb      	adds	r3, r7, r3
1000216a:	781b      	ldrb	r3, [r3, #0]
1000216c:	409a      	lsls	r2, r3
1000216e:	1c13      	adds	r3, r2, #0
10002170:	69ba      	ldr	r2, [r7, #24]
10002172:	4313      	orrs	r3, r2
10002174:	61bb      	str	r3, [r7, #24]

  /* Next, the level */
  pos = ((uint8_t) CCU8_CC8_INS_EV0LM_Pos) + offset;
10002176:	2317      	movs	r3, #23
10002178:	18fb      	adds	r3, r7, r3
1000217a:	221f      	movs	r2, #31
1000217c:	18ba      	adds	r2, r7, r2
1000217e:	7812      	ldrb	r2, [r2, #0]
10002180:	3216      	adds	r2, #22
10002182:	701a      	strb	r2, [r3, #0]
  ins &= ~(((uint32_t) XMC_CCU8_SLICE_EVENT_LEVEL_CONFIG_MASK) << pos);
10002184:	2317      	movs	r3, #23
10002186:	18fb      	adds	r3, r7, r3
10002188:	781b      	ldrb	r3, [r3, #0]
1000218a:	2201      	movs	r2, #1
1000218c:	409a      	lsls	r2, r3
1000218e:	1c13      	adds	r3, r2, #0
10002190:	43da      	mvns	r2, r3
10002192:	69bb      	ldr	r3, [r7, #24]
10002194:	4013      	ands	r3, r2
10002196:	61bb      	str	r3, [r7, #24]
  ins |= ((uint32_t) (config->level)) << pos;
10002198:	687b      	ldr	r3, [r7, #4]
1000219a:	789b      	ldrb	r3, [r3, #2]
1000219c:	1c1a      	adds	r2, r3, #0
1000219e:	2317      	movs	r3, #23
100021a0:	18fb      	adds	r3, r7, r3
100021a2:	781b      	ldrb	r3, [r3, #0]
100021a4:	409a      	lsls	r2, r3
100021a6:	1c13      	adds	r3, r2, #0
100021a8:	69ba      	ldr	r2, [r7, #24]
100021aa:	4313      	orrs	r3, r2
100021ac:	61bb      	str	r3, [r7, #24]

  /* Next, the debounce filter */
  pos = ((uint8_t) CCU8_CC8_INS_LPF0M_Pos) + (uint8_t)(offset << 1U);
100021ae:	231f      	movs	r3, #31
100021b0:	18fb      	adds	r3, r7, r3
100021b2:	781b      	ldrb	r3, [r3, #0]
100021b4:	18db      	adds	r3, r3, r3
100021b6:	b2da      	uxtb	r2, r3
100021b8:	2317      	movs	r3, #23
100021ba:	18fb      	adds	r3, r7, r3
100021bc:	3219      	adds	r2, #25
100021be:	701a      	strb	r2, [r3, #0]
  ins &= ~(((uint32_t) XMC_CCU8_SLICE_EVENT_FILTER_CONFIG_MASK) << pos);
100021c0:	2317      	movs	r3, #23
100021c2:	18fb      	adds	r3, r7, r3
100021c4:	781b      	ldrb	r3, [r3, #0]
100021c6:	2203      	movs	r2, #3
100021c8:	409a      	lsls	r2, r3
100021ca:	1c13      	adds	r3, r2, #0
100021cc:	43da      	mvns	r2, r3
100021ce:	69bb      	ldr	r3, [r7, #24]
100021d0:	4013      	ands	r3, r2
100021d2:	61bb      	str	r3, [r7, #24]
  ins |= ((uint32_t) config->duration) << pos;
100021d4:	687b      	ldr	r3, [r7, #4]
100021d6:	78db      	ldrb	r3, [r3, #3]
100021d8:	1c1a      	adds	r2, r3, #0
100021da:	2317      	movs	r3, #23
100021dc:	18fb      	adds	r3, r7, r3
100021de:	781b      	ldrb	r3, [r3, #0]
100021e0:	409a      	lsls	r2, r3
100021e2:	1c13      	adds	r3, r2, #0
100021e4:	69ba      	ldr	r2, [r7, #24]
100021e6:	4313      	orrs	r3, r2
100021e8:	61bb      	str	r3, [r7, #24]

  /* Finally the input */
  pos = ((uint8_t) CCU8_CC8_INS_EV0IS_Pos) + (uint8_t)(offset << 2U);
100021ea:	2317      	movs	r3, #23
100021ec:	18fb      	adds	r3, r7, r3
100021ee:	221f      	movs	r2, #31
100021f0:	18ba      	adds	r2, r7, r2
100021f2:	7812      	ldrb	r2, [r2, #0]
100021f4:	0092      	lsls	r2, r2, #2
100021f6:	701a      	strb	r2, [r3, #0]
  ins &= ~(((uint32_t) XMC_CCU8_SLICE_EVENT_INPUT_CONFIG_MASK) << pos);
100021f8:	2317      	movs	r3, #23
100021fa:	18fb      	adds	r3, r7, r3
100021fc:	781b      	ldrb	r3, [r3, #0]
100021fe:	220f      	movs	r2, #15
10002200:	409a      	lsls	r2, r3
10002202:	1c13      	adds	r3, r2, #0
10002204:	43da      	mvns	r2, r3
10002206:	69bb      	ldr	r3, [r7, #24]
10002208:	4013      	ands	r3, r2
1000220a:	61bb      	str	r3, [r7, #24]
  ins |= ((uint32_t) config->mapped_input) << pos;
1000220c:	687b      	ldr	r3, [r7, #4]
1000220e:	781b      	ldrb	r3, [r3, #0]
10002210:	1c1a      	adds	r2, r3, #0
10002212:	2317      	movs	r3, #23
10002214:	18fb      	adds	r3, r7, r3
10002216:	781b      	ldrb	r3, [r3, #0]
10002218:	409a      	lsls	r2, r3
1000221a:	1c13      	adds	r3, r2, #0
1000221c:	69ba      	ldr	r2, [r7, #24]
1000221e:	4313      	orrs	r3, r2
10002220:	61bb      	str	r3, [r7, #24]

  slice->INS = ins;
10002222:	68fb      	ldr	r3, [r7, #12]
10002224:	69ba      	ldr	r2, [r7, #24]
10002226:	601a      	str	r2, [r3, #0]
#endif
}
10002228:	46bd      	mov	sp, r7
1000222a:	b008      	add	sp, #32
1000222c:	bd80      	pop	{r7, pc}
1000222e:	46c0      	nop			; (mov r8, r8)

10002230 <XMC_CCU8_SLICE_SetTimerPeriodMatch>:
  slice->TC = tc;
}

/* Programs period match value of the timer  */
void XMC_CCU8_SLICE_SetTimerPeriodMatch(XMC_CCU8_SLICE_t *const slice, const uint16_t period_val)
{
10002230:	b580      	push	{r7, lr}
10002232:	b082      	sub	sp, #8
10002234:	af00      	add	r7, sp, #0
10002236:	6078      	str	r0, [r7, #4]
10002238:	1c0a      	adds	r2, r1, #0
1000223a:	1cbb      	adds	r3, r7, #2
1000223c:	801a      	strh	r2, [r3, #0]
  XMC_ASSERT("XMC_CCU8_SLICE_SetTimerPeriodMatch:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  slice->PRS = (uint32_t) period_val;
1000223e:	1cbb      	adds	r3, r7, #2
10002240:	881a      	ldrh	r2, [r3, #0]
10002242:	687b      	ldr	r3, [r7, #4]
10002244:	635a      	str	r2, [r3, #52]	; 0x34
}
10002246:	46bd      	mov	sp, r7
10002248:	b002      	add	sp, #8
1000224a:	bd80      	pop	{r7, pc}

1000224c <XMC_CCU8_SLICE_SetTimerCompareMatch>:

/* Programs timer compare match value for channel 1 or 2 */
void XMC_CCU8_SLICE_SetTimerCompareMatch(XMC_CCU8_SLICE_t *const slice,
                                         const XMC_CCU8_SLICE_COMPARE_CHANNEL_t channel,
                                         const uint16_t compare_val)
{
1000224c:	b580      	push	{r7, lr}
1000224e:	b082      	sub	sp, #8
10002250:	af00      	add	r7, sp, #0
10002252:	6078      	str	r0, [r7, #4]
10002254:	1c08      	adds	r0, r1, #0
10002256:	1c11      	adds	r1, r2, #0
10002258:	1cfb      	adds	r3, r7, #3
1000225a:	1c02      	adds	r2, r0, #0
1000225c:	701a      	strb	r2, [r3, #0]
1000225e:	1c3b      	adds	r3, r7, #0
10002260:	1c0a      	adds	r2, r1, #0
10002262:	801a      	strh	r2, [r3, #0]
  XMC_ASSERT("XMC_CCU8_SLICE_SetTimerCompareMatch:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU8_SLICE_SetTimerCompareMatch:Invalid channel", XMC_CCU8_SLICE_CHECK_COMP_CHANNEL(channel));

  if (XMC_CCU8_SLICE_COMPARE_CHANNEL_1 == channel)
10002264:	1cfb      	adds	r3, r7, #3
10002266:	781b      	ldrb	r3, [r3, #0]
10002268:	2b00      	cmp	r3, #0
1000226a:	d104      	bne.n	10002276 <XMC_CCU8_SLICE_SetTimerCompareMatch+0x2a>
  {
    slice->CR1S = (uint32_t) compare_val;
1000226c:	1c3b      	adds	r3, r7, #0
1000226e:	881a      	ldrh	r2, [r3, #0]
10002270:	687b      	ldr	r3, [r7, #4]
10002272:	63da      	str	r2, [r3, #60]	; 0x3c
10002274:	e003      	b.n	1000227e <XMC_CCU8_SLICE_SetTimerCompareMatch+0x32>
  }
  else
  {
    slice->CR2S = (uint32_t) compare_val;
10002276:	1c3b      	adds	r3, r7, #0
10002278:	881a      	ldrh	r2, [r3, #0]
1000227a:	687b      	ldr	r3, [r7, #4]
1000227c:	645a      	str	r2, [r3, #68]	; 0x44
  }
}
1000227e:	46bd      	mov	sp, r7
10002280:	b002      	add	sp, #8
10002282:	bd80      	pop	{r7, pc}

10002284 <XMC_CCU8_SLICE_SetInterruptNode>:

/* Binds a capcom event to an NVIC node  */
void XMC_CCU8_SLICE_SetInterruptNode(XMC_CCU8_SLICE_t *const slice,
                                     const XMC_CCU8_SLICE_IRQ_ID_t event,
                                     const XMC_CCU8_SLICE_SR_ID_t sr)
{
10002284:	b580      	push	{r7, lr}
10002286:	b086      	sub	sp, #24
10002288:	af00      	add	r7, sp, #0
1000228a:	6078      	str	r0, [r7, #4]
1000228c:	1c08      	adds	r0, r1, #0
1000228e:	1c11      	adds	r1, r2, #0
10002290:	1cfb      	adds	r3, r7, #3
10002292:	1c02      	adds	r2, r0, #0
10002294:	701a      	strb	r2, [r3, #0]
10002296:	1cbb      	adds	r3, r7, #2
10002298:	1c0a      	adds	r2, r1, #0
1000229a:	701a      	strb	r2, [r3, #0]

  XMC_ASSERT("XMC_CCU8_SLICE_SetInterruptNode:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU8_SLICE_SetInterruptNode:Invalid SR ID ", XMC_CCU8_SLICE_CHECK_SR_ID(sr));
  XMC_ASSERT("XMC_CCU8_SLICE_SetInterruptNode:Invalid event", XMC_CCU8_SLICE_CHECK_INTERRUPT(event));

  srs = slice->SRS;
1000229c:	687b      	ldr	r3, [r7, #4]
1000229e:	22a8      	movs	r2, #168	; 0xa8
100022a0:	589b      	ldr	r3, [r3, r2]
100022a2:	60fb      	str	r3, [r7, #12]

  switch(event)
100022a4:	1cfb      	adds	r3, r7, #3
100022a6:	781b      	ldrb	r3, [r3, #0]
100022a8:	2b09      	cmp	r3, #9
100022aa:	d81f      	bhi.n	100022ec <XMC_CCU8_SLICE_SetInterruptNode+0x68>
100022ac:	009a      	lsls	r2, r3, #2
100022ae:	4b1c      	ldr	r3, [pc, #112]	; (10002320 <XMC_CCU8_SLICE_SetInterruptNode+0x9c>)
100022b0:	18d3      	adds	r3, r2, r3
100022b2:	681b      	ldr	r3, [r3, #0]
100022b4:	469f      	mov	pc, r3
  {
    case XMC_CCU8_SLICE_IRQ_ID_PERIOD_MATCH:
    case XMC_CCU8_SLICE_IRQ_ID_ONE_MATCH:
      mask = ((uint32_t) CCU8_CC8_SRS_POSR_Msk);
100022b6:	2303      	movs	r3, #3
100022b8:	617b      	str	r3, [r7, #20]
      pos  = CCU8_CC8_SRS_POSR_Pos;
100022ba:	2300      	movs	r3, #0
100022bc:	613b      	str	r3, [r7, #16]
      break;
100022be:	e01b      	b.n	100022f8 <XMC_CCU8_SLICE_SetInterruptNode+0x74>

    case XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_UP_CH_1:
    case XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_DOWN_CH_1:
      mask = ((uint32_t) CCU8_CC8_SRS_CM1SR_Msk);
100022c0:	230c      	movs	r3, #12
100022c2:	617b      	str	r3, [r7, #20]
      pos  = CCU8_CC8_SRS_CM1SR_Pos;
100022c4:	2302      	movs	r3, #2
100022c6:	613b      	str	r3, [r7, #16]
      break;
100022c8:	e016      	b.n	100022f8 <XMC_CCU8_SLICE_SetInterruptNode+0x74>

    case XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_UP_CH_2:
    case XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_DOWN_CH_2:
      mask = ((uint32_t) CCU8_CC8_SRS_CM2SR_Msk);
100022ca:	2330      	movs	r3, #48	; 0x30
100022cc:	617b      	str	r3, [r7, #20]
      pos  = CCU8_CC8_SRS_CM2SR_Pos;
100022ce:	2304      	movs	r3, #4
100022d0:	613b      	str	r3, [r7, #16]
      break;
100022d2:	e011      	b.n	100022f8 <XMC_CCU8_SLICE_SetInterruptNode+0x74>

    case XMC_CCU8_SLICE_IRQ_ID_EVENT0:
      mask = ((uint32_t) CCU8_CC8_SRS_E0SR_Msk);
100022d4:	23c0      	movs	r3, #192	; 0xc0
100022d6:	009b      	lsls	r3, r3, #2
100022d8:	617b      	str	r3, [r7, #20]
      pos  = CCU8_CC8_SRS_E0SR_Pos;
100022da:	2308      	movs	r3, #8
100022dc:	613b      	str	r3, [r7, #16]
      break;
100022de:	e00b      	b.n	100022f8 <XMC_CCU8_SLICE_SetInterruptNode+0x74>

    case XMC_CCU8_SLICE_IRQ_ID_EVENT1:
      mask = ((uint32_t) CCU8_CC8_SRS_E1SR_Msk);
100022e0:	23c0      	movs	r3, #192	; 0xc0
100022e2:	011b      	lsls	r3, r3, #4
100022e4:	617b      	str	r3, [r7, #20]
      pos  = CCU8_CC8_SRS_E1SR_Pos;
100022e6:	230a      	movs	r3, #10
100022e8:	613b      	str	r3, [r7, #16]
      break;
100022ea:	e005      	b.n	100022f8 <XMC_CCU8_SLICE_SetInterruptNode+0x74>

    default:
      mask = ((uint32_t) CCU8_CC8_SRS_E2SR_Msk);
100022ec:	23c0      	movs	r3, #192	; 0xc0
100022ee:	019b      	lsls	r3, r3, #6
100022f0:	617b      	str	r3, [r7, #20]
      pos  = CCU8_CC8_SRS_E2SR_Pos;
100022f2:	230c      	movs	r3, #12
100022f4:	613b      	str	r3, [r7, #16]
      break;
100022f6:	46c0      	nop			; (mov r8, r8)
  }
  
  srs &= ~mask;
100022f8:	697b      	ldr	r3, [r7, #20]
100022fa:	43da      	mvns	r2, r3
100022fc:	68fb      	ldr	r3, [r7, #12]
100022fe:	4013      	ands	r3, r2
10002300:	60fb      	str	r3, [r7, #12]
  srs |= (uint32_t)sr << pos;
10002302:	1cbb      	adds	r3, r7, #2
10002304:	781a      	ldrb	r2, [r3, #0]
10002306:	693b      	ldr	r3, [r7, #16]
10002308:	409a      	lsls	r2, r3
1000230a:	1c13      	adds	r3, r2, #0
1000230c:	68fa      	ldr	r2, [r7, #12]
1000230e:	4313      	orrs	r3, r2
10002310:	60fb      	str	r3, [r7, #12]
  
  slice->SRS = srs;
10002312:	687b      	ldr	r3, [r7, #4]
10002314:	21a8      	movs	r1, #168	; 0xa8
10002316:	68fa      	ldr	r2, [r7, #12]
10002318:	505a      	str	r2, [r3, r1]
}
1000231a:	46bd      	mov	sp, r7
1000231c:	b006      	add	sp, #24
1000231e:	bd80      	pop	{r7, pc}
10002320:	1000b1e0 	.word	0x1000b1e0

10002324 <XMC_CCU8_SLICE_DeadTimeInit>:
}

/* Initializes Dead time configuration for the slice outputs */
void XMC_CCU8_SLICE_DeadTimeInit(XMC_CCU8_SLICE_t *const slice,
                                 const XMC_CCU8_SLICE_DEAD_TIME_CONFIG_t *const config)
{
10002324:	b580      	push	{r7, lr}
10002326:	b082      	sub	sp, #8
10002328:	af00      	add	r7, sp, #0
1000232a:	6078      	str	r0, [r7, #4]
1000232c:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_CCU8_SLICE_ConfigureDeadTime:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));

  /* Program dead time value for channel 1 */
  slice->DC1R = config->dc1r;
1000232e:	683b      	ldr	r3, [r7, #0]
10002330:	685a      	ldr	r2, [r3, #4]
10002332:	687b      	ldr	r3, [r7, #4]
10002334:	651a      	str	r2, [r3, #80]	; 0x50
  /* Program dead time value for channel 2 */
  slice->DC2R = config->dc2r;
10002336:	683b      	ldr	r3, [r7, #0]
10002338:	689a      	ldr	r2, [r3, #8]
1000233a:	687b      	ldr	r3, [r7, #4]
1000233c:	655a      	str	r2, [r3, #84]	; 0x54
  /* Program dead time control configuration */
  slice->DTC = config->dtc;
1000233e:	683b      	ldr	r3, [r7, #0]
10002340:	681a      	ldr	r2, [r3, #0]
10002342:	687b      	ldr	r3, [r7, #4]
10002344:	64da      	str	r2, [r3, #76]	; 0x4c
}
10002346:	46bd      	mov	sp, r7
10002348:	b002      	add	sp, #8
1000234a:	bd80      	pop	{r7, pc}

1000234c <XMC_GPIO_SetHardwareControl>:
  port->IOCR[(uint32_t)pin >> 2U] &= ~(uint32_t)((uint32_t)PORT_IOCR_PC_Msk << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U)));
  port->IOCR[(uint32_t)pin >> 2U] |= (uint32_t)mode << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U));
}

void XMC_GPIO_SetHardwareControl(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_HWCTRL_t hwctrl)
{
1000234c:	b580      	push	{r7, lr}
1000234e:	b082      	sub	sp, #8
10002350:	af00      	add	r7, sp, #0
10002352:	6078      	str	r0, [r7, #4]
10002354:	1c08      	adds	r0, r1, #0
10002356:	1c11      	adds	r1, r2, #0
10002358:	1cfb      	adds	r3, r7, #3
1000235a:	1c02      	adds	r2, r0, #0
1000235c:	701a      	strb	r2, [r3, #0]
1000235e:	1cbb      	adds	r3, r7, #2
10002360:	1c0a      	adds	r2, r1, #0
10002362:	701a      	strb	r2, [r3, #0]
  XMC_ASSERT("XMC_GPIO_SetHardwareControl: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_SetHardwareControl: Invalid hwctrl", XMC_GPIO_CHECK_HWCTRL(hwctrl));

  port->HWSEL &= ~(uint32_t)((uint32_t)PORT_HWSEL_Msk << ((uint32_t)pin << 1U));
10002364:	687b      	ldr	r3, [r7, #4]
10002366:	6f5b      	ldr	r3, [r3, #116]	; 0x74
10002368:	1cfa      	adds	r2, r7, #3
1000236a:	7812      	ldrb	r2, [r2, #0]
1000236c:	0052      	lsls	r2, r2, #1
1000236e:	1c11      	adds	r1, r2, #0
10002370:	2203      	movs	r2, #3
10002372:	408a      	lsls	r2, r1
10002374:	43d2      	mvns	r2, r2
10002376:	401a      	ands	r2, r3
10002378:	687b      	ldr	r3, [r7, #4]
1000237a:	675a      	str	r2, [r3, #116]	; 0x74
  port->HWSEL |= (uint32_t)hwctrl << ((uint32_t)pin << 1U);
1000237c:	687b      	ldr	r3, [r7, #4]
1000237e:	6f5a      	ldr	r2, [r3, #116]	; 0x74
10002380:	1cbb      	adds	r3, r7, #2
10002382:	781b      	ldrb	r3, [r3, #0]
10002384:	1cf9      	adds	r1, r7, #3
10002386:	7809      	ldrb	r1, [r1, #0]
10002388:	0049      	lsls	r1, r1, #1
1000238a:	408b      	lsls	r3, r1
1000238c:	431a      	orrs	r2, r3
1000238e:	687b      	ldr	r3, [r7, #4]
10002390:	675a      	str	r2, [r3, #116]	; 0x74
}
10002392:	46bd      	mov	sp, r7
10002394:	b002      	add	sp, #8
10002396:	bd80      	pop	{r7, pc}

10002398 <__aeabi_uidiv>:
/***********************************************************************************************************************
 * API IMPLEMENTATION - aeabi routines
 **********************************************************************************************************************/
/* This function performs unsigned integer division */
uint32_t __aeabi_uidiv(uint32_t dividend, uint32_t divisor)
{
10002398:	b580      	push	{r7, lr}
1000239a:	b082      	sub	sp, #8
1000239c:	af00      	add	r7, sp, #0
1000239e:	6078      	str	r0, [r7, #4]
100023a0:	6039      	str	r1, [r7, #0]
  MATH->DIVCON  = XMC_MATH_UNSIGNED_DIVISION;
100023a2:	4b07      	ldr	r3, [pc, #28]	; (100023c0 <__aeabi_uidiv+0x28>)
100023a4:	2204      	movs	r2, #4
100023a6:	635a      	str	r2, [r3, #52]	; 0x34
  MATH->DVD     = dividend;
100023a8:	4b05      	ldr	r3, [pc, #20]	; (100023c0 <__aeabi_uidiv+0x28>)
100023aa:	687a      	ldr	r2, [r7, #4]
100023ac:	621a      	str	r2, [r3, #32]
  MATH->DVS     = divisor;
100023ae:	4b04      	ldr	r3, [pc, #16]	; (100023c0 <__aeabi_uidiv+0x28>)
100023b0:	683a      	ldr	r2, [r7, #0]
100023b2:	625a      	str	r2, [r3, #36]	; 0x24

  return ((uint32_t) MATH->QUOT);
100023b4:	4b02      	ldr	r3, [pc, #8]	; (100023c0 <__aeabi_uidiv+0x28>)
100023b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
100023b8:	1c18      	adds	r0, r3, #0
100023ba:	46bd      	mov	sp, r7
100023bc:	b002      	add	sp, #8
100023be:	bd80      	pop	{r7, pc}
100023c0:	40030000 	.word	0x40030000

100023c4 <__aeabi_idiv>:

/* This function performs signed integer division */
int32_t __aeabi_idiv(int32_t dividend, int32_t divisor)
{
100023c4:	b580      	push	{r7, lr}
100023c6:	b082      	sub	sp, #8
100023c8:	af00      	add	r7, sp, #0
100023ca:	6078      	str	r0, [r7, #4]
100023cc:	6039      	str	r1, [r7, #0]
  MATH->DIVCON  = XMC_MATH_SIGNED_DIVISION;
100023ce:	4b07      	ldr	r3, [pc, #28]	; (100023ec <__aeabi_idiv+0x28>)
100023d0:	2200      	movs	r2, #0
100023d2:	635a      	str	r2, [r3, #52]	; 0x34
  MATH->DVD     = dividend;
100023d4:	4b05      	ldr	r3, [pc, #20]	; (100023ec <__aeabi_idiv+0x28>)
100023d6:	687a      	ldr	r2, [r7, #4]
100023d8:	621a      	str	r2, [r3, #32]
  MATH->DVS     = divisor;
100023da:	4b04      	ldr	r3, [pc, #16]	; (100023ec <__aeabi_idiv+0x28>)
100023dc:	683a      	ldr	r2, [r7, #0]
100023de:	625a      	str	r2, [r3, #36]	; 0x24

  return ((int32_t) MATH->QUOT);
100023e0:	4b02      	ldr	r3, [pc, #8]	; (100023ec <__aeabi_idiv+0x28>)
100023e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
100023e4:	1c18      	adds	r0, r3, #0
100023e6:	46bd      	mov	sp, r7
100023e8:	b002      	add	sp, #8
100023ea:	bd80      	pop	{r7, pc}
100023ec:	40030000 	.word	0x40030000

100023f0 <__aeabi_uidivmod>:

/* This function performs unsigned integer division modulo */
uint64_t __aeabi_uidivmod(uint32_t dividend, uint32_t divisor)
{
100023f0:	b5f0      	push	{r4, r5, r6, r7, lr}
100023f2:	b087      	sub	sp, #28
100023f4:	af00      	add	r7, sp, #0
100023f6:	60f8      	str	r0, [r7, #12]
100023f8:	60b9      	str	r1, [r7, #8]
  uint64_t remainder;

  MATH->DIVCON  = XMC_MATH_UNSIGNED_DIVISION;
100023fa:	4a12      	ldr	r2, [pc, #72]	; (10002444 <__aeabi_uidivmod+0x54>)
100023fc:	2104      	movs	r1, #4
100023fe:	6351      	str	r1, [r2, #52]	; 0x34
  MATH->DVD     = dividend;
10002400:	4a10      	ldr	r2, [pc, #64]	; (10002444 <__aeabi_uidivmod+0x54>)
10002402:	68f9      	ldr	r1, [r7, #12]
10002404:	6211      	str	r1, [r2, #32]
  MATH->DVS     = divisor;
10002406:	4a0f      	ldr	r2, [pc, #60]	; (10002444 <__aeabi_uidivmod+0x54>)
10002408:	68b9      	ldr	r1, [r7, #8]
1000240a:	6251      	str	r1, [r2, #36]	; 0x24

  remainder = ((uint64_t) MATH->RMD) << 32U;
1000240c:	4a0d      	ldr	r2, [pc, #52]	; (10002444 <__aeabi_uidivmod+0x54>)
1000240e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
10002410:	603a      	str	r2, [r7, #0]
10002412:	2200      	movs	r2, #0
10002414:	607a      	str	r2, [r7, #4]
10002416:	683a      	ldr	r2, [r7, #0]
10002418:	0012      	movs	r2, r2
1000241a:	617a      	str	r2, [r7, #20]
1000241c:	2200      	movs	r2, #0
1000241e:	613a      	str	r2, [r7, #16]
  return (remainder | MATH->QUOT);
10002420:	4a08      	ldr	r2, [pc, #32]	; (10002444 <__aeabi_uidivmod+0x54>)
10002422:	6a92      	ldr	r2, [r2, #40]	; 0x28
10002424:	1c13      	adds	r3, r2, #0
10002426:	2200      	movs	r2, #0
10002428:	1c14      	adds	r4, r2, #0
1000242a:	693a      	ldr	r2, [r7, #16]
1000242c:	431a      	orrs	r2, r3
1000242e:	1c15      	adds	r5, r2, #0
10002430:	697a      	ldr	r2, [r7, #20]
10002432:	4322      	orrs	r2, r4
10002434:	1c16      	adds	r6, r2, #0
10002436:	1c2b      	adds	r3, r5, #0
10002438:	1c34      	adds	r4, r6, #0
}
1000243a:	1c18      	adds	r0, r3, #0
1000243c:	1c21      	adds	r1, r4, #0
1000243e:	46bd      	mov	sp, r7
10002440:	b007      	add	sp, #28
10002442:	bdf0      	pop	{r4, r5, r6, r7, pc}
10002444:	40030000 	.word	0x40030000

10002448 <__aeabi_idivmod>:

/* This function performs signed integer division modulo */
int64_t __aeabi_idivmod(int32_t dividend, int32_t divisor)
{
10002448:	b5f0      	push	{r4, r5, r6, r7, lr}
1000244a:	b087      	sub	sp, #28
1000244c:	af00      	add	r7, sp, #0
1000244e:	6078      	str	r0, [r7, #4]
10002450:	6039      	str	r1, [r7, #0]
  uint64_t remainder;
  uint64_t result;

  MATH->DIVCON  = XMC_MATH_SIGNED_DIVISION;
10002452:	4a12      	ldr	r2, [pc, #72]	; (1000249c <__aeabi_idivmod+0x54>)
10002454:	2100      	movs	r1, #0
10002456:	6351      	str	r1, [r2, #52]	; 0x34
  MATH->DVD     = dividend;
10002458:	4a10      	ldr	r2, [pc, #64]	; (1000249c <__aeabi_idivmod+0x54>)
1000245a:	6879      	ldr	r1, [r7, #4]
1000245c:	6211      	str	r1, [r2, #32]
  MATH->DVS     = divisor;
1000245e:	4a0f      	ldr	r2, [pc, #60]	; (1000249c <__aeabi_idivmod+0x54>)
10002460:	6839      	ldr	r1, [r7, #0]
10002462:	6251      	str	r1, [r2, #36]	; 0x24

  remainder = ((uint64_t) MATH->RMD) << 32U;
10002464:	4a0d      	ldr	r2, [pc, #52]	; (1000249c <__aeabi_idivmod+0x54>)
10002466:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
10002468:	1c15      	adds	r5, r2, #0
1000246a:	2200      	movs	r2, #0
1000246c:	1c16      	adds	r6, r2, #0
1000246e:	002a      	movs	r2, r5
10002470:	617a      	str	r2, [r7, #20]
10002472:	2200      	movs	r2, #0
10002474:	613a      	str	r2, [r7, #16]
  result    = (remainder | MATH->QUOT);
10002476:	4a09      	ldr	r2, [pc, #36]	; (1000249c <__aeabi_idivmod+0x54>)
10002478:	6a92      	ldr	r2, [r2, #40]	; 0x28
1000247a:	1c13      	adds	r3, r2, #0
1000247c:	2200      	movs	r2, #0
1000247e:	1c14      	adds	r4, r2, #0
10002480:	693a      	ldr	r2, [r7, #16]
10002482:	431a      	orrs	r2, r3
10002484:	60ba      	str	r2, [r7, #8]
10002486:	697a      	ldr	r2, [r7, #20]
10002488:	4322      	orrs	r2, r4
1000248a:	1c13      	adds	r3, r2, #0
1000248c:	60fb      	str	r3, [r7, #12]
  return ((int64_t) result);
1000248e:	68bb      	ldr	r3, [r7, #8]
10002490:	68fc      	ldr	r4, [r7, #12]
}
10002492:	1c18      	adds	r0, r3, #0
10002494:	1c21      	adds	r1, r4, #0
10002496:	46bd      	mov	sp, r7
10002498:	b007      	add	sp, #28
1000249a:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000249c:	40030000 	.word	0x40030000

100024a0 <XMC_USIC_CH_GetTransmitBufferStatus>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetDataOutputMode() \n\n\n
 */
__STATIC_INLINE XMC_USIC_CH_TBUF_STATUS_t XMC_USIC_CH_GetTransmitBufferStatus(XMC_USIC_CH_t *const channel)
{
100024a0:	b580      	push	{r7, lr}
100024a2:	b082      	sub	sp, #8
100024a4:	af00      	add	r7, sp, #0
100024a6:	6078      	str	r0, [r7, #4]
  return (XMC_USIC_CH_TBUF_STATUS_t)(channel->TCSR & USIC_CH_TCSR_TDV_Msk);
100024a8:	687b      	ldr	r3, [r7, #4]
100024aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
100024ac:	b2db      	uxtb	r3, r3
100024ae:	227f      	movs	r2, #127	; 0x7f
100024b0:	4393      	bics	r3, r2
100024b2:	b2db      	uxtb	r3, r3
}
100024b4:	1c18      	adds	r0, r3, #0
100024b6:	46bd      	mov	sp, r7
100024b8:	b002      	add	sp, #8
100024ba:	bd80      	pop	{r7, pc}

100024bc <XMC_UART_CH_ClearStatusFlag>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_UART_CH_DisableEvent(),  XMC_UART_CH_GetStatusFlag()\n\n\n
 */
__STATIC_INLINE void XMC_UART_CH_ClearStatusFlag(XMC_USIC_CH_t *const channel, const uint32_t flag)
{
100024bc:	b580      	push	{r7, lr}
100024be:	b082      	sub	sp, #8
100024c0:	af00      	add	r7, sp, #0
100024c2:	6078      	str	r0, [r7, #4]
100024c4:	6039      	str	r1, [r7, #0]
  channel->PSCR = flag;
100024c6:	687b      	ldr	r3, [r7, #4]
100024c8:	683a      	ldr	r2, [r7, #0]
100024ca:	64da      	str	r2, [r3, #76]	; 0x4c
}
100024cc:	46bd      	mov	sp, r7
100024ce:	b002      	add	sp, #8
100024d0:	bd80      	pop	{r7, pc}
100024d2:	46c0      	nop			; (mov r8, r8)

100024d4 <XMC_UART_CH_Init>:
/*********************************************************************************************************************
 * API IMPLEMENTATION
 *********************************************************************************************************************/

void XMC_UART_CH_Init(XMC_USIC_CH_t *channel, const XMC_UART_CH_CONFIG_t *const config)
{
100024d4:	b580      	push	{r7, lr}
100024d6:	b084      	sub	sp, #16
100024d8:	af00      	add	r7, sp, #0
100024da:	6078      	str	r0, [r7, #4]
100024dc:	6039      	str	r1, [r7, #0]
  uint32_t oversampling = XMC_UART_CH_OVERSAMPLING;
100024de:	2310      	movs	r3, #16
100024e0:	60fb      	str	r3, [r7, #12]

  /* USIC channel switched on*/
  XMC_USIC_CH_Enable(channel);
100024e2:	687b      	ldr	r3, [r7, #4]
100024e4:	1c18      	adds	r0, r3, #0
100024e6:	f000 f89d 	bl	10002624 <XMC_USIC_CH_Enable>
  
  if(config->oversampling != 0U)
100024ea:	683b      	ldr	r3, [r7, #0]
100024ec:	79db      	ldrb	r3, [r3, #7]
100024ee:	2b00      	cmp	r3, #0
100024f0:	d002      	beq.n	100024f8 <XMC_UART_CH_Init+0x24>
  {
    oversampling = (uint32_t)config->oversampling;
100024f2:	683b      	ldr	r3, [r7, #0]
100024f4:	79db      	ldrb	r3, [r3, #7]
100024f6:	60fb      	str	r3, [r7, #12]
  }
  
  /* Configure baud rate */
  (void)XMC_USIC_CH_SetBaudrate(channel, config->baudrate, oversampling);
100024f8:	683b      	ldr	r3, [r7, #0]
100024fa:	681a      	ldr	r2, [r3, #0]
100024fc:	6879      	ldr	r1, [r7, #4]
100024fe:	68fb      	ldr	r3, [r7, #12]
10002500:	1c08      	adds	r0, r1, #0
10002502:	1c11      	adds	r1, r2, #0
10002504:	1c1a      	adds	r2, r3, #0
10002506:	f000 f8b5 	bl	10002674 <XMC_USIC_CH_SetBaudrate>
   * i.e. the 0 level is signaled during the complete bit time
   * Sampling point set equal to the half of the oversampling period
   * Enable Sample Majority Decision 
   * Enable Transfer Status BUSY
   */
  channel->PCR_ASCMode = (uint32_t)(((config->stop_bits - 1UL) << USIC_CH_PCR_ASCMode_STPB_Pos) |
1000250a:	683b      	ldr	r3, [r7, #0]
1000250c:	799b      	ldrb	r3, [r3, #6]
1000250e:	3b01      	subs	r3, #1
10002510:	005a      	lsls	r2, r3, #1
                                    (((oversampling >> 1UL) + 1UL) << USIC_CH_PCR_ASCMode_SP_Pos) |
10002512:	68fb      	ldr	r3, [r7, #12]
10002514:	085b      	lsrs	r3, r3, #1
10002516:	3301      	adds	r3, #1
10002518:	021b      	lsls	r3, r3, #8
   * i.e. the 0 level is signaled during the complete bit time
   * Sampling point set equal to the half of the oversampling period
   * Enable Sample Majority Decision 
   * Enable Transfer Status BUSY
   */
  channel->PCR_ASCMode = (uint32_t)(((config->stop_bits - 1UL) << USIC_CH_PCR_ASCMode_STPB_Pos) |
1000251a:	4313      	orrs	r3, r2
1000251c:	4a19      	ldr	r2, [pc, #100]	; (10002584 <XMC_UART_CH_Init+0xb0>)
1000251e:	431a      	orrs	r2, r3
10002520:	687b      	ldr	r3, [r7, #4]
10002522:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Set passive data level, high
     Set word length. Data bits - 1
     If frame length is > 0, frame_lemgth-1; else, FLE = WLE (Data bits - 1)
     Transmission Mode: The shift control signal is considered active if it
     is at 1-level. This is the setting to be programmed to allow data transfers */
  channel->SCTR = (uint32_t)((((uint32_t)config->data_bits - 1UL) << USIC_CH_SCTR_WLE_Pos) |
10002524:	683b      	ldr	r3, [r7, #0]
10002526:	791b      	ldrb	r3, [r3, #4]
10002528:	3b01      	subs	r3, #1
1000252a:	061b      	lsls	r3, r3, #24
1000252c:	2281      	movs	r2, #129	; 0x81
1000252e:	0052      	lsls	r2, r2, #1
10002530:	431a      	orrs	r2, r3
10002532:	687b      	ldr	r3, [r7, #4]
10002534:	635a      	str	r2, [r3, #52]	; 0x34
                             ((0x1UL << USIC_CH_SCTR_TRM_Pos) | USIC_CH_SCTR_PDL_Msk));

  if (config->frame_length != 0U)
10002536:	683b      	ldr	r3, [r7, #0]
10002538:	795b      	ldrb	r3, [r3, #5]
1000253a:	2b00      	cmp	r3, #0
1000253c:	d009      	beq.n	10002552 <XMC_UART_CH_Init+0x7e>
  {
    channel->SCTR |= (uint32_t)(((uint32_t)config->frame_length - 1UL) << USIC_CH_SCTR_FLE_Pos);
1000253e:	687b      	ldr	r3, [r7, #4]
10002540:	6b5a      	ldr	r2, [r3, #52]	; 0x34
10002542:	683b      	ldr	r3, [r7, #0]
10002544:	795b      	ldrb	r3, [r3, #5]
10002546:	3b01      	subs	r3, #1
10002548:	041b      	lsls	r3, r3, #16
1000254a:	431a      	orrs	r2, r3
1000254c:	687b      	ldr	r3, [r7, #4]
1000254e:	635a      	str	r2, [r3, #52]	; 0x34
10002550:	e008      	b.n	10002564 <XMC_UART_CH_Init+0x90>
  }
  else
  {
    channel->SCTR |= (uint32_t)(((uint32_t)config->data_bits - 1UL) << USIC_CH_SCTR_FLE_Pos);
10002552:	687b      	ldr	r3, [r7, #4]
10002554:	6b5a      	ldr	r2, [r3, #52]	; 0x34
10002556:	683b      	ldr	r3, [r7, #0]
10002558:	791b      	ldrb	r3, [r3, #4]
1000255a:	3b01      	subs	r3, #1
1000255c:	041b      	lsls	r3, r3, #16
1000255e:	431a      	orrs	r2, r3
10002560:	687b      	ldr	r3, [r7, #4]
10002562:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Enable transfer buffer */
  channel->TCSR = (0x1UL << USIC_CH_TCSR_TDEN_Pos) |
10002564:	687b      	ldr	r3, [r7, #4]
10002566:	22a0      	movs	r2, #160	; 0xa0
10002568:	00d2      	lsls	r2, r2, #3
1000256a:	639a      	str	r2, [r3, #56]	; 0x38
                  USIC_CH_TCSR_TDSSM_Msk;

  /* Clear protocol status */
  channel->PSCR = 0xFFFFFFFFUL;
1000256c:	687b      	ldr	r3, [r7, #4]
1000256e:	2201      	movs	r2, #1
10002570:	4252      	negs	r2, r2
10002572:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set parity settings */
  channel->CCR = (uint32_t)config->parity_mode;
10002574:	683b      	ldr	r3, [r7, #0]
10002576:	891b      	ldrh	r3, [r3, #8]
10002578:	1c1a      	adds	r2, r3, #0
1000257a:	687b      	ldr	r3, [r7, #4]
1000257c:	641a      	str	r2, [r3, #64]	; 0x40
}
1000257e:	46bd      	mov	sp, r7
10002580:	b004      	add	sp, #16
10002582:	bd80      	pop	{r7, pc}
10002584:	00030001 	.word	0x00030001

10002588 <XMC_UART_CH_Transmit>:
  } 
  return status;
}

void XMC_UART_CH_Transmit(XMC_USIC_CH_t *const channel, const uint16_t data)
{
10002588:	b580      	push	{r7, lr}
1000258a:	b082      	sub	sp, #8
1000258c:	af00      	add	r7, sp, #0
1000258e:	6078      	str	r0, [r7, #4]
10002590:	1c0a      	adds	r2, r1, #0
10002592:	1cbb      	adds	r3, r7, #2
10002594:	801a      	strh	r2, [r3, #0]
  /* Check FIFO size */
  if ((channel->TBCTR & USIC_CH_TBCTR_SIZE_Msk) == 0UL)
10002596:	687a      	ldr	r2, [r7, #4]
10002598:	2384      	movs	r3, #132	; 0x84
1000259a:	005b      	lsls	r3, r3, #1
1000259c:	58d2      	ldr	r2, [r2, r3]
1000259e:	23e0      	movs	r3, #224	; 0xe0
100025a0:	04db      	lsls	r3, r3, #19
100025a2:	4013      	ands	r3, r2
100025a4:	d114      	bne.n	100025d0 <XMC_UART_CH_Transmit+0x48>
  {
    /* Wait till the Transmit Buffer is free for transmission */
    while(XMC_USIC_CH_GetTransmitBufferStatus(channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
100025a6:	46c0      	nop			; (mov r8, r8)
100025a8:	687b      	ldr	r3, [r7, #4]
100025aa:	1c18      	adds	r0, r3, #0
100025ac:	f7ff ff78 	bl	100024a0 <XMC_USIC_CH_GetTransmitBufferStatus>
100025b0:	1e03      	subs	r3, r0, #0
100025b2:	2b80      	cmp	r3, #128	; 0x80
100025b4:	d0f8      	beq.n	100025a8 <XMC_UART_CH_Transmit+0x20>
    {
    }
  
    /* Clear the Transmit Buffer indication flag */
    XMC_UART_CH_ClearStatusFlag(channel, (uint32_t)XMC_UART_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION);
100025b6:	687a      	ldr	r2, [r7, #4]
100025b8:	2380      	movs	r3, #128	; 0x80
100025ba:	019b      	lsls	r3, r3, #6
100025bc:	1c10      	adds	r0, r2, #0
100025be:	1c19      	adds	r1, r3, #0
100025c0:	f7ff ff7c 	bl	100024bc <XMC_UART_CH_ClearStatusFlag>
  
    /*Transmit data */
    channel->TBUF[0U] = data;
100025c4:	1cbb      	adds	r3, r7, #2
100025c6:	881a      	ldrh	r2, [r3, #0]
100025c8:	687b      	ldr	r3, [r7, #4]
100025ca:	2180      	movs	r1, #128	; 0x80
100025cc:	505a      	str	r2, [r3, r1]
100025ce:	e005      	b.n	100025dc <XMC_UART_CH_Transmit+0x54>
  }
  else
  {
    channel->IN[0U] = data;
100025d0:	1cbb      	adds	r3, r7, #2
100025d2:	8819      	ldrh	r1, [r3, #0]
100025d4:	687a      	ldr	r2, [r7, #4]
100025d6:	23c0      	movs	r3, #192	; 0xc0
100025d8:	005b      	lsls	r3, r3, #1
100025da:	50d1      	str	r1, [r2, r3]
  }
}
100025dc:	46bd      	mov	sp, r7
100025de:	b002      	add	sp, #8
100025e0:	bd80      	pop	{r7, pc}
100025e2:	46c0      	nop			; (mov r8, r8)

100025e4 <XMC_UART_CH_GetReceivedData>:

uint16_t XMC_UART_CH_GetReceivedData(XMC_USIC_CH_t *const channel)
{
100025e4:	b580      	push	{r7, lr}
100025e6:	b084      	sub	sp, #16
100025e8:	af00      	add	r7, sp, #0
100025ea:	6078      	str	r0, [r7, #4]
  uint16_t retval;

  /* Check FIFO size */
  if ((channel->RBCTR & USIC_CH_RBCTR_SIZE_Msk) == 0U)
100025ec:	687a      	ldr	r2, [r7, #4]
100025ee:	2386      	movs	r3, #134	; 0x86
100025f0:	005b      	lsls	r3, r3, #1
100025f2:	58d2      	ldr	r2, [r2, r3]
100025f4:	23e0      	movs	r3, #224	; 0xe0
100025f6:	04db      	lsls	r3, r3, #19
100025f8:	4013      	ands	r3, r2
100025fa:	d105      	bne.n	10002608 <XMC_UART_CH_GetReceivedData+0x24>
  {
    retval = (uint16_t)channel->RBUF;
100025fc:	687b      	ldr	r3, [r7, #4]
100025fe:	6d5a      	ldr	r2, [r3, #84]	; 0x54
10002600:	230e      	movs	r3, #14
10002602:	18fb      	adds	r3, r7, r3
10002604:	801a      	strh	r2, [r3, #0]
10002606:	e006      	b.n	10002616 <XMC_UART_CH_GetReceivedData+0x32>
  }
  else
  {
    retval = (uint16_t)channel->OUTR;
10002608:	687a      	ldr	r2, [r7, #4]
1000260a:	238e      	movs	r3, #142	; 0x8e
1000260c:	005b      	lsls	r3, r3, #1
1000260e:	58d2      	ldr	r2, [r2, r3]
10002610:	230e      	movs	r3, #14
10002612:	18fb      	adds	r3, r7, r3
10002614:	801a      	strh	r2, [r3, #0]
  }

  return retval;
10002616:	230e      	movs	r3, #14
10002618:	18fb      	adds	r3, r7, r3
1000261a:	881b      	ldrh	r3, [r3, #0]
}
1000261c:	1c18      	adds	r0, r3, #0
1000261e:	46bd      	mov	sp, r7
10002620:	b004      	add	sp, #16
10002622:	bd80      	pop	{r7, pc}

10002624 <XMC_USIC_CH_Enable>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

void XMC_USIC_CH_Enable(XMC_USIC_CH_t *const channel)
{
10002624:	b580      	push	{r7, lr}
10002626:	b082      	sub	sp, #8
10002628:	af00      	add	r7, sp, #0
1000262a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_USIC_CH_Enable: channel not valid", XMC_USIC_IsChannelValid(channel));

  if ((channel == XMC_USIC0_CH0) || (channel == XMC_USIC0_CH1))
1000262c:	687a      	ldr	r2, [r7, #4]
1000262e:	2390      	movs	r3, #144	; 0x90
10002630:	05db      	lsls	r3, r3, #23
10002632:	429a      	cmp	r2, r3
10002634:	d003      	beq.n	1000263e <XMC_USIC_CH_Enable+0x1a>
10002636:	687b      	ldr	r3, [r7, #4]
10002638:	4a0c      	ldr	r2, [pc, #48]	; (1000266c <XMC_USIC_CH_Enable+0x48>)
1000263a:	4293      	cmp	r3, r2
1000263c:	d103      	bne.n	10002646 <XMC_USIC_CH_Enable+0x22>
  {
    XMC_USIC_Enable(XMC_USIC0);
1000263e:	4b0c      	ldr	r3, [pc, #48]	; (10002670 <XMC_USIC_CH_Enable+0x4c>)
10002640:	1c18      	adds	r0, r3, #0
10002642:	f000 f983 	bl	1000294c <XMC_USIC_Enable>
  {
    XMC_ASSERT("USIC module not available", 0U/*Always*/);
  }

  /* USIC channel switched on*/
  channel->KSCFG = (USIC_CH_KSCFG_MODEN_Msk | USIC_CH_KSCFG_BPMODEN_Msk);
10002646:	687b      	ldr	r3, [r7, #4]
10002648:	2203      	movs	r2, #3
1000264a:	60da      	str	r2, [r3, #12]
  while ((channel->KSCFG & USIC_CH_KSCFG_MODEN_Msk) == 0U)
1000264c:	46c0      	nop			; (mov r8, r8)
1000264e:	687b      	ldr	r3, [r7, #4]
10002650:	68db      	ldr	r3, [r3, #12]
10002652:	2201      	movs	r2, #1
10002654:	4013      	ands	r3, r2
10002656:	d0fa      	beq.n	1000264e <XMC_USIC_CH_Enable+0x2a>
  {
    /* Wait till the channel is enabled */
  }

  /* Set USIC channel in IDLE mode */
  channel->CCR &= (uint32_t)~USIC_CH_CCR_MODE_Msk;
10002658:	687b      	ldr	r3, [r7, #4]
1000265a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
1000265c:	220f      	movs	r2, #15
1000265e:	4393      	bics	r3, r2
10002660:	1c1a      	adds	r2, r3, #0
10002662:	687b      	ldr	r3, [r7, #4]
10002664:	641a      	str	r2, [r3, #64]	; 0x40
}
10002666:	46bd      	mov	sp, r7
10002668:	b002      	add	sp, #8
1000266a:	bd80      	pop	{r7, pc}
1000266c:	48000200 	.word	0x48000200
10002670:	48000008 	.word	0x48000008

10002674 <XMC_USIC_CH_SetBaudrate>:
{
  channel->KSCFG = (uint32_t)((channel->KSCFG & (~USIC_CH_KSCFG_MODEN_Msk)) | USIC_CH_KSCFG_BPMODEN_Msk);
}

XMC_USIC_CH_STATUS_t XMC_USIC_CH_SetBaudrate(XMC_USIC_CH_t *const channel, uint32_t rate, uint32_t oversampling)
{
10002674:	b580      	push	{r7, lr}
10002676:	b08e      	sub	sp, #56	; 0x38
10002678:	af00      	add	r7, sp, #0
1000267a:	60f8      	str	r0, [r7, #12]
1000267c:	60b9      	str	r1, [r7, #8]
1000267e:	607a      	str	r2, [r7, #4]
  
  uint32_t pdiv_frac;
  uint32_t pdiv_frac_min;

  /* The rate and peripheral clock are divided by 100 to be able to use only 32bit arithmetic */
  if ((rate >= 100U) && (oversampling != 0U))
10002680:	68bb      	ldr	r3, [r7, #8]
10002682:	2b63      	cmp	r3, #99	; 0x63
10002684:	d95c      	bls.n	10002740 <XMC_USIC_CH_SetBaudrate+0xcc>
10002686:	687b      	ldr	r3, [r7, #4]
10002688:	2b00      	cmp	r3, #0
1000268a:	d059      	beq.n	10002740 <XMC_USIC_CH_SetBaudrate+0xcc>
  {
    peripheral_clock = XMC_SCU_CLOCK_GetPeripheralClockFrequency() / 100U;
1000268c:	f7fe ff14 	bl	100014b8 <XMC_SCU_CLOCK_GetPeripheralClockFrequency>
10002690:	1c03      	adds	r3, r0, #0
10002692:	1c18      	adds	r0, r3, #0
10002694:	2164      	movs	r1, #100	; 0x64
10002696:	f7ff fe7f 	bl	10002398 <__aeabi_uidiv>
1000269a:	1c03      	adds	r3, r0, #0
1000269c:	623b      	str	r3, [r7, #32]
    rate = rate / 100U;
1000269e:	68bb      	ldr	r3, [r7, #8]
100026a0:	1c18      	adds	r0, r3, #0
100026a2:	2164      	movs	r1, #100	; 0x64
100026a4:	f7ff fe78 	bl	10002398 <__aeabi_uidiv>
100026a8:	1c03      	adds	r3, r0, #0
100026aa:	60bb      	str	r3, [r7, #8]

    clock_divider_min = 1U;
100026ac:	2301      	movs	r3, #1
100026ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    pdiv_int_min = 1U;
100026b0:	2301      	movs	r3, #1
100026b2:	62bb      	str	r3, [r7, #40]	; 0x28
    pdiv_frac_min = 0x3ffU;
100026b4:	4b28      	ldr	r3, [pc, #160]	; (10002758 <XMC_USIC_CH_SetBaudrate+0xe4>)
100026b6:	627b      	str	r3, [r7, #36]	; 0x24

    for(clock_divider = 1023U; clock_divider > 0U; --clock_divider)
100026b8:	4b27      	ldr	r3, [pc, #156]	; (10002758 <XMC_USIC_CH_SetBaudrate+0xe4>)
100026ba:	633b      	str	r3, [r7, #48]	; 0x30
100026bc:	e024      	b.n	10002708 <XMC_USIC_CH_SetBaudrate+0x94>
    {
      pdiv = ((peripheral_clock * clock_divider) / (rate * oversampling));
100026be:	6a3b      	ldr	r3, [r7, #32]
100026c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
100026c2:	435a      	muls	r2, r3
100026c4:	1c11      	adds	r1, r2, #0
100026c6:	68bb      	ldr	r3, [r7, #8]
100026c8:	687a      	ldr	r2, [r7, #4]
100026ca:	4353      	muls	r3, r2
100026cc:	1c08      	adds	r0, r1, #0
100026ce:	1c19      	adds	r1, r3, #0
100026d0:	f7ff fe62 	bl	10002398 <__aeabi_uidiv>
100026d4:	1c03      	adds	r3, r0, #0
100026d6:	61fb      	str	r3, [r7, #28]
      pdiv_int = pdiv >> 10U;
100026d8:	69fb      	ldr	r3, [r7, #28]
100026da:	0a9b      	lsrs	r3, r3, #10
100026dc:	61bb      	str	r3, [r7, #24]
      pdiv_frac = pdiv & 0x3ffU;
100026de:	69fb      	ldr	r3, [r7, #28]
100026e0:	059b      	lsls	r3, r3, #22
100026e2:	0d9b      	lsrs	r3, r3, #22
100026e4:	617b      	str	r3, [r7, #20]

      if ((pdiv_int < 1024U) && (pdiv_frac < pdiv_frac_min))
100026e6:	69bb      	ldr	r3, [r7, #24]
100026e8:	4a1b      	ldr	r2, [pc, #108]	; (10002758 <XMC_USIC_CH_SetBaudrate+0xe4>)
100026ea:	4293      	cmp	r3, r2
100026ec:	d809      	bhi.n	10002702 <XMC_USIC_CH_SetBaudrate+0x8e>
100026ee:	697a      	ldr	r2, [r7, #20]
100026f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
100026f2:	429a      	cmp	r2, r3
100026f4:	d205      	bcs.n	10002702 <XMC_USIC_CH_SetBaudrate+0x8e>
      {
        pdiv_frac_min = pdiv_frac;
100026f6:	697b      	ldr	r3, [r7, #20]
100026f8:	627b      	str	r3, [r7, #36]	; 0x24
        pdiv_int_min = pdiv_int;
100026fa:	69bb      	ldr	r3, [r7, #24]
100026fc:	62bb      	str	r3, [r7, #40]	; 0x28
        clock_divider_min = clock_divider;
100026fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10002700:	62fb      	str	r3, [r7, #44]	; 0x2c

    clock_divider_min = 1U;
    pdiv_int_min = 1U;
    pdiv_frac_min = 0x3ffU;

    for(clock_divider = 1023U; clock_divider > 0U; --clock_divider)
10002702:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10002704:	3b01      	subs	r3, #1
10002706:	633b      	str	r3, [r7, #48]	; 0x30
10002708:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1000270a:	2b00      	cmp	r3, #0
1000270c:	d1d7      	bne.n	100026be <XMC_USIC_CH_SetBaudrate+0x4a>
        pdiv_int_min = pdiv_int;
        clock_divider_min = clock_divider;
      }
    }

    channel->FDR = XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_FRACTIONAL |
1000270e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
10002710:	2280      	movs	r2, #128	; 0x80
10002712:	0212      	lsls	r2, r2, #8
10002714:	431a      	orrs	r2, r3
10002716:	68fb      	ldr	r3, [r7, #12]
10002718:	611a      	str	r2, [r3, #16]
                   (clock_divider_min << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
1000271a:	68fb      	ldr	r3, [r7, #12]
1000271c:	695b      	ldr	r3, [r3, #20]
1000271e:	4a0f      	ldr	r2, [pc, #60]	; (1000275c <XMC_USIC_CH_SetBaudrate+0xe8>)
10002720:	401a      	ands	r2, r3
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
10002722:	687b      	ldr	r3, [r7, #4]
10002724:	3b01      	subs	r3, #1
10002726:	029b      	lsls	r3, r3, #10
                   (clock_divider_min << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
10002728:	431a      	orrs	r2, r3
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
                   ((pdiv_int_min - 1U) << USIC_CH_BRG_PDIV_Pos);
1000272a:	6abb      	ldr	r3, [r7, #40]	; 0x28
1000272c:	3b01      	subs	r3, #1
1000272e:	041b      	lsls	r3, r3, #16

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
10002730:	431a      	orrs	r2, r3
    }

    channel->FDR = XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_FRACTIONAL |
                   (clock_divider_min << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
10002732:	68fb      	ldr	r3, [r7, #12]
10002734:	615a      	str	r2, [r3, #20]
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
                   ((pdiv_int_min - 1U) << USIC_CH_BRG_PDIV_Pos);
                    
    status = XMC_USIC_CH_STATUS_OK;
10002736:	2337      	movs	r3, #55	; 0x37
10002738:	18fb      	adds	r3, r7, r3
1000273a:	2200      	movs	r2, #0
1000273c:	701a      	strb	r2, [r3, #0]
1000273e:	e003      	b.n	10002748 <XMC_USIC_CH_SetBaudrate+0xd4>
  }
  else 
  {
    status = XMC_USIC_CH_STATUS_ERROR;
10002740:	2337      	movs	r3, #55	; 0x37
10002742:	18fb      	adds	r3, r7, r3
10002744:	2201      	movs	r2, #1
10002746:	701a      	strb	r2, [r3, #0]
  }
  
  return status;
10002748:	2337      	movs	r3, #55	; 0x37
1000274a:	18fb      	adds	r3, r7, r3
1000274c:	781b      	ldrb	r3, [r3, #0]
}
1000274e:	1c18      	adds	r0, r3, #0
10002750:	46bd      	mov	sp, r7
10002752:	b00e      	add	sp, #56	; 0x38
10002754:	bd80      	pop	{r7, pc}
10002756:	46c0      	nop			; (mov r8, r8)
10002758:	000003ff 	.word	0x000003ff
1000275c:	fc0080ef 	.word	0xfc0080ef

10002760 <XMC_USIC_CH_TXFIFO_Configure>:

void XMC_USIC_CH_TXFIFO_Configure(XMC_USIC_CH_t *const channel,
                                  const uint32_t data_pointer,
                                  const XMC_USIC_CH_FIFO_SIZE_t size,
                                  const uint32_t limit)
{
10002760:	b580      	push	{r7, lr}
10002762:	b084      	sub	sp, #16
10002764:	af00      	add	r7, sp, #0
10002766:	60f8      	str	r0, [r7, #12]
10002768:	60b9      	str	r1, [r7, #8]
1000276a:	603b      	str	r3, [r7, #0]
1000276c:	1dfb      	adds	r3, r7, #7
1000276e:	701a      	strb	r2, [r3, #0]
  /* Disable FIFO */
  channel->TBCTR &= (uint32_t)~USIC_CH_TBCTR_SIZE_Msk;
10002770:	68fa      	ldr	r2, [r7, #12]
10002772:	2384      	movs	r3, #132	; 0x84
10002774:	005b      	lsls	r3, r3, #1
10002776:	58d3      	ldr	r3, [r2, r3]
10002778:	4a0e      	ldr	r2, [pc, #56]	; (100027b4 <XMC_USIC_CH_TXFIFO_Configure+0x54>)
1000277a:	4013      	ands	r3, r2
1000277c:	1c19      	adds	r1, r3, #0
1000277e:	68fa      	ldr	r2, [r7, #12]
10002780:	2384      	movs	r3, #132	; 0x84
10002782:	005b      	lsls	r3, r3, #1
10002784:	50d1      	str	r1, [r2, r3]
  /* LOF = 0, A standard transmit buffer event occurs when the filling level equals the limit value and gets
   * lower due to transmission of a data word
   * STBTEN = 0, the trigger of the standard transmit buffer event is based on the transition of the fill level
   *  from equal to below the limit, not the fact being below
   */
  channel->TBCTR = (uint32_t)(channel->TBCTR & (uint32_t)~(USIC_CH_TBCTR_LIMIT_Msk |
10002786:	68fa      	ldr	r2, [r7, #12]
10002788:	2384      	movs	r3, #132	; 0x84
1000278a:	005b      	lsls	r3, r3, #1
1000278c:	58d3      	ldr	r3, [r2, r3]
1000278e:	4a0a      	ldr	r2, [pc, #40]	; (100027b8 <XMC_USIC_CH_TXFIFO_Configure+0x58>)
10002790:	401a      	ands	r2, r3
                                                           USIC_CH_TBCTR_DPTR_Msk |
                                                           USIC_CH_TBCTR_SIZE_Msk)) |
                   (uint32_t)((limit << USIC_CH_TBCTR_LIMIT_Pos) |
10002792:	683b      	ldr	r3, [r7, #0]
10002794:	0219      	lsls	r1, r3, #8
10002796:	68bb      	ldr	r3, [r7, #8]
10002798:	4319      	orrs	r1, r3
                   (data_pointer << USIC_CH_TBCTR_DPTR_Pos) |
                   ((uint32_t)size << USIC_CH_TBCTR_SIZE_Pos));
1000279a:	1dfb      	adds	r3, r7, #7
1000279c:	781b      	ldrb	r3, [r3, #0]
1000279e:	061b      	lsls	r3, r3, #24
   *  from equal to below the limit, not the fact being below
   */
  channel->TBCTR = (uint32_t)(channel->TBCTR & (uint32_t)~(USIC_CH_TBCTR_LIMIT_Msk |
                                                           USIC_CH_TBCTR_DPTR_Msk |
                                                           USIC_CH_TBCTR_SIZE_Msk)) |
                   (uint32_t)((limit << USIC_CH_TBCTR_LIMIT_Pos) |
100027a0:	430b      	orrs	r3, r1
   * STBTEN = 0, the trigger of the standard transmit buffer event is based on the transition of the fill level
   *  from equal to below the limit, not the fact being below
   */
  channel->TBCTR = (uint32_t)(channel->TBCTR & (uint32_t)~(USIC_CH_TBCTR_LIMIT_Msk |
                                                           USIC_CH_TBCTR_DPTR_Msk |
                                                           USIC_CH_TBCTR_SIZE_Msk)) |
100027a2:	431a      	orrs	r2, r3
100027a4:	1c11      	adds	r1, r2, #0
  /* LOF = 0, A standard transmit buffer event occurs when the filling level equals the limit value and gets
   * lower due to transmission of a data word
   * STBTEN = 0, the trigger of the standard transmit buffer event is based on the transition of the fill level
   *  from equal to below the limit, not the fact being below
   */
  channel->TBCTR = (uint32_t)(channel->TBCTR & (uint32_t)~(USIC_CH_TBCTR_LIMIT_Msk |
100027a6:	68fa      	ldr	r2, [r7, #12]
100027a8:	2384      	movs	r3, #132	; 0x84
100027aa:	005b      	lsls	r3, r3, #1
100027ac:	50d1      	str	r1, [r2, r3]
                                                           USIC_CH_TBCTR_DPTR_Msk |
                                                           USIC_CH_TBCTR_SIZE_Msk)) |
                   (uint32_t)((limit << USIC_CH_TBCTR_LIMIT_Pos) |
                   (data_pointer << USIC_CH_TBCTR_DPTR_Pos) |
                   ((uint32_t)size << USIC_CH_TBCTR_SIZE_Pos));
}
100027ae:	46bd      	mov	sp, r7
100027b0:	b004      	add	sp, #16
100027b2:	bd80      	pop	{r7, pc}
100027b4:	f8ffffff 	.word	0xf8ffffff
100027b8:	f8ffc0c0 	.word	0xf8ffc0c0

100027bc <XMC_USIC_CH_RXFIFO_Configure>:

void XMC_USIC_CH_RXFIFO_Configure(XMC_USIC_CH_t *const channel,
                                  const uint32_t data_pointer,
                                  const XMC_USIC_CH_FIFO_SIZE_t size,
                                  const uint32_t limit)
{
100027bc:	b580      	push	{r7, lr}
100027be:	b084      	sub	sp, #16
100027c0:	af00      	add	r7, sp, #0
100027c2:	60f8      	str	r0, [r7, #12]
100027c4:	60b9      	str	r1, [r7, #8]
100027c6:	603b      	str	r3, [r7, #0]
100027c8:	1dfb      	adds	r3, r7, #7
100027ca:	701a      	strb	r2, [r3, #0]
  /* Disable FIFO */
  channel->RBCTR &= (uint32_t)~USIC_CH_RBCTR_SIZE_Msk;
100027cc:	68fa      	ldr	r2, [r7, #12]
100027ce:	2386      	movs	r3, #134	; 0x86
100027d0:	005b      	lsls	r3, r3, #1
100027d2:	58d3      	ldr	r3, [r2, r3]
100027d4:	4a10      	ldr	r2, [pc, #64]	; (10002818 <XMC_USIC_CH_RXFIFO_Configure+0x5c>)
100027d6:	4013      	ands	r3, r2
100027d8:	1c19      	adds	r1, r3, #0
100027da:	68fa      	ldr	r2, [r7, #12]
100027dc:	2386      	movs	r3, #134	; 0x86
100027de:	005b      	lsls	r3, r3, #1
100027e0:	50d1      	str	r1, [r2, r3]

  /* LOF = 1, A standard receive buffer event occurs when the filling level equals the limit value and gets bigger
   *  due to the reception of a new data word
   */
  channel->RBCTR = (uint32_t)((channel->RBCTR & (uint32_t)~(USIC_CH_RBCTR_LIMIT_Msk |
100027e2:	68fa      	ldr	r2, [r7, #12]
100027e4:	2386      	movs	r3, #134	; 0x86
100027e6:	005b      	lsls	r3, r3, #1
100027e8:	58d3      	ldr	r3, [r2, r3]
100027ea:	4a0c      	ldr	r2, [pc, #48]	; (1000281c <XMC_USIC_CH_RXFIFO_Configure+0x60>)
100027ec:	401a      	ands	r2, r3
                                                            USIC_CH_RBCTR_DPTR_Msk |
                                                            USIC_CH_RBCTR_LOF_Msk)) |
                   ((limit << USIC_CH_RBCTR_LIMIT_Pos) |
100027ee:	683b      	ldr	r3, [r7, #0]
100027f0:	0219      	lsls	r1, r3, #8
100027f2:	68bb      	ldr	r3, [r7, #8]
100027f4:	4319      	orrs	r1, r3
                   (data_pointer << USIC_CH_RBCTR_DPTR_Pos) |
                   ((uint32_t)size << USIC_CH_RBCTR_SIZE_Pos) |
100027f6:	1dfb      	adds	r3, r7, #7
100027f8:	781b      	ldrb	r3, [r3, #0]
100027fa:	061b      	lsls	r3, r3, #24
   */
  channel->RBCTR = (uint32_t)((channel->RBCTR & (uint32_t)~(USIC_CH_RBCTR_LIMIT_Msk |
                                                            USIC_CH_RBCTR_DPTR_Msk |
                                                            USIC_CH_RBCTR_LOF_Msk)) |
                   ((limit << USIC_CH_RBCTR_LIMIT_Pos) |
                   (data_pointer << USIC_CH_RBCTR_DPTR_Pos) |
100027fc:	430b      	orrs	r3, r1
  channel->RBCTR &= (uint32_t)~USIC_CH_RBCTR_SIZE_Msk;

  /* LOF = 1, A standard receive buffer event occurs when the filling level equals the limit value and gets bigger
   *  due to the reception of a new data word
   */
  channel->RBCTR = (uint32_t)((channel->RBCTR & (uint32_t)~(USIC_CH_RBCTR_LIMIT_Msk |
100027fe:	4313      	orrs	r3, r2
10002800:	2280      	movs	r2, #128	; 0x80
10002802:	0552      	lsls	r2, r2, #21
10002804:	431a      	orrs	r2, r3
10002806:	1c11      	adds	r1, r2, #0
10002808:	68fa      	ldr	r2, [r7, #12]
1000280a:	2386      	movs	r3, #134	; 0x86
1000280c:	005b      	lsls	r3, r3, #1
1000280e:	50d1      	str	r1, [r2, r3]
                                                            USIC_CH_RBCTR_LOF_Msk)) |
                   ((limit << USIC_CH_RBCTR_LIMIT_Pos) |
                   (data_pointer << USIC_CH_RBCTR_DPTR_Pos) |
                   ((uint32_t)size << USIC_CH_RBCTR_SIZE_Pos) |
                   (uint32_t)USIC_CH_RBCTR_LOF_Msk));
}
10002810:	46bd      	mov	sp, r7
10002812:	b004      	add	sp, #16
10002814:	bd80      	pop	{r7, pc}
10002816:	46c0      	nop			; (mov r8, r8)
10002818:	f8ffffff 	.word	0xf8ffffff
1000281c:	efffc0c0 	.word	0xefffc0c0

10002820 <XMC_USIC_CH_RXFIFO_SetSizeTriggerLimit>:
}

void XMC_USIC_CH_RXFIFO_SetSizeTriggerLimit(XMC_USIC_CH_t *const channel,
                                            const XMC_USIC_CH_FIFO_SIZE_t size,
                                            const uint32_t limit)
{
10002820:	b580      	push	{r7, lr}
10002822:	b084      	sub	sp, #16
10002824:	af00      	add	r7, sp, #0
10002826:	60f8      	str	r0, [r7, #12]
10002828:	607a      	str	r2, [r7, #4]
1000282a:	230b      	movs	r3, #11
1000282c:	18fb      	adds	r3, r7, r3
1000282e:	1c0a      	adds	r2, r1, #0
10002830:	701a      	strb	r2, [r3, #0]
  /* Disable FIFO */
  channel->RBCTR &= (uint32_t)~USIC_CH_RBCTR_SIZE_Msk;
10002832:	68fa      	ldr	r2, [r7, #12]
10002834:	2386      	movs	r3, #134	; 0x86
10002836:	005b      	lsls	r3, r3, #1
10002838:	58d3      	ldr	r3, [r2, r3]
1000283a:	4a0e      	ldr	r2, [pc, #56]	; (10002874 <XMC_USIC_CH_RXFIFO_SetSizeTriggerLimit+0x54>)
1000283c:	4013      	ands	r3, r2
1000283e:	1c19      	adds	r1, r3, #0
10002840:	68fa      	ldr	r2, [r7, #12]
10002842:	2386      	movs	r3, #134	; 0x86
10002844:	005b      	lsls	r3, r3, #1
10002846:	50d1      	str	r1, [r2, r3]

  channel->RBCTR = (uint32_t)((uint32_t)(channel->RBCTR & (uint32_t)~USIC_CH_RBCTR_LIMIT_Msk) |
10002848:	68fa      	ldr	r2, [r7, #12]
1000284a:	2386      	movs	r3, #134	; 0x86
1000284c:	005b      	lsls	r3, r3, #1
1000284e:	58d3      	ldr	r3, [r2, r3]
10002850:	4a09      	ldr	r2, [pc, #36]	; (10002878 <XMC_USIC_CH_RXFIFO_SetSizeTriggerLimit+0x58>)
10002852:	401a      	ands	r2, r3
                   (limit << USIC_CH_RBCTR_LIMIT_Pos) |
10002854:	687b      	ldr	r3, [r7, #4]
10002856:	021b      	lsls	r3, r3, #8
                                            const uint32_t limit)
{
  /* Disable FIFO */
  channel->RBCTR &= (uint32_t)~USIC_CH_RBCTR_SIZE_Msk;

  channel->RBCTR = (uint32_t)((uint32_t)(channel->RBCTR & (uint32_t)~USIC_CH_RBCTR_LIMIT_Msk) |
10002858:	431a      	orrs	r2, r3
                   (limit << USIC_CH_RBCTR_LIMIT_Pos) |
                   ((uint32_t)size << USIC_CH_RBCTR_SIZE_Pos));
1000285a:	230b      	movs	r3, #11
1000285c:	18fb      	adds	r3, r7, r3
1000285e:	781b      	ldrb	r3, [r3, #0]
10002860:	061b      	lsls	r3, r3, #24
                                            const uint32_t limit)
{
  /* Disable FIFO */
  channel->RBCTR &= (uint32_t)~USIC_CH_RBCTR_SIZE_Msk;

  channel->RBCTR = (uint32_t)((uint32_t)(channel->RBCTR & (uint32_t)~USIC_CH_RBCTR_LIMIT_Msk) |
10002862:	431a      	orrs	r2, r3
10002864:	1c11      	adds	r1, r2, #0
10002866:	68fa      	ldr	r2, [r7, #12]
10002868:	2386      	movs	r3, #134	; 0x86
1000286a:	005b      	lsls	r3, r3, #1
1000286c:	50d1      	str	r1, [r2, r3]
                   (limit << USIC_CH_RBCTR_LIMIT_Pos) |
                   ((uint32_t)size << USIC_CH_RBCTR_SIZE_Pos));
}
1000286e:	46bd      	mov	sp, r7
10002870:	b004      	add	sp, #16
10002872:	bd80      	pop	{r7, pc}
10002874:	f8ffffff 	.word	0xf8ffffff
10002878:	ffffc0ff 	.word	0xffffc0ff

1000287c <XMC_USIC_CH_SetInterruptNodePointer>:

void XMC_USIC_CH_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
                                         const XMC_USIC_CH_INTERRUPT_NODE_POINTER_t interrupt_node,
                                         const uint32_t service_request)
{
1000287c:	b580      	push	{r7, lr}
1000287e:	b084      	sub	sp, #16
10002880:	af00      	add	r7, sp, #0
10002882:	60f8      	str	r0, [r7, #12]
10002884:	607a      	str	r2, [r7, #4]
10002886:	230b      	movs	r3, #11
10002888:	18fb      	adds	r3, r7, r3
1000288a:	1c0a      	adds	r2, r1, #0
1000288c:	701a      	strb	r2, [r3, #0]
  channel->INPR = (uint32_t)((channel->INPR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
1000288e:	68fb      	ldr	r3, [r7, #12]
10002890:	699b      	ldr	r3, [r3, #24]
10002892:	220b      	movs	r2, #11
10002894:	18ba      	adds	r2, r7, r2
10002896:	7812      	ldrb	r2, [r2, #0]
10002898:	2107      	movs	r1, #7
1000289a:	4091      	lsls	r1, r2
1000289c:	1c0a      	adds	r2, r1, #0
1000289e:	43d2      	mvns	r2, r2
100028a0:	401a      	ands	r2, r3
                  (service_request << (uint32_t)interrupt_node));
100028a2:	230b      	movs	r3, #11
100028a4:	18fb      	adds	r3, r7, r3
100028a6:	781b      	ldrb	r3, [r3, #0]
100028a8:	6879      	ldr	r1, [r7, #4]
100028aa:	4099      	lsls	r1, r3
100028ac:	1c0b      	adds	r3, r1, #0

void XMC_USIC_CH_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
                                         const XMC_USIC_CH_INTERRUPT_NODE_POINTER_t interrupt_node,
                                         const uint32_t service_request)
{
  channel->INPR = (uint32_t)((channel->INPR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
100028ae:	431a      	orrs	r2, r3
100028b0:	68fb      	ldr	r3, [r7, #12]
100028b2:	619a      	str	r2, [r3, #24]
                  (service_request << (uint32_t)interrupt_node));
}
100028b4:	46bd      	mov	sp, r7
100028b6:	b004      	add	sp, #16
100028b8:	bd80      	pop	{r7, pc}
100028ba:	46c0      	nop			; (mov r8, r8)

100028bc <XMC_USIC_CH_TXFIFO_SetInterruptNodePointer>:

void XMC_USIC_CH_TXFIFO_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
                                                const XMC_USIC_CH_TXFIFO_INTERRUPT_NODE_POINTER_t interrupt_node,
                                                const uint32_t service_request)
{
100028bc:	b580      	push	{r7, lr}
100028be:	b084      	sub	sp, #16
100028c0:	af00      	add	r7, sp, #0
100028c2:	60f8      	str	r0, [r7, #12]
100028c4:	607a      	str	r2, [r7, #4]
100028c6:	230b      	movs	r3, #11
100028c8:	18fb      	adds	r3, r7, r3
100028ca:	1c0a      	adds	r2, r1, #0
100028cc:	701a      	strb	r2, [r3, #0]
  channel->TBCTR = (uint32_t)((channel->TBCTR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
100028ce:	68fa      	ldr	r2, [r7, #12]
100028d0:	2384      	movs	r3, #132	; 0x84
100028d2:	005b      	lsls	r3, r3, #1
100028d4:	58d3      	ldr	r3, [r2, r3]
100028d6:	220b      	movs	r2, #11
100028d8:	18ba      	adds	r2, r7, r2
100028da:	7812      	ldrb	r2, [r2, #0]
100028dc:	2107      	movs	r1, #7
100028de:	4091      	lsls	r1, r2
100028e0:	1c0a      	adds	r2, r1, #0
100028e2:	43d2      	mvns	r2, r2
100028e4:	401a      	ands	r2, r3
                   (service_request << (uint32_t)interrupt_node));
100028e6:	230b      	movs	r3, #11
100028e8:	18fb      	adds	r3, r7, r3
100028ea:	781b      	ldrb	r3, [r3, #0]
100028ec:	6879      	ldr	r1, [r7, #4]
100028ee:	4099      	lsls	r1, r3
100028f0:	1c0b      	adds	r3, r1, #0

void XMC_USIC_CH_TXFIFO_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
                                                const XMC_USIC_CH_TXFIFO_INTERRUPT_NODE_POINTER_t interrupt_node,
                                                const uint32_t service_request)
{
  channel->TBCTR = (uint32_t)((channel->TBCTR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
100028f2:	431a      	orrs	r2, r3
100028f4:	1c11      	adds	r1, r2, #0
100028f6:	68fa      	ldr	r2, [r7, #12]
100028f8:	2384      	movs	r3, #132	; 0x84
100028fa:	005b      	lsls	r3, r3, #1
100028fc:	50d1      	str	r1, [r2, r3]
                   (service_request << (uint32_t)interrupt_node));
}
100028fe:	46bd      	mov	sp, r7
10002900:	b004      	add	sp, #16
10002902:	bd80      	pop	{r7, pc}

10002904 <XMC_USIC_CH_RXFIFO_SetInterruptNodePointer>:

void XMC_USIC_CH_RXFIFO_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
                                                const XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_t interrupt_node,
                                                const uint32_t service_request)
{
10002904:	b580      	push	{r7, lr}
10002906:	b084      	sub	sp, #16
10002908:	af00      	add	r7, sp, #0
1000290a:	60f8      	str	r0, [r7, #12]
1000290c:	607a      	str	r2, [r7, #4]
1000290e:	230b      	movs	r3, #11
10002910:	18fb      	adds	r3, r7, r3
10002912:	1c0a      	adds	r2, r1, #0
10002914:	701a      	strb	r2, [r3, #0]
  channel->RBCTR = (uint32_t)((channel->RBCTR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
10002916:	68fa      	ldr	r2, [r7, #12]
10002918:	2386      	movs	r3, #134	; 0x86
1000291a:	005b      	lsls	r3, r3, #1
1000291c:	58d3      	ldr	r3, [r2, r3]
1000291e:	220b      	movs	r2, #11
10002920:	18ba      	adds	r2, r7, r2
10002922:	7812      	ldrb	r2, [r2, #0]
10002924:	2107      	movs	r1, #7
10002926:	4091      	lsls	r1, r2
10002928:	1c0a      	adds	r2, r1, #0
1000292a:	43d2      	mvns	r2, r2
1000292c:	401a      	ands	r2, r3
                   (service_request << (uint32_t)interrupt_node));
1000292e:	230b      	movs	r3, #11
10002930:	18fb      	adds	r3, r7, r3
10002932:	781b      	ldrb	r3, [r3, #0]
10002934:	6879      	ldr	r1, [r7, #4]
10002936:	4099      	lsls	r1, r3
10002938:	1c0b      	adds	r3, r1, #0

void XMC_USIC_CH_RXFIFO_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
                                                const XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_t interrupt_node,
                                                const uint32_t service_request)
{
  channel->RBCTR = (uint32_t)((channel->RBCTR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
1000293a:	431a      	orrs	r2, r3
1000293c:	1c11      	adds	r1, r2, #0
1000293e:	68fa      	ldr	r2, [r7, #12]
10002940:	2386      	movs	r3, #134	; 0x86
10002942:	005b      	lsls	r3, r3, #1
10002944:	50d1      	str	r1, [r2, r3]
                   (service_request << (uint32_t)interrupt_node));
}
10002946:	46bd      	mov	sp, r7
10002948:	b004      	add	sp, #16
1000294a:	bd80      	pop	{r7, pc}

1000294c <XMC_USIC_Enable>:

void XMC_USIC_Enable(XMC_USIC_t *const usic)
{
1000294c:	b580      	push	{r7, lr}
1000294e:	b082      	sub	sp, #8
10002950:	af00      	add	r7, sp, #0
10002952:	6078      	str	r0, [r7, #4]
  if (usic == USIC0)
10002954:	687b      	ldr	r3, [r7, #4]
10002956:	4a04      	ldr	r2, [pc, #16]	; (10002968 <XMC_USIC_Enable+0x1c>)
10002958:	4293      	cmp	r3, r2
1000295a:	d102      	bne.n	10002962 <XMC_USIC_Enable+0x16>
  {
#if defined(CLOCK_GATING_SUPPORTED)
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_USIC0);
1000295c:	2008      	movs	r0, #8
1000295e:	f7fe fccf 	bl	10001300 <XMC_SCU_CLOCK_UngatePeripheralClock>
#endif  
  else
  {
    XMC_ASSERT("USIC module not available", 0/*Always*/);
  }
}
10002962:	46bd      	mov	sp, r7
10002964:	b002      	add	sp, #8
10002966:	bd80      	pop	{r7, pc}
10002968:	48000008 	.word	0x48000008

1000296c <XMC_VADC_GROUP_ExternalMuxControlInit>:
 * \par<b>Related APIs:</b><BR>
 * None
 */
__STATIC_INLINE void XMC_VADC_GROUP_ExternalMuxControlInit(XMC_VADC_GROUP_t *const group_ptr,
                                                           const XMC_VADC_GROUP_EMUXCFG_t emux_cfg)
{
1000296c:	b580      	push	{r7, lr}
1000296e:	b084      	sub	sp, #16
10002970:	af00      	add	r7, sp, #0
10002972:	6078      	str	r0, [r7, #4]
10002974:	6039      	str	r1, [r7, #0]
  uint32_t   emux_config;

  XMC_ASSERT("XMC_VADC_GROUP_ExternalMuxControlInit:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))

  emux_config = ((uint32_t)emux_cfg.starting_external_channel << (uint32_t)VADC_G_EMUXCTR_EMUXSET_Pos) |
10002976:	1c3b      	adds	r3, r7, #0
10002978:	781b      	ldrb	r3, [r3, #0]
1000297a:	075b      	lsls	r3, r3, #29
1000297c:	0f5b      	lsrs	r3, r3, #29
1000297e:	b2db      	uxtb	r3, r3
10002980:	1c1a      	adds	r2, r3, #0
              ((uint32_t)emux_cfg.connected_channel << (uint32_t)VADC_G_EMUXCTR_EMUXCH_Pos);
10002982:	1cbb      	adds	r3, r7, #2
10002984:	881b      	ldrh	r3, [r3, #0]
10002986:	059b      	lsls	r3, r3, #22
10002988:	0d9b      	lsrs	r3, r3, #22
1000298a:	b29b      	uxth	r3, r3
1000298c:	041b      	lsls	r3, r3, #16
{
  uint32_t   emux_config;

  XMC_ASSERT("XMC_VADC_GROUP_ExternalMuxControlInit:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))

  emux_config = ((uint32_t)emux_cfg.starting_external_channel << (uint32_t)VADC_G_EMUXCTR_EMUXSET_Pos) |
1000298e:	4313      	orrs	r3, r2
10002990:	60fb      	str	r3, [r7, #12]
              ((uint32_t)emux_cfg.connected_channel << (uint32_t)VADC_G_EMUXCTR_EMUXCH_Pos);

  group_ptr->EMUXCTR  = emux_config;
10002992:	687a      	ldr	r2, [r7, #4]
10002994:	23f8      	movs	r3, #248	; 0xf8
10002996:	005b      	lsls	r3, r3, #1
10002998:	68f9      	ldr	r1, [r7, #12]
1000299a:	50d1      	str	r1, [r2, r3]
  emux_config = ((uint32_t)emux_cfg.emux_coding << (uint32_t)VADC_G_EMUXCTR_EMXCOD_Pos)  |
1000299c:	1cfb      	adds	r3, r7, #3
1000299e:	781b      	ldrb	r3, [r3, #0]
100029a0:	06db      	lsls	r3, r3, #27
100029a2:	0fdb      	lsrs	r3, r3, #31
100029a4:	b2db      	uxtb	r3, r3
100029a6:	071a      	lsls	r2, r3, #28
                ((uint32_t)emux_cfg.emux_mode  << (uint32_t)VADC_G_EMUXCTR_EMUXMODE_Pos)|
100029a8:	1cfb      	adds	r3, r7, #3
100029aa:	781b      	ldrb	r3, [r3, #0]
100029ac:	071b      	lsls	r3, r3, #28
100029ae:	0f9b      	lsrs	r3, r3, #30
100029b0:	b2db      	uxtb	r3, r3
100029b2:	069b      	lsls	r3, r3, #26

  emux_config = ((uint32_t)emux_cfg.starting_external_channel << (uint32_t)VADC_G_EMUXCTR_EMUXSET_Pos) |
              ((uint32_t)emux_cfg.connected_channel << (uint32_t)VADC_G_EMUXCTR_EMUXCH_Pos);

  group_ptr->EMUXCTR  = emux_config;
  emux_config = ((uint32_t)emux_cfg.emux_coding << (uint32_t)VADC_G_EMUXCTR_EMXCOD_Pos)  |
100029b4:	431a      	orrs	r2, r3
                ((uint32_t)emux_cfg.emux_mode  << (uint32_t)VADC_G_EMUXCTR_EMUXMODE_Pos)|
                ((uint32_t)emux_cfg.stce_usage << (uint32_t)VADC_G_EMUXCTR_EMXST_Pos);
100029b6:	1cfb      	adds	r3, r7, #3
100029b8:	781b      	ldrb	r3, [r3, #0]
100029ba:	069b      	lsls	r3, r3, #26
100029bc:	0fdb      	lsrs	r3, r3, #31
100029be:	b2db      	uxtb	r3, r3
100029c0:	075b      	lsls	r3, r3, #29

  emux_config = ((uint32_t)emux_cfg.starting_external_channel << (uint32_t)VADC_G_EMUXCTR_EMUXSET_Pos) |
              ((uint32_t)emux_cfg.connected_channel << (uint32_t)VADC_G_EMUXCTR_EMUXCH_Pos);

  group_ptr->EMUXCTR  = emux_config;
  emux_config = ((uint32_t)emux_cfg.emux_coding << (uint32_t)VADC_G_EMUXCTR_EMXCOD_Pos)  |
100029c2:	4313      	orrs	r3, r2
100029c4:	60fb      	str	r3, [r7, #12]
                ((uint32_t)emux_cfg.emux_mode  << (uint32_t)VADC_G_EMUXCTR_EMUXMODE_Pos)|
                ((uint32_t)emux_cfg.stce_usage << (uint32_t)VADC_G_EMUXCTR_EMXST_Pos);

#if (XMC_VADC_EMUX_CH_SEL_STYLE == 1U)
  emux_config |= ((uint32_t)emux_cfg.emux_channel_select_style << (uint32_t)VADC_G_EMUXCTR_EMXCSS_Pos);
100029c6:	1cfb      	adds	r3, r7, #3
100029c8:	781b      	ldrb	r3, [r3, #0]
100029ca:	065b      	lsls	r3, r3, #25
100029cc:	0fdb      	lsrs	r3, r3, #31
100029ce:	b2db      	uxtb	r3, r3
100029d0:	079b      	lsls	r3, r3, #30
100029d2:	68fa      	ldr	r2, [r7, #12]
100029d4:	4313      	orrs	r3, r2
100029d6:	60fb      	str	r3, [r7, #12]
#endif
  group_ptr->EMUXCTR  |= (emux_config | ((uint32_t)VADC_G_EMUXCTR_EMXWC_Msk)) ;
100029d8:	687a      	ldr	r2, [r7, #4]
100029da:	23f8      	movs	r3, #248	; 0xf8
100029dc:	005b      	lsls	r3, r3, #1
100029de:	58d2      	ldr	r2, [r2, r3]
100029e0:	68fb      	ldr	r3, [r7, #12]
100029e2:	4313      	orrs	r3, r2
100029e4:	2280      	movs	r2, #128	; 0x80
100029e6:	0612      	lsls	r2, r2, #24
100029e8:	431a      	orrs	r2, r3
100029ea:	1c11      	adds	r1, r2, #0
100029ec:	687a      	ldr	r2, [r7, #4]
100029ee:	23f8      	movs	r3, #248	; 0xf8
100029f0:	005b      	lsls	r3, r3, #1
100029f2:	50d1      	str	r1, [r2, r3]
}
100029f4:	46bd      	mov	sp, r7
100029f6:	b004      	add	sp, #16
100029f8:	bd80      	pop	{r7, pc}
100029fa:	46c0      	nop			; (mov r8, r8)

100029fc <XMC_VADC_GROUP_QueueEnableArbitrationSlot>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_VADC_GROUP_QueueDisableArbitrationSlot()<BR>
 */
__STATIC_INLINE void XMC_VADC_GROUP_QueueEnableArbitrationSlot(XMC_VADC_GROUP_t *const group_ptr)
{
100029fc:	b580      	push	{r7, lr}
100029fe:	b082      	sub	sp, #8
10002a00:	af00      	add	r7, sp, #0
10002a02:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_VADC_GROUP_QueueEnableArbitrationSlot:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr));
  group_ptr->ARBPR |= (uint32_t)((uint32_t)1 << VADC_G_ARBPR_ASEN0_Pos);
10002a04:	687b      	ldr	r3, [r7, #4]
10002a06:	2284      	movs	r2, #132	; 0x84
10002a08:	589b      	ldr	r3, [r3, r2]
10002a0a:	2280      	movs	r2, #128	; 0x80
10002a0c:	0452      	lsls	r2, r2, #17
10002a0e:	431a      	orrs	r2, r3
10002a10:	687b      	ldr	r3, [r7, #4]
10002a12:	2184      	movs	r1, #132	; 0x84
10002a14:	505a      	str	r2, [r3, r1]
}
10002a16:	46bd      	mov	sp, r7
10002a18:	b002      	add	sp, #8
10002a1a:	bd80      	pop	{r7, pc}

10002a1c <XMC_VADC_GROUP_QueueDisableArbitrationSlot>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_VADC_GROUP_QueueEnableArbitrationSlot()<BR>
 */
__STATIC_INLINE void XMC_VADC_GROUP_QueueDisableArbitrationSlot(XMC_VADC_GROUP_t *const group_ptr)
{
10002a1c:	b580      	push	{r7, lr}
10002a1e:	b082      	sub	sp, #8
10002a20:	af00      	add	r7, sp, #0
10002a22:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_VADC_GROUP_QueueDisableArbitrationSlot:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr));
  group_ptr->ARBPR &= ~((uint32_t)VADC_G_ARBPR_ASEN0_Msk);
10002a24:	687b      	ldr	r3, [r7, #4]
10002a26:	2284      	movs	r2, #132	; 0x84
10002a28:	589b      	ldr	r3, [r3, r2]
10002a2a:	4a04      	ldr	r2, [pc, #16]	; (10002a3c <XMC_VADC_GROUP_QueueDisableArbitrationSlot+0x20>)
10002a2c:	401a      	ands	r2, r3
10002a2e:	687b      	ldr	r3, [r7, #4]
10002a30:	2184      	movs	r1, #132	; 0x84
10002a32:	505a      	str	r2, [r3, r1]
}
10002a34:	46bd      	mov	sp, r7
10002a36:	b002      	add	sp, #8
10002a38:	bd80      	pop	{r7, pc}
10002a3a:	46c0      	nop			; (mov r8, r8)
10002a3c:	feffffff 	.word	0xfeffffff

10002a40 <XMC_VADC_GLOBAL_EnableModule>:
 * API IMPLEMENTATION
 ********************************************************************************************************************/

/*API to enable the VADC Module*/
void XMC_VADC_GLOBAL_EnableModule(void)
{
10002a40:	b580      	push	{r7, lr}
10002a42:	af00      	add	r7, sp, #0
   * Please refer to the XMC1000 Errata sheet V1.4 released 2014-06 Errata ID : ADC_AI.003 Additonal bit to enable ADC
   * function
   */

#if defined (COMPARATOR)
  COMPARATOR->ORCCTRL = (uint32_t)0xFF;
10002a44:	4b03      	ldr	r3, [pc, #12]	; (10002a54 <XMC_VADC_GLOBAL_EnableModule+0x14>)
10002a46:	22ff      	movs	r2, #255	; 0xff
10002a48:	601a      	str	r2, [r3, #0]
#endif

#if defined(CLOCK_GATING_SUPPORTED)
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_VADC);
10002a4a:	2001      	movs	r0, #1
10002a4c:	f7fe fc58 	bl	10001300 <XMC_SCU_CLOCK_UngatePeripheralClock>

#if defined(PERIPHERAL_RESET_SUPPORTED)
  /* Reset the Hardware */
  XMC_SCU_RESET_DeassertPeripheralReset((XMC_SCU_PERIPHERAL_RESET_t)XMC_SCU_PERIPHERAL_RESET_VADC );
#endif
}
10002a50:	46bd      	mov	sp, r7
10002a52:	bd80      	pop	{r7, pc}
10002a54:	40010500 	.word	0x40010500

10002a58 <XMC_VADC_GLOBAL_Init>:
}


/* API to initialize global resources */
void XMC_VADC_GLOBAL_Init(XMC_VADC_GLOBAL_t *const global_ptr, const XMC_VADC_GLOBAL_CONFIG_t *config)
{
10002a58:	b580      	push	{r7, lr}
10002a5a:	b082      	sub	sp, #8
10002a5c:	af00      	add	r7, sp, #0
10002a5e:	6078      	str	r0, [r7, #4]
10002a60:	6039      	str	r1, [r7, #0]
  uint32_t reg;
#endif
  XMC_ASSERT("XMC_VADC_GLOBAL_Init:Wrong Module Pointer", (global_ptr == VADC))

  /* Enable the VADC module*/
  XMC_VADC_GLOBAL_EnableModule();
10002a62:	f7ff ffed 	bl	10002a40 <XMC_VADC_GLOBAL_EnableModule>

  global_ptr->CLC = (uint32_t)(config->clc);
10002a66:	683b      	ldr	r3, [r7, #0]
10002a68:	695a      	ldr	r2, [r3, #20]
10002a6a:	687b      	ldr	r3, [r7, #4]
10002a6c:	601a      	str	r2, [r3, #0]

  /* Clock configuration */

#if (XMC_VADC_GROUP_AVAILABLE == 1U)
  global_ptr->GLOBCFG  = (uint32_t)(config->clock_config.globcfg | (uint32_t)(VADC_GLOBCFG_DIVWC_Msk));
10002a6e:	683b      	ldr	r3, [r7, #0]
10002a70:	685b      	ldr	r3, [r3, #4]
10002a72:	2280      	movs	r2, #128	; 0x80
10002a74:	0212      	lsls	r2, r2, #8
10002a76:	431a      	orrs	r2, r3
10002a78:	687b      	ldr	r3, [r7, #4]
10002a7a:	2180      	movs	r1, #128	; 0x80
10002a7c:	505a      	str	r2, [r3, r1]
#endif

  /* ICLASS-0 configuration */
  global_ptr->GLOBICLASS[0] = (uint32_t)(config->class0.globiclass);
10002a7e:	683b      	ldr	r3, [r7, #0]
10002a80:	689a      	ldr	r2, [r3, #8]
10002a82:	687b      	ldr	r3, [r7, #4]
10002a84:	21a0      	movs	r1, #160	; 0xa0
10002a86:	505a      	str	r2, [r3, r1]

  /* ICLASS-1 configuration */
  global_ptr->GLOBICLASS[1] = (uint32_t)(config->class1.globiclass);
10002a88:	683b      	ldr	r3, [r7, #0]
10002a8a:	68da      	ldr	r2, [r3, #12]
10002a8c:	687b      	ldr	r3, [r7, #4]
10002a8e:	21a4      	movs	r1, #164	; 0xa4
10002a90:	505a      	str	r2, [r3, r1]


  /*Result generation related configuration */
  global_ptr->GLOBRCR = (uint32_t)(config->globrcr);
10002a92:	683b      	ldr	r3, [r7, #0]
10002a94:	6919      	ldr	r1, [r3, #16]
10002a96:	687a      	ldr	r2, [r7, #4]
10002a98:	23a0      	movs	r3, #160	; 0xa0
10002a9a:	009b      	lsls	r3, r3, #2
10002a9c:	50d1      	str	r1, [r2, r3]

#if (XMC_VADC_BOUNDARY_AVAILABLE == 1U)

  /* Boundaries */
  global_ptr->GLOBBOUND = (uint32_t)(config->globbound);
10002a9e:	683b      	ldr	r3, [r7, #0]
10002aa0:	681a      	ldr	r2, [r3, #0]
10002aa2:	687b      	ldr	r3, [r7, #4]
10002aa4:	21b8      	movs	r1, #184	; 0xb8
10002aa6:	505a      	str	r2, [r3, r1]

  /* From the Errata sheet of XMC1100 V1.7*/
  XMC_VADC_CONV_ENABLE_FOR_XMC11 = 1U;
#endif

}
10002aa8:	46bd      	mov	sp, r7
10002aaa:	b002      	add	sp, #8
10002aac:	bd80      	pop	{r7, pc}
10002aae:	46c0      	nop			; (mov r8, r8)

10002ab0 <XMC_VADC_GLOBAL_StartupCalibration>:
#endif
}

/* API to enable startup calibration feature */
void XMC_VADC_GLOBAL_StartupCalibration(XMC_VADC_GLOBAL_t *const global_ptr)
{
10002ab0:	b580      	push	{r7, lr}
10002ab2:	b084      	sub	sp, #16
10002ab4:	af00      	add	r7, sp, #0
10002ab6:	6078      	str	r0, [r7, #4]
  VADC_G_TypeDef *group_ptr;
#endif
  
  XMC_ASSERT("XMC_VADC_GLOBAL_StartupCalibration:Wrong Module Pointer", (global_ptr == VADC))

  global_ptr->GLOBCFG |= (uint32_t)VADC_GLOBCFG_SUCAL_Msk;
10002ab8:	687b      	ldr	r3, [r7, #4]
10002aba:	2280      	movs	r2, #128	; 0x80
10002abc:	589b      	ldr	r3, [r3, r2]
10002abe:	2280      	movs	r2, #128	; 0x80
10002ac0:	0612      	lsls	r2, r2, #24
10002ac2:	431a      	orrs	r2, r3
10002ac4:	687b      	ldr	r3, [r7, #4]
10002ac6:	2180      	movs	r1, #128	; 0x80
10002ac8:	505a      	str	r2, [r3, r1]

#if (XMC_VADC_GROUP_AVAILABLE == 1U)
  /* Loop until all active groups finish calibration */
  for(i=0U; i<XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
10002aca:	230f      	movs	r3, #15
10002acc:	18fb      	adds	r3, r7, r3
10002ace:	2200      	movs	r2, #0
10002ad0:	701a      	strb	r2, [r3, #0]
10002ad2:	e01c      	b.n	10002b0e <XMC_VADC_GLOBAL_StartupCalibration+0x5e>
  {
    group_ptr = g_xmc_vadc_group_array[i];
10002ad4:	230f      	movs	r3, #15
10002ad6:	18fb      	adds	r3, r7, r3
10002ad8:	781a      	ldrb	r2, [r3, #0]
10002ada:	4b11      	ldr	r3, [pc, #68]	; (10002b20 <XMC_VADC_GLOBAL_StartupCalibration+0x70>)
10002adc:	0092      	lsls	r2, r2, #2
10002ade:	58d3      	ldr	r3, [r2, r3]
10002ae0:	60bb      	str	r3, [r7, #8]
    if ( (group_ptr->ARBCFG) & (uint32_t)VADC_G_ARBCFG_ANONS_Msk)
10002ae2:	68bb      	ldr	r3, [r7, #8]
10002ae4:	2280      	movs	r2, #128	; 0x80
10002ae6:	589a      	ldr	r2, [r3, r2]
10002ae8:	23c0      	movs	r3, #192	; 0xc0
10002aea:	029b      	lsls	r3, r3, #10
10002aec:	4013      	ands	r3, r2
10002aee:	d007      	beq.n	10002b00 <XMC_VADC_GLOBAL_StartupCalibration+0x50>
    {
      /* This group is active. Loop until it finishes calibration */
      while((group_ptr->ARBCFG) & (uint32_t)VADC_G_ARBCFG_CAL_Msk)
10002af0:	46c0      	nop			; (mov r8, r8)
10002af2:	68bb      	ldr	r3, [r7, #8]
10002af4:	2280      	movs	r2, #128	; 0x80
10002af6:	589a      	ldr	r2, [r3, r2]
10002af8:	2380      	movs	r3, #128	; 0x80
10002afa:	055b      	lsls	r3, r3, #21
10002afc:	4013      	ands	r3, r2
10002afe:	d1f8      	bne.n	10002af2 <XMC_VADC_GLOBAL_StartupCalibration+0x42>

  global_ptr->GLOBCFG |= (uint32_t)VADC_GLOBCFG_SUCAL_Msk;

#if (XMC_VADC_GROUP_AVAILABLE == 1U)
  /* Loop until all active groups finish calibration */
  for(i=0U; i<XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
10002b00:	230f      	movs	r3, #15
10002b02:	18fb      	adds	r3, r7, r3
10002b04:	781a      	ldrb	r2, [r3, #0]
10002b06:	230f      	movs	r3, #15
10002b08:	18fb      	adds	r3, r7, r3
10002b0a:	3201      	adds	r2, #1
10002b0c:	701a      	strb	r2, [r3, #0]
10002b0e:	230f      	movs	r3, #15
10002b10:	18fb      	adds	r3, r7, r3
10002b12:	781b      	ldrb	r3, [r3, #0]
10002b14:	2b01      	cmp	r3, #1
10002b16:	d9dd      	bls.n	10002ad4 <XMC_VADC_GLOBAL_StartupCalibration+0x24>
         XMC_VADC_SHS_START_UP_CAL_ACTIVE )
  {
    /* NOP */
  }
#endif
}
10002b18:	46bd      	mov	sp, r7
10002b1a:	b004      	add	sp, #16
10002b1c:	bd80      	pop	{r7, pc}
10002b1e:	46c0      	nop			; (mov r8, r8)
10002b20:	1000b208 	.word	0x1000b208

10002b24 <XMC_VADC_GROUP_Init>:
}

/* API to initialize an instance of group of VADC hardware */
#if (XMC_VADC_GROUP_AVAILABLE == 1U)  
void XMC_VADC_GROUP_Init( XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_GROUP_CONFIG_t *config)
{
10002b24:	b580      	push	{r7, lr}
10002b26:	b082      	sub	sp, #8
10002b28:	af00      	add	r7, sp, #0
10002b2a:	6078      	str	r0, [r7, #4]
10002b2c:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_VADC_GROUP_Init:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))

  /* Program the input classes */
  XMC_VADC_GROUP_InputClassInit(group_ptr, config->class0, XMC_VADC_GROUP_CONV_STD, 0U);
10002b2e:	687a      	ldr	r2, [r7, #4]
10002b30:	683b      	ldr	r3, [r7, #0]
10002b32:	685b      	ldr	r3, [r3, #4]
10002b34:	1c10      	adds	r0, r2, #0
10002b36:	1c19      	adds	r1, r3, #0
10002b38:	2200      	movs	r2, #0
10002b3a:	2300      	movs	r3, #0
10002b3c:	f000 f830 	bl	10002ba0 <XMC_VADC_GROUP_InputClassInit>
  XMC_VADC_GROUP_InputClassInit(group_ptr, config->class0, XMC_VADC_GROUP_CONV_EMUX, 0U);
10002b40:	687a      	ldr	r2, [r7, #4]
10002b42:	683b      	ldr	r3, [r7, #0]
10002b44:	685b      	ldr	r3, [r3, #4]
10002b46:	1c10      	adds	r0, r2, #0
10002b48:	1c19      	adds	r1, r3, #0
10002b4a:	2201      	movs	r2, #1
10002b4c:	2300      	movs	r3, #0
10002b4e:	f000 f827 	bl	10002ba0 <XMC_VADC_GROUP_InputClassInit>
  XMC_VADC_GROUP_InputClassInit(group_ptr, config->class1, XMC_VADC_GROUP_CONV_STD, 1U);
10002b52:	687a      	ldr	r2, [r7, #4]
10002b54:	683b      	ldr	r3, [r7, #0]
10002b56:	689b      	ldr	r3, [r3, #8]
10002b58:	1c10      	adds	r0, r2, #0
10002b5a:	1c19      	adds	r1, r3, #0
10002b5c:	2200      	movs	r2, #0
10002b5e:	2301      	movs	r3, #1
10002b60:	f000 f81e 	bl	10002ba0 <XMC_VADC_GROUP_InputClassInit>
  XMC_VADC_GROUP_InputClassInit(group_ptr, config->class1, XMC_VADC_GROUP_CONV_EMUX, 1U);
10002b64:	687a      	ldr	r2, [r7, #4]
10002b66:	683b      	ldr	r3, [r7, #0]
10002b68:	689b      	ldr	r3, [r3, #8]
10002b6a:	1c10      	adds	r0, r2, #0
10002b6c:	1c19      	adds	r1, r3, #0
10002b6e:	2201      	movs	r2, #1
10002b70:	2301      	movs	r3, #1
10002b72:	f000 f815 	bl	10002ba0 <XMC_VADC_GROUP_InputClassInit>

  group_ptr->ARBCFG = config->g_arbcfg;
10002b76:	683b      	ldr	r3, [r7, #0]
10002b78:	691a      	ldr	r2, [r3, #16]
10002b7a:	687b      	ldr	r3, [r7, #4]
10002b7c:	2180      	movs	r1, #128	; 0x80
10002b7e:	505a      	str	r2, [r3, r1]

  group_ptr->BOUND = config->g_bound;
10002b80:	683b      	ldr	r3, [r7, #0]
10002b82:	68da      	ldr	r2, [r3, #12]
10002b84:	687b      	ldr	r3, [r7, #4]
10002b86:	21b8      	movs	r1, #184	; 0xb8
10002b88:	505a      	str	r2, [r3, r1]

  /* External mux configuration */
  XMC_VADC_GROUP_ExternalMuxControlInit(group_ptr,config->emux_config);
10002b8a:	687a      	ldr	r2, [r7, #4]
10002b8c:	683b      	ldr	r3, [r7, #0]
10002b8e:	681b      	ldr	r3, [r3, #0]
10002b90:	1c10      	adds	r0, r2, #0
10002b92:	1c19      	adds	r1, r3, #0
10002b94:	f7ff feea 	bl	1000296c <XMC_VADC_GROUP_ExternalMuxControlInit>

}
10002b98:	46bd      	mov	sp, r7
10002b9a:	b002      	add	sp, #8
10002b9c:	bd80      	pop	{r7, pc}
10002b9e:	46c0      	nop			; (mov r8, r8)

10002ba0 <XMC_VADC_GROUP_InputClassInit>:

/* API to program conversion characteristics */
void XMC_VADC_GROUP_InputClassInit(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_GROUP_CLASS_t config,
                                          const XMC_VADC_GROUP_CONV_t conv_type, const uint32_t set_num)
{
10002ba0:	b580      	push	{r7, lr}
10002ba2:	b08c      	sub	sp, #48	; 0x30
10002ba4:	af00      	add	r7, sp, #0
10002ba6:	60f8      	str	r0, [r7, #12]
10002ba8:	60b9      	str	r1, [r7, #8]
10002baa:	603b      	str	r3, [r7, #0]
10002bac:	1dfb      	adds	r3, r7, #7
10002bae:	701a      	strb	r2, [r3, #0]

  /* 
   * Obtain the mask and position macros of the parameters based on what is being requested - Standard channels vs
   * external mux channels.
   */
  if (XMC_VADC_GROUP_CONV_STD == conv_type)
10002bb0:	1dfb      	adds	r3, r7, #7
10002bb2:	781b      	ldrb	r3, [r3, #0]
10002bb4:	2b00      	cmp	r3, #0
10002bb6:	d119      	bne.n	10002bec <XMC_VADC_GROUP_InputClassInit+0x4c>
  {
    conv_mode_pos    = (uint32_t) VADC_G_ICLASS_CMS_Pos;
10002bb8:	2308      	movs	r3, #8
10002bba:	62fb      	str	r3, [r7, #44]	; 0x2c
    conv_mode_mask   = (uint32_t) VADC_G_ICLASS_CMS_Msk;
10002bbc:	23e0      	movs	r3, #224	; 0xe0
10002bbe:	00db      	lsls	r3, r3, #3
10002bc0:	627b      	str	r3, [r7, #36]	; 0x24
    sample_time_pos  = (uint32_t) VADC_G_ICLASS_STCS_Pos;
10002bc2:	2300      	movs	r3, #0
10002bc4:	62bb      	str	r3, [r7, #40]	; 0x28
    sample_time_mask = (uint32_t) VADC_G_ICLASS_STCS_Msk;
10002bc6:	231f      	movs	r3, #31
10002bc8:	623b      	str	r3, [r7, #32]
    sample_time      = (uint32_t) config.sample_time_std_conv;
10002bca:	2308      	movs	r3, #8
10002bcc:	18fb      	adds	r3, r7, r3
10002bce:	781b      	ldrb	r3, [r3, #0]
10002bd0:	06db      	lsls	r3, r3, #27
10002bd2:	0edb      	lsrs	r3, r3, #27
10002bd4:	b2db      	uxtb	r3, r3
10002bd6:	61fb      	str	r3, [r7, #28]
    conv_mode        = (XMC_VADC_CONVMODE_t)config.conversion_mode_standard;
10002bd8:	2309      	movs	r3, #9
10002bda:	18fb      	adds	r3, r7, r3
10002bdc:	781b      	ldrb	r3, [r3, #0]
10002bde:	075b      	lsls	r3, r3, #29
10002be0:	0f5b      	lsrs	r3, r3, #29
10002be2:	b2da      	uxtb	r2, r3
10002be4:	231b      	movs	r3, #27
10002be6:	18fb      	adds	r3, r7, r3
10002be8:	701a      	strb	r2, [r3, #0]
10002bea:	e019      	b.n	10002c20 <XMC_VADC_GROUP_InputClassInit+0x80>
  }
  else
  {
    conv_mode_pos    = (uint32_t) VADC_G_ICLASS_CME_Pos;
10002bec:	2318      	movs	r3, #24
10002bee:	62fb      	str	r3, [r7, #44]	; 0x2c
    conv_mode_mask   = (uint32_t) VADC_G_ICLASS_CME_Msk;
10002bf0:	23e0      	movs	r3, #224	; 0xe0
10002bf2:	04db      	lsls	r3, r3, #19
10002bf4:	627b      	str	r3, [r7, #36]	; 0x24
    sample_time_pos  = (uint32_t) VADC_G_ICLASS_STCE_Pos;
10002bf6:	2310      	movs	r3, #16
10002bf8:	62bb      	str	r3, [r7, #40]	; 0x28
    sample_time_mask = (uint32_t) VADC_G_ICLASS_STCE_Msk;
10002bfa:	23f8      	movs	r3, #248	; 0xf8
10002bfc:	035b      	lsls	r3, r3, #13
10002bfe:	623b      	str	r3, [r7, #32]
    sample_time      = (uint32_t) config.sampling_phase_emux_channel;
10002c00:	230a      	movs	r3, #10
10002c02:	18fb      	adds	r3, r7, r3
10002c04:	781b      	ldrb	r3, [r3, #0]
10002c06:	06db      	lsls	r3, r3, #27
10002c08:	0edb      	lsrs	r3, r3, #27
10002c0a:	b2db      	uxtb	r3, r3
10002c0c:	61fb      	str	r3, [r7, #28]
    conv_mode        = (XMC_VADC_CONVMODE_t)config.conversion_mode_emux;
10002c0e:	230b      	movs	r3, #11
10002c10:	18fb      	adds	r3, r7, r3
10002c12:	781b      	ldrb	r3, [r3, #0]
10002c14:	075b      	lsls	r3, r3, #29
10002c16:	0f5b      	lsrs	r3, r3, #29
10002c18:	b2da      	uxtb	r2, r3
10002c1a:	231b      	movs	r3, #27
10002c1c:	18fb      	adds	r3, r7, r3
10002c1e:	701a      	strb	r2, [r3, #0]
  }

  /* Determine the class */
  conv_class  = group_ptr->ICLASS[set_num];
10002c20:	68fb      	ldr	r3, [r7, #12]
10002c22:	683a      	ldr	r2, [r7, #0]
10002c24:	3228      	adds	r2, #40	; 0x28
10002c26:	0092      	lsls	r2, r2, #2
10002c28:	58d3      	ldr	r3, [r2, r3]
10002c2a:	617b      	str	r3, [r7, #20]

  /* Program the class register */
  conv_class &= ~(conv_mode_mask);
10002c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
10002c2e:	43da      	mvns	r2, r3
10002c30:	697b      	ldr	r3, [r7, #20]
10002c32:	4013      	ands	r3, r2
10002c34:	617b      	str	r3, [r7, #20]
  conv_class |= (uint32_t)((uint32_t) conv_mode << conv_mode_pos);
10002c36:	231b      	movs	r3, #27
10002c38:	18fb      	adds	r3, r7, r3
10002c3a:	781a      	ldrb	r2, [r3, #0]
10002c3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
10002c3e:	409a      	lsls	r2, r3
10002c40:	1c13      	adds	r3, r2, #0
10002c42:	697a      	ldr	r2, [r7, #20]
10002c44:	4313      	orrs	r3, r2
10002c46:	617b      	str	r3, [r7, #20]
  conv_class &= ~(sample_time_mask);
10002c48:	6a3b      	ldr	r3, [r7, #32]
10002c4a:	43da      	mvns	r2, r3
10002c4c:	697b      	ldr	r3, [r7, #20]
10002c4e:	4013      	ands	r3, r2
10002c50:	617b      	str	r3, [r7, #20]
  conv_class |= (uint32_t)(sample_time <<  sample_time_pos);
10002c52:	6abb      	ldr	r3, [r7, #40]	; 0x28
10002c54:	69fa      	ldr	r2, [r7, #28]
10002c56:	409a      	lsls	r2, r3
10002c58:	1c13      	adds	r3, r2, #0
10002c5a:	697a      	ldr	r2, [r7, #20]
10002c5c:	4313      	orrs	r3, r2
10002c5e:	617b      	str	r3, [r7, #20]
  group_ptr->ICLASS[set_num] = conv_class;
10002c60:	68fb      	ldr	r3, [r7, #12]
10002c62:	683a      	ldr	r2, [r7, #0]
10002c64:	3228      	adds	r2, #40	; 0x28
10002c66:	0092      	lsls	r2, r2, #2
10002c68:	6979      	ldr	r1, [r7, #20]
10002c6a:	50d1      	str	r1, [r2, r3]
}
10002c6c:	46bd      	mov	sp, r7
10002c6e:	b00c      	add	sp, #48	; 0x30
10002c70:	bd80      	pop	{r7, pc}
10002c72:	46c0      	nop			; (mov r8, r8)

10002c74 <XMC_VADC_GROUP_SetPowerMode>:

/* API which sets the power mode of analog converter of a VADC group */
void XMC_VADC_GROUP_SetPowerMode(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_GROUP_POWERMODE_t power_mode)
{
10002c74:	b580      	push	{r7, lr}
10002c76:	b084      	sub	sp, #16
10002c78:	af00      	add	r7, sp, #0
10002c7a:	6078      	str	r0, [r7, #4]
10002c7c:	1c0a      	adds	r2, r1, #0
10002c7e:	1cfb      	adds	r3, r7, #3
10002c80:	701a      	strb	r2, [r3, #0]
  uint32_t arbcfg;

  XMC_ASSERT("XMC_VADC_GROUP_SetPowerMode:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  XMC_ASSERT("XMC_VADC_GROUP_SetPowerMode:Wrong Power Mode", (power_mode <= XMC_VADC_GROUP_POWERMODE_NORMAL))

  arbcfg = group_ptr->ARBCFG;
10002c82:	687b      	ldr	r3, [r7, #4]
10002c84:	2280      	movs	r2, #128	; 0x80
10002c86:	589b      	ldr	r3, [r3, r2]
10002c88:	60fb      	str	r3, [r7, #12]

  arbcfg &= ~((uint32_t)VADC_G_ARBCFG_ANONC_Msk);
10002c8a:	68fb      	ldr	r3, [r7, #12]
10002c8c:	2203      	movs	r2, #3
10002c8e:	4393      	bics	r3, r2
10002c90:	60fb      	str	r3, [r7, #12]
  arbcfg |= (uint32_t)power_mode;
10002c92:	1cfb      	adds	r3, r7, #3
10002c94:	781b      	ldrb	r3, [r3, #0]
10002c96:	68fa      	ldr	r2, [r7, #12]
10002c98:	4313      	orrs	r3, r2
10002c9a:	60fb      	str	r3, [r7, #12]

  group_ptr->ARBCFG = arbcfg;
10002c9c:	687b      	ldr	r3, [r7, #4]
10002c9e:	2180      	movs	r1, #128	; 0x80
10002ca0:	68fa      	ldr	r2, [r7, #12]
10002ca2:	505a      	str	r2, [r3, r1]
}
10002ca4:	46bd      	mov	sp, r7
10002ca6:	b004      	add	sp, #16
10002ca8:	bd80      	pop	{r7, pc}
10002caa:	46c0      	nop			; (mov r8, r8)

10002cac <XMC_VADC_GROUP_SetSyncSlave>:

/* API which programs a group as a slave group during sync conversions */
void XMC_VADC_GROUP_SetSyncSlave(XMC_VADC_GROUP_t *const group_ptr, uint32_t master_grp, uint32_t slave_grp)
{
10002cac:	b580      	push	{r7, lr}
10002cae:	b086      	sub	sp, #24
10002cb0:	af00      	add	r7, sp, #0
10002cb2:	60f8      	str	r0, [r7, #12]
10002cb4:	60b9      	str	r1, [r7, #8]
10002cb6:	607a      	str	r2, [r7, #4]
  XMC_ASSERT("XMC_VADC_GROUP_SetSyncSlave:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  
  #if (XMC_VADC_MULTIPLE_SLAVEGROUPS == 1U )

  /* Determine the coding of SYNCTR */
  if (slave_grp > master_grp)
10002cb8:	687a      	ldr	r2, [r7, #4]
10002cba:	68bb      	ldr	r3, [r7, #8]
10002cbc:	429a      	cmp	r2, r3
10002cbe:	d902      	bls.n	10002cc6 <XMC_VADC_GROUP_SetSyncSlave+0x1a>
  {
    master_grp = master_grp + 1U;
10002cc0:	68bb      	ldr	r3, [r7, #8]
10002cc2:	3301      	adds	r3, #1
10002cc4:	60bb      	str	r3, [r7, #8]
  }
  #endif
  
  /* Program SYNCTR */
  synctr = group_ptr->SYNCTR;
10002cc6:	68fb      	ldr	r3, [r7, #12]
10002cc8:	22c0      	movs	r2, #192	; 0xc0
10002cca:	589b      	ldr	r3, [r3, r2]
10002ccc:	617b      	str	r3, [r7, #20]
  synctr   &= ~((uint32_t)VADC_G_SYNCTR_STSEL_Msk);
10002cce:	697b      	ldr	r3, [r7, #20]
10002cd0:	2203      	movs	r2, #3
10002cd2:	4393      	bics	r3, r2
10002cd4:	617b      	str	r3, [r7, #20]
  synctr   |= master_grp;
10002cd6:	697a      	ldr	r2, [r7, #20]
10002cd8:	68bb      	ldr	r3, [r7, #8]
10002cda:	4313      	orrs	r3, r2
10002cdc:	617b      	str	r3, [r7, #20]
  group_ptr->SYNCTR = synctr;
10002cde:	68fb      	ldr	r3, [r7, #12]
10002ce0:	21c0      	movs	r1, #192	; 0xc0
10002ce2:	697a      	ldr	r2, [r7, #20]
10002ce4:	505a      	str	r2, [r3, r1]
}
10002ce6:	46bd      	mov	sp, r7
10002ce8:	b006      	add	sp, #24
10002cea:	bd80      	pop	{r7, pc}

10002cec <XMC_VADC_GROUP_SetSyncMaster>:

/* API which programs a group as a master group during sync conversions */
void XMC_VADC_GROUP_SetSyncMaster(XMC_VADC_GROUP_t *const group_ptr)
{
10002cec:	b580      	push	{r7, lr}
10002cee:	b084      	sub	sp, #16
10002cf0:	af00      	add	r7, sp, #0
10002cf2:	6078      	str	r0, [r7, #4]
  uint32_t synctr;

  XMC_ASSERT("XMC_VADC_GROUP_SetSyncMaster:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))

  synctr = group_ptr->SYNCTR;
10002cf4:	687b      	ldr	r3, [r7, #4]
10002cf6:	22c0      	movs	r2, #192	; 0xc0
10002cf8:	589b      	ldr	r3, [r3, r2]
10002cfa:	60fb      	str	r3, [r7, #12]
  synctr   &= ~((uint32_t)VADC_G_SYNCTR_STSEL_Msk);
10002cfc:	68fb      	ldr	r3, [r7, #12]
10002cfe:	2203      	movs	r2, #3
10002d00:	4393      	bics	r3, r2
10002d02:	60fb      	str	r3, [r7, #12]
  group_ptr->SYNCTR = synctr;
10002d04:	687b      	ldr	r3, [r7, #4]
10002d06:	21c0      	movs	r1, #192	; 0xc0
10002d08:	68fa      	ldr	r2, [r7, #12]
10002d0a:	505a      	str	r2, [r3, r1]
}
10002d0c:	46bd      	mov	sp, r7
10002d0e:	b004      	add	sp, #16
10002d10:	bd80      	pop	{r7, pc}
10002d12:	46c0      	nop			; (mov r8, r8)

10002d14 <XMC_VADC_GROUP_CheckSlaveReadiness>:

/* API to enable checking of readiness of slaves before a synchronous conversion request is issued */
void XMC_VADC_GROUP_CheckSlaveReadiness(XMC_VADC_GROUP_t *const group_ptr, uint32_t slave_group)
{
10002d14:	b580      	push	{r7, lr}
10002d16:	b084      	sub	sp, #16
10002d18:	af00      	add	r7, sp, #0
10002d1a:	6078      	str	r0, [r7, #4]
10002d1c:	6039      	str	r1, [r7, #0]
  uint32_t i,master_grp_num;
  XMC_ASSERT("XMC_VADC_GROUP_CheckSlaveReadiness:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  XMC_ASSERT("XMC_VADC_GROUP_CheckSlaveReadiness:Wrong Slave group", ((slave_group >= 0) && (slave_group <= (XMC_VADC_MAXIMUM_NUM_GROUPS - 1))))

  master_grp_num =0;
10002d1e:	2300      	movs	r3, #0
10002d20:	60bb      	str	r3, [r7, #8]
  for(i=0; i<XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
10002d22:	2300      	movs	r3, #0
10002d24:	60fb      	str	r3, [r7, #12]
10002d26:	e00b      	b.n	10002d40 <XMC_VADC_GROUP_CheckSlaveReadiness+0x2c>
  {
    if(g_xmc_vadc_group_array[i] == group_ptr)
10002d28:	4b12      	ldr	r3, [pc, #72]	; (10002d74 <XMC_VADC_GROUP_CheckSlaveReadiness+0x60>)
10002d2a:	68fa      	ldr	r2, [r7, #12]
10002d2c:	0092      	lsls	r2, r2, #2
10002d2e:	58d2      	ldr	r2, [r2, r3]
10002d30:	687b      	ldr	r3, [r7, #4]
10002d32:	429a      	cmp	r2, r3
10002d34:	d101      	bne.n	10002d3a <XMC_VADC_GROUP_CheckSlaveReadiness+0x26>
    {
      master_grp_num = i;
10002d36:	68fb      	ldr	r3, [r7, #12]
10002d38:	60bb      	str	r3, [r7, #8]
  uint32_t i,master_grp_num;
  XMC_ASSERT("XMC_VADC_GROUP_CheckSlaveReadiness:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  XMC_ASSERT("XMC_VADC_GROUP_CheckSlaveReadiness:Wrong Slave group", ((slave_group >= 0) && (slave_group <= (XMC_VADC_MAXIMUM_NUM_GROUPS - 1))))

  master_grp_num =0;
  for(i=0; i<XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
10002d3a:	68fb      	ldr	r3, [r7, #12]
10002d3c:	3301      	adds	r3, #1
10002d3e:	60fb      	str	r3, [r7, #12]
10002d40:	68fb      	ldr	r3, [r7, #12]
10002d42:	2b01      	cmp	r3, #1
10002d44:	d9f0      	bls.n	10002d28 <XMC_VADC_GROUP_CheckSlaveReadiness+0x14>
      master_grp_num = i;
    }
  }


  if(slave_group < master_grp_num)
10002d46:	683a      	ldr	r2, [r7, #0]
10002d48:	68bb      	ldr	r3, [r7, #8]
10002d4a:	429a      	cmp	r2, r3
10002d4c:	d202      	bcs.n	10002d54 <XMC_VADC_GROUP_CheckSlaveReadiness+0x40>
  {
    slave_group++;
10002d4e:	683b      	ldr	r3, [r7, #0]
10002d50:	3301      	adds	r3, #1
10002d52:	603b      	str	r3, [r7, #0]
  }
  group_ptr->SYNCTR |= (1U << (slave_group + XMC_VADC_SYNCTR_START_LOCATION));
10002d54:	687b      	ldr	r3, [r7, #4]
10002d56:	22c0      	movs	r2, #192	; 0xc0
10002d58:	589a      	ldr	r2, [r3, r2]
10002d5a:	683b      	ldr	r3, [r7, #0]
10002d5c:	3303      	adds	r3, #3
10002d5e:	1c19      	adds	r1, r3, #0
10002d60:	2301      	movs	r3, #1
10002d62:	408b      	lsls	r3, r1
10002d64:	431a      	orrs	r2, r3
10002d66:	687b      	ldr	r3, [r7, #4]
10002d68:	21c0      	movs	r1, #192	; 0xc0
10002d6a:	505a      	str	r2, [r3, r1]
}
10002d6c:	46bd      	mov	sp, r7
10002d6e:	b004      	add	sp, #16
10002d70:	bd80      	pop	{r7, pc}
10002d72:	46c0      	nop			; (mov r8, r8)
10002d74:	1000b208 	.word	0x1000b208

10002d78 <XMC_VADC_GLOBAL_SHS_EnableAcceleratedMode>:
}

#if(XMC_VADC_SHS_FULL_SET_REG == 1U)
/* API to enable the accelerated mode of conversion */
void XMC_VADC_GLOBAL_SHS_EnableAcceleratedMode(XMC_VADC_GLOBAL_SHS_t *const shs_ptr, XMC_VADC_GROUP_INDEX_t group_num)
{
10002d78:	b580      	push	{r7, lr}
10002d7a:	b082      	sub	sp, #8
10002d7c:	af00      	add	r7, sp, #0
10002d7e:	6078      	str	r0, [r7, #4]
10002d80:	1c0a      	adds	r2, r1, #0
10002d82:	1cfb      	adds	r3, r7, #3
10002d84:	701a      	strb	r2, [r3, #0]
  XMC_ASSERT("XMC_VADC_GLOBAL_SHS_EnableAcceleratedMode:Wrong SHS Pointer",
             (shs_ptr == (XMC_VADC_GLOBAL_SHS_t*)(void*)SHS0))
  XMC_ASSERT("XMC_VADC_GLOBAL_SHS_EnableAcceleratedMode:Wrong Index number",(group_num <= XMC_VADC_GROUP_INDEX_1))

  /* Set the converted to Accelerated mode from compatible mode*/
  if (group_num == XMC_VADC_GROUP_INDEX_0 )
10002d86:	1cfb      	adds	r3, r7, #3
10002d88:	781b      	ldrb	r3, [r3, #0]
10002d8a:	2b00      	cmp	r3, #0
10002d8c:	d108      	bne.n	10002da0 <XMC_VADC_GLOBAL_SHS_EnableAcceleratedMode+0x28>
  {
    shs_ptr->TIMCFG0 |= (uint32_t)SHS_TIMCFG0_AT_Msk;
10002d8e:	687b      	ldr	r3, [r7, #4]
10002d90:	2280      	movs	r2, #128	; 0x80
10002d92:	589b      	ldr	r3, [r3, r2]
10002d94:	2201      	movs	r2, #1
10002d96:	431a      	orrs	r2, r3
10002d98:	687b      	ldr	r3, [r7, #4]
10002d9a:	2180      	movs	r1, #128	; 0x80
10002d9c:	505a      	str	r2, [r3, r1]
10002d9e:	e00b      	b.n	10002db8 <XMC_VADC_GLOBAL_SHS_EnableAcceleratedMode+0x40>
  }
  else if (group_num == XMC_VADC_GROUP_INDEX_1 )
10002da0:	1cfb      	adds	r3, r7, #3
10002da2:	781b      	ldrb	r3, [r3, #0]
10002da4:	2b01      	cmp	r3, #1
10002da6:	d107      	bne.n	10002db8 <XMC_VADC_GLOBAL_SHS_EnableAcceleratedMode+0x40>
  {
    shs_ptr->TIMCFG1 |= (uint32_t)SHS_TIMCFG1_AT_Msk;
10002da8:	687b      	ldr	r3, [r7, #4]
10002daa:	2284      	movs	r2, #132	; 0x84
10002dac:	589b      	ldr	r3, [r3, r2]
10002dae:	2201      	movs	r2, #1
10002db0:	431a      	orrs	r2, r3
10002db2:	687b      	ldr	r3, [r7, #4]
10002db4:	2184      	movs	r1, #132	; 0x84
10002db6:	505a      	str	r2, [r3, r1]
  }
  else
  {
    /* for MISRA*/
  }
}
10002db8:	46bd      	mov	sp, r7
10002dba:	b002      	add	sp, #8
10002dbc:	bd80      	pop	{r7, pc}
10002dbe:	46c0      	nop			; (mov r8, r8)

10002dc0 <XMC_VADC_GROUP_QueueInit>:
}

#if (XMC_VADC_QUEUE_AVAILABLE == 1U)  
/* API to initialize queue request source */
void XMC_VADC_GROUP_QueueInit(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_QUEUE_CONFIG_t *config)
{
10002dc0:	b580      	push	{r7, lr}
10002dc2:	b084      	sub	sp, #16
10002dc4:	af00      	add	r7, sp, #0
10002dc6:	6078      	str	r0, [r7, #4]
10002dc8:	6039      	str	r1, [r7, #0]
  uint32_t          reg;

  XMC_ASSERT("XMC_VADC_GROUP_QueueInit:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))

  /* Disable arbitration slot of the queue request source */
  XMC_VADC_GROUP_QueueDisableArbitrationSlot(group_ptr);
10002dca:	687b      	ldr	r3, [r7, #4]
10002dcc:	1c18      	adds	r0, r3, #0
10002dce:	f7ff fe25 	bl	10002a1c <XMC_VADC_GROUP_QueueDisableArbitrationSlot>
  
  reg = group_ptr->ARBPR;
10002dd2:	687b      	ldr	r3, [r7, #4]
10002dd4:	2284      	movs	r2, #132	; 0x84
10002dd6:	589b      	ldr	r3, [r3, r2]
10002dd8:	60fb      	str	r3, [r7, #12]

  /* Request Source priority */
  reg &= ~((uint32_t)VADC_G_ARBPR_PRIO0_Msk);
10002dda:	68fb      	ldr	r3, [r7, #12]
10002ddc:	2203      	movs	r2, #3
10002dde:	4393      	bics	r3, r2
10002de0:	60fb      	str	r3, [r7, #12]
  reg |= (uint32_t) ((uint32_t)config->req_src_priority << VADC_G_ARBPR_PRIO0_Pos);
10002de2:	683b      	ldr	r3, [r7, #0]
10002de4:	781b      	ldrb	r3, [r3, #0]
10002de6:	071b      	lsls	r3, r3, #28
10002de8:	0f9b      	lsrs	r3, r3, #30
10002dea:	b2db      	uxtb	r3, r3
10002dec:	1c1a      	adds	r2, r3, #0
10002dee:	68fb      	ldr	r3, [r7, #12]
10002df0:	4313      	orrs	r3, r2
10002df2:	60fb      	str	r3, [r7, #12]

  /* Conversion Start mode */
  if (XMC_VADC_STARTMODE_WFS != (XMC_VADC_STARTMODE_t)config->conv_start_mode)
10002df4:	683b      	ldr	r3, [r7, #0]
10002df6:	781b      	ldrb	r3, [r3, #0]
10002df8:	2203      	movs	r2, #3
10002dfa:	4013      	ands	r3, r2
10002dfc:	b2db      	uxtb	r3, r3
10002dfe:	2b00      	cmp	r3, #0
10002e00:	d003      	beq.n	10002e0a <XMC_VADC_GROUP_QueueInit+0x4a>
  {
    reg |= (uint32_t)(VADC_G_ARBPR_CSM0_Msk);
10002e02:	68fb      	ldr	r3, [r7, #12]
10002e04:	2208      	movs	r2, #8
10002e06:	4313      	orrs	r3, r2
10002e08:	60fb      	str	r3, [r7, #12]
  }

  group_ptr->ARBPR = reg;
10002e0a:	687b      	ldr	r3, [r7, #4]
10002e0c:	2184      	movs	r1, #132	; 0x84
10002e0e:	68fa      	ldr	r2, [r7, #12]
10002e10:	505a      	str	r2, [r3, r1]


  group_ptr->QCTRL0 = (uint32_t)((config->qctrl0)|(uint32_t)(VADC_G_QCTRL0_XTWC_Msk)|
10002e12:	683b      	ldr	r3, [r7, #0]
10002e14:	685b      	ldr	r3, [r3, #4]
10002e16:	4a15      	ldr	r2, [pc, #84]	; (10002e6c <XMC_VADC_GROUP_QueueInit+0xac>)
10002e18:	431a      	orrs	r2, r3
10002e1a:	1c11      	adds	r1, r2, #0
10002e1c:	687a      	ldr	r2, [r7, #4]
10002e1e:	2380      	movs	r3, #128	; 0x80
10002e20:	005b      	lsls	r3, r3, #1
10002e22:	50d1      	str	r1, [r2, r3]
                                                    (uint32_t)(VADC_G_QCTRL0_TMWC_Msk)|
                                                    (uint32_t)(VADC_G_QCTRL0_GTWC_Msk));

  /* Gating mode */
  group_ptr->QMR0 = ((uint32_t)(config->qmr0) | (uint32_t)((uint32_t)XMC_VADC_GATEMODE_IGNORE << VADC_G_QMR0_ENGT_Pos));
10002e24:	683b      	ldr	r3, [r7, #0]
10002e26:	689b      	ldr	r3, [r3, #8]
10002e28:	2201      	movs	r2, #1
10002e2a:	431a      	orrs	r2, r3
10002e2c:	1c11      	adds	r1, r2, #0
10002e2e:	687a      	ldr	r2, [r7, #4]
10002e30:	2382      	movs	r3, #130	; 0x82
10002e32:	005b      	lsls	r3, r3, #1
10002e34:	50d1      	str	r1, [r2, r3]

  if (XMC_VADC_STARTMODE_CNR == (XMC_VADC_STARTMODE_t)(config->conv_start_mode) )
10002e36:	683b      	ldr	r3, [r7, #0]
10002e38:	781b      	ldrb	r3, [r3, #0]
10002e3a:	2203      	movs	r2, #3
10002e3c:	4013      	ands	r3, r2
10002e3e:	b2db      	uxtb	r3, r3
10002e40:	2b02      	cmp	r3, #2
10002e42:	d10b      	bne.n	10002e5c <XMC_VADC_GROUP_QueueInit+0x9c>
  {
    group_ptr->QMR0 |= (uint32_t)((uint32_t)1 << VADC_G_QMR0_RPTDIS_Pos);
10002e44:	687a      	ldr	r2, [r7, #4]
10002e46:	2382      	movs	r3, #130	; 0x82
10002e48:	005b      	lsls	r3, r3, #1
10002e4a:	58d3      	ldr	r3, [r2, r3]
10002e4c:	2280      	movs	r2, #128	; 0x80
10002e4e:	0252      	lsls	r2, r2, #9
10002e50:	431a      	orrs	r2, r3
10002e52:	1c11      	adds	r1, r2, #0
10002e54:	687a      	ldr	r2, [r7, #4]
10002e56:	2382      	movs	r3, #130	; 0x82
10002e58:	005b      	lsls	r3, r3, #1
10002e5a:	50d1      	str	r1, [r2, r3]
  }
  /* Enable arbitration slot for the queue request source */
  XMC_VADC_GROUP_QueueEnableArbitrationSlot(group_ptr);
10002e5c:	687b      	ldr	r3, [r7, #4]
10002e5e:	1c18      	adds	r0, r3, #0
10002e60:	f7ff fdcc 	bl	100029fc <XMC_VADC_GROUP_QueueEnableArbitrationSlot>

}
10002e64:	46bd      	mov	sp, r7
10002e66:	b004      	add	sp, #16
10002e68:	bd80      	pop	{r7, pc}
10002e6a:	46c0      	nop			; (mov r8, r8)
10002e6c:	80808000 	.word	0x80808000

10002e70 <XMC_VADC_GROUP_QueueSetReqSrcEventInterruptNode>:
  return ch_num;
}

/* Select a Service Request line for the request source event */
void XMC_VADC_GROUP_QueueSetReqSrcEventInterruptNode(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_SR_t sr)
{
10002e70:	b580      	push	{r7, lr}
10002e72:	b084      	sub	sp, #16
10002e74:	af00      	add	r7, sp, #0
10002e76:	6078      	str	r0, [r7, #4]
10002e78:	1c0a      	adds	r2, r1, #0
10002e7a:	1cfb      	adds	r3, r7, #3
10002e7c:	701a      	strb	r2, [r3, #0]
  uint32_t sevnp;

  XMC_ASSERT("XMC_VADC_GROUP_QueueSetReqSrcEventInterruptNode:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  XMC_ASSERT("XMC_VADC_GROUP_QueueSetReqSrcEventInterruptNode:Wrong Service Request", ((sr)  <= XMC_VADC_SR_SHARED_SR3))

  sevnp = group_ptr->SEVNP;
10002e7e:	687a      	ldr	r2, [r7, #4]
10002e80:	23e0      	movs	r3, #224	; 0xe0
10002e82:	005b      	lsls	r3, r3, #1
10002e84:	58d3      	ldr	r3, [r2, r3]
10002e86:	60fb      	str	r3, [r7, #12]

  sevnp &= ~((uint32_t)VADC_G_SEVNP_SEV0NP_Msk);
10002e88:	68fb      	ldr	r3, [r7, #12]
10002e8a:	220f      	movs	r2, #15
10002e8c:	4393      	bics	r3, r2
10002e8e:	60fb      	str	r3, [r7, #12]
  sevnp |= (uint32_t)((uint32_t)sr << VADC_G_SEVNP_SEV0NP_Pos);
10002e90:	1cfb      	adds	r3, r7, #3
10002e92:	781b      	ldrb	r3, [r3, #0]
10002e94:	68fa      	ldr	r2, [r7, #12]
10002e96:	4313      	orrs	r3, r2
10002e98:	60fb      	str	r3, [r7, #12]

  group_ptr->SEVNP = sevnp;
10002e9a:	687a      	ldr	r2, [r7, #4]
10002e9c:	23e0      	movs	r3, #224	; 0xe0
10002e9e:	005b      	lsls	r3, r3, #1
10002ea0:	68f9      	ldr	r1, [r7, #12]
10002ea2:	50d1      	str	r1, [r2, r3]

}
10002ea4:	46bd      	mov	sp, r7
10002ea6:	b004      	add	sp, #16
10002ea8:	bd80      	pop	{r7, pc}
10002eaa:	46c0      	nop			; (mov r8, r8)

10002eac <XMC_VADC_GROUP_ChannelInit>:

#if (XMC_VADC_GROUP_AVAILABLE ==1U)
/* API to initialize a channel unit */
void XMC_VADC_GROUP_ChannelInit(XMC_VADC_GROUP_t *const group_ptr, const uint32_t ch_num,
                                        const XMC_VADC_CHANNEL_CONFIG_t *config)
{
10002eac:	b580      	push	{r7, lr}
10002eae:	b088      	sub	sp, #32
10002eb0:	af00      	add	r7, sp, #0
10002eb2:	60f8      	str	r0, [r7, #12]
10002eb4:	60b9      	str	r1, [r7, #8]
10002eb6:	607a      	str	r2, [r7, #4]


  XMC_ASSERT("XMC_VADC_GROUP_ChannelInit:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  XMC_ASSERT("XMC_VADC_GROUP_ChannelInit:Wrong Channel Number", ((ch_num) < XMC_VADC_NUM_CHANNELS_PER_GROUP))
  
  prio  = (uint32_t)config->channel_priority;
10002eb8:	687b      	ldr	r3, [r7, #4]
10002eba:	7b1b      	ldrb	r3, [r3, #12]
10002ebc:	61bb      	str	r3, [r7, #24]

  /* Priority channel */
  ch_assign  = group_ptr->CHASS;
10002ebe:	68fb      	ldr	r3, [r7, #12]
10002ec0:	2288      	movs	r2, #136	; 0x88
10002ec2:	589b      	ldr	r3, [r3, r2]
10002ec4:	617b      	str	r3, [r7, #20]
  ch_assign &= ~((uint32_t)((uint32_t)1 << ch_num));
10002ec6:	68bb      	ldr	r3, [r7, #8]
10002ec8:	2201      	movs	r2, #1
10002eca:	409a      	lsls	r2, r3
10002ecc:	1c13      	adds	r3, r2, #0
10002ece:	43da      	mvns	r2, r3
10002ed0:	697b      	ldr	r3, [r7, #20]
10002ed2:	4013      	ands	r3, r2
10002ed4:	617b      	str	r3, [r7, #20]
  ch_assign |= (uint32_t)(prio << ch_num);
10002ed6:	68bb      	ldr	r3, [r7, #8]
10002ed8:	69ba      	ldr	r2, [r7, #24]
10002eda:	409a      	lsls	r2, r3
10002edc:	1c13      	adds	r3, r2, #0
10002ede:	697a      	ldr	r2, [r7, #20]
10002ee0:	4313      	orrs	r3, r2
10002ee2:	617b      	str	r3, [r7, #20]
  group_ptr->CHASS = ch_assign;
10002ee4:	68fb      	ldr	r3, [r7, #12]
10002ee6:	2188      	movs	r1, #136	; 0x88
10002ee8:	697a      	ldr	r2, [r7, #20]
10002eea:	505a      	str	r2, [r3, r1]

  /* Alias channel */
  if (config->alias_channel >= (int32_t)0)
10002eec:	687b      	ldr	r3, [r7, #4]
10002eee:	7b5b      	ldrb	r3, [r3, #13]
10002ef0:	b25b      	sxtb	r3, r3
10002ef2:	2b00      	cmp	r3, #0
10002ef4:	db2a      	blt.n	10002f4c <XMC_VADC_GROUP_ChannelInit+0xa0>
  {
    mask = (uint32_t)0;
10002ef6:	2300      	movs	r3, #0
10002ef8:	61fb      	str	r3, [r7, #28]
    if ((uint32_t)1 == ch_num)
10002efa:	68bb      	ldr	r3, [r7, #8]
10002efc:	2b01      	cmp	r3, #1
10002efe:	d10a      	bne.n	10002f16 <XMC_VADC_GROUP_ChannelInit+0x6a>
    {
      mask = VADC_G_ALIAS_ALIAS1_Pos;
10002f00:	2308      	movs	r3, #8
10002f02:	61fb      	str	r3, [r7, #28]
      group_ptr->ALIAS &= ~(uint32_t)(VADC_G_ALIAS_ALIAS1_Msk);
10002f04:	68fb      	ldr	r3, [r7, #12]
10002f06:	22b0      	movs	r2, #176	; 0xb0
10002f08:	589b      	ldr	r3, [r3, r2]
10002f0a:	4a1e      	ldr	r2, [pc, #120]	; (10002f84 <XMC_VADC_GROUP_ChannelInit+0xd8>)
10002f0c:	401a      	ands	r2, r3
10002f0e:	68fb      	ldr	r3, [r7, #12]
10002f10:	21b0      	movs	r1, #176	; 0xb0
10002f12:	505a      	str	r2, [r3, r1]
10002f14:	e00d      	b.n	10002f32 <XMC_VADC_GROUP_ChannelInit+0x86>
    }
    else if ((uint32_t)0 == ch_num)
10002f16:	68bb      	ldr	r3, [r7, #8]
10002f18:	2b00      	cmp	r3, #0
10002f1a:	d10a      	bne.n	10002f32 <XMC_VADC_GROUP_ChannelInit+0x86>
    {
      mask = VADC_G_ALIAS_ALIAS0_Pos;
10002f1c:	2300      	movs	r3, #0
10002f1e:	61fb      	str	r3, [r7, #28]
      group_ptr->ALIAS &= ~(uint32_t)(VADC_G_ALIAS_ALIAS0_Msk);
10002f20:	68fb      	ldr	r3, [r7, #12]
10002f22:	22b0      	movs	r2, #176	; 0xb0
10002f24:	589b      	ldr	r3, [r3, r2]
10002f26:	221f      	movs	r2, #31
10002f28:	4393      	bics	r3, r2
10002f2a:	1c1a      	adds	r2, r3, #0
10002f2c:	68fb      	ldr	r3, [r7, #12]
10002f2e:	21b0      	movs	r1, #176	; 0xb0
10002f30:	505a      	str	r2, [r3, r1]
    }

    group_ptr->ALIAS |= (uint32_t)(config->alias_channel << mask);
10002f32:	68fb      	ldr	r3, [r7, #12]
10002f34:	22b0      	movs	r2, #176	; 0xb0
10002f36:	589b      	ldr	r3, [r3, r2]
10002f38:	687a      	ldr	r2, [r7, #4]
10002f3a:	7b52      	ldrb	r2, [r2, #13]
10002f3c:	b251      	sxtb	r1, r2
10002f3e:	69fa      	ldr	r2, [r7, #28]
10002f40:	4091      	lsls	r1, r2
10002f42:	1c0a      	adds	r2, r1, #0
10002f44:	431a      	orrs	r2, r3
10002f46:	68fb      	ldr	r3, [r7, #12]
10002f48:	21b0      	movs	r1, #176	; 0xb0
10002f4a:	505a      	str	r2, [r3, r1]
  }

  group_ptr->BFL |= config->bfl;
10002f4c:	68fb      	ldr	r3, [r7, #12]
10002f4e:	22c8      	movs	r2, #200	; 0xc8
10002f50:	589a      	ldr	r2, [r3, r2]
10002f52:	687b      	ldr	r3, [r7, #4]
10002f54:	685b      	ldr	r3, [r3, #4]
10002f56:	431a      	orrs	r2, r3
10002f58:	68fb      	ldr	r3, [r7, #12]
10002f5a:	21c8      	movs	r1, #200	; 0xc8
10002f5c:	505a      	str	r2, [r3, r1]

#if (XMC_VADC_BOUNDARY_FLAG_SELECT == 1U)
  group_ptr->BFLC |= config->bflc;
10002f5e:	68fb      	ldr	r3, [r7, #12]
10002f60:	22d0      	movs	r2, #208	; 0xd0
10002f62:	589a      	ldr	r2, [r3, r2]
10002f64:	687b      	ldr	r3, [r7, #4]
10002f66:	689b      	ldr	r3, [r3, #8]
10002f68:	431a      	orrs	r2, r3
10002f6a:	68fb      	ldr	r3, [r7, #12]
10002f6c:	21d0      	movs	r1, #208	; 0xd0
10002f6e:	505a      	str	r2, [r3, r1]
#endif
  /* Program the CHCTR register */
  group_ptr->CHCTR[ch_num] = config->chctr;
10002f70:	687b      	ldr	r3, [r7, #4]
10002f72:	6819      	ldr	r1, [r3, #0]
10002f74:	68fb      	ldr	r3, [r7, #12]
10002f76:	68ba      	ldr	r2, [r7, #8]
10002f78:	3280      	adds	r2, #128	; 0x80
10002f7a:	0092      	lsls	r2, r2, #2
10002f7c:	50d1      	str	r1, [r2, r3]

}
10002f7e:	46bd      	mov	sp, r7
10002f80:	b008      	add	sp, #32
10002f82:	bd80      	pop	{r7, pc}
10002f84:	ffffe0ff 	.word	0xffffe0ff

10002f88 <XMC_VADC_GROUP_SetResultInterruptNode>:

/* API to select a service request line (NVIC Node) for result event of specified unit of result hardware */
void XMC_VADC_GROUP_SetResultInterruptNode(XMC_VADC_GROUP_t *const group_ptr,
                                           const uint32_t res_reg,
                                           const XMC_VADC_SR_t sr)
{
10002f88:	b580      	push	{r7, lr}
10002f8a:	b086      	sub	sp, #24
10002f8c:	af00      	add	r7, sp, #0
10002f8e:	60f8      	str	r0, [r7, #12]
10002f90:	60b9      	str	r1, [r7, #8]
10002f92:	1dfb      	adds	r3, r7, #7
10002f94:	701a      	strb	r2, [r3, #0]

  XMC_ASSERT("XMC_VADC_GROUP_SetResultInterruptNode:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  XMC_ASSERT("XMC_VADC_GROUP_SetResultInterruptNode:Wrong Result Register", ((res_reg) < XMC_VADC_NUM_RESULT_REGISTERS))
  XMC_ASSERT("XMC_VADC_GROUP_SetResultInterruptNode:Wrong Service Request", ((sr)  <= XMC_VADC_SR_SHARED_SR3))

  if (res_reg <= 7U)
10002f96:	68bb      	ldr	r3, [r7, #8]
10002f98:	2b07      	cmp	r3, #7
10002f9a:	d81b      	bhi.n	10002fd4 <XMC_VADC_GROUP_SetResultInterruptNode+0x4c>
  {
    route_mask  = group_ptr->REVNP0;
10002f9c:	68fa      	ldr	r2, [r7, #12]
10002f9e:	23d8      	movs	r3, #216	; 0xd8
10002fa0:	005b      	lsls	r3, r3, #1
10002fa2:	58d3      	ldr	r3, [r2, r3]
10002fa4:	617b      	str	r3, [r7, #20]
    route_mask &= ~((uint32_t)((uint32_t)15 << (res_reg * (uint32_t)4) ));
10002fa6:	68bb      	ldr	r3, [r7, #8]
10002fa8:	009b      	lsls	r3, r3, #2
10002faa:	1c1a      	adds	r2, r3, #0
10002fac:	230f      	movs	r3, #15
10002fae:	4093      	lsls	r3, r2
10002fb0:	43da      	mvns	r2, r3
10002fb2:	697b      	ldr	r3, [r7, #20]
10002fb4:	4013      	ands	r3, r2
10002fb6:	617b      	str	r3, [r7, #20]
    route_mask |= (uint32_t)((uint32_t)sr << (res_reg * (uint32_t)4));
10002fb8:	1dfb      	adds	r3, r7, #7
10002fba:	781b      	ldrb	r3, [r3, #0]
10002fbc:	68ba      	ldr	r2, [r7, #8]
10002fbe:	0092      	lsls	r2, r2, #2
10002fc0:	4093      	lsls	r3, r2
10002fc2:	697a      	ldr	r2, [r7, #20]
10002fc4:	4313      	orrs	r3, r2
10002fc6:	617b      	str	r3, [r7, #20]
    group_ptr->REVNP0 = route_mask;
10002fc8:	68fa      	ldr	r2, [r7, #12]
10002fca:	23d8      	movs	r3, #216	; 0xd8
10002fcc:	005b      	lsls	r3, r3, #1
10002fce:	6979      	ldr	r1, [r7, #20]
10002fd0:	50d1      	str	r1, [r2, r3]
10002fd2:	e020      	b.n	10003016 <XMC_VADC_GROUP_SetResultInterruptNode+0x8e>
  }
  else
  {
    route_mask = group_ptr->REVNP1;
10002fd4:	68fa      	ldr	r2, [r7, #12]
10002fd6:	23da      	movs	r3, #218	; 0xda
10002fd8:	005b      	lsls	r3, r3, #1
10002fda:	58d3      	ldr	r3, [r2, r3]
10002fdc:	617b      	str	r3, [r7, #20]
    route_mask &= ~((uint32_t)((uint32_t)15 << (( res_reg - (uint32_t)8) * (uint32_t)4) ));
10002fde:	68bb      	ldr	r3, [r7, #8]
10002fe0:	4a0e      	ldr	r2, [pc, #56]	; (1000301c <XMC_VADC_GROUP_SetResultInterruptNode+0x94>)
10002fe2:	4694      	mov	ip, r2
10002fe4:	4463      	add	r3, ip
10002fe6:	009b      	lsls	r3, r3, #2
10002fe8:	1c1a      	adds	r2, r3, #0
10002fea:	230f      	movs	r3, #15
10002fec:	4093      	lsls	r3, r2
10002fee:	43da      	mvns	r2, r3
10002ff0:	697b      	ldr	r3, [r7, #20]
10002ff2:	4013      	ands	r3, r2
10002ff4:	617b      	str	r3, [r7, #20]
    route_mask |= (uint32_t)((uint32_t)sr << ((res_reg - (uint32_t)8) * (uint32_t)4));
10002ff6:	1dfb      	adds	r3, r7, #7
10002ff8:	781b      	ldrb	r3, [r3, #0]
10002ffa:	68ba      	ldr	r2, [r7, #8]
10002ffc:	4907      	ldr	r1, [pc, #28]	; (1000301c <XMC_VADC_GROUP_SetResultInterruptNode+0x94>)
10002ffe:	468c      	mov	ip, r1
10003000:	4462      	add	r2, ip
10003002:	0092      	lsls	r2, r2, #2
10003004:	4093      	lsls	r3, r2
10003006:	697a      	ldr	r2, [r7, #20]
10003008:	4313      	orrs	r3, r2
1000300a:	617b      	str	r3, [r7, #20]
    group_ptr->REVNP1 = route_mask;
1000300c:	68fa      	ldr	r2, [r7, #12]
1000300e:	23da      	movs	r3, #218	; 0xda
10003010:	005b      	lsls	r3, r3, #1
10003012:	6979      	ldr	r1, [r7, #20]
10003014:	50d1      	str	r1, [r2, r3]
  }
}
10003016:	46bd      	mov	sp, r7
10003018:	b006      	add	sp, #24
1000301a:	bd80      	pop	{r7, pc}
1000301c:	3ffffff8 	.word	0x3ffffff8

10003020 <_sbrk>:

// defined in linker script
extern caddr_t Heap_Bank1_Start;
extern caddr_t Heap_Bank1_End;
caddr_t _sbrk(int nbytes)
{
10003020:	b580      	push	{r7, lr}
10003022:	b084      	sub	sp, #16
10003024:	af00      	add	r7, sp, #0
10003026:	6078      	str	r0, [r7, #4]
  static caddr_t heap_ptr = NULL;
  caddr_t base;

  if (heap_ptr == NULL) {
10003028:	4b14      	ldr	r3, [pc, #80]	; (1000307c <_sbrk+0x5c>)
1000302a:	681b      	ldr	r3, [r3, #0]
1000302c:	2b00      	cmp	r3, #0
1000302e:	d102      	bne.n	10003036 <_sbrk+0x16>
    heap_ptr = (caddr_t)&Heap_Bank1_Start;
10003030:	4b12      	ldr	r3, [pc, #72]	; (1000307c <_sbrk+0x5c>)
10003032:	4a13      	ldr	r2, [pc, #76]	; (10003080 <_sbrk+0x60>)
10003034:	601a      	str	r2, [r3, #0]
  }

  base = heap_ptr;
10003036:	4b11      	ldr	r3, [pc, #68]	; (1000307c <_sbrk+0x5c>)
10003038:	681b      	ldr	r3, [r3, #0]
1000303a:	60fb      	str	r3, [r7, #12]

  /* heap word alignment */
  nbytes = (nbytes + 3) & ~0x3U;
1000303c:	687b      	ldr	r3, [r7, #4]
1000303e:	3303      	adds	r3, #3
10003040:	2203      	movs	r2, #3
10003042:	4393      	bics	r3, r2
10003044:	607b      	str	r3, [r7, #4]
  if ((caddr_t)&Heap_Bank1_End > (heap_ptr + nbytes))
10003046:	4b0d      	ldr	r3, [pc, #52]	; (1000307c <_sbrk+0x5c>)
10003048:	681a      	ldr	r2, [r3, #0]
1000304a:	687b      	ldr	r3, [r7, #4]
1000304c:	18d2      	adds	r2, r2, r3
1000304e:	4b0d      	ldr	r3, [pc, #52]	; (10003084 <_sbrk+0x64>)
10003050:	429a      	cmp	r2, r3
10003052:	d207      	bcs.n	10003064 <_sbrk+0x44>
  {
    heap_ptr += nbytes;
10003054:	4b09      	ldr	r3, [pc, #36]	; (1000307c <_sbrk+0x5c>)
10003056:	681a      	ldr	r2, [r3, #0]
10003058:	687b      	ldr	r3, [r7, #4]
1000305a:	18d2      	adds	r2, r2, r3
1000305c:	4b07      	ldr	r3, [pc, #28]	; (1000307c <_sbrk+0x5c>)
1000305e:	601a      	str	r2, [r3, #0]
    return (base);
10003060:	68fb      	ldr	r3, [r7, #12]
10003062:	e006      	b.n	10003072 <_sbrk+0x52>
  }
  else
  {
    /* Heap overflow */
    errno = ENOMEM;
10003064:	f004 ffae 	bl	10007fc4 <__errno>
10003068:	1c03      	adds	r3, r0, #0
1000306a:	220c      	movs	r2, #12
1000306c:	601a      	str	r2, [r3, #0]
    return ((caddr_t)-1);
1000306e:	2301      	movs	r3, #1
10003070:	425b      	negs	r3, r3
  }
}
10003072:	1c18      	adds	r0, r3, #0
10003074:	46bd      	mov	sp, r7
10003076:	b004      	add	sp, #16
10003078:	bd80      	pop	{r7, pc}
1000307a:	46c0      	nop			; (mov r8, r8)
1000307c:	20001314 	.word	0x20001314
10003080:	200018c0 	.word	0x200018c0
10003084:	20003ffc 	.word	0x20003ffc

10003088 <_init>:

/* Init */
void _init(void)
{}
10003088:	b580      	push	{r7, lr}
1000308a:	af00      	add	r7, sp, #0
1000308c:	46bd      	mov	sp, r7
1000308e:	bd80      	pop	{r7, pc}

10003090 <XMC_USIC_CH_EnableEvent>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_DisableEvent(), XMC_USIC_CH_SetInterruptNodePointer() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_EnableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
10003090:	b580      	push	{r7, lr}
10003092:	b082      	sub	sp, #8
10003094:	af00      	add	r7, sp, #0
10003096:	6078      	str	r0, [r7, #4]
10003098:	6039      	str	r1, [r7, #0]
  channel->CCR |= event;
1000309a:	687b      	ldr	r3, [r7, #4]
1000309c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
1000309e:	683b      	ldr	r3, [r7, #0]
100030a0:	431a      	orrs	r2, r3
100030a2:	687b      	ldr	r3, [r7, #4]
100030a4:	641a      	str	r2, [r3, #64]	; 0x40
}
100030a6:	46bd      	mov	sp, r7
100030a8:	b002      	add	sp, #8
100030aa:	bd80      	pop	{r7, pc}

100030ac <XMC_USIC_CH_DisableEvent>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_EnableEvent(), XMC_USIC_CH_SetInterruptNodePointer() \n\n\n
*/
__STATIC_INLINE void XMC_USIC_CH_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
100030ac:	b580      	push	{r7, lr}
100030ae:	b082      	sub	sp, #8
100030b0:	af00      	add	r7, sp, #0
100030b2:	6078      	str	r0, [r7, #4]
100030b4:	6039      	str	r1, [r7, #0]
  channel->CCR &= (uint32_t)~event;
100030b6:	687b      	ldr	r3, [r7, #4]
100030b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
100030ba:	683a      	ldr	r2, [r7, #0]
100030bc:	43d2      	mvns	r2, r2
100030be:	401a      	ands	r2, r3
100030c0:	687b      	ldr	r3, [r7, #4]
100030c2:	641a      	str	r2, [r3, #64]	; 0x40
}
100030c4:	46bd      	mov	sp, r7
100030c6:	b002      	add	sp, #8
100030c8:	bd80      	pop	{r7, pc}
100030ca:	46c0      	nop			; (mov r8, r8)

100030cc <XMC_USIC_CH_GetTransmitBufferStatus>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetDataOutputMode() \n\n\n
 */
__STATIC_INLINE XMC_USIC_CH_TBUF_STATUS_t XMC_USIC_CH_GetTransmitBufferStatus(XMC_USIC_CH_t *const channel)
{
100030cc:	b580      	push	{r7, lr}
100030ce:	b082      	sub	sp, #8
100030d0:	af00      	add	r7, sp, #0
100030d2:	6078      	str	r0, [r7, #4]
  return (XMC_USIC_CH_TBUF_STATUS_t)(channel->TCSR & USIC_CH_TCSR_TDV_Msk);
100030d4:	687b      	ldr	r3, [r7, #4]
100030d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
100030d8:	b2db      	uxtb	r3, r3
100030da:	227f      	movs	r2, #127	; 0x7f
100030dc:	4393      	bics	r3, r2
100030de:	b2db      	uxtb	r3, r3
}
100030e0:	1c18      	adds	r0, r3, #0
100030e2:	46bd      	mov	sp, r7
100030e4:	b002      	add	sp, #8
100030e6:	bd80      	pop	{r7, pc}

100030e8 <XMC_USIC_CH_TriggerServiceRequest>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetInterruptNodePointer() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_TriggerServiceRequest(XMC_USIC_CH_t *const channel, const uint32_t service_request_line)
{
100030e8:	b580      	push	{r7, lr}
100030ea:	b082      	sub	sp, #8
100030ec:	af00      	add	r7, sp, #0
100030ee:	6078      	str	r0, [r7, #4]
100030f0:	6039      	str	r1, [r7, #0]
  channel->FMR = (uint32_t)(USIC_CH_FMR_SIO0_Msk << service_request_line);
100030f2:	683b      	ldr	r3, [r7, #0]
100030f4:	2280      	movs	r2, #128	; 0x80
100030f6:	0252      	lsls	r2, r2, #9
100030f8:	409a      	lsls	r2, r3
100030fa:	687b      	ldr	r3, [r7, #4]
100030fc:	669a      	str	r2, [r3, #104]	; 0x68
}
100030fe:	46bd      	mov	sp, r7
10003100:	b002      	add	sp, #8
10003102:	bd80      	pop	{r7, pc}

10003104 <XMC_USIC_CH_TXFIFO_EnableEvent>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_SetInterruptNodePointer() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_TXFIFO_EnableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
10003104:	b580      	push	{r7, lr}
10003106:	b082      	sub	sp, #8
10003108:	af00      	add	r7, sp, #0
1000310a:	6078      	str	r0, [r7, #4]
1000310c:	6039      	str	r1, [r7, #0]
  channel->TBCTR |= event;
1000310e:	687a      	ldr	r2, [r7, #4]
10003110:	2384      	movs	r3, #132	; 0x84
10003112:	005b      	lsls	r3, r3, #1
10003114:	58d2      	ldr	r2, [r2, r3]
10003116:	683b      	ldr	r3, [r7, #0]
10003118:	431a      	orrs	r2, r3
1000311a:	1c11      	adds	r1, r2, #0
1000311c:	687a      	ldr	r2, [r7, #4]
1000311e:	2384      	movs	r3, #132	; 0x84
10003120:	005b      	lsls	r3, r3, #1
10003122:	50d1      	str	r1, [r2, r3]
}
10003124:	46bd      	mov	sp, r7
10003126:	b002      	add	sp, #8
10003128:	bd80      	pop	{r7, pc}
1000312a:	46c0      	nop			; (mov r8, r8)

1000312c <XMC_USIC_CH_TXFIFO_DisableEvent>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_GetEvent(), XMC_USIC_CH_TXFIFO_EnableEvent() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_TXFIFO_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
1000312c:	b580      	push	{r7, lr}
1000312e:	b082      	sub	sp, #8
10003130:	af00      	add	r7, sp, #0
10003132:	6078      	str	r0, [r7, #4]
10003134:	6039      	str	r1, [r7, #0]
  channel->TBCTR &= (uint32_t)~event;
10003136:	687a      	ldr	r2, [r7, #4]
10003138:	2384      	movs	r3, #132	; 0x84
1000313a:	005b      	lsls	r3, r3, #1
1000313c:	58d3      	ldr	r3, [r2, r3]
1000313e:	683a      	ldr	r2, [r7, #0]
10003140:	43d2      	mvns	r2, r2
10003142:	401a      	ands	r2, r3
10003144:	1c11      	adds	r1, r2, #0
10003146:	687a      	ldr	r2, [r7, #4]
10003148:	2384      	movs	r3, #132	; 0x84
1000314a:	005b      	lsls	r3, r3, #1
1000314c:	50d1      	str	r1, [r2, r3]
}
1000314e:	46bd      	mov	sp, r7
10003150:	b002      	add	sp, #8
10003152:	bd80      	pop	{r7, pc}

10003154 <XMC_USIC_CH_TXFIFO_Flush>:
 * 
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_GetLevel() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_TXFIFO_Flush(XMC_USIC_CH_t *const channel)
{
10003154:	b580      	push	{r7, lr}
10003156:	b082      	sub	sp, #8
10003158:	af00      	add	r7, sp, #0
1000315a:	6078      	str	r0, [r7, #4]
  channel->TRBSCR = (uint32_t)USIC_CH_TRBSCR_FLUSHTB_Msk;
1000315c:	687a      	ldr	r2, [r7, #4]
1000315e:	238c      	movs	r3, #140	; 0x8c
10003160:	005b      	lsls	r3, r3, #1
10003162:	2180      	movs	r1, #128	; 0x80
10003164:	0209      	lsls	r1, r1, #8
10003166:	50d1      	str	r1, [r2, r3]
}
10003168:	46bd      	mov	sp, r7
1000316a:	b002      	add	sp, #8
1000316c:	bd80      	pop	{r7, pc}
1000316e:	46c0      	nop			; (mov r8, r8)

10003170 <XMC_USIC_CH_TXFIFO_IsFull>:
 * 
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_IsEmpty(), XMC_USIC_CH_TXFIFO_Flush() \n\n\n
 */
__STATIC_INLINE bool XMC_USIC_CH_TXFIFO_IsFull(XMC_USIC_CH_t *const channel)
{
10003170:	b580      	push	{r7, lr}
10003172:	b082      	sub	sp, #8
10003174:	af00      	add	r7, sp, #0
10003176:	6078      	str	r0, [r7, #4]
  return (bool)(channel->TRBSR & USIC_CH_TRBSR_TFULL_Msk);
10003178:	687a      	ldr	r2, [r7, #4]
1000317a:	238a      	movs	r3, #138	; 0x8a
1000317c:	005b      	lsls	r3, r3, #1
1000317e:	58d2      	ldr	r2, [r2, r3]
10003180:	2380      	movs	r3, #128	; 0x80
10003182:	015b      	lsls	r3, r3, #5
10003184:	4013      	ands	r3, r2
10003186:	1e5a      	subs	r2, r3, #1
10003188:	4193      	sbcs	r3, r2
1000318a:	b2db      	uxtb	r3, r3
}
1000318c:	1c18      	adds	r0, r3, #0
1000318e:	46bd      	mov	sp, r7
10003190:	b002      	add	sp, #8
10003192:	bd80      	pop	{r7, pc}

10003194 <XMC_USIC_CH_TXFIFO_IsEmpty>:
 * 
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_Flush(), XMC_USIC_CH_TXFIFO_PutData() \n\n\n
 */
__STATIC_INLINE bool XMC_USIC_CH_TXFIFO_IsEmpty(XMC_USIC_CH_t *const channel)
{
10003194:	b580      	push	{r7, lr}
10003196:	b082      	sub	sp, #8
10003198:	af00      	add	r7, sp, #0
1000319a:	6078      	str	r0, [r7, #4]
  return (bool)(channel->TRBSR & USIC_CH_TRBSR_TEMPTY_Msk);
1000319c:	687a      	ldr	r2, [r7, #4]
1000319e:	238a      	movs	r3, #138	; 0x8a
100031a0:	005b      	lsls	r3, r3, #1
100031a2:	58d2      	ldr	r2, [r2, r3]
100031a4:	2380      	movs	r3, #128	; 0x80
100031a6:	011b      	lsls	r3, r3, #4
100031a8:	4013      	ands	r3, r2
100031aa:	1e5a      	subs	r2, r3, #1
100031ac:	4193      	sbcs	r3, r2
100031ae:	b2db      	uxtb	r3, r3
}
100031b0:	1c18      	adds	r0, r3, #0
100031b2:	46bd      	mov	sp, r7
100031b4:	b002      	add	sp, #8
100031b6:	bd80      	pop	{r7, pc}

100031b8 <XMC_USIC_CH_RXFIFO_DisableEvent>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_RXFIFO_GetEvent(), XMC_USIC_CH_RXFIFO_EnableEvent() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_RXFIFO_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
100031b8:	b580      	push	{r7, lr}
100031ba:	b082      	sub	sp, #8
100031bc:	af00      	add	r7, sp, #0
100031be:	6078      	str	r0, [r7, #4]
100031c0:	6039      	str	r1, [r7, #0]
  channel->RBCTR &= (uint32_t)~event;
100031c2:	687a      	ldr	r2, [r7, #4]
100031c4:	2386      	movs	r3, #134	; 0x86
100031c6:	005b      	lsls	r3, r3, #1
100031c8:	58d3      	ldr	r3, [r2, r3]
100031ca:	683a      	ldr	r2, [r7, #0]
100031cc:	43d2      	mvns	r2, r2
100031ce:	401a      	ands	r2, r3
100031d0:	1c11      	adds	r1, r2, #0
100031d2:	687a      	ldr	r2, [r7, #4]
100031d4:	2386      	movs	r3, #134	; 0x86
100031d6:	005b      	lsls	r3, r3, #1
100031d8:	50d1      	str	r1, [r2, r3]
}
100031da:	46bd      	mov	sp, r7
100031dc:	b002      	add	sp, #8
100031de:	bd80      	pop	{r7, pc}

100031e0 <XMC_USIC_CH_RXFIFO_IsEmpty>:
 * 
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_RXFIFO_Flush(), XMC_USIC_CH_RXFIFO_PutData() \n\n\n
 */
__STATIC_INLINE bool XMC_USIC_CH_RXFIFO_IsEmpty(XMC_USIC_CH_t *const channel)
{
100031e0:	b580      	push	{r7, lr}
100031e2:	b082      	sub	sp, #8
100031e4:	af00      	add	r7, sp, #0
100031e6:	6078      	str	r0, [r7, #4]
  return (bool)(channel->TRBSR & USIC_CH_TRBSR_REMPTY_Msk);
100031e8:	687a      	ldr	r2, [r7, #4]
100031ea:	238a      	movs	r3, #138	; 0x8a
100031ec:	005b      	lsls	r3, r3, #1
100031ee:	58d3      	ldr	r3, [r2, r3]
100031f0:	2208      	movs	r2, #8
100031f2:	4013      	ands	r3, r2
100031f4:	1e5a      	subs	r2, r3, #1
100031f6:	4193      	sbcs	r3, r2
100031f8:	b2db      	uxtb	r3, r3
}
100031fa:	1c18      	adds	r0, r3, #0
100031fc:	46bd      	mov	sp, r7
100031fe:	b002      	add	sp, #8
10003200:	bd80      	pop	{r7, pc}
10003202:	46c0      	nop			; (mov r8, r8)

10003204 <UART_Init>:
 *          UART_SUCCESS: for successful UART initialization.<BR>
 *          UART_STATUS_FAILURE  : If UART initialization fails.<BR>
 *
 */
UART_STATUS_t UART_Init(const UART_t *const handle)
{
10003204:	b590      	push	{r4, r7, lr}
10003206:	b085      	sub	sp, #20
10003208:	af00      	add	r7, sp, #0
1000320a:	6078      	str	r0, [r7, #4]
  UART_STATUS_t status = UART_STATUS_SUCCESS;
1000320c:	230f      	movs	r3, #15
1000320e:	18fb      	adds	r3, r7, r3
10003210:	2200      	movs	r2, #0
10003212:	701a      	strb	r2, [r3, #0]
  XMC_ASSERT("UART_Init : UART APP handle invalid", (((handle != NULL)&&
      (handle->config != NULL)) &&((handle->config->fptr_uart_config != NULL)&&
      (handle->runtime != NULL))))

  /*Initialize the multiplexers required for UART configuration*/
  status = handle->config->fptr_uart_config();
10003214:	687b      	ldr	r3, [r7, #4]
10003216:	685b      	ldr	r3, [r3, #4]
10003218:	685b      	ldr	r3, [r3, #4]
1000321a:	220f      	movs	r2, #15
1000321c:	18bc      	adds	r4, r7, r2
1000321e:	4798      	blx	r3
10003220:	1c03      	adds	r3, r0, #0
10003222:	7023      	strb	r3, [r4, #0]

  return status;
10003224:	230f      	movs	r3, #15
10003226:	18fb      	adds	r3, r7, r3
10003228:	781b      	ldrb	r3, [r3, #0]
}
1000322a:	1c18      	adds	r0, r3, #0
1000322c:	46bd      	mov	sp, r7
1000322e:	b005      	add	sp, #20
10003230:	bd90      	pop	{r4, r7, pc}
10003232:	46c0      	nop			; (mov r8, r8)

10003234 <UART_Transmit>:
 *          UART_STATUS_BUFFER_INVALID: Either if buffer is NULL or count is 0.<BR>
 *          UART_STATUS_MODE_MISMATCH: If the configured mode is invalid.<BR>
 *
 */
UART_STATUS_t UART_Transmit(const UART_t *const handle, uint8_t* data_ptr, uint32_t count)
{
10003234:	b590      	push	{r4, r7, lr}
10003236:	b087      	sub	sp, #28
10003238:	af00      	add	r7, sp, #0
1000323a:	60f8      	str	r0, [r7, #12]
1000323c:	60b9      	str	r1, [r7, #8]
1000323e:	607a      	str	r2, [r7, #4]
  UART_STATUS_t ret_stat = UART_STATUS_MODE_MISMATCH;
10003240:	2317      	movs	r3, #23
10003242:	18fb      	adds	r3, r7, r3
10003244:	2204      	movs	r2, #4
10003246:	701a      	strb	r2, [r3, #0]

  switch(handle->config->transmit_mode)
10003248:	68fb      	ldr	r3, [r7, #12]
1000324a:	685b      	ldr	r3, [r3, #4]
1000324c:	2229      	movs	r2, #41	; 0x29
1000324e:	5c9b      	ldrb	r3, [r3, r2]
10003250:	2b00      	cmp	r3, #0
10003252:	d002      	beq.n	1000325a <UART_Transmit+0x26>
10003254:	2b02      	cmp	r3, #2
10003256:	d00d      	beq.n	10003274 <UART_Transmit+0x40>
  case UART_TRANSFER_MODE_DIRECT:
    ret_stat = UART_lStartTransmitPolling(handle, data_ptr, count);
    break;
#endif
  default:
    break;
10003258:	e019      	b.n	1000328e <UART_Transmit+0x5a>

  switch(handle->config->transmit_mode)
  {
#ifdef UART_TX_INTERRUPT_USED
  case UART_TRANSFER_MODE_INTERRUPT:
    ret_stat = UART_StartTransmitIRQ(handle, data_ptr, count);
1000325a:	2317      	movs	r3, #23
1000325c:	18fc      	adds	r4, r7, r3
1000325e:	68f9      	ldr	r1, [r7, #12]
10003260:	68ba      	ldr	r2, [r7, #8]
10003262:	687b      	ldr	r3, [r7, #4]
10003264:	1c08      	adds	r0, r1, #0
10003266:	1c11      	adds	r1, r2, #0
10003268:	1c1a      	adds	r2, r3, #0
1000326a:	f000 f817 	bl	1000329c <UART_StartTransmitIRQ>
1000326e:	1c03      	adds	r3, r0, #0
10003270:	7023      	strb	r3, [r4, #0]
    break;
10003272:	e00c      	b.n	1000328e <UART_Transmit+0x5a>
    ret_stat = UART_StartTransmitDMA(handle, data_ptr, count);
    break;
#endif
#ifdef UART_TX_DIRECT_USED
  case UART_TRANSFER_MODE_DIRECT:
    ret_stat = UART_lStartTransmitPolling(handle, data_ptr, count);
10003274:	2317      	movs	r3, #23
10003276:	18fc      	adds	r4, r7, r3
10003278:	68f9      	ldr	r1, [r7, #12]
1000327a:	68ba      	ldr	r2, [r7, #8]
1000327c:	687b      	ldr	r3, [r7, #4]
1000327e:	1c08      	adds	r0, r1, #0
10003280:	1c11      	adds	r1, r2, #0
10003282:	1c1a      	adds	r2, r3, #0
10003284:	f000 f872 	bl	1000336c <UART_lStartTransmitPolling>
10003288:	1c03      	adds	r3, r0, #0
1000328a:	7023      	strb	r3, [r4, #0]
    break;
1000328c:	46c0      	nop			; (mov r8, r8)
#endif
  default:
    break;
  }
  return ret_stat;
1000328e:	2317      	movs	r3, #23
10003290:	18fb      	adds	r3, r7, r3
10003292:	781b      	ldrb	r3, [r3, #0]
}
10003294:	1c18      	adds	r0, r3, #0
10003296:	46bd      	mov	sp, r7
10003298:	b007      	add	sp, #28
1000329a:	bd90      	pop	{r4, r7, pc}

1000329c <UART_StartTransmitIRQ>:
 * request is registered.
 *
 *
 */
UART_STATUS_t UART_StartTransmitIRQ(const UART_t *const handle, uint8_t* data_ptr, uint32_t count)
{
1000329c:	b580      	push	{r7, lr}
1000329e:	b086      	sub	sp, #24
100032a0:	af00      	add	r7, sp, #0
100032a2:	60f8      	str	r0, [r7, #12]
100032a4:	60b9      	str	r1, [r7, #8]
100032a6:	607a      	str	r2, [r7, #4]
  UART_STATUS_t ret_stat = UART_STATUS_MODE_MISMATCH;
100032a8:	2317      	movs	r3, #23
100032aa:	18fb      	adds	r3, r7, r3
100032ac:	2204      	movs	r2, #4
100032ae:	701a      	strb	r2, [r3, #0]
  UART_RUNTIME_t * ptr_runtime = handle->runtime;
100032b0:	68fb      	ldr	r3, [r7, #12]
100032b2:	689b      	ldr	r3, [r3, #8]
100032b4:	613b      	str	r3, [r7, #16]

  XMC_ASSERT("UART_StartTransmitIRQ: UART APP handle invalid", ((handle != NULL)&&
            (handle->runtime != NULL)))

  if (handle->config->transmit_mode == UART_TRANSFER_MODE_INTERRUPT)
100032b6:	68fb      	ldr	r3, [r7, #12]
100032b8:	685b      	ldr	r3, [r3, #4]
100032ba:	2229      	movs	r2, #41	; 0x29
100032bc:	5c9b      	ldrb	r3, [r3, r2]
100032be:	2b00      	cmp	r3, #0
100032c0:	d14c      	bne.n	1000335c <UART_StartTransmitIRQ+0xc0>
  {
    ret_stat = UART_STATUS_BUSY;
100032c2:	2317      	movs	r3, #23
100032c4:	18fb      	adds	r3, r7, r3
100032c6:	2202      	movs	r2, #2
100032c8:	701a      	strb	r2, [r3, #0]
    if (ptr_runtime->tx_busy == false)
100032ca:	693b      	ldr	r3, [r7, #16]
100032cc:	7e1b      	ldrb	r3, [r3, #24]
100032ce:	b2db      	uxtb	r3, r3
100032d0:	2201      	movs	r2, #1
100032d2:	4053      	eors	r3, r2
100032d4:	b2db      	uxtb	r3, r3
100032d6:	2b00      	cmp	r3, #0
100032d8:	d040      	beq.n	1000335c <UART_StartTransmitIRQ+0xc0>
    {
      /*If there is no transmission in progress*/
      if ((data_ptr != NULL) && (count > 0U))
100032da:	68bb      	ldr	r3, [r7, #8]
100032dc:	2b00      	cmp	r3, #0
100032de:	d039      	beq.n	10003354 <UART_StartTransmitIRQ+0xb8>
100032e0:	687b      	ldr	r3, [r7, #4]
100032e2:	2b00      	cmp	r3, #0
100032e4:	d036      	beq.n	10003354 <UART_StartTransmitIRQ+0xb8>
      {
        /*Obtain the address of data, size of data*/
        ptr_runtime->tx_data = data_ptr;
100032e6:	693b      	ldr	r3, [r7, #16]
100032e8:	68ba      	ldr	r2, [r7, #8]
100032ea:	601a      	str	r2, [r3, #0]
        ptr_runtime->tx_data_count = count;
100032ec:	693b      	ldr	r3, [r7, #16]
100032ee:	687a      	ldr	r2, [r7, #4]
100032f0:	609a      	str	r2, [r3, #8]
        /*Initialize to first index and set the busy flag*/
        ptr_runtime->tx_data_index = 0U;
100032f2:	693b      	ldr	r3, [r7, #16]
100032f4:	2200      	movs	r2, #0
100032f6:	60da      	str	r2, [r3, #12]
        ptr_runtime->tx_busy = true;
100032f8:	693b      	ldr	r3, [r7, #16]
100032fa:	2201      	movs	r2, #1
100032fc:	761a      	strb	r2, [r3, #24]

        /*Enable the transmit buffer event*/
        if (handle->config->tx_fifo_size != XMC_USIC_CH_FIFO_DISABLED)
100032fe:	68fb      	ldr	r3, [r7, #12]
10003300:	685b      	ldr	r3, [r3, #4]
10003302:	222b      	movs	r2, #43	; 0x2b
10003304:	5c9b      	ldrb	r3, [r3, r2]
10003306:	2b00      	cmp	r3, #0
10003308:	d00d      	beq.n	10003326 <UART_StartTransmitIRQ+0x8a>
        {
          /*Clear the transmit FIFO*/
          XMC_USIC_CH_TXFIFO_Flush(handle->channel);
1000330a:	68fb      	ldr	r3, [r7, #12]
1000330c:	681b      	ldr	r3, [r3, #0]
1000330e:	1c18      	adds	r0, r3, #0
10003310:	f7ff ff20 	bl	10003154 <XMC_USIC_CH_TXFIFO_Flush>
          /*Enable transmit buffer interrupt*/
          XMC_USIC_CH_TXFIFO_EnableEvent(handle->channel,(uint32_t)XMC_USIC_CH_TXFIFO_EVENT_CONF_STANDARD);
10003314:	68fb      	ldr	r3, [r7, #12]
10003316:	681a      	ldr	r2, [r3, #0]
10003318:	2380      	movs	r3, #128	; 0x80
1000331a:	05db      	lsls	r3, r3, #23
1000331c:	1c10      	adds	r0, r2, #0
1000331e:	1c19      	adds	r1, r3, #0
10003320:	f7ff fef0 	bl	10003104 <XMC_USIC_CH_TXFIFO_EnableEvent>
10003324:	e007      	b.n	10003336 <UART_StartTransmitIRQ+0x9a>
        }
        else
        {
          XMC_USIC_CH_EnableEvent(handle->channel, (uint32_t)XMC_USIC_CH_EVENT_TRANSMIT_BUFFER);
10003326:	68fb      	ldr	r3, [r7, #12]
10003328:	681a      	ldr	r2, [r3, #0]
1000332a:	2380      	movs	r3, #128	; 0x80
1000332c:	019b      	lsls	r3, r3, #6
1000332e:	1c10      	adds	r0, r2, #0
10003330:	1c19      	adds	r1, r3, #0
10003332:	f7ff fead 	bl	10003090 <XMC_USIC_CH_EnableEvent>
        }
        ret_stat = UART_STATUS_SUCCESS;
10003336:	2317      	movs	r3, #23
10003338:	18fb      	adds	r3, r7, r3
1000333a:	2200      	movs	r2, #0
1000333c:	701a      	strb	r2, [r3, #0]
        /*Trigger the transmit buffer interrupt*/
        XMC_USIC_CH_TriggerServiceRequest(handle->channel, (uint32_t)handle->config->tx_sr);
1000333e:	68fb      	ldr	r3, [r7, #12]
10003340:	6819      	ldr	r1, [r3, #0]
10003342:	68fb      	ldr	r3, [r7, #12]
10003344:	685b      	ldr	r3, [r3, #4]
10003346:	222d      	movs	r2, #45	; 0x2d
10003348:	5c9b      	ldrb	r3, [r3, r2]
1000334a:	1c08      	adds	r0, r1, #0
1000334c:	1c19      	adds	r1, r3, #0
1000334e:	f7ff fecb 	bl	100030e8 <XMC_USIC_CH_TriggerServiceRequest>
10003352:	e003      	b.n	1000335c <UART_StartTransmitIRQ+0xc0>
      }
      else
      {
        ret_stat = UART_STATUS_BUFFER_INVALID;
10003354:	2317      	movs	r3, #23
10003356:	18fb      	adds	r3, r7, r3
10003358:	2203      	movs	r2, #3
1000335a:	701a      	strb	r2, [r3, #0]
      }
    }
  }
  return ret_stat;
1000335c:	2317      	movs	r3, #23
1000335e:	18fb      	adds	r3, r7, r3
10003360:	781b      	ldrb	r3, [r3, #0]
}
10003362:	1c18      	adds	r0, r3, #0
10003364:	46bd      	mov	sp, r7
10003366:	b006      	add	sp, #24
10003368:	bd80      	pop	{r7, pc}
1000336a:	46c0      	nop			; (mov r8, r8)

1000336c <UART_lStartTransmitPolling>:
 * cannot be aborted since it is blocking implementation. Based on FIFO selection,
 * either TBUF or IN register is updated with the data.
 *
 */
static UART_STATUS_t UART_lStartTransmitPolling(const UART_t *const handle, uint8_t* data_ptr, uint32_t count)
{
1000336c:	b580      	push	{r7, lr}
1000336e:	b086      	sub	sp, #24
10003370:	af00      	add	r7, sp, #0
10003372:	60f8      	str	r0, [r7, #12]
10003374:	60b9      	str	r1, [r7, #8]
10003376:	607a      	str	r2, [r7, #4]
  UART_STATUS_t ret_stat = UART_STATUS_BUFFER_INVALID;
10003378:	2317      	movs	r3, #23
1000337a:	18fb      	adds	r3, r7, r3
1000337c:	2203      	movs	r2, #3
1000337e:	701a      	strb	r2, [r3, #0]
  uint32_t loc_index;

  XMC_ASSERT("UART_Transmit: UART APP handle invalid", (((handle != NULL)&&
            (handle->runtime != NULL))&&(handle->config != NULL)))

  if ((data_ptr != NULL) && (count > 0U))
10003380:	68bb      	ldr	r3, [r7, #8]
10003382:	2b00      	cmp	r3, #0
10003384:	d05c      	beq.n	10003440 <UART_lStartTransmitPolling+0xd4>
10003386:	687b      	ldr	r3, [r7, #4]
10003388:	2b00      	cmp	r3, #0
1000338a:	d059      	beq.n	10003440 <UART_lStartTransmitPolling+0xd4>
  {
    ret_stat = UART_STATUS_BUSY;
1000338c:	2317      	movs	r3, #23
1000338e:	18fb      	adds	r3, r7, r3
10003390:	2202      	movs	r2, #2
10003392:	701a      	strb	r2, [r3, #0]
    if (handle->runtime->tx_busy == false)
10003394:	68fb      	ldr	r3, [r7, #12]
10003396:	689b      	ldr	r3, [r3, #8]
10003398:	7e1b      	ldrb	r3, [r3, #24]
1000339a:	b2db      	uxtb	r3, r3
1000339c:	2201      	movs	r2, #1
1000339e:	4053      	eors	r3, r2
100033a0:	b2db      	uxtb	r3, r3
100033a2:	2b00      	cmp	r3, #0
100033a4:	d04c      	beq.n	10003440 <UART_lStartTransmitPolling+0xd4>
    {
      handle->runtime->tx_busy = true;
100033a6:	68fb      	ldr	r3, [r7, #12]
100033a8:	689b      	ldr	r3, [r3, #8]
100033aa:	2201      	movs	r2, #1
100033ac:	761a      	strb	r2, [r3, #24]
      if (handle->config->tx_fifo_size != XMC_USIC_CH_FIFO_DISABLED)
100033ae:	68fb      	ldr	r3, [r7, #12]
100033b0:	685b      	ldr	r3, [r3, #4]
100033b2:	222b      	movs	r2, #43	; 0x2b
100033b4:	5c9b      	ldrb	r3, [r3, r2]
100033b6:	2b00      	cmp	r3, #0
100033b8:	d004      	beq.n	100033c4 <UART_lStartTransmitPolling+0x58>
      {
        /*Clear the transmit FIFO*/
        XMC_USIC_CH_TXFIFO_Flush(handle->channel);
100033ba:	68fb      	ldr	r3, [r7, #12]
100033bc:	681b      	ldr	r3, [r3, #0]
100033be:	1c18      	adds	r0, r3, #0
100033c0:	f7ff fec8 	bl	10003154 <XMC_USIC_CH_TXFIFO_Flush>
      }
      /*Loop through each byte*/
      for (loc_index = 0U; loc_index < count; loc_index++)
100033c4:	2300      	movs	r3, #0
100033c6:	613b      	str	r3, [r7, #16]
100033c8:	e01b      	b.n	10003402 <UART_lStartTransmitPolling+0x96>
      {
        /*If FIFO is enabled, FIFO filling status should be checked
         * to avoid overflow error*/
        if (handle->config->tx_fifo_size != XMC_USIC_CH_FIFO_DISABLED)
100033ca:	68fb      	ldr	r3, [r7, #12]
100033cc:	685b      	ldr	r3, [r3, #4]
100033ce:	222b      	movs	r2, #43	; 0x2b
100033d0:	5c9b      	ldrb	r3, [r3, r2]
100033d2:	2b00      	cmp	r3, #0
100033d4:	d007      	beq.n	100033e6 <UART_lStartTransmitPolling+0x7a>
        {
          /*Wait if transmit FIFO is full*/
          while (XMC_USIC_CH_TXFIFO_IsFull(handle->channel) == true)
100033d6:	46c0      	nop			; (mov r8, r8)
100033d8:	68fb      	ldr	r3, [r7, #12]
100033da:	681b      	ldr	r3, [r3, #0]
100033dc:	1c18      	adds	r0, r3, #0
100033de:	f7ff fec7 	bl	10003170 <XMC_USIC_CH_TXFIFO_IsFull>
100033e2:	1e03      	subs	r3, r0, #0
100033e4:	d1f8      	bne.n	100033d8 <UART_lStartTransmitPolling+0x6c>
          {
          }
        }
        XMC_UART_CH_Transmit(handle->channel, (uint16_t)data_ptr[loc_index]);
100033e6:	68fb      	ldr	r3, [r7, #12]
100033e8:	6819      	ldr	r1, [r3, #0]
100033ea:	68ba      	ldr	r2, [r7, #8]
100033ec:	693b      	ldr	r3, [r7, #16]
100033ee:	18d3      	adds	r3, r2, r3
100033f0:	781b      	ldrb	r3, [r3, #0]
100033f2:	b29b      	uxth	r3, r3
100033f4:	1c08      	adds	r0, r1, #0
100033f6:	1c19      	adds	r1, r3, #0
100033f8:	f7ff f8c6 	bl	10002588 <XMC_UART_CH_Transmit>
      {
        /*Clear the transmit FIFO*/
        XMC_USIC_CH_TXFIFO_Flush(handle->channel);
      }
      /*Loop through each byte*/
      for (loc_index = 0U; loc_index < count; loc_index++)
100033fc:	693b      	ldr	r3, [r7, #16]
100033fe:	3301      	adds	r3, #1
10003400:	613b      	str	r3, [r7, #16]
10003402:	693a      	ldr	r2, [r7, #16]
10003404:	687b      	ldr	r3, [r7, #4]
10003406:	429a      	cmp	r2, r3
10003408:	d3df      	bcc.n	100033ca <UART_lStartTransmitPolling+0x5e>
          }
        }
        XMC_UART_CH_Transmit(handle->channel, (uint16_t)data_ptr[loc_index]);
      }

      if (handle->config->tx_fifo_size != XMC_USIC_CH_FIFO_DISABLED)
1000340a:	68fb      	ldr	r3, [r7, #12]
1000340c:	685b      	ldr	r3, [r3, #4]
1000340e:	222b      	movs	r2, #43	; 0x2b
10003410:	5c9b      	ldrb	r3, [r3, r2]
10003412:	2b00      	cmp	r3, #0
10003414:	d00c      	beq.n	10003430 <UART_lStartTransmitPolling+0xc4>
      {
        /*Wait till FIFO is empty*/
        while (XMC_USIC_CH_TXFIFO_IsEmpty(handle->channel) == false)
10003416:	46c0      	nop			; (mov r8, r8)
10003418:	68fb      	ldr	r3, [r7, #12]
1000341a:	681b      	ldr	r3, [r3, #0]
1000341c:	1c18      	adds	r0, r3, #0
1000341e:	f7ff feb9 	bl	10003194 <XMC_USIC_CH_TXFIFO_IsEmpty>
10003422:	1c03      	adds	r3, r0, #0
10003424:	1c1a      	adds	r2, r3, #0
10003426:	2301      	movs	r3, #1
10003428:	4053      	eors	r3, r2
1000342a:	b2db      	uxtb	r3, r3
1000342c:	2b00      	cmp	r3, #0
1000342e:	d1f3      	bne.n	10003418 <UART_lStartTransmitPolling+0xac>
        {
        }
      }
      ret_stat = UART_STATUS_SUCCESS;
10003430:	2317      	movs	r3, #23
10003432:	18fb      	adds	r3, r7, r3
10003434:	2200      	movs	r2, #0
10003436:	701a      	strb	r2, [r3, #0]
      handle->runtime->tx_busy = false;
10003438:	68fb      	ldr	r3, [r7, #12]
1000343a:	689b      	ldr	r3, [r3, #8]
1000343c:	2200      	movs	r2, #0
1000343e:	761a      	strb	r2, [r3, #24]
    }
  }
  return ret_stat;
10003440:	2317      	movs	r3, #23
10003442:	18fb      	adds	r3, r7, r3
10003444:	781b      	ldrb	r3, [r3, #0]
}
10003446:	1c18      	adds	r0, r3, #0
10003448:	46bd      	mov	sp, r7
1000344a:	b006      	add	sp, #24
1000344c:	bd80      	pop	{r7, pc}
1000344e:	46c0      	nop			; (mov r8, r8)

10003450 <UART_lTransmitHandler>:
 *  * param[in]  handle UART APP handle pointer of type UART_t*
 *
 *  * return void
 */
void UART_lTransmitHandler(const UART_t * const handle)
{
10003450:	b580      	push	{r7, lr}
10003452:	b084      	sub	sp, #16
10003454:	af00      	add	r7, sp, #0
10003456:	6078      	str	r0, [r7, #4]
  UART_RUNTIME_t * ptr_runtime = handle->runtime;
10003458:	687b      	ldr	r3, [r7, #4]
1000345a:	689b      	ldr	r3, [r3, #8]
1000345c:	60fb      	str	r3, [r7, #12]

  if (ptr_runtime->tx_data_index < ptr_runtime->tx_data_count)
1000345e:	68fb      	ldr	r3, [r7, #12]
10003460:	68da      	ldr	r2, [r3, #12]
10003462:	68fb      	ldr	r3, [r7, #12]
10003464:	689b      	ldr	r3, [r3, #8]
10003466:	429a      	cmp	r2, r3
10003468:	d241      	bcs.n	100034ee <UART_lTransmitHandler+0x9e>
  {
    if (handle->config->tx_fifo_size != XMC_USIC_CH_FIFO_DISABLED)
1000346a:	687b      	ldr	r3, [r7, #4]
1000346c:	685b      	ldr	r3, [r3, #4]
1000346e:	222b      	movs	r2, #43	; 0x2b
10003470:	5c9b      	ldrb	r3, [r3, r2]
10003472:	2b00      	cmp	r3, #0
10003474:	d028      	beq.n	100034c8 <UART_lTransmitHandler+0x78>
    {
      /*When Transmit FIFO is enabled*/
      /*Fill the transmit FIFO */
      while (XMC_USIC_CH_TXFIFO_IsFull(handle->channel) == false)
10003476:	e01a      	b.n	100034ae <UART_lTransmitHandler+0x5e>
      {
        if (ptr_runtime->tx_data_index < ptr_runtime->tx_data_count)
10003478:	68fb      	ldr	r3, [r7, #12]
1000347a:	68da      	ldr	r2, [r3, #12]
1000347c:	68fb      	ldr	r3, [r7, #12]
1000347e:	689b      	ldr	r3, [r3, #8]
10003480:	429a      	cmp	r2, r3
10003482:	d212      	bcs.n	100034aa <UART_lTransmitHandler+0x5a>
        {
          /*Load the FIFO byte by byte till either FIFO is full or all data is loaded*/
          XMC_UART_CH_Transmit(handle->channel,(uint16_t)ptr_runtime->tx_data[ptr_runtime->tx_data_index]);
10003484:	687b      	ldr	r3, [r7, #4]
10003486:	6819      	ldr	r1, [r3, #0]
10003488:	68fb      	ldr	r3, [r7, #12]
1000348a:	681a      	ldr	r2, [r3, #0]
1000348c:	68fb      	ldr	r3, [r7, #12]
1000348e:	68db      	ldr	r3, [r3, #12]
10003490:	18d3      	adds	r3, r2, r3
10003492:	781b      	ldrb	r3, [r3, #0]
10003494:	b29b      	uxth	r3, r3
10003496:	1c08      	adds	r0, r1, #0
10003498:	1c19      	adds	r1, r3, #0
1000349a:	f7ff f875 	bl	10002588 <XMC_UART_CH_Transmit>
          (ptr_runtime->tx_data_index)++;
1000349e:	68fb      	ldr	r3, [r7, #12]
100034a0:	68db      	ldr	r3, [r3, #12]
100034a2:	1c5a      	adds	r2, r3, #1
100034a4:	68fb      	ldr	r3, [r7, #12]
100034a6:	60da      	str	r2, [r3, #12]
100034a8:	e001      	b.n	100034ae <UART_lTransmitHandler+0x5e>
        }
        else
        {
          break;
100034aa:	46c0      	nop			; (mov r8, r8)
100034ac:	e055      	b.n	1000355a <UART_lTransmitHandler+0x10a>
  {
    if (handle->config->tx_fifo_size != XMC_USIC_CH_FIFO_DISABLED)
    {
      /*When Transmit FIFO is enabled*/
      /*Fill the transmit FIFO */
      while (XMC_USIC_CH_TXFIFO_IsFull(handle->channel) == false)
100034ae:	687b      	ldr	r3, [r7, #4]
100034b0:	681b      	ldr	r3, [r3, #0]
100034b2:	1c18      	adds	r0, r3, #0
100034b4:	f7ff fe5c 	bl	10003170 <XMC_USIC_CH_TXFIFO_IsFull>
100034b8:	1c03      	adds	r3, r0, #0
100034ba:	1c1a      	adds	r2, r3, #0
100034bc:	2301      	movs	r3, #1
100034be:	4053      	eors	r3, r2
100034c0:	b2db      	uxtb	r3, r3
100034c2:	2b00      	cmp	r3, #0
100034c4:	d1d8      	bne.n	10003478 <UART_lTransmitHandler+0x28>
100034c6:	e048      	b.n	1000355a <UART_lTransmitHandler+0x10a>
      }
    }
    else
    {
      /*When Transmit FIFO is disabled*/
      XMC_UART_CH_Transmit(handle->channel,(uint16_t)ptr_runtime->tx_data[ptr_runtime->tx_data_index]);
100034c8:	687b      	ldr	r3, [r7, #4]
100034ca:	6819      	ldr	r1, [r3, #0]
100034cc:	68fb      	ldr	r3, [r7, #12]
100034ce:	681a      	ldr	r2, [r3, #0]
100034d0:	68fb      	ldr	r3, [r7, #12]
100034d2:	68db      	ldr	r3, [r3, #12]
100034d4:	18d3      	adds	r3, r2, r3
100034d6:	781b      	ldrb	r3, [r3, #0]
100034d8:	b29b      	uxth	r3, r3
100034da:	1c08      	adds	r0, r1, #0
100034dc:	1c19      	adds	r1, r3, #0
100034de:	f7ff f853 	bl	10002588 <XMC_UART_CH_Transmit>
      (ptr_runtime->tx_data_index)++;
100034e2:	68fb      	ldr	r3, [r7, #12]
100034e4:	68db      	ldr	r3, [r3, #12]
100034e6:	1c5a      	adds	r2, r3, #1
100034e8:	68fb      	ldr	r3, [r7, #12]
100034ea:	60da      	str	r2, [r3, #12]
100034ec:	e035      	b.n	1000355a <UART_lTransmitHandler+0x10a>
    }
  }
  else
  {
    if (XMC_USIC_CH_TXFIFO_IsEmpty(handle->channel) == true)
100034ee:	687b      	ldr	r3, [r7, #4]
100034f0:	681b      	ldr	r3, [r3, #0]
100034f2:	1c18      	adds	r0, r3, #0
100034f4:	f7ff fe4e 	bl	10003194 <XMC_USIC_CH_TXFIFO_IsEmpty>
100034f8:	1e03      	subs	r3, r0, #0
100034fa:	d02e      	beq.n	1000355a <UART_lTransmitHandler+0x10a>
    {
      if (handle->config->tx_fifo_size != XMC_USIC_CH_FIFO_DISABLED)
100034fc:	687b      	ldr	r3, [r7, #4]
100034fe:	685b      	ldr	r3, [r3, #4]
10003500:	222b      	movs	r2, #43	; 0x2b
10003502:	5c9b      	ldrb	r3, [r3, r2]
10003504:	2b00      	cmp	r3, #0
10003506:	d008      	beq.n	1000351a <UART_lTransmitHandler+0xca>
      {
        /*Disable the transmit FIFO event*/
        XMC_USIC_CH_TXFIFO_DisableEvent(handle->channel,(uint32_t)XMC_USIC_CH_TXFIFO_EVENT_CONF_STANDARD);
10003508:	687b      	ldr	r3, [r7, #4]
1000350a:	681a      	ldr	r2, [r3, #0]
1000350c:	2380      	movs	r3, #128	; 0x80
1000350e:	05db      	lsls	r3, r3, #23
10003510:	1c10      	adds	r0, r2, #0
10003512:	1c19      	adds	r1, r3, #0
10003514:	f7ff fe0a 	bl	1000312c <XMC_USIC_CH_TXFIFO_DisableEvent>
10003518:	e007      	b.n	1000352a <UART_lTransmitHandler+0xda>
      }
      else
      {
        /*Disable the standard transmit event*/
        XMC_USIC_CH_DisableEvent(handle->channel, (uint32_t)XMC_USIC_CH_EVENT_TRANSMIT_BUFFER);
1000351a:	687b      	ldr	r3, [r7, #4]
1000351c:	681a      	ldr	r2, [r3, #0]
1000351e:	2380      	movs	r3, #128	; 0x80
10003520:	019b      	lsls	r3, r3, #6
10003522:	1c10      	adds	r0, r2, #0
10003524:	1c19      	adds	r1, r3, #0
10003526:	f7ff fdc1 	bl	100030ac <XMC_USIC_CH_DisableEvent>
      }

      /*Wait for the transmit buffer to be free to ensure that all data is transmitted*/
      while (XMC_USIC_CH_GetTransmitBufferStatus(handle->channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
1000352a:	46c0      	nop			; (mov r8, r8)
1000352c:	687b      	ldr	r3, [r7, #4]
1000352e:	681b      	ldr	r3, [r3, #0]
10003530:	1c18      	adds	r0, r3, #0
10003532:	f7ff fdcb 	bl	100030cc <XMC_USIC_CH_GetTransmitBufferStatus>
10003536:	1e03      	subs	r3, r0, #0
10003538:	2b80      	cmp	r3, #128	; 0x80
1000353a:	d0f7      	beq.n	1000352c <UART_lTransmitHandler+0xdc>
      {

      }
      /*All data is transmitted*/
      ptr_runtime->tx_busy = false;
1000353c:	68fb      	ldr	r3, [r7, #12]
1000353e:	2200      	movs	r2, #0
10003540:	761a      	strb	r2, [r3, #24]
      ptr_runtime->tx_data = NULL;
10003542:	68fb      	ldr	r3, [r7, #12]
10003544:	2200      	movs	r2, #0
10003546:	601a      	str	r2, [r3, #0]

      if (handle->config->tx_cbhandler != NULL)
10003548:	687b      	ldr	r3, [r7, #4]
1000354a:	685b      	ldr	r3, [r3, #4]
1000354c:	689b      	ldr	r3, [r3, #8]
1000354e:	2b00      	cmp	r3, #0
10003550:	d003      	beq.n	1000355a <UART_lTransmitHandler+0x10a>
      {
        /*Execute the callback function provided in the UART APP UI*/
        handle->config->tx_cbhandler();
10003552:	687b      	ldr	r3, [r7, #4]
10003554:	685b      	ldr	r3, [r3, #4]
10003556:	689b      	ldr	r3, [r3, #8]
10003558:	4798      	blx	r3
      }
    }
  }
}
1000355a:	46bd      	mov	sp, r7
1000355c:	b004      	add	sp, #16
1000355e:	bd80      	pop	{r7, pc}

10003560 <UART_lReceiveHandler>:
 * param[in]  handle UART APP handle pointer of type UART_t*
 *
 * return void
 */
void UART_lReceiveHandler(const UART_t * const handle)
{
10003560:	b590      	push	{r4, r7, lr}
10003562:	b085      	sub	sp, #20
10003564:	af00      	add	r7, sp, #0
10003566:	6078      	str	r0, [r7, #4]
  UART_RUNTIME_t * ptr_runtime = handle->runtime;
10003568:	687b      	ldr	r3, [r7, #4]
1000356a:	689b      	ldr	r3, [r3, #8]
1000356c:	60fb      	str	r3, [r7, #12]

  if (handle->config->rx_fifo_size != XMC_USIC_CH_FIFO_DISABLED)
1000356e:	687b      	ldr	r3, [r7, #4]
10003570:	685b      	ldr	r3, [r3, #4]
10003572:	222c      	movs	r2, #44	; 0x2c
10003574:	5c9b      	ldrb	r3, [r3, r2]
10003576:	2b00      	cmp	r3, #0
10003578:	d051      	beq.n	1000361e <UART_lReceiveHandler+0xbe>
  {
    /*When Receive FIFO is enabled*/
    while (XMC_USIC_CH_RXFIFO_IsEmpty(handle->channel) == false)
1000357a:	e033      	b.n	100035e4 <UART_lReceiveHandler+0x84>
    {
      if (ptr_runtime->rx_data_index < ptr_runtime->rx_data_count)
1000357c:	68fb      	ldr	r3, [r7, #12]
1000357e:	695a      	ldr	r2, [r3, #20]
10003580:	68fb      	ldr	r3, [r7, #12]
10003582:	691b      	ldr	r3, [r3, #16]
10003584:	429a      	cmp	r2, r3
10003586:	d211      	bcs.n	100035ac <UART_lReceiveHandler+0x4c>
      {
        /*Read all the content of Receive FIFO */
        ptr_runtime->rx_data[ptr_runtime->rx_data_index] = (uint8_t)XMC_UART_CH_GetReceivedData(handle->channel);
10003588:	68fb      	ldr	r3, [r7, #12]
1000358a:	685a      	ldr	r2, [r3, #4]
1000358c:	68fb      	ldr	r3, [r7, #12]
1000358e:	695b      	ldr	r3, [r3, #20]
10003590:	18d4      	adds	r4, r2, r3
10003592:	687b      	ldr	r3, [r7, #4]
10003594:	681b      	ldr	r3, [r3, #0]
10003596:	1c18      	adds	r0, r3, #0
10003598:	f7ff f824 	bl	100025e4 <XMC_UART_CH_GetReceivedData>
1000359c:	1c03      	adds	r3, r0, #0
1000359e:	b2db      	uxtb	r3, r3
100035a0:	7023      	strb	r3, [r4, #0]
        (ptr_runtime->rx_data_index)++;
100035a2:	68fb      	ldr	r3, [r7, #12]
100035a4:	695b      	ldr	r3, [r3, #20]
100035a6:	1c5a      	adds	r2, r3, #1
100035a8:	68fb      	ldr	r3, [r7, #12]
100035aa:	615a      	str	r2, [r3, #20]
      }

      if (ptr_runtime->rx_data_index == ptr_runtime->rx_data_count)
100035ac:	68fb      	ldr	r3, [r7, #12]
100035ae:	695a      	ldr	r2, [r3, #20]
100035b0:	68fb      	ldr	r3, [r7, #12]
100035b2:	691b      	ldr	r3, [r3, #16]
100035b4:	429a      	cmp	r2, r3
100035b6:	d115      	bne.n	100035e4 <UART_lReceiveHandler+0x84>
      {
        /*Reception complete*/
        ptr_runtime->rx_busy = false;
100035b8:	68fb      	ldr	r3, [r7, #12]
100035ba:	2200      	movs	r2, #0
100035bc:	765a      	strb	r2, [r3, #25]
        /*Disable both standard receive and alternative receive FIFO events*/
        XMC_USIC_CH_RXFIFO_DisableEvent(handle->channel,
100035be:	687b      	ldr	r3, [r7, #4]
100035c0:	681a      	ldr	r2, [r3, #0]
100035c2:	23c0      	movs	r3, #192	; 0xc0
100035c4:	05db      	lsls	r3, r3, #23
100035c6:	1c10      	adds	r0, r2, #0
100035c8:	1c19      	adds	r1, r3, #0
100035ca:	f7ff fdf5 	bl	100031b8 <XMC_USIC_CH_RXFIFO_DisableEvent>
            (uint32_t)((uint32_t)XMC_USIC_CH_RXFIFO_EVENT_CONF_STANDARD |
            (uint32_t)XMC_USIC_CH_RXFIFO_EVENT_CONF_ALTERNATE));
        if (handle->config->rx_cbhandler != NULL)
100035ce:	687b      	ldr	r3, [r7, #4]
100035d0:	685b      	ldr	r3, [r3, #4]
100035d2:	68db      	ldr	r3, [r3, #12]
100035d4:	2b00      	cmp	r3, #0
100035d6:	d004      	beq.n	100035e2 <UART_lReceiveHandler+0x82>
        {
          /*Execute the 'End of reception' callback function*/
          handle->config->rx_cbhandler();
100035d8:	687b      	ldr	r3, [r7, #4]
100035da:	685b      	ldr	r3, [r3, #4]
100035dc:	68db      	ldr	r3, [r3, #12]
100035de:	4798      	blx	r3
        }
        break;
100035e0:	e00c      	b.n	100035fc <UART_lReceiveHandler+0x9c>
100035e2:	e00b      	b.n	100035fc <UART_lReceiveHandler+0x9c>
  UART_RUNTIME_t * ptr_runtime = handle->runtime;

  if (handle->config->rx_fifo_size != XMC_USIC_CH_FIFO_DISABLED)
  {
    /*When Receive FIFO is enabled*/
    while (XMC_USIC_CH_RXFIFO_IsEmpty(handle->channel) == false)
100035e4:	687b      	ldr	r3, [r7, #4]
100035e6:	681b      	ldr	r3, [r3, #0]
100035e8:	1c18      	adds	r0, r3, #0
100035ea:	f7ff fdf9 	bl	100031e0 <XMC_USIC_CH_RXFIFO_IsEmpty>
100035ee:	1c03      	adds	r3, r0, #0
100035f0:	1c1a      	adds	r2, r3, #0
100035f2:	2301      	movs	r3, #1
100035f4:	4053      	eors	r3, r2
100035f6:	b2db      	uxtb	r3, r3
100035f8:	2b00      	cmp	r3, #0
100035fa:	d1bf      	bne.n	1000357c <UART_lReceiveHandler+0x1c>
        }
        break;
      }
    }
    /*Set the trigger limit if data still to be received*/
    if (ptr_runtime->rx_data_index < ptr_runtime->rx_data_count)
100035fc:	68fb      	ldr	r3, [r7, #12]
100035fe:	695a      	ldr	r2, [r3, #20]
10003600:	68fb      	ldr	r3, [r7, #12]
10003602:	691b      	ldr	r3, [r3, #16]
10003604:	429a      	cmp	r2, r3
10003606:	d23c      	bcs.n	10003682 <UART_lReceiveHandler+0x122>
    {
      UART_lReconfigureRxFIFO(handle,
          (uint32_t)(ptr_runtime->rx_data_count - ptr_runtime->rx_data_index));
10003608:	68fb      	ldr	r3, [r7, #12]
1000360a:	691a      	ldr	r2, [r3, #16]
1000360c:	68fb      	ldr	r3, [r7, #12]
1000360e:	695b      	ldr	r3, [r3, #20]
      }
    }
    /*Set the trigger limit if data still to be received*/
    if (ptr_runtime->rx_data_index < ptr_runtime->rx_data_count)
    {
      UART_lReconfigureRxFIFO(handle,
10003610:	1ad3      	subs	r3, r2, r3
10003612:	687a      	ldr	r2, [r7, #4]
10003614:	1c10      	adds	r0, r2, #0
10003616:	1c19      	adds	r1, r3, #0
10003618:	f000 f836 	bl	10003688 <UART_lReconfigureRxFIFO>
1000361c:	e031      	b.n	10003682 <UART_lReceiveHandler+0x122>
    }
  }
  else
  {
    /*When RxFIFO is disabled*/
    if (ptr_runtime->rx_data_index < ptr_runtime->rx_data_count)
1000361e:	68fb      	ldr	r3, [r7, #12]
10003620:	695a      	ldr	r2, [r3, #20]
10003622:	68fb      	ldr	r3, [r7, #12]
10003624:	691b      	ldr	r3, [r3, #16]
10003626:	429a      	cmp	r2, r3
10003628:	d211      	bcs.n	1000364e <UART_lReceiveHandler+0xee>
    {
      ptr_runtime->rx_data[ptr_runtime->rx_data_index] = (uint8_t)XMC_UART_CH_GetReceivedData(handle->channel);
1000362a:	68fb      	ldr	r3, [r7, #12]
1000362c:	685a      	ldr	r2, [r3, #4]
1000362e:	68fb      	ldr	r3, [r7, #12]
10003630:	695b      	ldr	r3, [r3, #20]
10003632:	18d4      	adds	r4, r2, r3
10003634:	687b      	ldr	r3, [r7, #4]
10003636:	681b      	ldr	r3, [r3, #0]
10003638:	1c18      	adds	r0, r3, #0
1000363a:	f7fe ffd3 	bl	100025e4 <XMC_UART_CH_GetReceivedData>
1000363e:	1c03      	adds	r3, r0, #0
10003640:	b2db      	uxtb	r3, r3
10003642:	7023      	strb	r3, [r4, #0]
      (ptr_runtime->rx_data_index)++;
10003644:	68fb      	ldr	r3, [r7, #12]
10003646:	695b      	ldr	r3, [r3, #20]
10003648:	1c5a      	adds	r2, r3, #1
1000364a:	68fb      	ldr	r3, [r7, #12]
1000364c:	615a      	str	r2, [r3, #20]
    }

    if (ptr_runtime->rx_data_index == ptr_runtime->rx_data_count)
1000364e:	68fb      	ldr	r3, [r7, #12]
10003650:	695a      	ldr	r2, [r3, #20]
10003652:	68fb      	ldr	r3, [r7, #12]
10003654:	691b      	ldr	r3, [r3, #16]
10003656:	429a      	cmp	r2, r3
10003658:	d113      	bne.n	10003682 <UART_lReceiveHandler+0x122>
    {
      /*Reception complete*/
      ptr_runtime->rx_busy = false;
1000365a:	68fb      	ldr	r3, [r7, #12]
1000365c:	2200      	movs	r2, #0
1000365e:	765a      	strb	r2, [r3, #25]
      /*Disable both standard receive and alternative receive FIFO events*/
      XMC_USIC_CH_DisableEvent(handle->channel,
10003660:	687b      	ldr	r3, [r7, #4]
10003662:	681a      	ldr	r2, [r3, #0]
10003664:	23c0      	movs	r3, #192	; 0xc0
10003666:	021b      	lsls	r3, r3, #8
10003668:	1c10      	adds	r0, r2, #0
1000366a:	1c19      	adds	r1, r3, #0
1000366c:	f7ff fd1e 	bl	100030ac <XMC_USIC_CH_DisableEvent>
          (uint32_t)((uint32_t)XMC_USIC_CH_EVENT_ALTERNATIVE_RECEIVE | (uint32_t)XMC_USIC_CH_EVENT_STANDARD_RECEIVE));

      if (handle->config->rx_cbhandler != NULL)
10003670:	687b      	ldr	r3, [r7, #4]
10003672:	685b      	ldr	r3, [r3, #4]
10003674:	68db      	ldr	r3, [r3, #12]
10003676:	2b00      	cmp	r3, #0
10003678:	d003      	beq.n	10003682 <UART_lReceiveHandler+0x122>
      {
        /*Execute the 'End of reception' callback function*/
        handle->config->rx_cbhandler();
1000367a:	687b      	ldr	r3, [r7, #4]
1000367c:	685b      	ldr	r3, [r3, #4]
1000367e:	68db      	ldr	r3, [r3, #12]
10003680:	4798      	blx	r3
      }
    }
  }
}
10003682:	46bd      	mov	sp, r7
10003684:	b005      	add	sp, #20
10003686:	bd90      	pop	{r4, r7, pc}

10003688 <UART_lReconfigureRxFIFO>:
 * param[in] uint8_t  number of bytes to be received.
 *
 * return void.
 */
static void UART_lReconfigureRxFIFO(const UART_t * const handle, uint32_t data_size)
{
10003688:	b580      	push	{r7, lr}
1000368a:	b084      	sub	sp, #16
1000368c:	af00      	add	r7, sp, #0
1000368e:	6078      	str	r0, [r7, #4]
10003690:	6039      	str	r1, [r7, #0]
  uint32_t fifo_size;
  uint32_t ret_limit_val = 0U;
10003692:	2300      	movs	r3, #0
10003694:	60fb      	str	r3, [r7, #12]

  /*Get FIFO size in bytes*/
  fifo_size = (uint32_t)(0x01UL << (uint8_t)(handle->config->rx_fifo_size));
10003696:	687b      	ldr	r3, [r7, #4]
10003698:	685b      	ldr	r3, [r3, #4]
1000369a:	222c      	movs	r2, #44	; 0x2c
1000369c:	5c9b      	ldrb	r3, [r3, r2]
1000369e:	1c1a      	adds	r2, r3, #0
100036a0:	2301      	movs	r3, #1
100036a2:	4093      	lsls	r3, r2
100036a4:	60bb      	str	r3, [r7, #8]
  /*If data size is more than FIFO size, configure the limit to the FIFO size*/
  if (data_size < fifo_size)
100036a6:	683a      	ldr	r2, [r7, #0]
100036a8:	68bb      	ldr	r3, [r7, #8]
100036aa:	429a      	cmp	r2, r3
100036ac:	d203      	bcs.n	100036b6 <UART_lReconfigureRxFIFO+0x2e>
  {
    ret_limit_val = (uint32_t)(data_size - 1U);
100036ae:	683b      	ldr	r3, [r7, #0]
100036b0:	3b01      	subs	r3, #1
100036b2:	60fb      	str	r3, [r7, #12]
100036b4:	e002      	b.n	100036bc <UART_lReconfigureRxFIFO+0x34>
  }
  else
  {
    ret_limit_val = (uint32_t)(fifo_size - 1U);
100036b6:	68bb      	ldr	r3, [r7, #8]
100036b8:	3b01      	subs	r3, #1
100036ba:	60fb      	str	r3, [r7, #12]
  }
  /*Set the limit value*/
  XMC_USIC_CH_RXFIFO_SetSizeTriggerLimit(handle->channel,
100036bc:	687b      	ldr	r3, [r7, #4]
100036be:	6819      	ldr	r1, [r3, #0]
        handle->config->rx_fifo_size, ret_limit_val);
100036c0:	687b      	ldr	r3, [r7, #4]
100036c2:	685b      	ldr	r3, [r3, #4]
  else
  {
    ret_limit_val = (uint32_t)(fifo_size - 1U);
  }
  /*Set the limit value*/
  XMC_USIC_CH_RXFIFO_SetSizeTriggerLimit(handle->channel,
100036c4:	222c      	movs	r2, #44	; 0x2c
100036c6:	5c9a      	ldrb	r2, [r3, r2]
100036c8:	68fb      	ldr	r3, [r7, #12]
100036ca:	1c08      	adds	r0, r1, #0
100036cc:	1c11      	adds	r1, r2, #0
100036ce:	1c1a      	adds	r2, r3, #0
100036d0:	f7ff f8a6 	bl	10002820 <XMC_USIC_CH_RXFIFO_SetSizeTriggerLimit>
        handle->config->rx_fifo_size, ret_limit_val);
}
100036d4:	46bd      	mov	sp, r7
100036d6:	b004      	add	sp, #16
100036d8:	bd80      	pop	{r7, pc}
100036da:	46c0      	nop			; (mov r8, r8)

100036dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
100036dc:	b580      	push	{r7, lr}
100036de:	b082      	sub	sp, #8
100036e0:	af00      	add	r7, sp, #0
100036e2:	1c02      	adds	r2, r0, #0
100036e4:	1dfb      	adds	r3, r7, #7
100036e6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
100036e8:	1dfb      	adds	r3, r7, #7
100036ea:	781b      	ldrb	r3, [r3, #0]
100036ec:	2b7f      	cmp	r3, #127	; 0x7f
100036ee:	d809      	bhi.n	10003704 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
100036f0:	4b06      	ldr	r3, [pc, #24]	; (1000370c <__NVIC_EnableIRQ+0x30>)
100036f2:	1dfa      	adds	r2, r7, #7
100036f4:	7812      	ldrb	r2, [r2, #0]
100036f6:	1c11      	adds	r1, r2, #0
100036f8:	221f      	movs	r2, #31
100036fa:	400a      	ands	r2, r1
100036fc:	2101      	movs	r1, #1
100036fe:	4091      	lsls	r1, r2
10003700:	1c0a      	adds	r2, r1, #0
10003702:	601a      	str	r2, [r3, #0]
  }
}
10003704:	46bd      	mov	sp, r7
10003706:	b002      	add	sp, #8
10003708:	bd80      	pop	{r7, pc}
1000370a:	46c0      	nop			; (mov r8, r8)
1000370c:	e000e100 	.word	0xe000e100

10003710 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
10003710:	b5b0      	push	{r4, r5, r7, lr}
10003712:	b082      	sub	sp, #8
10003714:	af00      	add	r7, sp, #0
10003716:	1c02      	adds	r2, r0, #0
10003718:	6039      	str	r1, [r7, #0]
1000371a:	1dfb      	adds	r3, r7, #7
1000371c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
1000371e:	1dfb      	adds	r3, r7, #7
10003720:	781b      	ldrb	r3, [r3, #0]
10003722:	2b7f      	cmp	r3, #127	; 0x7f
10003724:	d827      	bhi.n	10003776 <__NVIC_SetPriority+0x66>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10003726:	4c2d      	ldr	r4, [pc, #180]	; (100037dc <__NVIC_SetPriority+0xcc>)
10003728:	1dfb      	adds	r3, r7, #7
1000372a:	781b      	ldrb	r3, [r3, #0]
1000372c:	b25b      	sxtb	r3, r3
1000372e:	089b      	lsrs	r3, r3, #2
10003730:	492a      	ldr	r1, [pc, #168]	; (100037dc <__NVIC_SetPriority+0xcc>)
10003732:	1dfa      	adds	r2, r7, #7
10003734:	7812      	ldrb	r2, [r2, #0]
10003736:	b252      	sxtb	r2, r2
10003738:	0892      	lsrs	r2, r2, #2
1000373a:	32c0      	adds	r2, #192	; 0xc0
1000373c:	0092      	lsls	r2, r2, #2
1000373e:	5852      	ldr	r2, [r2, r1]
10003740:	1df9      	adds	r1, r7, #7
10003742:	7809      	ldrb	r1, [r1, #0]
10003744:	1c08      	adds	r0, r1, #0
10003746:	2103      	movs	r1, #3
10003748:	4001      	ands	r1, r0
1000374a:	00c9      	lsls	r1, r1, #3
1000374c:	1c08      	adds	r0, r1, #0
1000374e:	21ff      	movs	r1, #255	; 0xff
10003750:	4081      	lsls	r1, r0
10003752:	43c9      	mvns	r1, r1
10003754:	4011      	ands	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
10003756:	683a      	ldr	r2, [r7, #0]
10003758:	0192      	lsls	r2, r2, #6
1000375a:	20ff      	movs	r0, #255	; 0xff
1000375c:	4002      	ands	r2, r0
1000375e:	1df8      	adds	r0, r7, #7
10003760:	7800      	ldrb	r0, [r0, #0]
10003762:	1c05      	adds	r5, r0, #0
10003764:	2003      	movs	r0, #3
10003766:	4028      	ands	r0, r5
10003768:	00c0      	lsls	r0, r0, #3
1000376a:	4082      	lsls	r2, r0
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
1000376c:	430a      	orrs	r2, r1
1000376e:	33c0      	adds	r3, #192	; 0xc0
10003770:	009b      	lsls	r3, r3, #2
10003772:	511a      	str	r2, [r3, r4]
10003774:	e02e      	b.n	100037d4 <__NVIC_SetPriority+0xc4>
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10003776:	4c1a      	ldr	r4, [pc, #104]	; (100037e0 <__NVIC_SetPriority+0xd0>)
10003778:	1dfb      	adds	r3, r7, #7
1000377a:	781b      	ldrb	r3, [r3, #0]
1000377c:	1c1a      	adds	r2, r3, #0
1000377e:	230f      	movs	r3, #15
10003780:	4013      	ands	r3, r2
10003782:	3b08      	subs	r3, #8
10003784:	0899      	lsrs	r1, r3, #2
10003786:	4a16      	ldr	r2, [pc, #88]	; (100037e0 <__NVIC_SetPriority+0xd0>)
10003788:	1dfb      	adds	r3, r7, #7
1000378a:	781b      	ldrb	r3, [r3, #0]
1000378c:	1c18      	adds	r0, r3, #0
1000378e:	230f      	movs	r3, #15
10003790:	4003      	ands	r3, r0
10003792:	3b08      	subs	r3, #8
10003794:	089b      	lsrs	r3, r3, #2
10003796:	3306      	adds	r3, #6
10003798:	009b      	lsls	r3, r3, #2
1000379a:	18d3      	adds	r3, r2, r3
1000379c:	685b      	ldr	r3, [r3, #4]
1000379e:	1dfa      	adds	r2, r7, #7
100037a0:	7812      	ldrb	r2, [r2, #0]
100037a2:	1c10      	adds	r0, r2, #0
100037a4:	2203      	movs	r2, #3
100037a6:	4002      	ands	r2, r0
100037a8:	00d2      	lsls	r2, r2, #3
100037aa:	1c10      	adds	r0, r2, #0
100037ac:	22ff      	movs	r2, #255	; 0xff
100037ae:	4082      	lsls	r2, r0
100037b0:	43d2      	mvns	r2, r2
100037b2:	401a      	ands	r2, r3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
100037b4:	683b      	ldr	r3, [r7, #0]
100037b6:	019b      	lsls	r3, r3, #6
100037b8:	20ff      	movs	r0, #255	; 0xff
100037ba:	4003      	ands	r3, r0
100037bc:	1df8      	adds	r0, r7, #7
100037be:	7800      	ldrb	r0, [r0, #0]
100037c0:	1c05      	adds	r5, r0, #0
100037c2:	2003      	movs	r0, #3
100037c4:	4028      	ands	r0, r5
100037c6:	00c0      	lsls	r0, r0, #3
100037c8:	4083      	lsls	r3, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
100037ca:	431a      	orrs	r2, r3
100037cc:	1d8b      	adds	r3, r1, #6
100037ce:	009b      	lsls	r3, r3, #2
100037d0:	18e3      	adds	r3, r4, r3
100037d2:	605a      	str	r2, [r3, #4]
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
100037d4:	46bd      	mov	sp, r7
100037d6:	b002      	add	sp, #8
100037d8:	bdb0      	pop	{r4, r5, r7, pc}
100037da:	46c0      	nop			; (mov r8, r8)
100037dc:	e000e100 	.word	0xe000e100
100037e0:	e000ed00 	.word	0xe000ed00

100037e4 <XMC_USIC_CH_SetInputSource>:
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_EnableInputInversion(), XMC_USIC_CH_EnableInputDigitalFilter(), XMC_USIC_CH_EnableInputSync(),
 * XMC_USIC_CH_SetInputSamplingFreq()\n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetInputSource(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_INPUT_t input, const uint8_t source)
{
100037e4:	b580      	push	{r7, lr}
100037e6:	b082      	sub	sp, #8
100037e8:	af00      	add	r7, sp, #0
100037ea:	6078      	str	r0, [r7, #4]
100037ec:	1c08      	adds	r0, r1, #0
100037ee:	1c11      	adds	r1, r2, #0
100037f0:	1cfb      	adds	r3, r7, #3
100037f2:	1c02      	adds	r2, r0, #0
100037f4:	701a      	strb	r2, [r3, #0]
100037f6:	1cbb      	adds	r3, r7, #2
100037f8:	1c0a      	adds	r2, r1, #0
100037fa:	701a      	strb	r2, [r3, #0]
  channel->DXCR[input] = (uint32_t)((channel->DXCR[input] & (uint32_t)(~USIC_CH_DXCR_DSEL_Msk)) |
100037fc:	1cfb      	adds	r3, r7, #3
100037fe:	7818      	ldrb	r0, [r3, #0]
10003800:	1cfb      	adds	r3, r7, #3
10003802:	781b      	ldrb	r3, [r3, #0]
10003804:	687a      	ldr	r2, [r7, #4]
10003806:	3306      	adds	r3, #6
10003808:	009b      	lsls	r3, r3, #2
1000380a:	18d3      	adds	r3, r2, r3
1000380c:	685b      	ldr	r3, [r3, #4]
1000380e:	2207      	movs	r2, #7
10003810:	4393      	bics	r3, r2
10003812:	1c1a      	adds	r2, r3, #0
                         ((uint32_t)source << USIC_CH_DXCR_DSEL_Pos));
10003814:	1cbb      	adds	r3, r7, #2
10003816:	781b      	ldrb	r3, [r3, #0]
 * XMC_USIC_CH_EnableInputInversion(), XMC_USIC_CH_EnableInputDigitalFilter(), XMC_USIC_CH_EnableInputSync(),
 * XMC_USIC_CH_SetInputSamplingFreq()\n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetInputSource(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_INPUT_t input, const uint8_t source)
{
  channel->DXCR[input] = (uint32_t)((channel->DXCR[input] & (uint32_t)(~USIC_CH_DXCR_DSEL_Msk)) |
10003818:	431a      	orrs	r2, r3
1000381a:	6879      	ldr	r1, [r7, #4]
1000381c:	1d83      	adds	r3, r0, #6
1000381e:	009b      	lsls	r3, r3, #2
10003820:	18cb      	adds	r3, r1, r3
10003822:	605a      	str	r2, [r3, #4]
                         ((uint32_t)source << USIC_CH_DXCR_DSEL_Pos));
}
10003824:	46bd      	mov	sp, r7
10003826:	b002      	add	sp, #8
10003828:	bd80      	pop	{r7, pc}
1000382a:	46c0      	nop			; (mov r8, r8)

1000382c <XMC_UART_CH_Start>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_UART_CH_Stop(), XMC_UART_CH_Transmit()\n\n\n
 */
__STATIC_INLINE void XMC_UART_CH_Start(XMC_USIC_CH_t *const channel)
{
1000382c:	b580      	push	{r7, lr}
1000382e:	b082      	sub	sp, #8
10003830:	af00      	add	r7, sp, #0
10003832:	6078      	str	r0, [r7, #4]
  channel->CCR = (uint32_t)(((channel->CCR) & (~USIC_CH_CCR_MODE_Msk)) | (uint32_t)XMC_USIC_CH_OPERATING_MODE_UART);
10003834:	687b      	ldr	r3, [r7, #4]
10003836:	6c1b      	ldr	r3, [r3, #64]	; 0x40
10003838:	220f      	movs	r2, #15
1000383a:	4393      	bics	r3, r2
1000383c:	2202      	movs	r2, #2
1000383e:	431a      	orrs	r2, r3
10003840:	687b      	ldr	r3, [r7, #4]
10003842:	641a      	str	r2, [r3, #64]	; 0x40
}
10003844:	46bd      	mov	sp, r7
10003846:	b002      	add	sp, #8
10003848:	bd80      	pop	{r7, pc}
1000384a:	46c0      	nop			; (mov r8, r8)

1000384c <COM_init>:
/**********************************************************************************************************************
 * API IMPLEMENTATION
 **********************************************************************************************************************/
/*Channel initialization function*/
UART_STATUS_t COM_init()
{
1000384c:	b580      	push	{r7, lr}
1000384e:	b082      	sub	sp, #8
10003850:	af00      	add	r7, sp, #0
  UART_STATUS_t status = UART_STATUS_SUCCESS;
10003852:	1dfb      	adds	r3, r7, #7
10003854:	2200      	movs	r2, #0
10003856:	701a      	strb	r2, [r3, #0]
  /*Configure Receive pin*/
  XMC_GPIO_Init((XMC_GPIO_PORT_t *)PORT2_BASE, 11U, &COM_rx_pin_config);
10003858:	4a21      	ldr	r2, [pc, #132]	; (100038e0 <COM_init+0x94>)
1000385a:	4b22      	ldr	r3, [pc, #136]	; (100038e4 <COM_init+0x98>)
1000385c:	1c10      	adds	r0, r2, #0
1000385e:	210b      	movs	r1, #11
10003860:	1c1a      	adds	r2, r3, #0
10003862:	f7fd fc57 	bl	10001114 <XMC_GPIO_Init>
  /* Initialize USIC channel in UART mode*/
  XMC_UART_CH_Init(XMC_UART0_CH1, &COM_channel_config);
10003866:	4a20      	ldr	r2, [pc, #128]	; (100038e8 <COM_init+0x9c>)
10003868:	4b20      	ldr	r3, [pc, #128]	; (100038ec <COM_init+0xa0>)
1000386a:	1c10      	adds	r0, r2, #0
1000386c:	1c19      	adds	r1, r3, #0
1000386e:	f7fe fe31 	bl	100024d4 <XMC_UART_CH_Init>
  /*Set input source path*/
  XMC_USIC_CH_SetInputSource(XMC_UART0_CH1, XMC_USIC_CH_INPUT_DX0, 4U);
10003872:	4b1d      	ldr	r3, [pc, #116]	; (100038e8 <COM_init+0x9c>)
10003874:	1c18      	adds	r0, r3, #0
10003876:	2100      	movs	r1, #0
10003878:	2204      	movs	r2, #4
1000387a:	f7ff ffb3 	bl	100037e4 <XMC_USIC_CH_SetInputSource>
  XMC_USIC_CH_SetInputSource(XMC_UART0_CH1, XMC_USIC_CH_INPUT_DX3, 0U);
1000387e:	4b1a      	ldr	r3, [pc, #104]	; (100038e8 <COM_init+0x9c>)
10003880:	1c18      	adds	r0, r3, #0
10003882:	2103      	movs	r1, #3
10003884:	2200      	movs	r2, #0
10003886:	f7ff ffad 	bl	100037e4 <XMC_USIC_CH_SetInputSource>
  XMC_USIC_CH_SetInputSource(XMC_UART0_CH1, XMC_USIC_CH_INPUT_DX5, 0U);
1000388a:	4b17      	ldr	r3, [pc, #92]	; (100038e8 <COM_init+0x9c>)
1000388c:	1c18      	adds	r0, r3, #0
1000388e:	2105      	movs	r1, #5
10003890:	2200      	movs	r2, #0
10003892:	f7ff ffa7 	bl	100037e4 <XMC_USIC_CH_SetInputSource>
  /*Configure transmit FIFO*/
  XMC_USIC_CH_TXFIFO_Configure(XMC_UART0_CH1,
10003896:	4b14      	ldr	r3, [pc, #80]	; (100038e8 <COM_init+0x9c>)
10003898:	1c18      	adds	r0, r3, #0
1000389a:	2110      	movs	r1, #16
1000389c:	2204      	movs	r2, #4
1000389e:	2301      	movs	r3, #1
100038a0:	f7fe ff5e 	bl	10002760 <XMC_USIC_CH_TXFIFO_Configure>
        16U,
        XMC_USIC_CH_FIFO_SIZE_16WORDS,
        1U);
  /*Configure receive FIFO*/
  XMC_USIC_CH_RXFIFO_Configure(XMC_UART0_CH1,
100038a4:	4b10      	ldr	r3, [pc, #64]	; (100038e8 <COM_init+0x9c>)
100038a6:	1c18      	adds	r0, r3, #0
100038a8:	2100      	movs	r1, #0
100038aa:	2204      	movs	r2, #4
100038ac:	230f      	movs	r3, #15
100038ae:	f7fe ff85 	bl	100027bc <XMC_USIC_CH_RXFIFO_Configure>
        0U,
        XMC_USIC_CH_FIFO_SIZE_16WORDS,
        15U);
  /* Start UART */
  XMC_UART_CH_Start(XMC_UART0_CH1);
100038b2:	4b0d      	ldr	r3, [pc, #52]	; (100038e8 <COM_init+0x9c>)
100038b4:	1c18      	adds	r0, r3, #0
100038b6:	f7ff ffb9 	bl	1000382c <XMC_UART_CH_Start>

  /* Initialize UART TX pin */
  XMC_GPIO_Init((XMC_GPIO_PORT_t *)PORT1_BASE, 3U, &COM_tx_pin_config);
100038ba:	4a0d      	ldr	r2, [pc, #52]	; (100038f0 <COM_init+0xa4>)
100038bc:	4b0d      	ldr	r3, [pc, #52]	; (100038f4 <COM_init+0xa8>)
100038be:	1c10      	adds	r0, r2, #0
100038c0:	2103      	movs	r1, #3
100038c2:	1c1a      	adds	r2, r3, #0
100038c4:	f7fd fc26 	bl	10001114 <XMC_GPIO_Init>

  /*Set service request for UART protocol events*/
  XMC_USIC_CH_SetInterruptNodePointer(XMC_UART0_CH1, XMC_USIC_CH_INTERRUPT_NODE_POINTER_PROTOCOL,
100038c8:	4b07      	ldr	r3, [pc, #28]	; (100038e8 <COM_init+0x9c>)
100038ca:	1c18      	adds	r0, r3, #0
100038cc:	2110      	movs	r1, #16
100038ce:	2201      	movs	r2, #1
100038d0:	f7fe ffd4 	bl	1000287c <XMC_USIC_CH_SetInterruptNodePointer>
     1U);
  return status;
100038d4:	1dfb      	adds	r3, r7, #7
100038d6:	781b      	ldrb	r3, [r3, #0]
}
100038d8:	1c18      	adds	r0, r3, #0
100038da:	46bd      	mov	sp, r7
100038dc:	b002      	add	sp, #8
100038de:	bd80      	pop	{r7, pc}
100038e0:	40040200 	.word	0x40040200
100038e4:	1000b260 	.word	0x1000b260
100038e8:	48000200 	.word	0x48000200
100038ec:	1000b210 	.word	0x1000b210
100038f0:	40040100 	.word	0x40040100
100038f4:	1000b21c 	.word	0x1000b21c

100038f8 <RS232_init>:
/**********************************************************************************************************************
 * API IMPLEMENTATION
 **********************************************************************************************************************/
/*Channel initialization function*/
UART_STATUS_t RS232_init()
{
100038f8:	b580      	push	{r7, lr}
100038fa:	b082      	sub	sp, #8
100038fc:	af00      	add	r7, sp, #0
  UART_STATUS_t status = UART_STATUS_SUCCESS;
100038fe:	1dfb      	adds	r3, r7, #7
10003900:	2200      	movs	r2, #0
10003902:	701a      	strb	r2, [r3, #0]
  /*Configure Receive pin*/
  XMC_GPIO_Init((XMC_GPIO_PORT_t *)PORT1_BASE, 4U, &RS232_rx_pin_config);
10003904:	4a37      	ldr	r2, [pc, #220]	; (100039e4 <RS232_init+0xec>)
10003906:	4b38      	ldr	r3, [pc, #224]	; (100039e8 <RS232_init+0xf0>)
10003908:	1c10      	adds	r0, r2, #0
1000390a:	2104      	movs	r1, #4
1000390c:	1c1a      	adds	r2, r3, #0
1000390e:	f7fd fc01 	bl	10001114 <XMC_GPIO_Init>
  /* Initialize USIC channel in UART mode*/
  XMC_UART_CH_Init(XMC_UART0_CH0, &RS232_channel_config);
10003912:	2390      	movs	r3, #144	; 0x90
10003914:	05da      	lsls	r2, r3, #23
10003916:	4b35      	ldr	r3, [pc, #212]	; (100039ec <RS232_init+0xf4>)
10003918:	1c10      	adds	r0, r2, #0
1000391a:	1c19      	adds	r1, r3, #0
1000391c:	f7fe fdda 	bl	100024d4 <XMC_UART_CH_Init>
  /*Set input source path*/
  XMC_USIC_CH_SetInputSource(XMC_UART0_CH0, XMC_USIC_CH_INPUT_DX0, 6U);
10003920:	2390      	movs	r3, #144	; 0x90
10003922:	05db      	lsls	r3, r3, #23
10003924:	1c18      	adds	r0, r3, #0
10003926:	2100      	movs	r1, #0
10003928:	2206      	movs	r2, #6
1000392a:	f7ff ff5b 	bl	100037e4 <XMC_USIC_CH_SetInputSource>
  XMC_USIC_CH_SetInputSource(XMC_UART0_CH0, XMC_USIC_CH_INPUT_DX3, 5U);
1000392e:	2390      	movs	r3, #144	; 0x90
10003930:	05db      	lsls	r3, r3, #23
10003932:	1c18      	adds	r0, r3, #0
10003934:	2103      	movs	r1, #3
10003936:	2205      	movs	r2, #5
10003938:	f7ff ff54 	bl	100037e4 <XMC_USIC_CH_SetInputSource>
  XMC_USIC_CH_SetInputSource(XMC_UART0_CH0, XMC_USIC_CH_INPUT_DX5, 4U);
1000393c:	2390      	movs	r3, #144	; 0x90
1000393e:	05db      	lsls	r3, r3, #23
10003940:	1c18      	adds	r0, r3, #0
10003942:	2105      	movs	r1, #5
10003944:	2204      	movs	r2, #4
10003946:	f7ff ff4d 	bl	100037e4 <XMC_USIC_CH_SetInputSource>
  /*Configure transmit FIFO*/
  XMC_USIC_CH_TXFIFO_Configure(XMC_UART0_CH0,
1000394a:	2390      	movs	r3, #144	; 0x90
1000394c:	05db      	lsls	r3, r3, #23
1000394e:	1c18      	adds	r0, r3, #0
10003950:	2130      	movs	r1, #48	; 0x30
10003952:	2204      	movs	r2, #4
10003954:	2301      	movs	r3, #1
10003956:	f7fe ff03 	bl	10002760 <XMC_USIC_CH_TXFIFO_Configure>
        48U,
        XMC_USIC_CH_FIFO_SIZE_16WORDS,
        1U);
  /*Configure receive FIFO*/
  XMC_USIC_CH_RXFIFO_Configure(XMC_UART0_CH0,
1000395a:	2390      	movs	r3, #144	; 0x90
1000395c:	05db      	lsls	r3, r3, #23
1000395e:	1c18      	adds	r0, r3, #0
10003960:	2120      	movs	r1, #32
10003962:	2204      	movs	r2, #4
10003964:	2300      	movs	r3, #0
10003966:	f7fe ff29 	bl	100027bc <XMC_USIC_CH_RXFIFO_Configure>
        32U,
        XMC_USIC_CH_FIFO_SIZE_16WORDS,
        0U);
  /* Start UART */
  XMC_UART_CH_Start(XMC_UART0_CH0);
1000396a:	2390      	movs	r3, #144	; 0x90
1000396c:	05db      	lsls	r3, r3, #23
1000396e:	1c18      	adds	r0, r3, #0
10003970:	f7ff ff5c 	bl	1000382c <XMC_UART_CH_Start>

  /* Initialize UART TX pin */
  XMC_GPIO_Init((XMC_GPIO_PORT_t *)PORT1_BASE, 5U, &RS232_tx_pin_config);
10003974:	4a1b      	ldr	r2, [pc, #108]	; (100039e4 <RS232_init+0xec>)
10003976:	4b1e      	ldr	r3, [pc, #120]	; (100039f0 <RS232_init+0xf8>)
10003978:	1c10      	adds	r0, r2, #0
1000397a:	2105      	movs	r1, #5
1000397c:	1c1a      	adds	r2, r3, #0
1000397e:	f7fd fbc9 	bl	10001114 <XMC_GPIO_Init>

  /*Set service request for UART protocol events*/
  XMC_USIC_CH_SetInterruptNodePointer(XMC_UART0_CH0, XMC_USIC_CH_INTERRUPT_NODE_POINTER_PROTOCOL,
10003982:	2390      	movs	r3, #144	; 0x90
10003984:	05db      	lsls	r3, r3, #23
10003986:	1c18      	adds	r0, r3, #0
10003988:	2110      	movs	r1, #16
1000398a:	2201      	movs	r2, #1
1000398c:	f7fe ff76 	bl	1000287c <XMC_USIC_CH_SetInterruptNodePointer>
     1U);
  /*Set service request for tx FIFO transmit interrupt*/
  XMC_USIC_CH_TXFIFO_SetInterruptNodePointer(XMC_UART0_CH0, XMC_USIC_CH_TXFIFO_INTERRUPT_NODE_POINTER_STANDARD,
10003990:	2390      	movs	r3, #144	; 0x90
10003992:	05db      	lsls	r3, r3, #23
10003994:	1c18      	adds	r0, r3, #0
10003996:	2110      	movs	r1, #16
10003998:	2201      	movs	r2, #1
1000399a:	f7fe ff8f 	bl	100028bc <XMC_USIC_CH_TXFIFO_SetInterruptNodePointer>
      1U);
  /*Set service request for rx FIFO receive interrupt*/
  XMC_USIC_CH_RXFIFO_SetInterruptNodePointer(XMC_UART0_CH0, XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_STANDARD,
1000399e:	2390      	movs	r3, #144	; 0x90
100039a0:	05db      	lsls	r3, r3, #23
100039a2:	1c18      	adds	r0, r3, #0
100039a4:	2110      	movs	r1, #16
100039a6:	2200      	movs	r2, #0
100039a8:	f7fe ffac 	bl	10002904 <XMC_USIC_CH_RXFIFO_SetInterruptNodePointer>
       0x0U);
  XMC_USIC_CH_RXFIFO_SetInterruptNodePointer(XMC_UART0_CH0, XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_ALTERNATE,
100039ac:	2390      	movs	r3, #144	; 0x90
100039ae:	05db      	lsls	r3, r3, #23
100039b0:	1c18      	adds	r0, r3, #0
100039b2:	2113      	movs	r1, #19
100039b4:	2200      	movs	r2, #0
100039b6:	f7fe ffa5 	bl	10002904 <XMC_USIC_CH_RXFIFO_SetInterruptNodePointer>
       0x0U);
  /*Set priority and enable NVIC node for transmit interrupt*/
  NVIC_SetPriority((IRQn_Type)10, 3U);
100039ba:	200a      	movs	r0, #10
100039bc:	2103      	movs	r1, #3
100039be:	f7ff fea7 	bl	10003710 <__NVIC_SetPriority>
  NVIC_EnableIRQ((IRQn_Type)10);
100039c2:	200a      	movs	r0, #10
100039c4:	f7ff fe8a 	bl	100036dc <__NVIC_EnableIRQ>
  /*Set priority and enable NVIC node for receive interrupt*/
  NVIC_SetPriority((IRQn_Type)9, 3U);
100039c8:	2009      	movs	r0, #9
100039ca:	2103      	movs	r1, #3
100039cc:	f7ff fea0 	bl	10003710 <__NVIC_SetPriority>
  NVIC_EnableIRQ((IRQn_Type)9);
100039d0:	2009      	movs	r0, #9
100039d2:	f7ff fe83 	bl	100036dc <__NVIC_EnableIRQ>
  return status;
100039d6:	1dfb      	adds	r3, r7, #7
100039d8:	781b      	ldrb	r3, [r3, #0]
}
100039da:	1c18      	adds	r0, r3, #0
100039dc:	46bd      	mov	sp, r7
100039de:	b002      	add	sp, #8
100039e0:	bd80      	pop	{r7, pc}
100039e2:	46c0      	nop			; (mov r8, r8)
100039e4:	40040100 	.word	0x40040100
100039e8:	1000b2b8 	.word	0x1000b2b8
100039ec:	1000b268 	.word	0x1000b268
100039f0:	1000b274 	.word	0x1000b274

100039f4 <USIC0_1_IRQHandler>:
/*Interrupt handlers*/
/*Transmit ISR*/
void RS232_TX_HANDLER()
{
100039f4:	b580      	push	{r7, lr}
100039f6:	af00      	add	r7, sp, #0
  UART_lTransmitHandler(&RS232);
100039f8:	4b02      	ldr	r3, [pc, #8]	; (10003a04 <USIC0_1_IRQHandler+0x10>)
100039fa:	1c18      	adds	r0, r3, #0
100039fc:	f7ff fd28 	bl	10003450 <UART_lTransmitHandler>
}
10003a00:	46bd      	mov	sp, r7
10003a02:	bd80      	pop	{r7, pc}
10003a04:	20001154 	.word	0x20001154

10003a08 <USIC0_0_IRQHandler>:

/*Receive ISR*/
void RS232_RX_HANDLER()
{
10003a08:	b580      	push	{r7, lr}
10003a0a:	af00      	add	r7, sp, #0
  UART_lReceiveHandler(&RS232);
10003a0c:	4b02      	ldr	r3, [pc, #8]	; (10003a18 <USIC0_0_IRQHandler+0x10>)
10003a0e:	1c18      	adds	r0, r3, #0
10003a10:	f7ff fda6 	bl	10003560 <UART_lReceiveHandler>
}
10003a14:	46bd      	mov	sp, r7
10003a16:	bd80      	pop	{r7, pc}
10003a18:	20001154 	.word	0x20001154

10003a1c <XMC_CCU8_EnableClock>:
 *
 * \par<b>Related APIs:</b><br>
 * XMC_CCU8_DisableClock()<BR>  XMC_CCU8_EnableMultipleClocks()<BR>  XMC_CCU8_StartPrescaler()<BR>  XMC_CCU8_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU8_EnableClock(XMC_CCU8_MODULE_t *const module, const uint8_t slice_number)
{
10003a1c:	b580      	push	{r7, lr}
10003a1e:	b082      	sub	sp, #8
10003a20:	af00      	add	r7, sp, #0
10003a22:	6078      	str	r0, [r7, #4]
10003a24:	1c0a      	adds	r2, r1, #0
10003a26:	1cfb      	adds	r3, r7, #3
10003a28:	701a      	strb	r2, [r3, #0]
  XMC_ASSERT("XMC_CCU8_EnableClock:Invalid Module Pointer", XMC_CCU8_IsValidModule(module));
  XMC_ASSERT("XMC_CCU8_EnableClock:Invalid Slice Number", (slice_number < 4U));

  module->GIDLC |= ((uint32_t) 1 << slice_number);
10003a2a:	687b      	ldr	r3, [r7, #4]
10003a2c:	68da      	ldr	r2, [r3, #12]
10003a2e:	1cfb      	adds	r3, r7, #3
10003a30:	781b      	ldrb	r3, [r3, #0]
10003a32:	2101      	movs	r1, #1
10003a34:	4099      	lsls	r1, r3
10003a36:	1c0b      	adds	r3, r1, #0
10003a38:	431a      	orrs	r2, r3
10003a3a:	687b      	ldr	r3, [r7, #4]
10003a3c:	60da      	str	r2, [r3, #12]
}
10003a3e:	46bd      	mov	sp, r7
10003a40:	b002      	add	sp, #8
10003a42:	bd80      	pop	{r7, pc}

10003a44 <XMC_CCU8_SLICE_EnableTrap>:
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU8_SLICE_TrapConfig()<BR>  XMC_CCU8_SLICE_DisableTrap()<BR>  XMC_CCU8_SLICE_ConfigureEvent()<BR> 
 *  XMC_CCU8_SLICE_SetInput().
 */
__STATIC_INLINE void XMC_CCU8_SLICE_EnableTrap(XMC_CCU8_SLICE_t *const slice, const uint32_t out_mask)
{
10003a44:	b580      	push	{r7, lr}
10003a46:	b082      	sub	sp, #8
10003a48:	af00      	add	r7, sp, #0
10003a4a:	6078      	str	r0, [r7, #4]
10003a4c:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_CCU8_SLICE_EnableTrap:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  slice->TC |= (uint32_t)out_mask << CCU8_CC8_TC_TRAPE0_Pos;
10003a4e:	687b      	ldr	r3, [r7, #4]
10003a50:	695a      	ldr	r2, [r3, #20]
10003a52:	683b      	ldr	r3, [r7, #0]
10003a54:	045b      	lsls	r3, r3, #17
10003a56:	431a      	orrs	r2, r3
10003a58:	687b      	ldr	r3, [r7, #4]
10003a5a:	615a      	str	r2, [r3, #20]
}
10003a5c:	46bd      	mov	sp, r7
10003a5e:	b002      	add	sp, #8
10003a60:	bd80      	pop	{r7, pc}
10003a62:	46c0      	nop			; (mov r8, r8)

10003a64 <XMC_CCU8_SLICE_StartTimer>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU8_SLICE_StopTimer().
 */
__STATIC_INLINE void XMC_CCU8_SLICE_StartTimer(XMC_CCU8_SLICE_t *const slice)
{
10003a64:	b580      	push	{r7, lr}
10003a66:	b082      	sub	sp, #8
10003a68:	af00      	add	r7, sp, #0
10003a6a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU8_SLICE_StartTimer:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  slice->TCSET = CCU8_CC8_TCSET_TRBS_Msk;
10003a6c:	687b      	ldr	r3, [r7, #4]
10003a6e:	2201      	movs	r2, #1
10003a70:	60da      	str	r2, [r3, #12]
}
10003a72:	46bd      	mov	sp, r7
10003a74:	b002      	add	sp, #8
10003a76:	bd80      	pop	{r7, pc}

10003a78 <XMC_CCU8_SLICE_StopTimer>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU8_SLICE_StartTimer().
 */
__STATIC_INLINE void XMC_CCU8_SLICE_StopTimer(XMC_CCU8_SLICE_t *const slice)
{
10003a78:	b580      	push	{r7, lr}
10003a7a:	b082      	sub	sp, #8
10003a7c:	af00      	add	r7, sp, #0
10003a7e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU8_SLICE_StopTimer:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  slice->TCCLR = (uint32_t) CCU8_CC8_TCCLR_TRBC_Msk;
10003a80:	687b      	ldr	r3, [r7, #4]
10003a82:	2201      	movs	r2, #1
10003a84:	611a      	str	r2, [r3, #16]
}
10003a86:	46bd      	mov	sp, r7
10003a88:	b002      	add	sp, #8
10003a8a:	bd80      	pop	{r7, pc}

10003a8c <XMC_CCU8_SLICE_ClearTimer>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU8_SLICE_StartTimer().
 */
__STATIC_INLINE void XMC_CCU8_SLICE_ClearTimer(XMC_CCU8_SLICE_t *const slice)
{
10003a8c:	b580      	push	{r7, lr}
10003a8e:	b082      	sub	sp, #8
10003a90:	af00      	add	r7, sp, #0
10003a92:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU8_SLICE_ClearTimer:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  slice->TCCLR = (uint32_t) CCU8_CC8_TCCLR_TCC_Msk;
10003a94:	687b      	ldr	r3, [r7, #4]
10003a96:	2202      	movs	r2, #2
10003a98:	611a      	str	r2, [r3, #16]
}
10003a9a:	46bd      	mov	sp, r7
10003a9c:	b002      	add	sp, #8
10003a9e:	bd80      	pop	{r7, pc}

10003aa0 <XMC_CCU8_EnableShadowTransfer>:
 *
 * \par<b>Related APIs:</b><br>
 *  None.
 */
__STATIC_INLINE void XMC_CCU8_EnableShadowTransfer(XMC_CCU8_MODULE_t *const module, const uint32_t shadow_transfer_msk)
{
10003aa0:	b580      	push	{r7, lr}
10003aa2:	b082      	sub	sp, #8
10003aa4:	af00      	add	r7, sp, #0
10003aa6:	6078      	str	r0, [r7, #4]
10003aa8:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_CCU8_EnableShadowTransfer:Invalid module Pointer", XMC_CCU8_IsValidModule(module));
  module->GCSS = (uint32_t)shadow_transfer_msk;  
10003aaa:	687b      	ldr	r3, [r7, #4]
10003aac:	683a      	ldr	r2, [r7, #0]
10003aae:	611a      	str	r2, [r3, #16]
}
10003ab0:	46bd      	mov	sp, r7
10003ab2:	b002      	add	sp, #8
10003ab4:	bd80      	pop	{r7, pc}
10003ab6:	46c0      	nop			; (mov r8, r8)

10003ab8 <XMC_CCU8_SLICE_EnableEvent>:
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU8_SLICE_SetInterruptNode()<BR>  XMC_CCU8_SLICE_EnableMultipleEvents()<BR>  XMC_CCU8_SLICE_DisableEvent()<BR> 
 *  XMC_CCU8_SLICE_DisableMultipleEvents().
 */
__STATIC_INLINE void XMC_CCU8_SLICE_EnableEvent(XMC_CCU8_SLICE_t *const slice, const XMC_CCU8_SLICE_IRQ_ID_t event)
{
10003ab8:	b580      	push	{r7, lr}
10003aba:	b082      	sub	sp, #8
10003abc:	af00      	add	r7, sp, #0
10003abe:	6078      	str	r0, [r7, #4]
10003ac0:	1c0a      	adds	r2, r1, #0
10003ac2:	1cfb      	adds	r3, r7, #3
10003ac4:	701a      	strb	r2, [r3, #0]
  XMC_ASSERT("XMC_CCU8_SLICE_EnableEvent:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU8_SLICE_EnableEvent:Invalid SR event", XMC_CCU8_SLICE_CHECK_INTERRUPT(event));

  slice->INTE |= ((uint32_t) 1) << ((uint32_t) event);
10003ac6:	687b      	ldr	r3, [r7, #4]
10003ac8:	22a4      	movs	r2, #164	; 0xa4
10003aca:	589a      	ldr	r2, [r3, r2]
10003acc:	1cfb      	adds	r3, r7, #3
10003ace:	781b      	ldrb	r3, [r3, #0]
10003ad0:	2101      	movs	r1, #1
10003ad2:	4099      	lsls	r1, r3
10003ad4:	1c0b      	adds	r3, r1, #0
10003ad6:	431a      	orrs	r2, r3
10003ad8:	687b      	ldr	r3, [r7, #4]
10003ada:	21a4      	movs	r1, #164	; 0xa4
10003adc:	505a      	str	r2, [r3, r1]
}
10003ade:	46bd      	mov	sp, r7
10003ae0:	b002      	add	sp, #8
10003ae2:	bd80      	pop	{r7, pc}

10003ae4 <XMC_CCU8_SLICE_SetShadowTransferMode>:
 * XMC_CCU8_EnableShadowTransfer()<BR>
 * @note Not available for XMC4500 series 
 */
__STATIC_INLINE void XMC_CCU8_SLICE_SetShadowTransferMode(XMC_CCU8_SLICE_t *const slice,
                                                          const XMC_CCU8_SLICE_SHADOW_TRANSFER_MODE_t shadow_transfer_mode)
{
10003ae4:	b580      	push	{r7, lr}
10003ae6:	b082      	sub	sp, #8
10003ae8:	af00      	add	r7, sp, #0
10003aea:	6078      	str	r0, [r7, #4]
10003aec:	1c0a      	adds	r2, r1, #0
10003aee:	1cfb      	adds	r3, r7, #3
10003af0:	701a      	strb	r2, [r3, #0]
  XMC_ASSERT("XMC_CCU8_SLICE_SetShadowTransferMode:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  slice->STC = ((slice->STC) & ~(uint32_t)((uint32_t)CCU8_CC8_STC_STM_Msk << (uint32_t)CCU8_CC8_STC_STM_Pos)) |
10003af2:	687b      	ldr	r3, [r7, #4]
10003af4:	22b4      	movs	r2, #180	; 0xb4
10003af6:	589b      	ldr	r3, [r3, r2]
10003af8:	220c      	movs	r2, #12
10003afa:	4393      	bics	r3, r2
10003afc:	1c1a      	adds	r2, r3, #0
               ((shadow_transfer_mode << CCU8_CC8_STC_STM_Pos) & (uint32_t)CCU8_CC8_STC_STM_Msk);
10003afe:	1cfb      	adds	r3, r7, #3
10003b00:	781b      	ldrb	r3, [r3, #0]
10003b02:	005b      	lsls	r3, r3, #1
10003b04:	1c19      	adds	r1, r3, #0
10003b06:	2306      	movs	r3, #6
10003b08:	400b      	ands	r3, r1
 */
__STATIC_INLINE void XMC_CCU8_SLICE_SetShadowTransferMode(XMC_CCU8_SLICE_t *const slice,
                                                          const XMC_CCU8_SLICE_SHADOW_TRANSFER_MODE_t shadow_transfer_mode)
{
  XMC_ASSERT("XMC_CCU8_SLICE_SetShadowTransferMode:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  slice->STC = ((slice->STC) & ~(uint32_t)((uint32_t)CCU8_CC8_STC_STM_Msk << (uint32_t)CCU8_CC8_STC_STM_Pos)) |
10003b0a:	431a      	orrs	r2, r3
10003b0c:	687b      	ldr	r3, [r7, #4]
10003b0e:	21b4      	movs	r1, #180	; 0xb4
10003b10:	505a      	str	r2, [r3, r1]
               ((shadow_transfer_mode << CCU8_CC8_STC_STM_Pos) & (uint32_t)CCU8_CC8_STC_STM_Msk);
}
10003b12:	46bd      	mov	sp, r7
10003b14:	b002      	add	sp, #8
10003b16:	bd80      	pop	{r7, pc}

10003b18 <PWM_CCU8_Init>:
  return version;
}

/* This function initializes the app */
PWM_CCU8_STATUS_t PWM_CCU8_Init(PWM_CCU8_t* handle_ptr)
{
10003b18:	b590      	push	{r4, r7, lr}
10003b1a:	b087      	sub	sp, #28
10003b1c:	af00      	add	r7, sp, #0
10003b1e:	6078      	str	r0, [r7, #4]
  PWM_CCU8_STATUS_t status;
  GLOBAL_CCU8_STATUS_t status_ccu8_global;
  uint32_t frequency_module;
  uint32_t prescalar;

  status = PWM_CCU8_STATUS_FAILURE;
10003b20:	2317      	movs	r3, #23
10003b22:	18fb      	adds	r3, r7, r3
10003b24:	2201      	movs	r2, #1
10003b26:	701a      	strb	r2, [r3, #0]
  status_ccu8_global = GLOBAL_CCU8_STATUS_FAILURE;
10003b28:	2316      	movs	r3, #22
10003b2a:	18fb      	adds	r3, r7, r3
10003b2c:	2201      	movs	r2, #1
10003b2e:	701a      	strb	r2, [r3, #0]
  XMC_ASSERT("PWM_CCU8_Init:handle_ptr is NULL", (handle_ptr != NULL));

  if (PWM_CCU8_STATE_UNINITIALIZED == handle_ptr->state)
10003b30:	687b      	ldr	r3, [r7, #4]
10003b32:	7f1b      	ldrb	r3, [r3, #28]
10003b34:	2b00      	cmp	r3, #0
10003b36:	d000      	beq.n	10003b3a <PWM_CCU8_Init+0x22>
10003b38:	e0af      	b.n	10003c9a <PWM_CCU8_Init+0x182>
  {
    /* Initialize consumed Apps */
    status_ccu8_global = GLOBAL_CCU8_Init(handle_ptr->config_ptr->global_ccu8_handle);
10003b3a:	687b      	ldr	r3, [r7, #4]
10003b3c:	681b      	ldr	r3, [r3, #0]
10003b3e:	228c      	movs	r2, #140	; 0x8c
10003b40:	589b      	ldr	r3, [r3, r2]
10003b42:	2216      	movs	r2, #22
10003b44:	18bc      	adds	r4, r7, r2
10003b46:	1c18      	adds	r0, r3, #0
10003b48:	f000 ff26 	bl	10004998 <GLOBAL_CCU8_Init>
10003b4c:	1c03      	adds	r3, r0, #0
10003b4e:	7023      	strb	r3, [r4, #0]

    /* Initialize CCU8x_CC8y slice */
    if (GLOBAL_CCU8_STATUS_SUCCESS == status_ccu8_global)
10003b50:	2316      	movs	r3, #22
10003b52:	18fb      	adds	r3, r7, r3
10003b54:	781b      	ldrb	r3, [r3, #0]
10003b56:	2b00      	cmp	r3, #0
10003b58:	d000      	beq.n	10003b5c <PWM_CCU8_Init+0x44>
10003b5a:	e09a      	b.n	10003c92 <PWM_CCU8_Init+0x17a>
    {
      XMC_DEBUG("PWM_CCU8_Init:Initilizing slice");

      /* Configure CCU8x_CC8y slice as timer */
      XMC_CCU8_SLICE_CompareInit(handle_ptr->ccu8_slice_ptr, handle_ptr->config_ptr->ccu8_cc8_slice_timer_ptr);
10003b5c:	687b      	ldr	r3, [r7, #4]
10003b5e:	689a      	ldr	r2, [r3, #8]
10003b60:	687b      	ldr	r3, [r7, #4]
10003b62:	681b      	ldr	r3, [r3, #0]
10003b64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
10003b66:	1c10      	adds	r0, r2, #0
10003b68:	1c19      	adds	r1, r3, #0
10003b6a:	f7fe f86b 	bl	10001c44 <XMC_CCU8_SLICE_CompareInit>
      /* Set period match value of the timer  */
      XMC_CCU8_SLICE_SetTimerPeriodMatch(handle_ptr->ccu8_slice_ptr, handle_ptr->config_ptr->period_value);
10003b6e:	687b      	ldr	r3, [r7, #4]
10003b70:	689a      	ldr	r2, [r3, #8]
10003b72:	687b      	ldr	r3, [r7, #4]
10003b74:	681b      	ldr	r3, [r3, #0]
10003b76:	885b      	ldrh	r3, [r3, #2]
10003b78:	1c10      	adds	r0, r2, #0
10003b7a:	1c19      	adds	r1, r3, #0
10003b7c:	f7fe fb58 	bl	10002230 <XMC_CCU8_SLICE_SetTimerPeriodMatch>

      /* Set timer compare match value for channel 1 */
      XMC_CCU8_SLICE_SetTimerCompareMatch(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_COMPARE_CHANNEL_1,
10003b80:	687b      	ldr	r3, [r7, #4]
10003b82:	689a      	ldr	r2, [r3, #8]
                                          (uint16_t) handle_ptr->config_ptr->compare1_value);
10003b84:	687b      	ldr	r3, [r7, #4]
10003b86:	681b      	ldr	r3, [r3, #0]
      XMC_CCU8_SLICE_CompareInit(handle_ptr->ccu8_slice_ptr, handle_ptr->config_ptr->ccu8_cc8_slice_timer_ptr);
      /* Set period match value of the timer  */
      XMC_CCU8_SLICE_SetTimerPeriodMatch(handle_ptr->ccu8_slice_ptr, handle_ptr->config_ptr->period_value);

      /* Set timer compare match value for channel 1 */
      XMC_CCU8_SLICE_SetTimerCompareMatch(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_COMPARE_CHANNEL_1,
10003b88:	889b      	ldrh	r3, [r3, #4]
10003b8a:	1c10      	adds	r0, r2, #0
10003b8c:	2100      	movs	r1, #0
10003b8e:	1c1a      	adds	r2, r3, #0
10003b90:	f7fe fb5c 	bl	1000224c <XMC_CCU8_SLICE_SetTimerCompareMatch>
                                          (uint16_t) handle_ptr->config_ptr->compare1_value);
      /* Set timer compare match value for channel 2 */
      XMC_CCU8_SLICE_SetTimerCompareMatch(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_COMPARE_CHANNEL_2,
10003b94:	687b      	ldr	r3, [r7, #4]
10003b96:	689a      	ldr	r2, [r3, #8]
                                          (uint16_t) handle_ptr->config_ptr->compare2_value);
10003b98:	687b      	ldr	r3, [r7, #4]
10003b9a:	681b      	ldr	r3, [r3, #0]

      /* Set timer compare match value for channel 1 */
      XMC_CCU8_SLICE_SetTimerCompareMatch(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_COMPARE_CHANNEL_1,
                                          (uint16_t) handle_ptr->config_ptr->compare1_value);
      /* Set timer compare match value for channel 2 */
      XMC_CCU8_SLICE_SetTimerCompareMatch(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_COMPARE_CHANNEL_2,
10003b9c:	88db      	ldrh	r3, [r3, #6]
10003b9e:	1c10      	adds	r0, r2, #0
10003ba0:	2101      	movs	r1, #1
10003ba2:	1c1a      	adds	r2, r3, #0
10003ba4:	f7fe fb52 	bl	1000224c <XMC_CCU8_SLICE_SetTimerCompareMatch>
                                          (uint16_t) handle_ptr->config_ptr->compare2_value);

      if ((1U == handle_ptr->config_ptr->ccu8_cc8_slice_timer_ptr->mcm_ch1_enable) || (1U
10003ba8:	687b      	ldr	r3, [r7, #4]
10003baa:	681b      	ldr	r3, [r3, #0]
10003bac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
10003bae:	78db      	ldrb	r3, [r3, #3]
10003bb0:	2202      	movs	r2, #2
10003bb2:	4013      	ands	r3, r2
10003bb4:	b2db      	uxtb	r3, r3
10003bb6:	2b00      	cmp	r3, #0
10003bb8:	d108      	bne.n	10003bcc <PWM_CCU8_Init+0xb4>
          == handle_ptr->config_ptr->ccu8_cc8_slice_timer_ptr->mcm_ch2_enable))
10003bba:	687b      	ldr	r3, [r7, #4]
10003bbc:	681b      	ldr	r3, [r3, #0]
10003bbe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
10003bc0:	78db      	ldrb	r3, [r3, #3]
10003bc2:	2204      	movs	r2, #4
10003bc4:	4013      	ands	r3, r2
10003bc6:	b2db      	uxtb	r3, r3
                                          (uint16_t) handle_ptr->config_ptr->compare1_value);
      /* Set timer compare match value for channel 2 */
      XMC_CCU8_SLICE_SetTimerCompareMatch(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_COMPARE_CHANNEL_2,
                                          (uint16_t) handle_ptr->config_ptr->compare2_value);

      if ((1U == handle_ptr->config_ptr->ccu8_cc8_slice_timer_ptr->mcm_ch1_enable) || (1U
10003bc8:	2b00      	cmp	r3, #0
10003bca:	d008      	beq.n	10003bde <PWM_CCU8_Init+0xc6>
          == handle_ptr->config_ptr->ccu8_cc8_slice_timer_ptr->mcm_ch2_enable))
      {
        XMC_CCU8_SetMultiChannelShadowTransferMode(handle_ptr->ccu8_module_ptr,
10003bcc:	687b      	ldr	r3, [r7, #4]
10003bce:	685a      	ldr	r2, [r3, #4]
                                                   (uint32_t) handle_ptr->config_ptr->mcm_shadow_txfr_mode);
10003bd0:	687b      	ldr	r3, [r7, #4]
10003bd2:	681b      	ldr	r3, [r3, #0]
10003bd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                                          (uint16_t) handle_ptr->config_ptr->compare2_value);

      if ((1U == handle_ptr->config_ptr->ccu8_cc8_slice_timer_ptr->mcm_ch1_enable) || (1U
          == handle_ptr->config_ptr->ccu8_cc8_slice_timer_ptr->mcm_ch2_enable))
      {
        XMC_CCU8_SetMultiChannelShadowTransferMode(handle_ptr->ccu8_module_ptr,
10003bd6:	1c10      	adds	r0, r2, #0
10003bd8:	1c19      	adds	r1, r3, #0
10003bda:	f7fe f86d 	bl	10001cb8 <XMC_CCU8_SetMultiChannelShadowTransferMode>
                                                   (uint32_t) handle_ptr->config_ptr->mcm_shadow_txfr_mode);
      }

#if (UC_SERIES != XMC45) /*STC register not available on XMC45xx devices */
      XMC_CCU8_SLICE_SetShadowTransferMode(handle_ptr->ccu8_slice_ptr, handle_ptr->config_ptr->shadow_transfer_mode);
10003bde:	687b      	ldr	r3, [r7, #4]
10003be0:	6899      	ldr	r1, [r3, #8]
10003be2:	687b      	ldr	r3, [r7, #4]
10003be4:	681b      	ldr	r3, [r3, #0]
10003be6:	2244      	movs	r2, #68	; 0x44
10003be8:	5c9b      	ldrb	r3, [r3, r2]
10003bea:	1c08      	adds	r0, r1, #0
10003bec:	1c19      	adds	r1, r3, #0
10003bee:	f7ff ff79 	bl	10003ae4 <XMC_CCU8_SLICE_SetShadowTransferMode>
        XMC_CCU8_SLICE_EnableCascadedShadowTransfer(handle_ptr->ccu8_slice_ptr);
      }
#endif

      /* Transfer value from shadow timer registers to actual timer registers */
      XMC_CCU8_EnableShadowTransfer(handle_ptr->ccu8_module_ptr, handle_ptr->shadow_txfr_msk);
10003bf2:	687b      	ldr	r3, [r7, #4]
10003bf4:	685a      	ldr	r2, [r3, #4]
10003bf6:	687b      	ldr	r3, [r7, #4]
10003bf8:	691b      	ldr	r3, [r3, #16]
10003bfa:	1c10      	adds	r0, r2, #0
10003bfc:	1c19      	adds	r1, r3, #0
10003bfe:	f7ff ff4f 	bl	10003aa0 <XMC_CCU8_EnableShadowTransfer>
      XMC_CCU8_EnableShadowTransfer(handle_ptr->ccu8_module_ptr, handle_ptr->dither_shadow_txfr_msk);
10003c02:	687b      	ldr	r3, [r7, #4]
10003c04:	685a      	ldr	r2, [r3, #4]
10003c06:	687b      	ldr	r3, [r7, #4]
10003c08:	695b      	ldr	r3, [r3, #20]
10003c0a:	1c10      	adds	r0, r2, #0
10003c0c:	1c19      	adds	r1, r3, #0
10003c0e:	f7ff ff47 	bl	10003aa0 <XMC_CCU8_EnableShadowTransfer>

      XMC_CCU8_SLICE_DeadTimeInit(handle_ptr->ccu8_slice_ptr, handle_ptr->config_ptr->dt_config_ptr);
10003c12:	687b      	ldr	r3, [r7, #4]
10003c14:	689a      	ldr	r2, [r3, #8]
10003c16:	687b      	ldr	r3, [r7, #4]
10003c18:	681b      	ldr	r3, [r3, #0]
10003c1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
10003c1c:	1c10      	adds	r0, r2, #0
10003c1e:	1c19      	adds	r1, r3, #0
10003c20:	f7fe fb80 	bl	10002324 <XMC_CCU8_SLICE_DeadTimeInit>

      /* Configure events */
      PWM_CCU8_lConfigure_Events(handle_ptr);
10003c24:	687b      	ldr	r3, [r7, #4]
10003c26:	1c18      	adds	r0, r3, #0
10003c28:	f000 f962 	bl	10003ef0 <PWM_CCU8_lConfigure_Events>

      /* Enable the interrupts */
      PWM_CCU8_lInit_Interrupt(handle_ptr);
10003c2c:	687b      	ldr	r3, [r7, #4]
10003c2e:	1c18      	adds	r0, r3, #0
10003c30:	f000 f83e 	bl	10003cb0 <PWM_CCU8_lInit_Interrupt>

      /*Initializes the GPIO*/
      PWM_CCU8_lInit_GPIO(handle_ptr);
10003c34:	687b      	ldr	r3, [r7, #4]
10003c36:	1c18      	adds	r0, r3, #0
10003c38:	f000 f8fe 	bl	10003e38 <PWM_CCU8_lInit_GPIO>

      frequency_module = handle_ptr->config_ptr->global_ccu8_handle->module_frequency;
10003c3c:	687b      	ldr	r3, [r7, #4]
10003c3e:	681b      	ldr	r3, [r3, #0]
10003c40:	228c      	movs	r2, #140	; 0x8c
10003c42:	589b      	ldr	r3, [r3, r2]
10003c44:	681b      	ldr	r3, [r3, #0]
10003c46:	613b      	str	r3, [r7, #16]
      prescalar = (uint32_t) handle_ptr->config_ptr->ccu8_cc8_slice_timer_ptr->prescaler_initval;
10003c48:	687b      	ldr	r3, [r7, #4]
10003c4a:	681b      	ldr	r3, [r3, #0]
10003c4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
10003c4e:	7b1b      	ldrb	r3, [r3, #12]
10003c50:	071b      	lsls	r3, r3, #28
10003c52:	0f1b      	lsrs	r3, r3, #28
10003c54:	b2db      	uxtb	r3, r3
10003c56:	60fb      	str	r3, [r7, #12]
      frequency_module = frequency_module / ((uint32_t) 1 << prescalar);
10003c58:	68fb      	ldr	r3, [r7, #12]
10003c5a:	693a      	ldr	r2, [r7, #16]
10003c5c:	40da      	lsrs	r2, r3
10003c5e:	1c13      	adds	r3, r2, #0
10003c60:	613b      	str	r3, [r7, #16]
      handle_ptr->frequency_tclk = frequency_module;
10003c62:	687b      	ldr	r3, [r7, #4]
10003c64:	693a      	ldr	r2, [r7, #16]
10003c66:	621a      	str	r2, [r3, #32]

      handle_ptr->state = PWM_CCU8_STATE_INITIALIZED;
10003c68:	687b      	ldr	r3, [r7, #4]
10003c6a:	2201      	movs	r2, #1
10003c6c:	771a      	strb	r2, [r3, #28]
      status = PWM_CCU8_STATUS_SUCCESS;
10003c6e:	2317      	movs	r3, #23
10003c70:	18fb      	adds	r3, r7, r3
10003c72:	2200      	movs	r2, #0
10003c74:	701a      	strb	r2, [r3, #0]

      /* Start the PWM generation if start at initialization is enabled */
      if ((bool) true == handle_ptr->config_ptr->start_control)
10003c76:	687b      	ldr	r3, [r7, #4]
10003c78:	681b      	ldr	r3, [r3, #0]
10003c7a:	781b      	ldrb	r3, [r3, #0]
10003c7c:	2b00      	cmp	r3, #0
10003c7e:	d010      	beq.n	10003ca2 <PWM_CCU8_Init+0x18a>
      {
        status = PWM_CCU8_Start(handle_ptr);
10003c80:	2317      	movs	r3, #23
10003c82:	18fc      	adds	r4, r7, r3
10003c84:	687b      	ldr	r3, [r7, #4]
10003c86:	1c18      	adds	r0, r3, #0
10003c88:	f000 fa1e 	bl	100040c8 <PWM_CCU8_Start>
10003c8c:	1c03      	adds	r3, r0, #0
10003c8e:	7023      	strb	r3, [r4, #0]
10003c90:	e007      	b.n	10003ca2 <PWM_CCU8_Init+0x18a>
      }

    }
    else
    {
      handle_ptr->state = PWM_CCU8_STATE_UNINITIALIZED;
10003c92:	687b      	ldr	r3, [r7, #4]
10003c94:	2200      	movs	r2, #0
10003c96:	771a      	strb	r2, [r3, #28]
10003c98:	e003      	b.n	10003ca2 <PWM_CCU8_Init+0x18a>
    }

  }
  else
  {
    status = PWM_CCU8_STATUS_ALREADY_INITIALIZED;
10003c9a:	2317      	movs	r3, #23
10003c9c:	18fb      	adds	r3, r7, r3
10003c9e:	2202      	movs	r2, #2
10003ca0:	701a      	strb	r2, [r3, #0]
    XMC_DEBUG("PWM_CCU8_Init:PWM_CCU8_STATUS_ALREADY_INITIALIZED");
  }

  return (status);
10003ca2:	2317      	movs	r3, #23
10003ca4:	18fb      	adds	r3, r7, r3
10003ca6:	781b      	ldrb	r3, [r3, #0]
} /* end of PWM_CCU8_Init() api */
10003ca8:	1c18      	adds	r0, r3, #0
10003caa:	46bd      	mov	sp, r7
10003cac:	b007      	add	sp, #28
10003cae:	bd90      	pop	{r4, r7, pc}

10003cb0 <PWM_CCU8_lInit_Interrupt>:

static void PWM_CCU8_lInit_Interrupt(PWM_CCU8_t* handle_ptr)
{
10003cb0:	b580      	push	{r7, lr}
10003cb2:	b082      	sub	sp, #8
10003cb4:	af00      	add	r7, sp, #0
10003cb6:	6078      	str	r0, [r7, #4]

  /* Enable events. Bind event to corresponding service request node. */

  XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_PERIOD_MATCH,
10003cb8:	687b      	ldr	r3, [r7, #4]
10003cba:	689a      	ldr	r2, [r3, #8]
                                  handle_ptr->config_ptr->sr_per_match);
10003cbc:	687b      	ldr	r3, [r7, #4]
10003cbe:	681b      	ldr	r3, [r3, #0]
static void PWM_CCU8_lInit_Interrupt(PWM_CCU8_t* handle_ptr)
{

  /* Enable events. Bind event to corresponding service request node. */

  XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_PERIOD_MATCH,
10003cc0:	7c5b      	ldrb	r3, [r3, #17]
10003cc2:	1c10      	adds	r0, r2, #0
10003cc4:	2100      	movs	r1, #0
10003cc6:	1c1a      	adds	r2, r3, #0
10003cc8:	f7fe fadc 	bl	10002284 <XMC_CCU8_SLICE_SetInterruptNode>
                                  handle_ptr->config_ptr->sr_per_match);
  XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_UP_CH_1,
10003ccc:	687b      	ldr	r3, [r7, #4]
10003cce:	689a      	ldr	r2, [r3, #8]
                                  handle_ptr->config_ptr->sr_cmp1_match_up);
10003cd0:	687b      	ldr	r3, [r7, #4]
10003cd2:	681b      	ldr	r3, [r3, #0]

  /* Enable events. Bind event to corresponding service request node. */

  XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_PERIOD_MATCH,
                                  handle_ptr->config_ptr->sr_per_match);
  XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_UP_CH_1,
10003cd4:	7c9b      	ldrb	r3, [r3, #18]
10003cd6:	1c10      	adds	r0, r2, #0
10003cd8:	2102      	movs	r1, #2
10003cda:	1c1a      	adds	r2, r3, #0
10003cdc:	f7fe fad2 	bl	10002284 <XMC_CCU8_SLICE_SetInterruptNode>
                                  handle_ptr->config_ptr->sr_cmp1_match_up);
  XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_DOWN_CH_1,
10003ce0:	687b      	ldr	r3, [r7, #4]
10003ce2:	689a      	ldr	r2, [r3, #8]
                                  handle_ptr->config_ptr->sr_cmp1_match_down);
10003ce4:	687b      	ldr	r3, [r7, #4]
10003ce6:	681b      	ldr	r3, [r3, #0]

  XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_PERIOD_MATCH,
                                  handle_ptr->config_ptr->sr_per_match);
  XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_UP_CH_1,
                                  handle_ptr->config_ptr->sr_cmp1_match_up);
  XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_DOWN_CH_1,
10003ce8:	7cdb      	ldrb	r3, [r3, #19]
10003cea:	1c10      	adds	r0, r2, #0
10003cec:	2103      	movs	r1, #3
10003cee:	1c1a      	adds	r2, r3, #0
10003cf0:	f7fe fac8 	bl	10002284 <XMC_CCU8_SLICE_SetInterruptNode>
                                  handle_ptr->config_ptr->sr_cmp1_match_down);
  XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_UP_CH_2,
10003cf4:	687b      	ldr	r3, [r7, #4]
10003cf6:	689a      	ldr	r2, [r3, #8]
                                  handle_ptr->config_ptr->sr_cmp2_match_up);
10003cf8:	687b      	ldr	r3, [r7, #4]
10003cfa:	681b      	ldr	r3, [r3, #0]
                                  handle_ptr->config_ptr->sr_per_match);
  XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_UP_CH_1,
                                  handle_ptr->config_ptr->sr_cmp1_match_up);
  XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_DOWN_CH_1,
                                  handle_ptr->config_ptr->sr_cmp1_match_down);
  XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_UP_CH_2,
10003cfc:	7d1b      	ldrb	r3, [r3, #20]
10003cfe:	1c10      	adds	r0, r2, #0
10003d00:	2104      	movs	r1, #4
10003d02:	1c1a      	adds	r2, r3, #0
10003d04:	f7fe fabe 	bl	10002284 <XMC_CCU8_SLICE_SetInterruptNode>
                                  handle_ptr->config_ptr->sr_cmp2_match_up);
  XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_DOWN_CH_2,
10003d08:	687b      	ldr	r3, [r7, #4]
10003d0a:	689a      	ldr	r2, [r3, #8]
                                  handle_ptr->config_ptr->sr_cmp2_match_down);
10003d0c:	687b      	ldr	r3, [r7, #4]
10003d0e:	681b      	ldr	r3, [r3, #0]
                                  handle_ptr->config_ptr->sr_cmp1_match_up);
  XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_DOWN_CH_1,
                                  handle_ptr->config_ptr->sr_cmp1_match_down);
  XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_UP_CH_2,
                                  handle_ptr->config_ptr->sr_cmp2_match_up);
  XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_DOWN_CH_2,
10003d10:	7d5b      	ldrb	r3, [r3, #21]
10003d12:	1c10      	adds	r0, r2, #0
10003d14:	2105      	movs	r1, #5
10003d16:	1c1a      	adds	r2, r3, #0
10003d18:	f7fe fab4 	bl	10002284 <XMC_CCU8_SLICE_SetInterruptNode>
                                  handle_ptr->config_ptr->sr_cmp2_match_down);
  XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_ONE_MATCH,
10003d1c:	687b      	ldr	r3, [r7, #4]
10003d1e:	689a      	ldr	r2, [r3, #8]
                                  handle_ptr->config_ptr->sr_one_match_down);
10003d20:	687b      	ldr	r3, [r7, #4]
10003d22:	681b      	ldr	r3, [r3, #0]
                                  handle_ptr->config_ptr->sr_cmp1_match_down);
  XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_UP_CH_2,
                                  handle_ptr->config_ptr->sr_cmp2_match_up);
  XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_DOWN_CH_2,
                                  handle_ptr->config_ptr->sr_cmp2_match_down);
  XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_ONE_MATCH,
10003d24:	7d9b      	ldrb	r3, [r3, #22]
10003d26:	1c10      	adds	r0, r2, #0
10003d28:	2101      	movs	r1, #1
10003d2a:	1c1a      	adds	r2, r3, #0
10003d2c:	f7fe faaa 	bl	10002284 <XMC_CCU8_SLICE_SetInterruptNode>
                                  handle_ptr->config_ptr->sr_one_match_down);
  XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_EVENT0,
10003d30:	687b      	ldr	r3, [r7, #4]
10003d32:	689a      	ldr	r2, [r3, #8]
                                  handle_ptr->config_ptr->sr_e0);
10003d34:	687b      	ldr	r3, [r7, #4]
10003d36:	681b      	ldr	r3, [r3, #0]
                                  handle_ptr->config_ptr->sr_cmp2_match_up);
  XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_DOWN_CH_2,
                                  handle_ptr->config_ptr->sr_cmp2_match_down);
  XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_ONE_MATCH,
                                  handle_ptr->config_ptr->sr_one_match_down);
  XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_EVENT0,
10003d38:	7ddb      	ldrb	r3, [r3, #23]
10003d3a:	1c10      	adds	r0, r2, #0
10003d3c:	2108      	movs	r1, #8
10003d3e:	1c1a      	adds	r2, r3, #0
10003d40:	f7fe faa0 	bl	10002284 <XMC_CCU8_SLICE_SetInterruptNode>
                                  handle_ptr->config_ptr->sr_e0);
  XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_EVENT1,
10003d44:	687b      	ldr	r3, [r7, #4]
10003d46:	689a      	ldr	r2, [r3, #8]
                                  handle_ptr->config_ptr->sr_e1);
10003d48:	687b      	ldr	r3, [r7, #4]
10003d4a:	681b      	ldr	r3, [r3, #0]
                                  handle_ptr->config_ptr->sr_cmp2_match_down);
  XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_ONE_MATCH,
                                  handle_ptr->config_ptr->sr_one_match_down);
  XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_EVENT0,
                                  handle_ptr->config_ptr->sr_e0);
  XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_EVENT1,
10003d4c:	7e1b      	ldrb	r3, [r3, #24]
10003d4e:	1c10      	adds	r0, r2, #0
10003d50:	2109      	movs	r1, #9
10003d52:	1c1a      	adds	r2, r3, #0
10003d54:	f7fe fa96 	bl	10002284 <XMC_CCU8_SLICE_SetInterruptNode>
                                  handle_ptr->config_ptr->sr_e1);
  XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_EVENT2,
10003d58:	687b      	ldr	r3, [r7, #4]
10003d5a:	689a      	ldr	r2, [r3, #8]
                                  handle_ptr->config_ptr->sr_e2);
10003d5c:	687b      	ldr	r3, [r7, #4]
10003d5e:	681b      	ldr	r3, [r3, #0]
                                  handle_ptr->config_ptr->sr_one_match_down);
  XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_EVENT0,
                                  handle_ptr->config_ptr->sr_e0);
  XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_EVENT1,
                                  handle_ptr->config_ptr->sr_e1);
  XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_EVENT2,
10003d60:	7e5b      	ldrb	r3, [r3, #25]
10003d62:	1c10      	adds	r0, r2, #0
10003d64:	210a      	movs	r1, #10
10003d66:	1c1a      	adds	r2, r3, #0
10003d68:	f7fe fa8c 	bl	10002284 <XMC_CCU8_SLICE_SetInterruptNode>
                                  handle_ptr->config_ptr->sr_e2);

  if ((bool) true == handle_ptr->config_ptr->int_per_match)
10003d6c:	687b      	ldr	r3, [r7, #4]
10003d6e:	681b      	ldr	r3, [r3, #0]
10003d70:	7a1b      	ldrb	r3, [r3, #8]
10003d72:	2b00      	cmp	r3, #0
10003d74:	d005      	beq.n	10003d82 <PWM_CCU8_lInit_Interrupt+0xd2>
  {
    XMC_DEBUG("PWM_CCU8_Init: Interrupt period match enable");
    XMC_CCU8_SLICE_EnableEvent(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_PERIOD_MATCH);
10003d76:	687b      	ldr	r3, [r7, #4]
10003d78:	689b      	ldr	r3, [r3, #8]
10003d7a:	1c18      	adds	r0, r3, #0
10003d7c:	2100      	movs	r1, #0
10003d7e:	f7ff fe9b 	bl	10003ab8 <XMC_CCU8_SLICE_EnableEvent>
  }

  if ((bool) true == handle_ptr->config_ptr->int_cmp1_match_up)
10003d82:	687b      	ldr	r3, [r7, #4]
10003d84:	681b      	ldr	r3, [r3, #0]
10003d86:	7a5b      	ldrb	r3, [r3, #9]
10003d88:	2b00      	cmp	r3, #0
10003d8a:	d005      	beq.n	10003d98 <PWM_CCU8_lInit_Interrupt+0xe8>
  {
    XMC_DEBUG("PWM_CCU8_Init: Interrupt compare match ch1 up enable");
    XMC_CCU8_SLICE_EnableEvent(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_UP_CH_1);
10003d8c:	687b      	ldr	r3, [r7, #4]
10003d8e:	689b      	ldr	r3, [r3, #8]
10003d90:	1c18      	adds	r0, r3, #0
10003d92:	2102      	movs	r1, #2
10003d94:	f7ff fe90 	bl	10003ab8 <XMC_CCU8_SLICE_EnableEvent>
  }

  if ((bool) true == handle_ptr->config_ptr->int_cmp1_match_down)
10003d98:	687b      	ldr	r3, [r7, #4]
10003d9a:	681b      	ldr	r3, [r3, #0]
10003d9c:	7a9b      	ldrb	r3, [r3, #10]
10003d9e:	2b00      	cmp	r3, #0
10003da0:	d005      	beq.n	10003dae <PWM_CCU8_lInit_Interrupt+0xfe>
  {
    XMC_DEBUG("PWM_CCU8_Init: Interrupt compare match ch1 down enable");
    XMC_CCU8_SLICE_EnableEvent(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_DOWN_CH_1);
10003da2:	687b      	ldr	r3, [r7, #4]
10003da4:	689b      	ldr	r3, [r3, #8]
10003da6:	1c18      	adds	r0, r3, #0
10003da8:	2103      	movs	r1, #3
10003daa:	f7ff fe85 	bl	10003ab8 <XMC_CCU8_SLICE_EnableEvent>
  }

  if ((bool) true == handle_ptr->config_ptr->int_cmp2_match_up)
10003dae:	687b      	ldr	r3, [r7, #4]
10003db0:	681b      	ldr	r3, [r3, #0]
10003db2:	7adb      	ldrb	r3, [r3, #11]
10003db4:	2b00      	cmp	r3, #0
10003db6:	d005      	beq.n	10003dc4 <PWM_CCU8_lInit_Interrupt+0x114>
  {
    XMC_DEBUG("PWM_CCU8_Init: Interrupt compare match ch2 up enable");
    XMC_CCU8_SLICE_EnableEvent(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_UP_CH_2);
10003db8:	687b      	ldr	r3, [r7, #4]
10003dba:	689b      	ldr	r3, [r3, #8]
10003dbc:	1c18      	adds	r0, r3, #0
10003dbe:	2104      	movs	r1, #4
10003dc0:	f7ff fe7a 	bl	10003ab8 <XMC_CCU8_SLICE_EnableEvent>
  }

  if ((bool) true == handle_ptr->config_ptr->int_cmp2_match_down)
10003dc4:	687b      	ldr	r3, [r7, #4]
10003dc6:	681b      	ldr	r3, [r3, #0]
10003dc8:	7b1b      	ldrb	r3, [r3, #12]
10003dca:	2b00      	cmp	r3, #0
10003dcc:	d005      	beq.n	10003dda <PWM_CCU8_lInit_Interrupt+0x12a>
  {
    XMC_DEBUG("PWM_CCU8_Init: Interrupt compare match ch2 down enable");
    XMC_CCU8_SLICE_EnableEvent(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_DOWN_CH_2);
10003dce:	687b      	ldr	r3, [r7, #4]
10003dd0:	689b      	ldr	r3, [r3, #8]
10003dd2:	1c18      	adds	r0, r3, #0
10003dd4:	2105      	movs	r1, #5
10003dd6:	f7ff fe6f 	bl	10003ab8 <XMC_CCU8_SLICE_EnableEvent>
  }

  if ((bool) true == handle_ptr->config_ptr->int_one_match_down)
10003dda:	687b      	ldr	r3, [r7, #4]
10003ddc:	681b      	ldr	r3, [r3, #0]
10003dde:	7b5b      	ldrb	r3, [r3, #13]
10003de0:	2b00      	cmp	r3, #0
10003de2:	d005      	beq.n	10003df0 <PWM_CCU8_lInit_Interrupt+0x140>
  {
    XMC_DEBUG("PWM_CCU8_Init: Interrupt one match enable");
    XMC_CCU8_SLICE_EnableEvent(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_ONE_MATCH);
10003de4:	687b      	ldr	r3, [r7, #4]
10003de6:	689b      	ldr	r3, [r3, #8]
10003de8:	1c18      	adds	r0, r3, #0
10003dea:	2101      	movs	r1, #1
10003dec:	f7ff fe64 	bl	10003ab8 <XMC_CCU8_SLICE_EnableEvent>
  }

  if ((bool) true == handle_ptr->config_ptr->int_e0)
10003df0:	687b      	ldr	r3, [r7, #4]
10003df2:	681b      	ldr	r3, [r3, #0]
10003df4:	7b9b      	ldrb	r3, [r3, #14]
10003df6:	2b00      	cmp	r3, #0
10003df8:	d005      	beq.n	10003e06 <PWM_CCU8_lInit_Interrupt+0x156>
  {
    XMC_DEBUG("PWM_CCU8_Init: Interrupt event 0 enable");
    XMC_CCU8_SLICE_EnableEvent(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_EVENT0);
10003dfa:	687b      	ldr	r3, [r7, #4]
10003dfc:	689b      	ldr	r3, [r3, #8]
10003dfe:	1c18      	adds	r0, r3, #0
10003e00:	2108      	movs	r1, #8
10003e02:	f7ff fe59 	bl	10003ab8 <XMC_CCU8_SLICE_EnableEvent>
  }

  if ((bool) true == handle_ptr->config_ptr->int_e1)
10003e06:	687b      	ldr	r3, [r7, #4]
10003e08:	681b      	ldr	r3, [r3, #0]
10003e0a:	7bdb      	ldrb	r3, [r3, #15]
10003e0c:	2b00      	cmp	r3, #0
10003e0e:	d005      	beq.n	10003e1c <PWM_CCU8_lInit_Interrupt+0x16c>
  {
    XMC_DEBUG("PWM_CCU8_Init: Interrupt event 1 enable");
    XMC_CCU8_SLICE_EnableEvent(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_EVENT1);
10003e10:	687b      	ldr	r3, [r7, #4]
10003e12:	689b      	ldr	r3, [r3, #8]
10003e14:	1c18      	adds	r0, r3, #0
10003e16:	2109      	movs	r1, #9
10003e18:	f7ff fe4e 	bl	10003ab8 <XMC_CCU8_SLICE_EnableEvent>
  }

  if ((bool) true == handle_ptr->config_ptr->int_e2)
10003e1c:	687b      	ldr	r3, [r7, #4]
10003e1e:	681b      	ldr	r3, [r3, #0]
10003e20:	7c1b      	ldrb	r3, [r3, #16]
10003e22:	2b00      	cmp	r3, #0
10003e24:	d005      	beq.n	10003e32 <PWM_CCU8_lInit_Interrupt+0x182>
  {
    XMC_DEBUG("PWM_CCU8_Init: Interrupt event 2 enable");
    XMC_CCU8_SLICE_EnableEvent(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_EVENT2);
10003e26:	687b      	ldr	r3, [r7, #4]
10003e28:	689b      	ldr	r3, [r3, #8]
10003e2a:	1c18      	adds	r0, r3, #0
10003e2c:	210a      	movs	r1, #10
10003e2e:	f7ff fe43 	bl	10003ab8 <XMC_CCU8_SLICE_EnableEvent>
  }
}
10003e32:	46bd      	mov	sp, r7
10003e34:	b002      	add	sp, #8
10003e36:	bd80      	pop	{r7, pc}

10003e38 <PWM_CCU8_lInit_GPIO>:
static void PWM_CCU8_lInit_GPIO(PWM_CCU8_t* handle_ptr)
{
10003e38:	b580      	push	{r7, lr}
10003e3a:	b082      	sub	sp, #8
10003e3c:	af00      	add	r7, sp, #0
10003e3e:	6078      	str	r0, [r7, #4]
  if ((bool) true == handle_ptr->config_ptr->gpio_ch1_out0_enable)
10003e40:	687b      	ldr	r3, [r7, #4]
10003e42:	681b      	ldr	r3, [r3, #0]
10003e44:	224c      	movs	r2, #76	; 0x4c
10003e46:	5c9b      	ldrb	r3, [r3, r2]
10003e48:	2b00      	cmp	r3, #0
10003e4a:	d00e      	beq.n	10003e6a <PWM_CCU8_lInit_GPIO+0x32>
  {
    XMC_GPIO_Init(handle_ptr->config_ptr->gpio_ch1_out0_ptr, handle_ptr->config_ptr->gpio_ch1_out0_pin,
10003e4c:	687b      	ldr	r3, [r7, #4]
10003e4e:	681b      	ldr	r3, [r3, #0]
10003e50:	6d19      	ldr	r1, [r3, #80]	; 0x50
10003e52:	687b      	ldr	r3, [r7, #4]
10003e54:	681b      	ldr	r3, [r3, #0]
10003e56:	2254      	movs	r2, #84	; 0x54
10003e58:	5c9a      	ldrb	r2, [r3, r2]
                  handle_ptr->config_ptr->gpio_ch1_out0_config_ptr);
10003e5a:	687b      	ldr	r3, [r7, #4]
10003e5c:	681b      	ldr	r3, [r3, #0]
}
static void PWM_CCU8_lInit_GPIO(PWM_CCU8_t* handle_ptr)
{
  if ((bool) true == handle_ptr->config_ptr->gpio_ch1_out0_enable)
  {
    XMC_GPIO_Init(handle_ptr->config_ptr->gpio_ch1_out0_ptr, handle_ptr->config_ptr->gpio_ch1_out0_pin,
10003e5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
10003e60:	1c08      	adds	r0, r1, #0
10003e62:	1c11      	adds	r1, r2, #0
10003e64:	1c1a      	adds	r2, r3, #0
10003e66:	f7fd f955 	bl	10001114 <XMC_GPIO_Init>
                  handle_ptr->config_ptr->gpio_ch1_out0_config_ptr);
  }

  if ((bool) true == handle_ptr->config_ptr->gpio_ch1_out1_enable)
10003e6a:	687b      	ldr	r3, [r7, #4]
10003e6c:	681b      	ldr	r3, [r3, #0]
10003e6e:	225c      	movs	r2, #92	; 0x5c
10003e70:	5c9b      	ldrb	r3, [r3, r2]
10003e72:	2b00      	cmp	r3, #0
10003e74:	d00e      	beq.n	10003e94 <PWM_CCU8_lInit_GPIO+0x5c>
  {
    XMC_GPIO_Init(handle_ptr->config_ptr->gpio_ch1_out1_ptr, handle_ptr->config_ptr->gpio_ch1_out1_pin,
10003e76:	687b      	ldr	r3, [r7, #4]
10003e78:	681b      	ldr	r3, [r3, #0]
10003e7a:	6e19      	ldr	r1, [r3, #96]	; 0x60
10003e7c:	687b      	ldr	r3, [r7, #4]
10003e7e:	681b      	ldr	r3, [r3, #0]
10003e80:	2264      	movs	r2, #100	; 0x64
10003e82:	5c9a      	ldrb	r2, [r3, r2]
                  handle_ptr->config_ptr->gpio_ch1_out1_config_ptr);
10003e84:	687b      	ldr	r3, [r7, #4]
10003e86:	681b      	ldr	r3, [r3, #0]
                  handle_ptr->config_ptr->gpio_ch1_out0_config_ptr);
  }

  if ((bool) true == handle_ptr->config_ptr->gpio_ch1_out1_enable)
  {
    XMC_GPIO_Init(handle_ptr->config_ptr->gpio_ch1_out1_ptr, handle_ptr->config_ptr->gpio_ch1_out1_pin,
10003e88:	6e9b      	ldr	r3, [r3, #104]	; 0x68
10003e8a:	1c08      	adds	r0, r1, #0
10003e8c:	1c11      	adds	r1, r2, #0
10003e8e:	1c1a      	adds	r2, r3, #0
10003e90:	f7fd f940 	bl	10001114 <XMC_GPIO_Init>
                  handle_ptr->config_ptr->gpio_ch1_out1_config_ptr);
  }

  if ((bool) true == handle_ptr->config_ptr->gpio_ch2_out2_enable)
10003e94:	687b      	ldr	r3, [r7, #4]
10003e96:	681b      	ldr	r3, [r3, #0]
10003e98:	226c      	movs	r2, #108	; 0x6c
10003e9a:	5c9b      	ldrb	r3, [r3, r2]
10003e9c:	2b00      	cmp	r3, #0
10003e9e:	d00e      	beq.n	10003ebe <PWM_CCU8_lInit_GPIO+0x86>
  {
    XMC_GPIO_Init(handle_ptr->config_ptr->gpio_ch2_out2_ptr, handle_ptr->config_ptr->gpio_ch2_out2_pin,
10003ea0:	687b      	ldr	r3, [r7, #4]
10003ea2:	681b      	ldr	r3, [r3, #0]
10003ea4:	6f19      	ldr	r1, [r3, #112]	; 0x70
10003ea6:	687b      	ldr	r3, [r7, #4]
10003ea8:	681b      	ldr	r3, [r3, #0]
10003eaa:	2274      	movs	r2, #116	; 0x74
10003eac:	5c9a      	ldrb	r2, [r3, r2]
                  handle_ptr->config_ptr->gpio_ch2_out2_config_ptr);
10003eae:	687b      	ldr	r3, [r7, #4]
10003eb0:	681b      	ldr	r3, [r3, #0]
                  handle_ptr->config_ptr->gpio_ch1_out1_config_ptr);
  }

  if ((bool) true == handle_ptr->config_ptr->gpio_ch2_out2_enable)
  {
    XMC_GPIO_Init(handle_ptr->config_ptr->gpio_ch2_out2_ptr, handle_ptr->config_ptr->gpio_ch2_out2_pin,
10003eb2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
10003eb4:	1c08      	adds	r0, r1, #0
10003eb6:	1c11      	adds	r1, r2, #0
10003eb8:	1c1a      	adds	r2, r3, #0
10003eba:	f7fd f92b 	bl	10001114 <XMC_GPIO_Init>
                  handle_ptr->config_ptr->gpio_ch2_out2_config_ptr);
  }

  if ((bool) true == handle_ptr->config_ptr->gpio_ch2_out3_enable)
10003ebe:	687b      	ldr	r3, [r7, #4]
10003ec0:	681b      	ldr	r3, [r3, #0]
10003ec2:	227c      	movs	r2, #124	; 0x7c
10003ec4:	5c9b      	ldrb	r3, [r3, r2]
10003ec6:	2b00      	cmp	r3, #0
10003ec8:	d00e      	beq.n	10003ee8 <PWM_CCU8_lInit_GPIO+0xb0>
  {
    XMC_GPIO_Init(handle_ptr->config_ptr->gpio_ch2_out3_ptr, handle_ptr->config_ptr->gpio_ch2_out3_pin,
10003eca:	687b      	ldr	r3, [r7, #4]
10003ecc:	681b      	ldr	r3, [r3, #0]
10003ece:	2280      	movs	r2, #128	; 0x80
10003ed0:	5898      	ldr	r0, [r3, r2]
10003ed2:	687b      	ldr	r3, [r7, #4]
10003ed4:	681b      	ldr	r3, [r3, #0]
10003ed6:	2284      	movs	r2, #132	; 0x84
10003ed8:	5c99      	ldrb	r1, [r3, r2]
                  handle_ptr->config_ptr->gpio_ch2_out3_config_ptr);
10003eda:	687b      	ldr	r3, [r7, #4]
10003edc:	681b      	ldr	r3, [r3, #0]
                  handle_ptr->config_ptr->gpio_ch2_out2_config_ptr);
  }

  if ((bool) true == handle_ptr->config_ptr->gpio_ch2_out3_enable)
  {
    XMC_GPIO_Init(handle_ptr->config_ptr->gpio_ch2_out3_ptr, handle_ptr->config_ptr->gpio_ch2_out3_pin,
10003ede:	2288      	movs	r2, #136	; 0x88
10003ee0:	589b      	ldr	r3, [r3, r2]
10003ee2:	1c1a      	adds	r2, r3, #0
10003ee4:	f7fd f916 	bl	10001114 <XMC_GPIO_Init>
                  handle_ptr->config_ptr->gpio_ch2_out3_config_ptr);
  }
}
10003ee8:	46bd      	mov	sp, r7
10003eea:	b002      	add	sp, #8
10003eec:	bd80      	pop	{r7, pc}
10003eee:	46c0      	nop			; (mov r8, r8)

10003ef0 <PWM_CCU8_lConfigure_Events>:

static void PWM_CCU8_lConfigure_Events(PWM_CCU8_t* handle_ptr)
{
10003ef0:	b590      	push	{r4, r7, lr}
10003ef2:	b085      	sub	sp, #20
10003ef4:	af02      	add	r7, sp, #8
10003ef6:	6078      	str	r0, [r7, #4]
  /* Configure slice to a external event 0 */
  XMC_CCU8_SLICE_ConfigureEvent(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_EVENT_0,
10003ef8:	687b      	ldr	r3, [r7, #4]
10003efa:	689a      	ldr	r2, [r3, #8]
                                handle_ptr->config_ptr->event0_config_ptr);
10003efc:	687b      	ldr	r3, [r7, #4]
10003efe:	681b      	ldr	r3, [r3, #0]
}

static void PWM_CCU8_lConfigure_Events(PWM_CCU8_t* handle_ptr)
{
  /* Configure slice to a external event 0 */
  XMC_CCU8_SLICE_ConfigureEvent(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_EVENT_0,
10003f00:	69db      	ldr	r3, [r3, #28]
10003f02:	1c10      	adds	r0, r2, #0
10003f04:	2101      	movs	r1, #1
10003f06:	1c1a      	adds	r2, r3, #0
10003f08:	f7fe f904 	bl	10002114 <XMC_CCU8_SLICE_ConfigureEvent>
                                handle_ptr->config_ptr->event0_config_ptr);

  /* Configure slice to a external event 1 */
  XMC_CCU8_SLICE_ConfigureEvent(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_EVENT_1,
10003f0c:	687b      	ldr	r3, [r7, #4]
10003f0e:	689a      	ldr	r2, [r3, #8]
                                handle_ptr->config_ptr->event1_config_ptr);
10003f10:	687b      	ldr	r3, [r7, #4]
10003f12:	681b      	ldr	r3, [r3, #0]
  /* Configure slice to a external event 0 */
  XMC_CCU8_SLICE_ConfigureEvent(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_EVENT_0,
                                handle_ptr->config_ptr->event0_config_ptr);

  /* Configure slice to a external event 1 */
  XMC_CCU8_SLICE_ConfigureEvent(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_EVENT_1,
10003f14:	6a1b      	ldr	r3, [r3, #32]
10003f16:	1c10      	adds	r0, r2, #0
10003f18:	2102      	movs	r1, #2
10003f1a:	1c1a      	adds	r2, r3, #0
10003f1c:	f7fe f8fa 	bl	10002114 <XMC_CCU8_SLICE_ConfigureEvent>
                                handle_ptr->config_ptr->event1_config_ptr);

  /* Configure slice to a external event 2 */
  XMC_CCU8_SLICE_ConfigureEvent(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_EVENT_2,
10003f20:	687b      	ldr	r3, [r7, #4]
10003f22:	689a      	ldr	r2, [r3, #8]
                                handle_ptr->config_ptr->event2_config_ptr);
10003f24:	687b      	ldr	r3, [r7, #4]
10003f26:	681b      	ldr	r3, [r3, #0]
  /* Configure slice to a external event 1 */
  XMC_CCU8_SLICE_ConfigureEvent(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_EVENT_1,
                                handle_ptr->config_ptr->event1_config_ptr);

  /* Configure slice to a external event 2 */
  XMC_CCU8_SLICE_ConfigureEvent(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_EVENT_2,
10003f28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10003f2a:	1c10      	adds	r0, r2, #0
10003f2c:	2103      	movs	r1, #3
10003f2e:	1c1a      	adds	r2, r3, #0
10003f30:	f7fe f8f0 	bl	10002114 <XMC_CCU8_SLICE_ConfigureEvent>
                                handle_ptr->config_ptr->event2_config_ptr);

  /* External signal controls start of the timer */
  if (XMC_CCU8_SLICE_EVENT_NONE != handle_ptr->config_ptr->ext_start_event)
10003f34:	687b      	ldr	r3, [r7, #4]
10003f36:	681b      	ldr	r3, [r3, #0]
10003f38:	2228      	movs	r2, #40	; 0x28
10003f3a:	5c9b      	ldrb	r3, [r3, r2]
10003f3c:	2b00      	cmp	r3, #0
10003f3e:	d00c      	beq.n	10003f5a <PWM_CCU8_lConfigure_Events+0x6a>
  {
    XMC_CCU8_SLICE_StartConfig(handle_ptr->ccu8_slice_ptr, handle_ptr->config_ptr->ext_start_event,
10003f40:	687b      	ldr	r3, [r7, #4]
10003f42:	6898      	ldr	r0, [r3, #8]
10003f44:	687b      	ldr	r3, [r7, #4]
10003f46:	681b      	ldr	r3, [r3, #0]
10003f48:	2228      	movs	r2, #40	; 0x28
10003f4a:	5c99      	ldrb	r1, [r3, r2]
                               handle_ptr->config_ptr->ext_start_mode);
10003f4c:	687b      	ldr	r3, [r7, #4]
10003f4e:	681b      	ldr	r3, [r3, #0]
                                handle_ptr->config_ptr->event2_config_ptr);

  /* External signal controls start of the timer */
  if (XMC_CCU8_SLICE_EVENT_NONE != handle_ptr->config_ptr->ext_start_event)
  {
    XMC_CCU8_SLICE_StartConfig(handle_ptr->ccu8_slice_ptr, handle_ptr->config_ptr->ext_start_event,
10003f50:	2229      	movs	r2, #41	; 0x29
10003f52:	5c9b      	ldrb	r3, [r3, r2]
10003f54:	1c1a      	adds	r2, r3, #0
10003f56:	f7fd fec9 	bl	10001cec <XMC_CCU8_SLICE_StartConfig>
                               handle_ptr->config_ptr->ext_start_mode);
  }

  /* External signal can stop the timer */
  if (XMC_CCU8_SLICE_EVENT_NONE != handle_ptr->config_ptr->ext_stop_event)
10003f5a:	687b      	ldr	r3, [r7, #4]
10003f5c:	681b      	ldr	r3, [r3, #0]
10003f5e:	222a      	movs	r2, #42	; 0x2a
10003f60:	5c9b      	ldrb	r3, [r3, r2]
10003f62:	2b00      	cmp	r3, #0
10003f64:	d00c      	beq.n	10003f80 <PWM_CCU8_lConfigure_Events+0x90>
  {
    XMC_CCU8_SLICE_StopConfig(handle_ptr->ccu8_slice_ptr, handle_ptr->config_ptr->ext_stop_event,
10003f66:	687b      	ldr	r3, [r7, #4]
10003f68:	6898      	ldr	r0, [r3, #8]
10003f6a:	687b      	ldr	r3, [r7, #4]
10003f6c:	681b      	ldr	r3, [r3, #0]
10003f6e:	222a      	movs	r2, #42	; 0x2a
10003f70:	5c99      	ldrb	r1, [r3, r2]
                              handle_ptr->config_ptr->ext_stop_mode);
10003f72:	687b      	ldr	r3, [r7, #4]
10003f74:	681b      	ldr	r3, [r3, #0]
  }

  /* External signal can stop the timer */
  if (XMC_CCU8_SLICE_EVENT_NONE != handle_ptr->config_ptr->ext_stop_event)
  {
    XMC_CCU8_SLICE_StopConfig(handle_ptr->ccu8_slice_ptr, handle_ptr->config_ptr->ext_stop_event,
10003f76:	222b      	movs	r2, #43	; 0x2b
10003f78:	5c9b      	ldrb	r3, [r3, r2]
10003f7a:	1c1a      	adds	r2, r3, #0
10003f7c:	f7fd feea 	bl	10001d54 <XMC_CCU8_SLICE_StopConfig>
                              handle_ptr->config_ptr->ext_stop_mode);
  }

  /* External signal can change the timer counting direction */
  if (XMC_CCU8_SLICE_EVENT_NONE != handle_ptr->config_ptr->ext_count_dir_event)
10003f80:	687b      	ldr	r3, [r7, #4]
10003f82:	681b      	ldr	r3, [r3, #0]
10003f84:	222c      	movs	r2, #44	; 0x2c
10003f86:	5c9b      	ldrb	r3, [r3, r2]
10003f88:	2b00      	cmp	r3, #0
10003f8a:	d009      	beq.n	10003fa0 <PWM_CCU8_lConfigure_Events+0xb0>
  {
    XMC_CCU8_SLICE_DirectionConfig(handle_ptr->ccu8_slice_ptr, handle_ptr->config_ptr->ext_count_dir_event);
10003f8c:	687b      	ldr	r3, [r7, #4]
10003f8e:	6899      	ldr	r1, [r3, #8]
10003f90:	687b      	ldr	r3, [r7, #4]
10003f92:	681b      	ldr	r3, [r3, #0]
10003f94:	222c      	movs	r2, #44	; 0x2c
10003f96:	5c9b      	ldrb	r3, [r3, r2]
10003f98:	1c08      	adds	r0, r1, #0
10003f9a:	1c19      	adds	r1, r3, #0
10003f9c:	f7fd ffd2 	bl	10001f44 <XMC_CCU8_SLICE_DirectionConfig>
  }
  /* External signal can stop the timer and the timer value remains same */
  if (XMC_CCU8_SLICE_EVENT_NONE != handle_ptr->config_ptr->ext_gate_event)
10003fa0:	687b      	ldr	r3, [r7, #4]
10003fa2:	681b      	ldr	r3, [r3, #0]
10003fa4:	222d      	movs	r2, #45	; 0x2d
10003fa6:	5c9b      	ldrb	r3, [r3, r2]
10003fa8:	2b00      	cmp	r3, #0
10003faa:	d009      	beq.n	10003fc0 <PWM_CCU8_lConfigure_Events+0xd0>
  {
    XMC_CCU8_SLICE_GateConfig(handle_ptr->ccu8_slice_ptr, handle_ptr->config_ptr->ext_gate_event);
10003fac:	687b      	ldr	r3, [r7, #4]
10003fae:	6899      	ldr	r1, [r3, #8]
10003fb0:	687b      	ldr	r3, [r7, #4]
10003fb2:	681b      	ldr	r3, [r3, #0]
10003fb4:	222d      	movs	r2, #45	; 0x2d
10003fb6:	5c9b      	ldrb	r3, [r3, r2]
10003fb8:	1c08      	adds	r0, r1, #0
10003fba:	1c19      	adds	r1, r3, #0
10003fbc:	f7fd ffa6 	bl	10001f0c <XMC_CCU8_SLICE_GateConfig>
  }
  /* Timer increments on external signal */
  if (XMC_CCU8_SLICE_EVENT_NONE != handle_ptr->config_ptr->ext_count_event)
10003fc0:	687b      	ldr	r3, [r7, #4]
10003fc2:	681b      	ldr	r3, [r3, #0]
10003fc4:	222e      	movs	r2, #46	; 0x2e
10003fc6:	5c9b      	ldrb	r3, [r3, r2]
10003fc8:	2b00      	cmp	r3, #0
10003fca:	d009      	beq.n	10003fe0 <PWM_CCU8_lConfigure_Events+0xf0>
  {
    XMC_CCU8_SLICE_CountConfig(handle_ptr->ccu8_slice_ptr, handle_ptr->config_ptr->ext_count_event);
10003fcc:	687b      	ldr	r3, [r7, #4]
10003fce:	6899      	ldr	r1, [r3, #8]
10003fd0:	687b      	ldr	r3, [r7, #4]
10003fd2:	681b      	ldr	r3, [r3, #0]
10003fd4:	222e      	movs	r2, #46	; 0x2e
10003fd6:	5c9b      	ldrb	r3, [r3, r2]
10003fd8:	1c08      	adds	r0, r1, #0
10003fda:	1c19      	adds	r1, r3, #0
10003fdc:	f7fd ff7a 	bl	10001ed4 <XMC_CCU8_SLICE_CountConfig>
  }
  /* Timer gets loaded with compare register value or period register value on external signal */
  if (XMC_CCU8_SLICE_EVENT_NONE != handle_ptr->config_ptr->ext_load_event)
10003fe0:	687b      	ldr	r3, [r7, #4]
10003fe2:	681b      	ldr	r3, [r3, #0]
10003fe4:	222f      	movs	r2, #47	; 0x2f
10003fe6:	5c9b      	ldrb	r3, [r3, r2]
10003fe8:	2b00      	cmp	r3, #0
10003fea:	d013      	beq.n	10004014 <PWM_CCU8_lConfigure_Events+0x124>
  {
    XMC_CCU8_SLICE_LoadConfig(handle_ptr->ccu8_slice_ptr, handle_ptr->config_ptr->ext_load_event);
10003fec:	687b      	ldr	r3, [r7, #4]
10003fee:	6899      	ldr	r1, [r3, #8]
10003ff0:	687b      	ldr	r3, [r7, #4]
10003ff2:	681b      	ldr	r3, [r3, #0]
10003ff4:	222f      	movs	r2, #47	; 0x2f
10003ff6:	5c9b      	ldrb	r3, [r3, r2]
10003ff8:	1c08      	adds	r0, r1, #0
10003ffa:	1c19      	adds	r1, r3, #0
10003ffc:	f7fd fedc 	bl	10001db8 <XMC_CCU8_SLICE_LoadConfig>
    XMC_CCU8_SLICE_LoadSelector(handle_ptr->ccu8_slice_ptr, handle_ptr->config_ptr->ext_load_selector);
10004000:	687b      	ldr	r3, [r7, #4]
10004002:	6899      	ldr	r1, [r3, #8]
10004004:	687b      	ldr	r3, [r7, #4]
10004006:	681b      	ldr	r3, [r3, #0]
10004008:	2230      	movs	r2, #48	; 0x30
1000400a:	5c9b      	ldrb	r3, [r3, r2]
1000400c:	1c08      	adds	r0, r1, #0
1000400e:	1c19      	adds	r1, r3, #0
10004010:	f7fd feee 	bl	10001df0 <XMC_CCU8_SLICE_LoadSelector>
  }
  /* External signal PWM signal (ST bit) output gets modulated by external signal */
  if (XMC_CCU8_SLICE_EVENT_NONE != handle_ptr->config_ptr->ext_mod_event)
10004014:	687b      	ldr	r3, [r7, #4]
10004016:	681b      	ldr	r3, [r3, #0]
10004018:	2231      	movs	r2, #49	; 0x31
1000401a:	5c9b      	ldrb	r3, [r3, r2]
1000401c:	2b00      	cmp	r3, #0
1000401e:	d012      	beq.n	10004046 <PWM_CCU8_lConfigure_Events+0x156>
  {
    XMC_CCU8_SLICE_ModulationConfig(handle_ptr->ccu8_slice_ptr, handle_ptr->config_ptr->ext_mod_event,
10004020:	687b      	ldr	r3, [r7, #4]
10004022:	6898      	ldr	r0, [r3, #8]
10004024:	687b      	ldr	r3, [r7, #4]
10004026:	681b      	ldr	r3, [r3, #0]
10004028:	2231      	movs	r2, #49	; 0x31
1000402a:	5c99      	ldrb	r1, [r3, r2]
                                    handle_ptr->config_ptr->ext_mod_mode, XMC_CCU8_SLICE_MODULATION_CHANNEL_1_AND_2,
1000402c:	687b      	ldr	r3, [r7, #4]
1000402e:	681b      	ldr	r3, [r3, #0]
    XMC_CCU8_SLICE_LoadSelector(handle_ptr->ccu8_slice_ptr, handle_ptr->config_ptr->ext_load_selector);
  }
  /* External signal PWM signal (ST bit) output gets modulated by external signal */
  if (XMC_CCU8_SLICE_EVENT_NONE != handle_ptr->config_ptr->ext_mod_event)
  {
    XMC_CCU8_SLICE_ModulationConfig(handle_ptr->ccu8_slice_ptr, handle_ptr->config_ptr->ext_mod_event,
10004030:	2232      	movs	r2, #50	; 0x32
10004032:	5c9c      	ldrb	r4, [r3, r2]
                                    handle_ptr->config_ptr->ext_mod_mode, XMC_CCU8_SLICE_MODULATION_CHANNEL_1_AND_2,
                                    handle_ptr->config_ptr->ext_mod_sync);
10004034:	687b      	ldr	r3, [r7, #4]
10004036:	681b      	ldr	r3, [r3, #0]
    XMC_CCU8_SLICE_LoadSelector(handle_ptr->ccu8_slice_ptr, handle_ptr->config_ptr->ext_load_selector);
  }
  /* External signal PWM signal (ST bit) output gets modulated by external signal */
  if (XMC_CCU8_SLICE_EVENT_NONE != handle_ptr->config_ptr->ext_mod_event)
  {
    XMC_CCU8_SLICE_ModulationConfig(handle_ptr->ccu8_slice_ptr, handle_ptr->config_ptr->ext_mod_event,
10004038:	2233      	movs	r2, #51	; 0x33
1000403a:	5c9b      	ldrb	r3, [r3, r2]
1000403c:	9300      	str	r3, [sp, #0]
1000403e:	1c22      	adds	r2, r4, #0
10004040:	2303      	movs	r3, #3
10004042:	f7fd feef 	bl	10001e24 <XMC_CCU8_SLICE_ModulationConfig>
                                    handle_ptr->config_ptr->ext_mod_mode, XMC_CCU8_SLICE_MODULATION_CHANNEL_1_AND_2,
                                    handle_ptr->config_ptr->ext_mod_sync);
  }

  /* PWM signal (ST bit) output gets modulated by external signal */
  if (XMC_CCU8_SLICE_EVENT_2 == handle_ptr->config_ptr->ext_trap_event)
10004046:	687b      	ldr	r3, [r7, #4]
10004048:	681b      	ldr	r3, [r3, #0]
1000404a:	2237      	movs	r2, #55	; 0x37
1000404c:	5c9b      	ldrb	r3, [r3, r2]
1000404e:	2b03      	cmp	r3, #3
10004050:	d118      	bne.n	10004084 <PWM_CCU8_lConfigure_Events+0x194>
  {
    XMC_CCU8_SLICE_TrapConfig(handle_ptr->ccu8_slice_ptr, handle_ptr->config_ptr->ext_trap_exit,
10004052:	687b      	ldr	r3, [r7, #4]
10004054:	6898      	ldr	r0, [r3, #8]
10004056:	687b      	ldr	r3, [r7, #4]
10004058:	681b      	ldr	r3, [r3, #0]
1000405a:	2239      	movs	r2, #57	; 0x39
1000405c:	5c99      	ldrb	r1, [r3, r2]
                              handle_ptr->config_ptr->ext_trap_sync);
1000405e:	687b      	ldr	r3, [r7, #4]
10004060:	681b      	ldr	r3, [r3, #0]
  }

  /* PWM signal (ST bit) output gets modulated by external signal */
  if (XMC_CCU8_SLICE_EVENT_2 == handle_ptr->config_ptr->ext_trap_event)
  {
    XMC_CCU8_SLICE_TrapConfig(handle_ptr->ccu8_slice_ptr, handle_ptr->config_ptr->ext_trap_exit,
10004062:	2238      	movs	r2, #56	; 0x38
10004064:	5c9b      	ldrb	r3, [r3, r2]
10004066:	1c1a      	adds	r2, r3, #0
10004068:	f7fd ffa0 	bl	10001fac <XMC_CCU8_SLICE_TrapConfig>
                              handle_ptr->config_ptr->ext_trap_sync);
    if ((bool) true == handle_ptr->config_ptr->ext_trap_enable)
1000406c:	687b      	ldr	r3, [r7, #4]
1000406e:	681b      	ldr	r3, [r3, #0]
10004070:	2236      	movs	r2, #54	; 0x36
10004072:	5c9b      	ldrb	r3, [r3, r2]
10004074:	2b00      	cmp	r3, #0
10004076:	d005      	beq.n	10004084 <PWM_CCU8_lConfigure_Events+0x194>
    {
      XMC_CCU8_SLICE_EnableTrap(
10004078:	687b      	ldr	r3, [r7, #4]
1000407a:	689b      	ldr	r3, [r3, #8]
1000407c:	1c18      	adds	r0, r3, #0
1000407e:	210f      	movs	r1, #15
10004080:	f7ff fce0 	bl	10003a44 <XMC_CCU8_SLICE_EnableTrap>
          (uint32_t)(XMC_CCU8_SLICE_OUTPUT_0 | XMC_CCU8_SLICE_OUTPUT_1 | XMC_CCU8_SLICE_OUTPUT_2 | XMC_CCU8_SLICE_OUTPUT_3)
		  );
    }
  }

  if ((XMC_CCU8_SLICE_EVENT_NONE != handle_ptr->config_ptr->ext_override_edge_event) || (XMC_CCU8_SLICE_EVENT_NONE
10004084:	687b      	ldr	r3, [r7, #4]
10004086:	681b      	ldr	r3, [r3, #0]
10004088:	2234      	movs	r2, #52	; 0x34
1000408a:	5c9b      	ldrb	r3, [r3, r2]
1000408c:	2b00      	cmp	r3, #0
1000408e:	d105      	bne.n	1000409c <PWM_CCU8_lConfigure_Events+0x1ac>
      != handle_ptr->config_ptr->ext_override_level_event))
10004090:	687b      	ldr	r3, [r7, #4]
10004092:	681b      	ldr	r3, [r3, #0]
10004094:	2235      	movs	r2, #53	; 0x35
10004096:	5c9b      	ldrb	r3, [r3, r2]
          (uint32_t)(XMC_CCU8_SLICE_OUTPUT_0 | XMC_CCU8_SLICE_OUTPUT_1 | XMC_CCU8_SLICE_OUTPUT_2 | XMC_CCU8_SLICE_OUTPUT_3)
		  );
    }
  }

  if ((XMC_CCU8_SLICE_EVENT_NONE != handle_ptr->config_ptr->ext_override_edge_event) || (XMC_CCU8_SLICE_EVENT_NONE
10004098:	2b00      	cmp	r3, #0
1000409a:	d011      	beq.n	100040c0 <PWM_CCU8_lConfigure_Events+0x1d0>
      != handle_ptr->config_ptr->ext_override_level_event))
  {
    XMC_CCU8_SLICE_ConfigureStatusBitOverrideEvent(handle_ptr->ccu8_slice_ptr,
1000409c:	687b      	ldr	r3, [r7, #4]
1000409e:	6899      	ldr	r1, [r3, #8]
                                                   handle_ptr->config_ptr->event1_config_ptr,
100040a0:	687b      	ldr	r3, [r7, #4]
100040a2:	681b      	ldr	r3, [r3, #0]
  }

  if ((XMC_CCU8_SLICE_EVENT_NONE != handle_ptr->config_ptr->ext_override_edge_event) || (XMC_CCU8_SLICE_EVENT_NONE
      != handle_ptr->config_ptr->ext_override_level_event))
  {
    XMC_CCU8_SLICE_ConfigureStatusBitOverrideEvent(handle_ptr->ccu8_slice_ptr,
100040a4:	6a1a      	ldr	r2, [r3, #32]
                                                   handle_ptr->config_ptr->event1_config_ptr,
                                                   handle_ptr->config_ptr->event2_config_ptr);
100040a6:	687b      	ldr	r3, [r7, #4]
100040a8:	681b      	ldr	r3, [r3, #0]
  }

  if ((XMC_CCU8_SLICE_EVENT_NONE != handle_ptr->config_ptr->ext_override_edge_event) || (XMC_CCU8_SLICE_EVENT_NONE
      != handle_ptr->config_ptr->ext_override_level_event))
  {
    XMC_CCU8_SLICE_ConfigureStatusBitOverrideEvent(handle_ptr->ccu8_slice_ptr,
100040aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100040ac:	1c08      	adds	r0, r1, #0
100040ae:	1c11      	adds	r1, r2, #0
100040b0:	1c1a      	adds	r2, r3, #0
100040b2:	f7fd ffc1 	bl	10002038 <XMC_CCU8_SLICE_ConfigureStatusBitOverrideEvent>
                                                   handle_ptr->config_ptr->event1_config_ptr,
                                                   handle_ptr->config_ptr->event2_config_ptr);
    XMC_CCU8_SLICE_StatusBitOverrideConfig(handle_ptr->ccu8_slice_ptr);
100040b6:	687b      	ldr	r3, [r7, #4]
100040b8:	689b      	ldr	r3, [r3, #8]
100040ba:	1c18      	adds	r0, r3, #0
100040bc:	f7fd ff5e 	bl	10001f7c <XMC_CCU8_SLICE_StatusBitOverrideConfig>
  }

}
100040c0:	46bd      	mov	sp, r7
100040c2:	b003      	add	sp, #12
100040c4:	bd90      	pop	{r4, r7, pc}
100040c6:	46c0      	nop			; (mov r8, r8)

100040c8 <PWM_CCU8_Start>:
/**********************************************************************************************************/
/*Starts the CCU8_CC8 slice. This needs to be called even if external start is configured.*/
PWM_CCU8_STATUS_t PWM_CCU8_Start(PWM_CCU8_t* handle_ptr)
{
100040c8:	b580      	push	{r7, lr}
100040ca:	b084      	sub	sp, #16
100040cc:	af00      	add	r7, sp, #0
100040ce:	6078      	str	r0, [r7, #4]
  PWM_CCU8_STATUS_t status;

  status = PWM_CCU8_STATUS_FAILURE;
100040d0:	230f      	movs	r3, #15
100040d2:	18fb      	adds	r3, r7, r3
100040d4:	2201      	movs	r2, #1
100040d6:	701a      	strb	r2, [r3, #0]
  XMC_ASSERT("PWM_CCU8_Start:handle_ptr NULL", (handle_ptr != NULL));
  if ((PWM_CCU8_STATE_INITIALIZED == handle_ptr->state) || (PWM_CCU8_STATE_STOPPED == handle_ptr->state))
100040d8:	687b      	ldr	r3, [r7, #4]
100040da:	7f1b      	ldrb	r3, [r3, #28]
100040dc:	2b01      	cmp	r3, #1
100040de:	d003      	beq.n	100040e8 <PWM_CCU8_Start+0x20>
100040e0:	687b      	ldr	r3, [r7, #4]
100040e2:	7f1b      	ldrb	r3, [r3, #28]
100040e4:	2b03      	cmp	r3, #3
100040e6:	d119      	bne.n	1000411c <PWM_CCU8_Start+0x54>
  {
    /* clear IDLE mode for the slice; Start timer */
    XMC_CCU8_EnableClock(handle_ptr->ccu8_module_ptr, handle_ptr->slice_number);
100040e8:	687b      	ldr	r3, [r7, #4]
100040ea:	685a      	ldr	r2, [r3, #4]
100040ec:	687b      	ldr	r3, [r7, #4]
100040ee:	7b5b      	ldrb	r3, [r3, #13]
100040f0:	1c10      	adds	r0, r2, #0
100040f2:	1c19      	adds	r1, r3, #0
100040f4:	f7ff fc92 	bl	10003a1c <XMC_CCU8_EnableClock>

    if (XMC_CCU8_SLICE_EVENT_NONE == handle_ptr->config_ptr->ext_start_event)
100040f8:	687b      	ldr	r3, [r7, #4]
100040fa:	681b      	ldr	r3, [r3, #0]
100040fc:	2228      	movs	r2, #40	; 0x28
100040fe:	5c9b      	ldrb	r3, [r3, r2]
10004100:	2b00      	cmp	r3, #0
10004102:	d104      	bne.n	1000410e <PWM_CCU8_Start+0x46>
    {
      XMC_CCU8_SLICE_StartTimer(handle_ptr->ccu8_slice_ptr);
10004104:	687b      	ldr	r3, [r7, #4]
10004106:	689b      	ldr	r3, [r3, #8]
10004108:	1c18      	adds	r0, r3, #0
1000410a:	f7ff fcab 	bl	10003a64 <XMC_CCU8_SLICE_StartTimer>
    }

    handle_ptr->state = PWM_CCU8_STATE_RUNNING;
1000410e:	687b      	ldr	r3, [r7, #4]
10004110:	2202      	movs	r2, #2
10004112:	771a      	strb	r2, [r3, #28]
    status = PWM_CCU8_STATUS_SUCCESS;
10004114:	230f      	movs	r3, #15
10004116:	18fb      	adds	r3, r7, r3
10004118:	2200      	movs	r2, #0
1000411a:	701a      	strb	r2, [r3, #0]
    XMC_DEBUG("PWM_CCU8_Start:start PWM");
  }
  return (status);
1000411c:	230f      	movs	r3, #15
1000411e:	18fb      	adds	r3, r7, r3
10004120:	781b      	ldrb	r3, [r3, #0]
} /* end of PWM_CCU8_Start() api */
10004122:	1c18      	adds	r0, r3, #0
10004124:	46bd      	mov	sp, r7
10004126:	b004      	add	sp, #16
10004128:	bd80      	pop	{r7, pc}
1000412a:	46c0      	nop			; (mov r8, r8)

1000412c <PWM_CCU8_Stop>:
/**********************************************************************************************************/
/*Stops the CCU8_CC8 slice. */
PWM_CCU8_STATUS_t PWM_CCU8_Stop(PWM_CCU8_t* handle_ptr)
{
1000412c:	b580      	push	{r7, lr}
1000412e:	b084      	sub	sp, #16
10004130:	af00      	add	r7, sp, #0
10004132:	6078      	str	r0, [r7, #4]
  PWM_CCU8_STATUS_t status;

  status = PWM_CCU8_STATUS_FAILURE;
10004134:	230f      	movs	r3, #15
10004136:	18fb      	adds	r3, r7, r3
10004138:	2201      	movs	r2, #1
1000413a:	701a      	strb	r2, [r3, #0]
  XMC_ASSERT("PWM_CCU8_Stop:handle_ptr NULL", (handle_ptr != NULL));
  if (PWM_CCU8_STATE_UNINITIALIZED != handle_ptr->state)
1000413c:	687b      	ldr	r3, [r7, #4]
1000413e:	7f1b      	ldrb	r3, [r3, #28]
10004140:	2b00      	cmp	r3, #0
10004142:	d010      	beq.n	10004166 <PWM_CCU8_Stop+0x3a>
  {
    XMC_CCU8_SLICE_StopTimer(handle_ptr->ccu8_slice_ptr);
10004144:	687b      	ldr	r3, [r7, #4]
10004146:	689b      	ldr	r3, [r3, #8]
10004148:	1c18      	adds	r0, r3, #0
1000414a:	f7ff fc95 	bl	10003a78 <XMC_CCU8_SLICE_StopTimer>
    XMC_CCU8_SLICE_ClearTimer(handle_ptr->ccu8_slice_ptr);
1000414e:	687b      	ldr	r3, [r7, #4]
10004150:	689b      	ldr	r3, [r3, #8]
10004152:	1c18      	adds	r0, r3, #0
10004154:	f7ff fc9a 	bl	10003a8c <XMC_CCU8_SLICE_ClearTimer>

    handle_ptr->state = PWM_CCU8_STATE_STOPPED;
10004158:	687b      	ldr	r3, [r7, #4]
1000415a:	2203      	movs	r2, #3
1000415c:	771a      	strb	r2, [r3, #28]
    status = PWM_CCU8_STATUS_SUCCESS;
1000415e:	230f      	movs	r3, #15
10004160:	18fb      	adds	r3, r7, r3
10004162:	2200      	movs	r2, #0
10004164:	701a      	strb	r2, [r3, #0]
    XMC_DEBUG("PWM_CCU8_Stop:stop PWM");
  }
  return (status);
10004166:	230f      	movs	r3, #15
10004168:	18fb      	adds	r3, r7, r3
1000416a:	781b      	ldrb	r3, [r3, #0]

} /* end of PWM_CCU8_Stop() api */
1000416c:	1c18      	adds	r0, r3, #0
1000416e:	46bd      	mov	sp, r7
10004170:	b004      	add	sp, #16
10004172:	bd80      	pop	{r7, pc}

10004174 <PWM_CCU8_SetFreqSymmetric>:
} /* end of PWM_CCU8_GetStatus() api */
/**********************************************************************************************************/

/*Sets the frequency for CCU8_CC8 slice Symmetric Mode. */
PWM_CCU8_STATUS_t PWM_CCU8_SetFreqSymmetric(PWM_CCU8_t* handle_ptr, uint32_t pwm_freq_hz)
{
10004174:	b580      	push	{r7, lr}
10004176:	b088      	sub	sp, #32
10004178:	af00      	add	r7, sp, #0
1000417a:	6078      	str	r0, [r7, #4]
1000417c:	6039      	str	r1, [r7, #0]
  uint32_t duty_ch1;
  uint32_t duty_ch2;
  uint16_t compare_ch1;
  uint16_t compare_ch2;

  status = PWM_CCU8_STATUS_FAILURE;
1000417e:	231f      	movs	r3, #31
10004180:	18fb      	adds	r3, r7, r3
10004182:	2201      	movs	r2, #1
10004184:	701a      	strb	r2, [r3, #0]
  frequency_tclk = 0U;
10004186:	2300      	movs	r3, #0
10004188:	617b      	str	r3, [r7, #20]
  XMC_ASSERT("PWM_CCU8_SetFreqSymmetric:handle_ptr NULL", (handle_ptr != NULL));
  if (PWM_CCU8_STATE_UNINITIALIZED != handle_ptr->state)
1000418a:	687b      	ldr	r3, [r7, #4]
1000418c:	7f1b      	ldrb	r3, [r3, #28]
1000418e:	2b00      	cmp	r3, #0
10004190:	d074      	beq.n	1000427c <PWM_CCU8_SetFreqSymmetric+0x108>
  {
    if (0U == pwm_freq_hz)
10004192:	683b      	ldr	r3, [r7, #0]
10004194:	2b00      	cmp	r3, #0
10004196:	d071      	beq.n	1000427c <PWM_CCU8_SetFreqSymmetric+0x108>
    {
      XMC_DEBUG("PWM_CCU8_SetPwmFreq:cannot set frequency 0Hz");
    }
    else
    {
      frequency_tclk = handle_ptr->frequency_tclk;
10004198:	687b      	ldr	r3, [r7, #4]
1000419a:	6a1b      	ldr	r3, [r3, #32]
1000419c:	617b      	str	r3, [r7, #20]
      period = frequency_tclk / pwm_freq_hz;
1000419e:	6978      	ldr	r0, [r7, #20]
100041a0:	6839      	ldr	r1, [r7, #0]
100041a2:	f7fe f8f9 	bl	10002398 <__aeabi_uidiv>
100041a6:	1c03      	adds	r3, r0, #0
100041a8:	61bb      	str	r3, [r7, #24]

      if ((uint32_t) XMC_CCU8_SLICE_TIMER_COUNT_MODE_CA == handle_ptr->config_ptr->ccu8_cc8_slice_timer_ptr->timer_mode)
100041aa:	687b      	ldr	r3, [r7, #4]
100041ac:	681b      	ldr	r3, [r3, #0]
100041ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
100041b0:	781b      	ldrb	r3, [r3, #0]
100041b2:	2201      	movs	r2, #1
100041b4:	4013      	ands	r3, r2
100041b6:	b2db      	uxtb	r3, r3
100041b8:	2b00      	cmp	r3, #0
100041ba:	d002      	beq.n	100041c2 <PWM_CCU8_SetFreqSymmetric+0x4e>
      {
        period = period >> 1U;/*divide by 2*/
100041bc:	69bb      	ldr	r3, [r7, #24]
100041be:	085b      	lsrs	r3, r3, #1
100041c0:	61bb      	str	r3, [r7, #24]
      }

      if ((period != 0U) && (period <= PWM_CCU8_MAX_TIMER_COUNT))
100041c2:	69bb      	ldr	r3, [r7, #24]
100041c4:	2b00      	cmp	r3, #0
100041c6:	d059      	beq.n	1000427c <PWM_CCU8_SetFreqSymmetric+0x108>
100041c8:	69bb      	ldr	r3, [r7, #24]
100041ca:	4a30      	ldr	r2, [pc, #192]	; (1000428c <PWM_CCU8_SetFreqSymmetric+0x118>)
100041cc:	4293      	cmp	r3, r2
100041ce:	d855      	bhi.n	1000427c <PWM_CCU8_SetFreqSymmetric+0x108>
      {
        /*Calculate the current duty cycle in no-timer concatenation mode*/
        duty_ch1 = handle_ptr->sym_duty1;
100041d0:	687b      	ldr	r3, [r7, #4]
100041d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100041d4:	613b      	str	r3, [r7, #16]
        duty_ch2 = handle_ptr->sym_duty2;
100041d6:	687b      	ldr	r3, [r7, #4]
100041d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
100041da:	60fb      	str	r3, [r7, #12]

        duty_ch1 = (PWM_CCU8_DUTY_FULL_SCALE - duty_ch1);
100041dc:	693b      	ldr	r3, [r7, #16]
100041de:	4a2c      	ldr	r2, [pc, #176]	; (10004290 <PWM_CCU8_SetFreqSymmetric+0x11c>)
100041e0:	1ad3      	subs	r3, r2, r3
100041e2:	613b      	str	r3, [r7, #16]
        duty_ch1 = duty_ch1 * period;
100041e4:	693b      	ldr	r3, [r7, #16]
100041e6:	69ba      	ldr	r2, [r7, #24]
100041e8:	4353      	muls	r3, r2
100041ea:	613b      	str	r3, [r7, #16]
        duty_ch1 = duty_ch1 / PWM_CCU8_DUTY_FULL_SCALE;
100041ec:	693b      	ldr	r3, [r7, #16]
100041ee:	1c18      	adds	r0, r3, #0
100041f0:	4927      	ldr	r1, [pc, #156]	; (10004290 <PWM_CCU8_SetFreqSymmetric+0x11c>)
100041f2:	f7fe f8d1 	bl	10002398 <__aeabi_uidiv>
100041f6:	1c03      	adds	r3, r0, #0
100041f8:	613b      	str	r3, [r7, #16]

        duty_ch2 = (PWM_CCU8_DUTY_FULL_SCALE - duty_ch2);
100041fa:	68fb      	ldr	r3, [r7, #12]
100041fc:	4a24      	ldr	r2, [pc, #144]	; (10004290 <PWM_CCU8_SetFreqSymmetric+0x11c>)
100041fe:	1ad3      	subs	r3, r2, r3
10004200:	60fb      	str	r3, [r7, #12]
        duty_ch2 = duty_ch2 * period;
10004202:	68fb      	ldr	r3, [r7, #12]
10004204:	69ba      	ldr	r2, [r7, #24]
10004206:	4353      	muls	r3, r2
10004208:	60fb      	str	r3, [r7, #12]
        duty_ch2 = duty_ch2 / PWM_CCU8_DUTY_FULL_SCALE;
1000420a:	68fb      	ldr	r3, [r7, #12]
1000420c:	1c18      	adds	r0, r3, #0
1000420e:	4920      	ldr	r1, [pc, #128]	; (10004290 <PWM_CCU8_SetFreqSymmetric+0x11c>)
10004210:	f7fe f8c2 	bl	10002398 <__aeabi_uidiv>
10004214:	1c03      	adds	r3, r0, #0
10004216:	60fb      	str	r3, [r7, #12]

        compare_ch1 = (uint16_t) duty_ch1;
10004218:	230a      	movs	r3, #10
1000421a:	18fb      	adds	r3, r7, r3
1000421c:	693a      	ldr	r2, [r7, #16]
1000421e:	801a      	strh	r2, [r3, #0]
        compare_ch2 = (uint16_t) duty_ch2;
10004220:	2308      	movs	r3, #8
10004222:	18fb      	adds	r3, r7, r3
10004224:	68fa      	ldr	r2, [r7, #12]
10004226:	801a      	strh	r2, [r3, #0]

        XMC_CCU8_SLICE_SetTimerPeriodMatch(handle_ptr->ccu8_slice_ptr, (uint16_t)(period - 1U));
10004228:	687b      	ldr	r3, [r7, #4]
1000422a:	689a      	ldr	r2, [r3, #8]
1000422c:	69bb      	ldr	r3, [r7, #24]
1000422e:	b29b      	uxth	r3, r3
10004230:	3b01      	subs	r3, #1
10004232:	b29b      	uxth	r3, r3
10004234:	1c10      	adds	r0, r2, #0
10004236:	1c19      	adds	r1, r3, #0
10004238:	f7fd fffa 	bl	10002230 <XMC_CCU8_SLICE_SetTimerPeriodMatch>
        XMC_CCU8_SLICE_SetTimerCompareMatch(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_COMPARE_CHANNEL_1, compare_ch1);
1000423c:	687b      	ldr	r3, [r7, #4]
1000423e:	689a      	ldr	r2, [r3, #8]
10004240:	230a      	movs	r3, #10
10004242:	18fb      	adds	r3, r7, r3
10004244:	881b      	ldrh	r3, [r3, #0]
10004246:	1c10      	adds	r0, r2, #0
10004248:	2100      	movs	r1, #0
1000424a:	1c1a      	adds	r2, r3, #0
1000424c:	f7fd fffe 	bl	1000224c <XMC_CCU8_SLICE_SetTimerCompareMatch>
        XMC_CCU8_SLICE_SetTimerCompareMatch(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_COMPARE_CHANNEL_2, compare_ch2);
10004250:	687b      	ldr	r3, [r7, #4]
10004252:	689a      	ldr	r2, [r3, #8]
10004254:	2308      	movs	r3, #8
10004256:	18fb      	adds	r3, r7, r3
10004258:	881b      	ldrh	r3, [r3, #0]
1000425a:	1c10      	adds	r0, r2, #0
1000425c:	2101      	movs	r1, #1
1000425e:	1c1a      	adds	r2, r3, #0
10004260:	f7fd fff4 	bl	1000224c <XMC_CCU8_SLICE_SetTimerCompareMatch>
        XMC_CCU8_EnableShadowTransfer(handle_ptr->ccu8_module_ptr, handle_ptr->shadow_txfr_msk);
10004264:	687b      	ldr	r3, [r7, #4]
10004266:	685a      	ldr	r2, [r3, #4]
10004268:	687b      	ldr	r3, [r7, #4]
1000426a:	691b      	ldr	r3, [r3, #16]
1000426c:	1c10      	adds	r0, r2, #0
1000426e:	1c19      	adds	r1, r3, #0
10004270:	f7ff fc16 	bl	10003aa0 <XMC_CCU8_EnableShadowTransfer>
        XMC_DEBUG("PWM_CCU8_SetPwmFreq:frequency set");
        status = PWM_CCU8_STATUS_SUCCESS;
10004274:	231f      	movs	r3, #31
10004276:	18fb      	adds	r3, r7, r3
10004278:	2200      	movs	r2, #0
1000427a:	701a      	strb	r2, [r3, #0]
      }
    }
  }
  return (status);
1000427c:	231f      	movs	r3, #31
1000427e:	18fb      	adds	r3, r7, r3
10004280:	781b      	ldrb	r3, [r3, #0]

} /* end of PWM_CCU8_SetFreqSymmetric() api */
10004282:	1c18      	adds	r0, r3, #0
10004284:	46bd      	mov	sp, r7
10004286:	b008      	add	sp, #32
10004288:	bd80      	pop	{r7, pc}
1000428a:	46c0      	nop			; (mov r8, r8)
1000428c:	0000ffff 	.word	0x0000ffff
10004290:	00002710 	.word	0x00002710

10004294 <XMC_CCU4_EnableClock>:
 *
 * \par<b>Related APIs:</b><br>
 * XMC_CCU4_DisableClock()<BR> XMC_CCU4_EnableMultipleClocks()<BR> XMC_CCU4_StartPrescaler()<BR> XMC_CCU4_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU4_EnableClock(XMC_CCU4_MODULE_t *const module, const uint8_t slice_number)
{
10004294:	b580      	push	{r7, lr}
10004296:	b082      	sub	sp, #8
10004298:	af00      	add	r7, sp, #0
1000429a:	6078      	str	r0, [r7, #4]
1000429c:	1c0a      	adds	r2, r1, #0
1000429e:	1cfb      	adds	r3, r7, #3
100042a0:	701a      	strb	r2, [r3, #0]
  XMC_ASSERT("XMC_CCU4_EnableClock:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
  XMC_ASSERT("XMC_CCU4_EnableClock:Invalid Slice Number", (slice_number < 4U));

  module->GIDLC |= ((uint32_t) 1) << slice_number;
100042a2:	687b      	ldr	r3, [r7, #4]
100042a4:	68da      	ldr	r2, [r3, #12]
100042a6:	1cfb      	adds	r3, r7, #3
100042a8:	781b      	ldrb	r3, [r3, #0]
100042aa:	2101      	movs	r1, #1
100042ac:	4099      	lsls	r1, r3
100042ae:	1c0b      	adds	r3, r1, #0
100042b0:	431a      	orrs	r2, r3
100042b2:	687b      	ldr	r3, [r7, #4]
100042b4:	60da      	str	r2, [r3, #12]
}
100042b6:	46bd      	mov	sp, r7
100042b8:	b002      	add	sp, #8
100042ba:	bd80      	pop	{r7, pc}

100042bc <XMC_CCU4_SLICE_EnableTrap>:
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_TrapConfig()<BR> XMC_CCU4_SLICE_DisableTrap()<BR> XMC_CCU4_SLICE_ConfigureEvent()<BR>
 *  XMC_CCU4_SLICE_SetInput().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_EnableTrap(XMC_CCU4_SLICE_t *const slice)
{
100042bc:	b580      	push	{r7, lr}
100042be:	b082      	sub	sp, #8
100042c0:	af00      	add	r7, sp, #0
100042c2:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_SLICE_EnableTrap:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->TC |= (uint32_t) CCU4_CC4_TC_TRAPE_Msk;
100042c4:	687b      	ldr	r3, [r7, #4]
100042c6:	695b      	ldr	r3, [r3, #20]
100042c8:	2280      	movs	r2, #128	; 0x80
100042ca:	0292      	lsls	r2, r2, #10
100042cc:	431a      	orrs	r2, r3
100042ce:	687b      	ldr	r3, [r7, #4]
100042d0:	615a      	str	r2, [r3, #20]
}
100042d2:	46bd      	mov	sp, r7
100042d4:	b002      	add	sp, #8
100042d6:	bd80      	pop	{r7, pc}

100042d8 <XMC_CCU4_SLICE_StartTimer>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_StopTimer().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_StartTimer(XMC_CCU4_SLICE_t *const slice)
{
100042d8:	b580      	push	{r7, lr}
100042da:	b082      	sub	sp, #8
100042dc:	af00      	add	r7, sp, #0
100042de:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_SLICE_StartTimer:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->TCSET = CCU4_CC4_TCSET_TRBS_Msk;
100042e0:	687b      	ldr	r3, [r7, #4]
100042e2:	2201      	movs	r2, #1
100042e4:	60da      	str	r2, [r3, #12]
}
100042e6:	46bd      	mov	sp, r7
100042e8:	b002      	add	sp, #8
100042ea:	bd80      	pop	{r7, pc}

100042ec <XMC_CCU4_SLICE_SetTimerPeriodMatch>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_GetTimerPeriodMatch().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_SetTimerPeriodMatch(XMC_CCU4_SLICE_t *const slice, const uint16_t period_val)
{
100042ec:	b580      	push	{r7, lr}
100042ee:	b082      	sub	sp, #8
100042f0:	af00      	add	r7, sp, #0
100042f2:	6078      	str	r0, [r7, #4]
100042f4:	1c0a      	adds	r2, r1, #0
100042f6:	1cbb      	adds	r3, r7, #2
100042f8:	801a      	strh	r2, [r3, #0]
  XMC_ASSERT("XMC_CCU4_SLICE_SetTimerPeriodMatch:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->PRS = (uint32_t) period_val;
100042fa:	1cbb      	adds	r3, r7, #2
100042fc:	881a      	ldrh	r2, [r3, #0]
100042fe:	687b      	ldr	r3, [r7, #4]
10004300:	635a      	str	r2, [r3, #52]	; 0x34
}
10004302:	46bd      	mov	sp, r7
10004304:	b002      	add	sp, #8
10004306:	bd80      	pop	{r7, pc}

10004308 <XMC_CCU4_SLICE_SetTimerCompareMatch>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_GetTimerPeriodMatch().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_SetTimerCompareMatch(XMC_CCU4_SLICE_t *const slice, const uint16_t compare_val)
{
10004308:	b580      	push	{r7, lr}
1000430a:	b082      	sub	sp, #8
1000430c:	af00      	add	r7, sp, #0
1000430e:	6078      	str	r0, [r7, #4]
10004310:	1c0a      	adds	r2, r1, #0
10004312:	1cbb      	adds	r3, r7, #2
10004314:	801a      	strh	r2, [r3, #0]
  XMC_ASSERT("XMC_CCU4_SLICE_SetTimerCompareMatch:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->CRS = (uint32_t) compare_val;
10004316:	1cbb      	adds	r3, r7, #2
10004318:	881a      	ldrh	r2, [r3, #0]
1000431a:	687b      	ldr	r3, [r7, #4]
1000431c:	63da      	str	r2, [r3, #60]	; 0x3c
}
1000431e:	46bd      	mov	sp, r7
10004320:	b002      	add	sp, #8
10004322:	bd80      	pop	{r7, pc}

10004324 <XMC_CCU4_EnableShadowTransfer>:
 *
 * \par<b>Related APIs:</b><br>
 *  None.
 */
__STATIC_INLINE void XMC_CCU4_EnableShadowTransfer(XMC_CCU4_MODULE_t *const module, const uint32_t shadow_transfer_msk)
{
10004324:	b580      	push	{r7, lr}
10004326:	b082      	sub	sp, #8
10004328:	af00      	add	r7, sp, #0
1000432a:	6078      	str	r0, [r7, #4]
1000432c:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_CCU4_EnableShadowTransfer:Invalid Slice Pointer", XMC_CCU4_IsValidModule(module));
  module->GCSS = (uint32_t)shadow_transfer_msk;  
1000432e:	687b      	ldr	r3, [r7, #4]
10004330:	683a      	ldr	r2, [r7, #0]
10004332:	611a      	str	r2, [r3, #16]
}
10004334:	46bd      	mov	sp, r7
10004336:	b002      	add	sp, #8
10004338:	bd80      	pop	{r7, pc}
1000433a:	46c0      	nop			; (mov r8, r8)

1000433c <XMC_CCU4_SLICE_EnableEvent>:
 *  XMC_CCU4_SLICE_SetInterruptNode()<BR> XMC_CCU4_SLICE_EnableMultipleEvents()<BR> XMC_CCU4_SLICE_DisableEvent()<BR>
 *  XMC_CCU4_SLICE_DisableMultipleEvents().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_EnableEvent(XMC_CCU4_SLICE_t *const slice,
                                                const XMC_CCU4_SLICE_IRQ_ID_t event)
{
1000433c:	b580      	push	{r7, lr}
1000433e:	b082      	sub	sp, #8
10004340:	af00      	add	r7, sp, #0
10004342:	6078      	str	r0, [r7, #4]
10004344:	1c0a      	adds	r2, r1, #0
10004346:	1cfb      	adds	r3, r7, #3
10004348:	701a      	strb	r2, [r3, #0]
  XMC_ASSERT("XMC_CCU4_SLICE_EnableEvent:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_EnableEvent:Invalid SR event", XMC_CCU4_SLICE_CHECK_INTERRUPT(event));
  slice->INTE |= ((uint32_t) 1) << ((uint32_t) event);
1000434a:	687b      	ldr	r3, [r7, #4]
1000434c:	22a4      	movs	r2, #164	; 0xa4
1000434e:	589a      	ldr	r2, [r3, r2]
10004350:	1cfb      	adds	r3, r7, #3
10004352:	781b      	ldrb	r3, [r3, #0]
10004354:	2101      	movs	r1, #1
10004356:	4099      	lsls	r1, r3
10004358:	1c0b      	adds	r3, r1, #0
1000435a:	431a      	orrs	r2, r3
1000435c:	687b      	ldr	r3, [r7, #4]
1000435e:	21a4      	movs	r1, #164	; 0xa4
10004360:	505a      	str	r2, [r3, r1]
}
10004362:	46bd      	mov	sp, r7
10004364:	b002      	add	sp, #8
10004366:	bd80      	pop	{r7, pc}

10004368 <PWM_CCU4_Init>:
  return version;
}

/* This function initializes the app */
PWM_CCU4_STATUS_t PWM_CCU4_Init(PWM_CCU4_t* handle_ptr)
{
10004368:	b590      	push	{r4, r7, lr}
1000436a:	b087      	sub	sp, #28
1000436c:	af00      	add	r7, sp, #0
1000436e:	6078      	str	r0, [r7, #4]
  PWM_CCU4_STATUS_t status;
  GLOBAL_CCU4_STATUS_t status_ccu4_global;
  uint32_t frequency_module;
  uint32_t prescalar;

  status = PWM_CCU4_STATUS_FAILURE;
10004370:	2317      	movs	r3, #23
10004372:	18fb      	adds	r3, r7, r3
10004374:	2201      	movs	r2, #1
10004376:	701a      	strb	r2, [r3, #0]
  status_ccu4_global = GLOBAL_CCU4_STATUS_FAILURE;
10004378:	2316      	movs	r3, #22
1000437a:	18fb      	adds	r3, r7, r3
1000437c:	2201      	movs	r2, #1
1000437e:	701a      	strb	r2, [r3, #0]
  XMC_ASSERT("PWM_CCU4_Init:handle_ptr is NULL", (handle_ptr != NULL));

  if (PWM_CCU4_STATE_UNINITIALIZED == handle_ptr->state)
10004380:	687b      	ldr	r3, [r7, #4]
10004382:	7f1b      	ldrb	r3, [r3, #28]
10004384:	2b00      	cmp	r3, #0
10004386:	d000      	beq.n	1000438a <PWM_CCU4_Init+0x22>
10004388:	e097      	b.n	100044ba <PWM_CCU4_Init+0x152>
  {
    /* Initialize consumed Apps */
    status_ccu4_global = GLOBAL_CCU4_Init(handle_ptr->config_ptr->global_ccu4_handle);
1000438a:	687b      	ldr	r3, [r7, #4]
1000438c:	681b      	ldr	r3, [r3, #0]
1000438e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
10004390:	2216      	movs	r2, #22
10004392:	18bc      	adds	r4, r7, r2
10004394:	1c18      	adds	r0, r3, #0
10004396:	f000 fb2d 	bl	100049f4 <GLOBAL_CCU4_Init>
1000439a:	1c03      	adds	r3, r0, #0
1000439c:	7023      	strb	r3, [r4, #0]

    /* Initialize CCU4x_CC4y slice */
    if (GLOBAL_CCU4_STATUS_SUCCESS == status_ccu4_global)
1000439e:	2316      	movs	r3, #22
100043a0:	18fb      	adds	r3, r7, r3
100043a2:	781b      	ldrb	r3, [r3, #0]
100043a4:	2b00      	cmp	r3, #0
100043a6:	d000      	beq.n	100043aa <PWM_CCU4_Init+0x42>
100043a8:	e083      	b.n	100044b2 <PWM_CCU4_Init+0x14a>
    {
      XMC_DEBUG("PWM_CCU4_Init:Initilizing slice");

      /* Configure CCU4x_CC4y slice as timer */
      XMC_CCU4_SLICE_CompareInit(handle_ptr->ccu4_slice_ptr, handle_ptr->config_ptr->ccu4_cc4_slice_timer_ptr);
100043aa:	687b      	ldr	r3, [r7, #4]
100043ac:	689a      	ldr	r2, [r3, #8]
100043ae:	687b      	ldr	r3, [r7, #4]
100043b0:	681b      	ldr	r3, [r3, #0]
100043b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
100043b4:	1c10      	adds	r0, r2, #0
100043b6:	1c19      	adds	r1, r3, #0
100043b8:	f7fd f8f0 	bl	1000159c <XMC_CCU4_SLICE_CompareInit>
      /* Set period match value of the timer  */
      XMC_CCU4_SLICE_SetTimerPeriodMatch(handle_ptr->ccu4_slice_ptr, handle_ptr->config_ptr->period_value);
100043bc:	687b      	ldr	r3, [r7, #4]
100043be:	689a      	ldr	r2, [r3, #8]
100043c0:	687b      	ldr	r3, [r7, #4]
100043c2:	681b      	ldr	r3, [r3, #0]
100043c4:	885b      	ldrh	r3, [r3, #2]
100043c6:	1c10      	adds	r0, r2, #0
100043c8:	1c19      	adds	r1, r3, #0
100043ca:	f7ff ff8f 	bl	100042ec <XMC_CCU4_SLICE_SetTimerPeriodMatch>

      /* Set timer compare match value for channel 1 */
      XMC_CCU4_SLICE_SetTimerCompareMatch(handle_ptr->ccu4_slice_ptr, (uint16_t) handle_ptr->config_ptr->compare_value);
100043ce:	687b      	ldr	r3, [r7, #4]
100043d0:	689a      	ldr	r2, [r3, #8]
100043d2:	687b      	ldr	r3, [r7, #4]
100043d4:	681b      	ldr	r3, [r3, #0]
100043d6:	889b      	ldrh	r3, [r3, #4]
100043d8:	1c10      	adds	r0, r2, #0
100043da:	1c19      	adds	r1, r3, #0
100043dc:	f7ff ff94 	bl	10004308 <XMC_CCU4_SLICE_SetTimerCompareMatch>

      if (1U == handle_ptr->config_ptr->ccu4_cc4_slice_timer_ptr->mcm_enable)
100043e0:	687b      	ldr	r3, [r7, #4]
100043e2:	681b      	ldr	r3, [r3, #0]
100043e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
100043e6:	78db      	ldrb	r3, [r3, #3]
100043e8:	2202      	movs	r2, #2
100043ea:	4013      	ands	r3, r2
100043ec:	b2db      	uxtb	r3, r3
100043ee:	2b00      	cmp	r3, #0
100043f0:	d008      	beq.n	10004404 <PWM_CCU4_Init+0x9c>
      {
        XMC_CCU4_SetMultiChannelShadowTransferMode(handle_ptr->ccu4_module_ptr,
100043f2:	687b      	ldr	r3, [r7, #4]
100043f4:	685a      	ldr	r2, [r3, #4]
                                                   (uint32_t) handle_ptr->config_ptr->mcm_shadow_txfr_mode);
100043f6:	687b      	ldr	r3, [r7, #4]
100043f8:	681b      	ldr	r3, [r3, #0]
100043fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      /* Set timer compare match value for channel 1 */
      XMC_CCU4_SLICE_SetTimerCompareMatch(handle_ptr->ccu4_slice_ptr, (uint16_t) handle_ptr->config_ptr->compare_value);

      if (1U == handle_ptr->config_ptr->ccu4_cc4_slice_timer_ptr->mcm_enable)
      {
        XMC_CCU4_SetMultiChannelShadowTransferMode(handle_ptr->ccu4_module_ptr,
100043fc:	1c10      	adds	r0, r2, #0
100043fe:	1c19      	adds	r1, r3, #0
10004400:	f7fd f8b2 	bl	10001568 <XMC_CCU4_SetMultiChannelShadowTransferMode>
        XMC_CCU4_SLICE_EnableCascadedShadowTransfer(handle_ptr->ccu4_slice_ptr);
      }
#endif

      /* Transfer value from shadow timer registers to actual timer registers */
      XMC_CCU4_EnableShadowTransfer(handle_ptr->ccu4_module_ptr, handle_ptr->shadow_txfr_msk);
10004404:	687b      	ldr	r3, [r7, #4]
10004406:	685a      	ldr	r2, [r3, #4]
10004408:	687b      	ldr	r3, [r7, #4]
1000440a:	691b      	ldr	r3, [r3, #16]
1000440c:	1c10      	adds	r0, r2, #0
1000440e:	1c19      	adds	r1, r3, #0
10004410:	f7ff ff88 	bl	10004324 <XMC_CCU4_EnableShadowTransfer>
      XMC_CCU4_EnableShadowTransfer(handle_ptr->ccu4_module_ptr, handle_ptr->dither_shadow_txfr_msk);
10004414:	687b      	ldr	r3, [r7, #4]
10004416:	685a      	ldr	r2, [r3, #4]
10004418:	687b      	ldr	r3, [r7, #4]
1000441a:	695b      	ldr	r3, [r3, #20]
1000441c:	1c10      	adds	r0, r2, #0
1000441e:	1c19      	adds	r1, r3, #0
10004420:	f7ff ff80 	bl	10004324 <XMC_CCU4_EnableShadowTransfer>

      /* Configure events */
      PWM_CCU4_lConfigure_Events(handle_ptr);
10004424:	687b      	ldr	r3, [r7, #4]
10004426:	1c18      	adds	r0, r3, #0
10004428:	f000 f8ec 	bl	10004604 <PWM_CCU4_lConfigure_Events>

      /* Enable the interrupts */
      PWM_CCU4_lInit_Interrupt(handle_ptr);
1000442c:	687b      	ldr	r3, [r7, #4]
1000442e:	1c18      	adds	r0, r3, #0
10004430:	f000 f84e 	bl	100044d0 <PWM_CCU4_lInit_Interrupt>

      /*Initializes the GPIO*/
      if ((bool) true == handle_ptr->config_ptr->gpio_ch_out_enable)
10004434:	687b      	ldr	r3, [r7, #4]
10004436:	681b      	ldr	r3, [r3, #0]
10004438:	223c      	movs	r2, #60	; 0x3c
1000443a:	5c9b      	ldrb	r3, [r3, r2]
1000443c:	2b00      	cmp	r3, #0
1000443e:	d00e      	beq.n	1000445e <PWM_CCU4_Init+0xf6>
      {
        XMC_GPIO_Init(handle_ptr->config_ptr->gpio_ch_out_ptr, handle_ptr->config_ptr->gpio_ch_out_pin,
10004440:	687b      	ldr	r3, [r7, #4]
10004442:	681b      	ldr	r3, [r3, #0]
10004444:	6c19      	ldr	r1, [r3, #64]	; 0x40
10004446:	687b      	ldr	r3, [r7, #4]
10004448:	681b      	ldr	r3, [r3, #0]
1000444a:	2244      	movs	r2, #68	; 0x44
1000444c:	5c9a      	ldrb	r2, [r3, r2]
                      handle_ptr->config_ptr->gpio_ch_out_config_ptr);
1000444e:	687b      	ldr	r3, [r7, #4]
10004450:	681b      	ldr	r3, [r3, #0]
      PWM_CCU4_lInit_Interrupt(handle_ptr);

      /*Initializes the GPIO*/
      if ((bool) true == handle_ptr->config_ptr->gpio_ch_out_enable)
      {
        XMC_GPIO_Init(handle_ptr->config_ptr->gpio_ch_out_ptr, handle_ptr->config_ptr->gpio_ch_out_pin,
10004452:	6c9b      	ldr	r3, [r3, #72]	; 0x48
10004454:	1c08      	adds	r0, r1, #0
10004456:	1c11      	adds	r1, r2, #0
10004458:	1c1a      	adds	r2, r3, #0
1000445a:	f7fc fe5b 	bl	10001114 <XMC_GPIO_Init>
                      handle_ptr->config_ptr->gpio_ch_out_config_ptr);
      }

      frequency_module = handle_ptr->config_ptr->global_ccu4_handle->module_frequency;
1000445e:	687b      	ldr	r3, [r7, #4]
10004460:	681b      	ldr	r3, [r3, #0]
10004462:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
10004464:	681b      	ldr	r3, [r3, #0]
10004466:	613b      	str	r3, [r7, #16]
      prescalar = (uint32_t) handle_ptr->config_ptr->ccu4_cc4_slice_timer_ptr->prescaler_initval;
10004468:	687b      	ldr	r3, [r7, #4]
1000446a:	681b      	ldr	r3, [r3, #0]
1000446c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
1000446e:	791b      	ldrb	r3, [r3, #4]
10004470:	071b      	lsls	r3, r3, #28
10004472:	0f1b      	lsrs	r3, r3, #28
10004474:	b2db      	uxtb	r3, r3
10004476:	60fb      	str	r3, [r7, #12]
      frequency_module = frequency_module / ((uint32_t) 1 << prescalar);
10004478:	68fb      	ldr	r3, [r7, #12]
1000447a:	693a      	ldr	r2, [r7, #16]
1000447c:	40da      	lsrs	r2, r3
1000447e:	1c13      	adds	r3, r2, #0
10004480:	613b      	str	r3, [r7, #16]
      handle_ptr->frequency_tclk = frequency_module;
10004482:	687b      	ldr	r3, [r7, #4]
10004484:	693a      	ldr	r2, [r7, #16]
10004486:	621a      	str	r2, [r3, #32]

      handle_ptr->state = PWM_CCU4_STATE_INITIALIZED;
10004488:	687b      	ldr	r3, [r7, #4]
1000448a:	2201      	movs	r2, #1
1000448c:	771a      	strb	r2, [r3, #28]
      status = PWM_CCU4_STATUS_SUCCESS;
1000448e:	2317      	movs	r3, #23
10004490:	18fb      	adds	r3, r7, r3
10004492:	2200      	movs	r2, #0
10004494:	701a      	strb	r2, [r3, #0]

      /* Start the PWM generation if start at initialization is enabled */
      if ((bool) true == handle_ptr->config_ptr->start_control)
10004496:	687b      	ldr	r3, [r7, #4]
10004498:	681b      	ldr	r3, [r3, #0]
1000449a:	781b      	ldrb	r3, [r3, #0]
1000449c:	2b00      	cmp	r3, #0
1000449e:	d010      	beq.n	100044c2 <PWM_CCU4_Init+0x15a>
      {
        status = PWM_CCU4_Start(handle_ptr);
100044a0:	2317      	movs	r3, #23
100044a2:	18fc      	adds	r4, r7, r3
100044a4:	687b      	ldr	r3, [r7, #4]
100044a6:	1c18      	adds	r0, r3, #0
100044a8:	f000 f98a 	bl	100047c0 <PWM_CCU4_Start>
100044ac:	1c03      	adds	r3, r0, #0
100044ae:	7023      	strb	r3, [r4, #0]
100044b0:	e007      	b.n	100044c2 <PWM_CCU4_Init+0x15a>
      }
    }
    else
    {
      handle_ptr->state = PWM_CCU4_STATE_UNINITIALIZED;
100044b2:	687b      	ldr	r3, [r7, #4]
100044b4:	2200      	movs	r2, #0
100044b6:	771a      	strb	r2, [r3, #28]
100044b8:	e003      	b.n	100044c2 <PWM_CCU4_Init+0x15a>
    }

  }
  else
  {
    status = PWM_CCU4_STATUS_ALREADY_INITIALIZED;
100044ba:	2317      	movs	r3, #23
100044bc:	18fb      	adds	r3, r7, r3
100044be:	2202      	movs	r2, #2
100044c0:	701a      	strb	r2, [r3, #0]
    XMC_DEBUG("PWM_CCU4_Init:PWM_CCU4_STATUS_ALREADY_INITIALIZED");
  }

  return (status);
100044c2:	2317      	movs	r3, #23
100044c4:	18fb      	adds	r3, r7, r3
100044c6:	781b      	ldrb	r3, [r3, #0]
} /* end of PWM_CCU4_Init() api */
100044c8:	1c18      	adds	r0, r3, #0
100044ca:	46bd      	mov	sp, r7
100044cc:	b007      	add	sp, #28
100044ce:	bd90      	pop	{r4, r7, pc}

100044d0 <PWM_CCU4_lInit_Interrupt>:

static void PWM_CCU4_lInit_Interrupt(PWM_CCU4_t* handle_ptr)
{
100044d0:	b580      	push	{r7, lr}
100044d2:	b082      	sub	sp, #8
100044d4:	af00      	add	r7, sp, #0
100044d6:	6078      	str	r0, [r7, #4]

  /* Enable events. Bind event to corresponding service request node.Enable Interrupts. The user may choose to 
   disable the interrupts by LLD calls. */
  if ((bool) true == handle_ptr->config_ptr->int_per_match)
100044d8:	687b      	ldr	r3, [r7, #4]
100044da:	681b      	ldr	r3, [r3, #0]
100044dc:	799b      	ldrb	r3, [r3, #6]
100044de:	2b00      	cmp	r3, #0
100044e0:	d00f      	beq.n	10004502 <PWM_CCU4_lInit_Interrupt+0x32>
  {
    XMC_DEBUG("PWM_CCU4_Init: Interrupt period match enable");
    XMC_CCU4_SLICE_SetInterruptNode(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH,
100044e2:	687b      	ldr	r3, [r7, #4]
100044e4:	689a      	ldr	r2, [r3, #8]
                                    handle_ptr->config_ptr->sr_per_match);
100044e6:	687b      	ldr	r3, [r7, #4]
100044e8:	681b      	ldr	r3, [r3, #0]
  /* Enable events. Bind event to corresponding service request node.Enable Interrupts. The user may choose to 
   disable the interrupts by LLD calls. */
  if ((bool) true == handle_ptr->config_ptr->int_per_match)
  {
    XMC_DEBUG("PWM_CCU4_Init: Interrupt period match enable");
    XMC_CCU4_SLICE_SetInterruptNode(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH,
100044ea:	7b5b      	ldrb	r3, [r3, #13]
100044ec:	1c10      	adds	r0, r2, #0
100044ee:	2100      	movs	r1, #0
100044f0:	1c1a      	adds	r2, r3, #0
100044f2:	f7fd fb03 	bl	10001afc <XMC_CCU4_SLICE_SetInterruptNode>
                                    handle_ptr->config_ptr->sr_per_match);
    XMC_CCU4_SLICE_EnableEvent(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH);
100044f6:	687b      	ldr	r3, [r7, #4]
100044f8:	689b      	ldr	r3, [r3, #8]
100044fa:	1c18      	adds	r0, r3, #0
100044fc:	2100      	movs	r1, #0
100044fe:	f7ff ff1d 	bl	1000433c <XMC_CCU4_SLICE_EnableEvent>
  }

  if ((bool) true == handle_ptr->config_ptr->int_cmp_match_up)
10004502:	687b      	ldr	r3, [r7, #4]
10004504:	681b      	ldr	r3, [r3, #0]
10004506:	79db      	ldrb	r3, [r3, #7]
10004508:	2b00      	cmp	r3, #0
1000450a:	d00f      	beq.n	1000452c <PWM_CCU4_lInit_Interrupt+0x5c>
  {
    XMC_DEBUG("PWM_CCU4_Init: Interrupt compare match up enable");
    XMC_CCU4_SLICE_SetInterruptNode(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_UP,
1000450c:	687b      	ldr	r3, [r7, #4]
1000450e:	689a      	ldr	r2, [r3, #8]
                                    handle_ptr->config_ptr->sr_cmp_match_up);
10004510:	687b      	ldr	r3, [r7, #4]
10004512:	681b      	ldr	r3, [r3, #0]
  }

  if ((bool) true == handle_ptr->config_ptr->int_cmp_match_up)
  {
    XMC_DEBUG("PWM_CCU4_Init: Interrupt compare match up enable");
    XMC_CCU4_SLICE_SetInterruptNode(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_UP,
10004514:	7b9b      	ldrb	r3, [r3, #14]
10004516:	1c10      	adds	r0, r2, #0
10004518:	2102      	movs	r1, #2
1000451a:	1c1a      	adds	r2, r3, #0
1000451c:	f7fd faee 	bl	10001afc <XMC_CCU4_SLICE_SetInterruptNode>
                                    handle_ptr->config_ptr->sr_cmp_match_up);
    XMC_CCU4_SLICE_EnableEvent(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_UP);
10004520:	687b      	ldr	r3, [r7, #4]
10004522:	689b      	ldr	r3, [r3, #8]
10004524:	1c18      	adds	r0, r3, #0
10004526:	2102      	movs	r1, #2
10004528:	f7ff ff08 	bl	1000433c <XMC_CCU4_SLICE_EnableEvent>
  }

  if ((bool) true == handle_ptr->config_ptr->int_cmp_match_down)
1000452c:	687b      	ldr	r3, [r7, #4]
1000452e:	681b      	ldr	r3, [r3, #0]
10004530:	7a1b      	ldrb	r3, [r3, #8]
10004532:	2b00      	cmp	r3, #0
10004534:	d00f      	beq.n	10004556 <PWM_CCU4_lInit_Interrupt+0x86>
  {
    XMC_DEBUG("PWM_CCU4_Init: Interrupt compare match down enable");
    XMC_CCU4_SLICE_SetInterruptNode(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_DOWN,
10004536:	687b      	ldr	r3, [r7, #4]
10004538:	689a      	ldr	r2, [r3, #8]
                                    handle_ptr->config_ptr->sr_cmp_match_down);
1000453a:	687b      	ldr	r3, [r7, #4]
1000453c:	681b      	ldr	r3, [r3, #0]
  }

  if ((bool) true == handle_ptr->config_ptr->int_cmp_match_down)
  {
    XMC_DEBUG("PWM_CCU4_Init: Interrupt compare match down enable");
    XMC_CCU4_SLICE_SetInterruptNode(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_DOWN,
1000453e:	7bdb      	ldrb	r3, [r3, #15]
10004540:	1c10      	adds	r0, r2, #0
10004542:	2103      	movs	r1, #3
10004544:	1c1a      	adds	r2, r3, #0
10004546:	f7fd fad9 	bl	10001afc <XMC_CCU4_SLICE_SetInterruptNode>
                                    handle_ptr->config_ptr->sr_cmp_match_down);
    XMC_CCU4_SLICE_EnableEvent(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_DOWN);
1000454a:	687b      	ldr	r3, [r7, #4]
1000454c:	689b      	ldr	r3, [r3, #8]
1000454e:	1c18      	adds	r0, r3, #0
10004550:	2103      	movs	r1, #3
10004552:	f7ff fef3 	bl	1000433c <XMC_CCU4_SLICE_EnableEvent>
  }

  if ((bool) true == handle_ptr->config_ptr->int_one_match_down)
10004556:	687b      	ldr	r3, [r7, #4]
10004558:	681b      	ldr	r3, [r3, #0]
1000455a:	7a5b      	ldrb	r3, [r3, #9]
1000455c:	2b00      	cmp	r3, #0
1000455e:	d00f      	beq.n	10004580 <PWM_CCU4_lInit_Interrupt+0xb0>
  {
    XMC_DEBUG("PWM_CCU4_Init: Interrupt one match enable");
    XMC_CCU4_SLICE_SetInterruptNode(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_ONE_MATCH,
10004560:	687b      	ldr	r3, [r7, #4]
10004562:	689a      	ldr	r2, [r3, #8]
                                    handle_ptr->config_ptr->sr_one_match_down);
10004564:	687b      	ldr	r3, [r7, #4]
10004566:	681b      	ldr	r3, [r3, #0]
  }

  if ((bool) true == handle_ptr->config_ptr->int_one_match_down)
  {
    XMC_DEBUG("PWM_CCU4_Init: Interrupt one match enable");
    XMC_CCU4_SLICE_SetInterruptNode(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_ONE_MATCH,
10004568:	7c1b      	ldrb	r3, [r3, #16]
1000456a:	1c10      	adds	r0, r2, #0
1000456c:	2101      	movs	r1, #1
1000456e:	1c1a      	adds	r2, r3, #0
10004570:	f7fd fac4 	bl	10001afc <XMC_CCU4_SLICE_SetInterruptNode>
                                    handle_ptr->config_ptr->sr_one_match_down);
    XMC_CCU4_SLICE_EnableEvent(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_ONE_MATCH);
10004574:	687b      	ldr	r3, [r7, #4]
10004576:	689b      	ldr	r3, [r3, #8]
10004578:	1c18      	adds	r0, r3, #0
1000457a:	2101      	movs	r1, #1
1000457c:	f7ff fede 	bl	1000433c <XMC_CCU4_SLICE_EnableEvent>
  }

  if ((bool) true == handle_ptr->config_ptr->int_e0)
10004580:	687b      	ldr	r3, [r7, #4]
10004582:	681b      	ldr	r3, [r3, #0]
10004584:	7a9b      	ldrb	r3, [r3, #10]
10004586:	2b00      	cmp	r3, #0
10004588:	d00f      	beq.n	100045aa <PWM_CCU4_lInit_Interrupt+0xda>
  {
    XMC_DEBUG("PWM_CCU4_Init: Interrupt event 0 enable");
    XMC_CCU4_SLICE_SetInterruptNode(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_EVENT0,
1000458a:	687b      	ldr	r3, [r7, #4]
1000458c:	689a      	ldr	r2, [r3, #8]
                                    handle_ptr->config_ptr->sr_e0);
1000458e:	687b      	ldr	r3, [r7, #4]
10004590:	681b      	ldr	r3, [r3, #0]
  }

  if ((bool) true == handle_ptr->config_ptr->int_e0)
  {
    XMC_DEBUG("PWM_CCU4_Init: Interrupt event 0 enable");
    XMC_CCU4_SLICE_SetInterruptNode(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_EVENT0,
10004592:	7c5b      	ldrb	r3, [r3, #17]
10004594:	1c10      	adds	r0, r2, #0
10004596:	2108      	movs	r1, #8
10004598:	1c1a      	adds	r2, r3, #0
1000459a:	f7fd faaf 	bl	10001afc <XMC_CCU4_SLICE_SetInterruptNode>
                                    handle_ptr->config_ptr->sr_e0);
    XMC_CCU4_SLICE_EnableEvent(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_EVENT0);
1000459e:	687b      	ldr	r3, [r7, #4]
100045a0:	689b      	ldr	r3, [r3, #8]
100045a2:	1c18      	adds	r0, r3, #0
100045a4:	2108      	movs	r1, #8
100045a6:	f7ff fec9 	bl	1000433c <XMC_CCU4_SLICE_EnableEvent>
  }

  if ((bool) true == handle_ptr->config_ptr->int_e1)
100045aa:	687b      	ldr	r3, [r7, #4]
100045ac:	681b      	ldr	r3, [r3, #0]
100045ae:	7adb      	ldrb	r3, [r3, #11]
100045b0:	2b00      	cmp	r3, #0
100045b2:	d00f      	beq.n	100045d4 <PWM_CCU4_lInit_Interrupt+0x104>
  {
    XMC_DEBUG("PWM_CCU4_Init: Interrupt event 1 enable");
    XMC_CCU4_SLICE_SetInterruptNode(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_EVENT1,
100045b4:	687b      	ldr	r3, [r7, #4]
100045b6:	689a      	ldr	r2, [r3, #8]
                                    handle_ptr->config_ptr->sr_e1);
100045b8:	687b      	ldr	r3, [r7, #4]
100045ba:	681b      	ldr	r3, [r3, #0]
  }

  if ((bool) true == handle_ptr->config_ptr->int_e1)
  {
    XMC_DEBUG("PWM_CCU4_Init: Interrupt event 1 enable");
    XMC_CCU4_SLICE_SetInterruptNode(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_EVENT1,
100045bc:	7c9b      	ldrb	r3, [r3, #18]
100045be:	1c10      	adds	r0, r2, #0
100045c0:	2109      	movs	r1, #9
100045c2:	1c1a      	adds	r2, r3, #0
100045c4:	f7fd fa9a 	bl	10001afc <XMC_CCU4_SLICE_SetInterruptNode>
                                    handle_ptr->config_ptr->sr_e1);
    XMC_CCU4_SLICE_EnableEvent(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_EVENT1);
100045c8:	687b      	ldr	r3, [r7, #4]
100045ca:	689b      	ldr	r3, [r3, #8]
100045cc:	1c18      	adds	r0, r3, #0
100045ce:	2109      	movs	r1, #9
100045d0:	f7ff feb4 	bl	1000433c <XMC_CCU4_SLICE_EnableEvent>
  }

  if ((bool) true == handle_ptr->config_ptr->int_e2)
100045d4:	687b      	ldr	r3, [r7, #4]
100045d6:	681b      	ldr	r3, [r3, #0]
100045d8:	7b1b      	ldrb	r3, [r3, #12]
100045da:	2b00      	cmp	r3, #0
100045dc:	d00f      	beq.n	100045fe <PWM_CCU4_lInit_Interrupt+0x12e>
  {
    XMC_DEBUG("PWM_CCU4_Init: Interrupt event 2 enable");
    XMC_CCU4_SLICE_SetInterruptNode(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_EVENT2,
100045de:	687b      	ldr	r3, [r7, #4]
100045e0:	689a      	ldr	r2, [r3, #8]
                                    handle_ptr->config_ptr->sr_e2);
100045e2:	687b      	ldr	r3, [r7, #4]
100045e4:	681b      	ldr	r3, [r3, #0]
  }

  if ((bool) true == handle_ptr->config_ptr->int_e2)
  {
    XMC_DEBUG("PWM_CCU4_Init: Interrupt event 2 enable");
    XMC_CCU4_SLICE_SetInterruptNode(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_EVENT2,
100045e6:	7cdb      	ldrb	r3, [r3, #19]
100045e8:	1c10      	adds	r0, r2, #0
100045ea:	210a      	movs	r1, #10
100045ec:	1c1a      	adds	r2, r3, #0
100045ee:	f7fd fa85 	bl	10001afc <XMC_CCU4_SLICE_SetInterruptNode>
                                    handle_ptr->config_ptr->sr_e2);
    XMC_CCU4_SLICE_EnableEvent(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_EVENT2);
100045f2:	687b      	ldr	r3, [r7, #4]
100045f4:	689b      	ldr	r3, [r3, #8]
100045f6:	1c18      	adds	r0, r3, #0
100045f8:	210a      	movs	r1, #10
100045fa:	f7ff fe9f 	bl	1000433c <XMC_CCU4_SLICE_EnableEvent>
  }
}
100045fe:	46bd      	mov	sp, r7
10004600:	b002      	add	sp, #8
10004602:	bd80      	pop	{r7, pc}

10004604 <PWM_CCU4_lConfigure_Events>:

static void PWM_CCU4_lConfigure_Events(PWM_CCU4_t* handle_ptr)
{
10004604:	b590      	push	{r4, r7, lr}
10004606:	b083      	sub	sp, #12
10004608:	af00      	add	r7, sp, #0
1000460a:	6078      	str	r0, [r7, #4]

  /* Configure slice to a external event 0 */
  XMC_CCU4_SLICE_ConfigureEvent(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_EVENT_0,
1000460c:	687b      	ldr	r3, [r7, #4]
1000460e:	689a      	ldr	r2, [r3, #8]
                                handle_ptr->config_ptr->event0_config_ptr);
10004610:	687b      	ldr	r3, [r7, #4]
10004612:	681b      	ldr	r3, [r3, #0]

static void PWM_CCU4_lConfigure_Events(PWM_CCU4_t* handle_ptr)
{

  /* Configure slice to a external event 0 */
  XMC_CCU4_SLICE_ConfigureEvent(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_EVENT_0,
10004614:	695b      	ldr	r3, [r3, #20]
10004616:	1c10      	adds	r0, r2, #0
10004618:	2101      	movs	r1, #1
1000461a:	1c1a      	adds	r2, r3, #0
1000461c:	f7fd f9e0 	bl	100019e0 <XMC_CCU4_SLICE_ConfigureEvent>
                                handle_ptr->config_ptr->event0_config_ptr);

  /* Configure slice to a external event 1 */
  XMC_CCU4_SLICE_ConfigureEvent(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_EVENT_1,
10004620:	687b      	ldr	r3, [r7, #4]
10004622:	689a      	ldr	r2, [r3, #8]
                                handle_ptr->config_ptr->event1_config_ptr);
10004624:	687b      	ldr	r3, [r7, #4]
10004626:	681b      	ldr	r3, [r3, #0]
  /* Configure slice to a external event 0 */
  XMC_CCU4_SLICE_ConfigureEvent(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_EVENT_0,
                                handle_ptr->config_ptr->event0_config_ptr);

  /* Configure slice to a external event 1 */
  XMC_CCU4_SLICE_ConfigureEvent(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_EVENT_1,
10004628:	699b      	ldr	r3, [r3, #24]
1000462a:	1c10      	adds	r0, r2, #0
1000462c:	2102      	movs	r1, #2
1000462e:	1c1a      	adds	r2, r3, #0
10004630:	f7fd f9d6 	bl	100019e0 <XMC_CCU4_SLICE_ConfigureEvent>
                                handle_ptr->config_ptr->event1_config_ptr);

  /* Configure slice to a external event 2 */
  XMC_CCU4_SLICE_ConfigureEvent(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_EVENT_2,
10004634:	687b      	ldr	r3, [r7, #4]
10004636:	689a      	ldr	r2, [r3, #8]
                                handle_ptr->config_ptr->event2_config_ptr);
10004638:	687b      	ldr	r3, [r7, #4]
1000463a:	681b      	ldr	r3, [r3, #0]
  /* Configure slice to a external event 1 */
  XMC_CCU4_SLICE_ConfigureEvent(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_EVENT_1,
                                handle_ptr->config_ptr->event1_config_ptr);

  /* Configure slice to a external event 2 */
  XMC_CCU4_SLICE_ConfigureEvent(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_EVENT_2,
1000463c:	69db      	ldr	r3, [r3, #28]
1000463e:	1c10      	adds	r0, r2, #0
10004640:	2103      	movs	r1, #3
10004642:	1c1a      	adds	r2, r3, #0
10004644:	f7fd f9cc 	bl	100019e0 <XMC_CCU4_SLICE_ConfigureEvent>
                                handle_ptr->config_ptr->event2_config_ptr);

  /* External signal controls start of the timer */
  if (XMC_CCU4_SLICE_EVENT_NONE != handle_ptr->config_ptr->ext_start_event)
10004648:	687b      	ldr	r3, [r7, #4]
1000464a:	681b      	ldr	r3, [r3, #0]
1000464c:	2220      	movs	r2, #32
1000464e:	5c9b      	ldrb	r3, [r3, r2]
10004650:	2b00      	cmp	r3, #0
10004652:	d00c      	beq.n	1000466e <PWM_CCU4_lConfigure_Events+0x6a>
  {
    XMC_CCU4_SLICE_StartConfig(handle_ptr->ccu4_slice_ptr, handle_ptr->config_ptr->ext_start_event,
10004654:	687b      	ldr	r3, [r7, #4]
10004656:	6898      	ldr	r0, [r3, #8]
10004658:	687b      	ldr	r3, [r7, #4]
1000465a:	681b      	ldr	r3, [r3, #0]
1000465c:	2220      	movs	r2, #32
1000465e:	5c99      	ldrb	r1, [r3, r2]
                               handle_ptr->config_ptr->ext_start_mode);
10004660:	687b      	ldr	r3, [r7, #4]
10004662:	681b      	ldr	r3, [r3, #0]
                                handle_ptr->config_ptr->event2_config_ptr);

  /* External signal controls start of the timer */
  if (XMC_CCU4_SLICE_EVENT_NONE != handle_ptr->config_ptr->ext_start_event)
  {
    XMC_CCU4_SLICE_StartConfig(handle_ptr->ccu4_slice_ptr, handle_ptr->config_ptr->ext_start_event,
10004664:	2221      	movs	r2, #33	; 0x21
10004666:	5c9b      	ldrb	r3, [r3, r2]
10004668:	1c1a      	adds	r2, r3, #0
1000466a:	f7fc ffcb 	bl	10001604 <XMC_CCU4_SLICE_StartConfig>
                               handle_ptr->config_ptr->ext_start_mode);
  }

  /* External signal can stop the timer */
  if (XMC_CCU4_SLICE_EVENT_NONE != handle_ptr->config_ptr->ext_stop_event)
1000466e:	687b      	ldr	r3, [r7, #4]
10004670:	681b      	ldr	r3, [r3, #0]
10004672:	2222      	movs	r2, #34	; 0x22
10004674:	5c9b      	ldrb	r3, [r3, r2]
10004676:	2b00      	cmp	r3, #0
10004678:	d00c      	beq.n	10004694 <PWM_CCU4_lConfigure_Events+0x90>
  {
    XMC_CCU4_SLICE_StopConfig(handle_ptr->ccu4_slice_ptr, handle_ptr->config_ptr->ext_stop_event,
1000467a:	687b      	ldr	r3, [r7, #4]
1000467c:	6898      	ldr	r0, [r3, #8]
1000467e:	687b      	ldr	r3, [r7, #4]
10004680:	681b      	ldr	r3, [r3, #0]
10004682:	2222      	movs	r2, #34	; 0x22
10004684:	5c99      	ldrb	r1, [r3, r2]
                              handle_ptr->config_ptr->ext_stop_mode);
10004686:	687b      	ldr	r3, [r7, #4]
10004688:	681b      	ldr	r3, [r3, #0]
  }

  /* External signal can stop the timer */
  if (XMC_CCU4_SLICE_EVENT_NONE != handle_ptr->config_ptr->ext_stop_event)
  {
    XMC_CCU4_SLICE_StopConfig(handle_ptr->ccu4_slice_ptr, handle_ptr->config_ptr->ext_stop_event,
1000468a:	2223      	movs	r2, #35	; 0x23
1000468c:	5c9b      	ldrb	r3, [r3, r2]
1000468e:	1c1a      	adds	r2, r3, #0
10004690:	f7fc ffec 	bl	1000166c <XMC_CCU4_SLICE_StopConfig>
                              handle_ptr->config_ptr->ext_stop_mode);
  }

  /* External signal can change the timer counting direction */
  if (XMC_CCU4_SLICE_EVENT_NONE != handle_ptr->config_ptr->ext_count_dir_event)
10004694:	687b      	ldr	r3, [r7, #4]
10004696:	681b      	ldr	r3, [r3, #0]
10004698:	2224      	movs	r2, #36	; 0x24
1000469a:	5c9b      	ldrb	r3, [r3, r2]
1000469c:	2b00      	cmp	r3, #0
1000469e:	d009      	beq.n	100046b4 <PWM_CCU4_lConfigure_Events+0xb0>
  {
    XMC_CCU4_SLICE_DirectionConfig(handle_ptr->ccu4_slice_ptr, handle_ptr->config_ptr->ext_count_dir_event);
100046a0:	687b      	ldr	r3, [r7, #4]
100046a2:	6899      	ldr	r1, [r3, #8]
100046a4:	687b      	ldr	r3, [r7, #4]
100046a6:	681b      	ldr	r3, [r3, #0]
100046a8:	2224      	movs	r2, #36	; 0x24
100046aa:	5c9b      	ldrb	r3, [r3, r2]
100046ac:	1c08      	adds	r0, r1, #0
100046ae:	1c19      	adds	r1, r3, #0
100046b0:	f7fd f8ae 	bl	10001810 <XMC_CCU4_SLICE_DirectionConfig>
  }
  /* External signal can stop the timer and the timer value remains same */
  if (XMC_CCU4_SLICE_EVENT_NONE != handle_ptr->config_ptr->ext_gate_event)
100046b4:	687b      	ldr	r3, [r7, #4]
100046b6:	681b      	ldr	r3, [r3, #0]
100046b8:	2225      	movs	r2, #37	; 0x25
100046ba:	5c9b      	ldrb	r3, [r3, r2]
100046bc:	2b00      	cmp	r3, #0
100046be:	d009      	beq.n	100046d4 <PWM_CCU4_lConfigure_Events+0xd0>
  {
    XMC_CCU4_SLICE_GateConfig(handle_ptr->ccu4_slice_ptr, handle_ptr->config_ptr->ext_gate_event);
100046c0:	687b      	ldr	r3, [r7, #4]
100046c2:	6899      	ldr	r1, [r3, #8]
100046c4:	687b      	ldr	r3, [r7, #4]
100046c6:	681b      	ldr	r3, [r3, #0]
100046c8:	2225      	movs	r2, #37	; 0x25
100046ca:	5c9b      	ldrb	r3, [r3, r2]
100046cc:	1c08      	adds	r0, r1, #0
100046ce:	1c19      	adds	r1, r3, #0
100046d0:	f7fd f882 	bl	100017d8 <XMC_CCU4_SLICE_GateConfig>
  }
  /* Timer increments on external signal */
  if (XMC_CCU4_SLICE_EVENT_NONE != handle_ptr->config_ptr->ext_count_event)
100046d4:	687b      	ldr	r3, [r7, #4]
100046d6:	681b      	ldr	r3, [r3, #0]
100046d8:	2226      	movs	r2, #38	; 0x26
100046da:	5c9b      	ldrb	r3, [r3, r2]
100046dc:	2b00      	cmp	r3, #0
100046de:	d009      	beq.n	100046f4 <PWM_CCU4_lConfigure_Events+0xf0>
  {
    XMC_CCU4_SLICE_CountConfig(handle_ptr->ccu4_slice_ptr, handle_ptr->config_ptr->ext_count_event);
100046e0:	687b      	ldr	r3, [r7, #4]
100046e2:	6899      	ldr	r1, [r3, #8]
100046e4:	687b      	ldr	r3, [r7, #4]
100046e6:	681b      	ldr	r3, [r3, #0]
100046e8:	2226      	movs	r2, #38	; 0x26
100046ea:	5c9b      	ldrb	r3, [r3, r2]
100046ec:	1c08      	adds	r0, r1, #0
100046ee:	1c19      	adds	r1, r3, #0
100046f0:	f7fd f856 	bl	100017a0 <XMC_CCU4_SLICE_CountConfig>
  }
  /* Timer gets loaded with compare register value or period register value on external signal */
  if (XMC_CCU4_SLICE_EVENT_NONE != handle_ptr->config_ptr->ext_load_event)
100046f4:	687b      	ldr	r3, [r7, #4]
100046f6:	681b      	ldr	r3, [r3, #0]
100046f8:	2227      	movs	r2, #39	; 0x27
100046fa:	5c9b      	ldrb	r3, [r3, r2]
100046fc:	2b00      	cmp	r3, #0
100046fe:	d009      	beq.n	10004714 <PWM_CCU4_lConfigure_Events+0x110>
  {
    XMC_CCU4_SLICE_LoadConfig(handle_ptr->ccu4_slice_ptr, handle_ptr->config_ptr->ext_load_event);
10004700:	687b      	ldr	r3, [r7, #4]
10004702:	6899      	ldr	r1, [r3, #8]
10004704:	687b      	ldr	r3, [r7, #4]
10004706:	681b      	ldr	r3, [r3, #0]
10004708:	2227      	movs	r2, #39	; 0x27
1000470a:	5c9b      	ldrb	r3, [r3, r2]
1000470c:	1c08      	adds	r0, r1, #0
1000470e:	1c19      	adds	r1, r3, #0
10004710:	f7fc ffde 	bl	100016d0 <XMC_CCU4_SLICE_LoadConfig>
  }
  /* External signal PWM signal (ST bit) output gets modulated by external signal */
  if (XMC_CCU4_SLICE_EVENT_NONE != handle_ptr->config_ptr->ext_mod_event)
10004714:	687b      	ldr	r3, [r7, #4]
10004716:	681b      	ldr	r3, [r3, #0]
10004718:	2228      	movs	r2, #40	; 0x28
1000471a:	5c9b      	ldrb	r3, [r3, r2]
1000471c:	2b00      	cmp	r3, #0
1000471e:	d010      	beq.n	10004742 <PWM_CCU4_lConfigure_Events+0x13e>
  {
    XMC_CCU4_SLICE_ModulationConfig(handle_ptr->ccu4_slice_ptr, handle_ptr->config_ptr->ext_mod_event,
10004720:	687b      	ldr	r3, [r7, #4]
10004722:	6898      	ldr	r0, [r3, #8]
10004724:	687b      	ldr	r3, [r7, #4]
10004726:	681b      	ldr	r3, [r3, #0]
10004728:	2228      	movs	r2, #40	; 0x28
1000472a:	5c99      	ldrb	r1, [r3, r2]
                                    handle_ptr->config_ptr->ext_mod_mode, handle_ptr->config_ptr->ext_mod_sync);
1000472c:	687b      	ldr	r3, [r7, #4]
1000472e:	681b      	ldr	r3, [r3, #0]
    XMC_CCU4_SLICE_LoadConfig(handle_ptr->ccu4_slice_ptr, handle_ptr->config_ptr->ext_load_event);
  }
  /* External signal PWM signal (ST bit) output gets modulated by external signal */
  if (XMC_CCU4_SLICE_EVENT_NONE != handle_ptr->config_ptr->ext_mod_event)
  {
    XMC_CCU4_SLICE_ModulationConfig(handle_ptr->ccu4_slice_ptr, handle_ptr->config_ptr->ext_mod_event,
10004730:	2229      	movs	r2, #41	; 0x29
10004732:	5c9c      	ldrb	r4, [r3, r2]
                                    handle_ptr->config_ptr->ext_mod_mode, handle_ptr->config_ptr->ext_mod_sync);
10004734:	687b      	ldr	r3, [r7, #4]
10004736:	681b      	ldr	r3, [r3, #0]
    XMC_CCU4_SLICE_LoadConfig(handle_ptr->ccu4_slice_ptr, handle_ptr->config_ptr->ext_load_event);
  }
  /* External signal PWM signal (ST bit) output gets modulated by external signal */
  if (XMC_CCU4_SLICE_EVENT_NONE != handle_ptr->config_ptr->ext_mod_event)
  {
    XMC_CCU4_SLICE_ModulationConfig(handle_ptr->ccu4_slice_ptr, handle_ptr->config_ptr->ext_mod_event,
10004738:	222a      	movs	r2, #42	; 0x2a
1000473a:	5c9b      	ldrb	r3, [r3, r2]
1000473c:	1c22      	adds	r2, r4, #0
1000473e:	f7fc ffe3 	bl	10001708 <XMC_CCU4_SLICE_ModulationConfig>
                                    handle_ptr->config_ptr->ext_mod_mode, handle_ptr->config_ptr->ext_mod_sync);
  }

  /* PWM signal (ST bit) output gets modulated by external signal */
  if (XMC_CCU4_SLICE_EVENT_2 == handle_ptr->config_ptr->ext_trap_event)
10004742:	687b      	ldr	r3, [r7, #4]
10004744:	681b      	ldr	r3, [r3, #0]
10004746:	222e      	movs	r2, #46	; 0x2e
10004748:	5c9b      	ldrb	r3, [r3, r2]
1000474a:	2b03      	cmp	r3, #3
1000474c:	d117      	bne.n	1000477e <PWM_CCU4_lConfigure_Events+0x17a>
  {
    XMC_CCU4_SLICE_TrapConfig(handle_ptr->ccu4_slice_ptr, handle_ptr->config_ptr->ext_trap_exit,
1000474e:	687b      	ldr	r3, [r7, #4]
10004750:	6898      	ldr	r0, [r3, #8]
10004752:	687b      	ldr	r3, [r7, #4]
10004754:	681b      	ldr	r3, [r3, #0]
10004756:	2230      	movs	r2, #48	; 0x30
10004758:	5c99      	ldrb	r1, [r3, r2]
                              handle_ptr->config_ptr->ext_trap_sync);
1000475a:	687b      	ldr	r3, [r7, #4]
1000475c:	681b      	ldr	r3, [r3, #0]
  }

  /* PWM signal (ST bit) output gets modulated by external signal */
  if (XMC_CCU4_SLICE_EVENT_2 == handle_ptr->config_ptr->ext_trap_event)
  {
    XMC_CCU4_SLICE_TrapConfig(handle_ptr->ccu4_slice_ptr, handle_ptr->config_ptr->ext_trap_exit,
1000475e:	222f      	movs	r2, #47	; 0x2f
10004760:	5c9b      	ldrb	r3, [r3, r2]
10004762:	1c1a      	adds	r2, r3, #0
10004764:	f7fd f888 	bl	10001878 <XMC_CCU4_SLICE_TrapConfig>
                              handle_ptr->config_ptr->ext_trap_sync);

    if ((bool) true == handle_ptr->config_ptr->ext_trap_enable)
10004768:	687b      	ldr	r3, [r7, #4]
1000476a:	681b      	ldr	r3, [r3, #0]
1000476c:	222d      	movs	r2, #45	; 0x2d
1000476e:	5c9b      	ldrb	r3, [r3, r2]
10004770:	2b00      	cmp	r3, #0
10004772:	d004      	beq.n	1000477e <PWM_CCU4_lConfigure_Events+0x17a>
    {
      XMC_CCU4_SLICE_EnableTrap(handle_ptr->ccu4_slice_ptr);
10004774:	687b      	ldr	r3, [r7, #4]
10004776:	689b      	ldr	r3, [r3, #8]
10004778:	1c18      	adds	r0, r3, #0
1000477a:	f7ff fd9f 	bl	100042bc <XMC_CCU4_SLICE_EnableTrap>
    }
  }
  if ((XMC_CCU4_SLICE_EVENT_1 == handle_ptr->config_ptr->ext_override_edge_event) && (XMC_CCU4_SLICE_EVENT_2
1000477e:	687b      	ldr	r3, [r7, #4]
10004780:	681b      	ldr	r3, [r3, #0]
10004782:	222b      	movs	r2, #43	; 0x2b
10004784:	5c9b      	ldrb	r3, [r3, r2]
10004786:	2b02      	cmp	r3, #2
10004788:	d117      	bne.n	100047ba <PWM_CCU4_lConfigure_Events+0x1b6>
      == handle_ptr->config_ptr->ext_override_level_event))
1000478a:	687b      	ldr	r3, [r7, #4]
1000478c:	681b      	ldr	r3, [r3, #0]
1000478e:	222c      	movs	r2, #44	; 0x2c
10004790:	5c9b      	ldrb	r3, [r3, r2]
    if ((bool) true == handle_ptr->config_ptr->ext_trap_enable)
    {
      XMC_CCU4_SLICE_EnableTrap(handle_ptr->ccu4_slice_ptr);
    }
  }
  if ((XMC_CCU4_SLICE_EVENT_1 == handle_ptr->config_ptr->ext_override_edge_event) && (XMC_CCU4_SLICE_EVENT_2
10004792:	2b03      	cmp	r3, #3
10004794:	d111      	bne.n	100047ba <PWM_CCU4_lConfigure_Events+0x1b6>
      == handle_ptr->config_ptr->ext_override_level_event))
  {
    XMC_CCU4_SLICE_ConfigureStatusBitOverrideEvent(handle_ptr->ccu4_slice_ptr,
10004796:	687b      	ldr	r3, [r7, #4]
10004798:	6899      	ldr	r1, [r3, #8]
                                                   handle_ptr->config_ptr->event1_config_ptr,
1000479a:	687b      	ldr	r3, [r7, #4]
1000479c:	681b      	ldr	r3, [r3, #0]
    }
  }
  if ((XMC_CCU4_SLICE_EVENT_1 == handle_ptr->config_ptr->ext_override_edge_event) && (XMC_CCU4_SLICE_EVENT_2
      == handle_ptr->config_ptr->ext_override_level_event))
  {
    XMC_CCU4_SLICE_ConfigureStatusBitOverrideEvent(handle_ptr->ccu4_slice_ptr,
1000479e:	699a      	ldr	r2, [r3, #24]
                                                   handle_ptr->config_ptr->event1_config_ptr,
                                                   handle_ptr->config_ptr->event2_config_ptr);
100047a0:	687b      	ldr	r3, [r7, #4]
100047a2:	681b      	ldr	r3, [r3, #0]
    }
  }
  if ((XMC_CCU4_SLICE_EVENT_1 == handle_ptr->config_ptr->ext_override_edge_event) && (XMC_CCU4_SLICE_EVENT_2
      == handle_ptr->config_ptr->ext_override_level_event))
  {
    XMC_CCU4_SLICE_ConfigureStatusBitOverrideEvent(handle_ptr->ccu4_slice_ptr,
100047a4:	69db      	ldr	r3, [r3, #28]
100047a6:	1c08      	adds	r0, r1, #0
100047a8:	1c11      	adds	r1, r2, #0
100047aa:	1c1a      	adds	r2, r3, #0
100047ac:	f7fd f8aa 	bl	10001904 <XMC_CCU4_SLICE_ConfigureStatusBitOverrideEvent>
                                                   handle_ptr->config_ptr->event1_config_ptr,
                                                   handle_ptr->config_ptr->event2_config_ptr);
    XMC_CCU4_SLICE_StatusBitOverrideConfig(handle_ptr->ccu4_slice_ptr);
100047b0:	687b      	ldr	r3, [r7, #4]
100047b2:	689b      	ldr	r3, [r3, #8]
100047b4:	1c18      	adds	r0, r3, #0
100047b6:	f7fd f847 	bl	10001848 <XMC_CCU4_SLICE_StatusBitOverrideConfig>
  }

}
100047ba:	46bd      	mov	sp, r7
100047bc:	b003      	add	sp, #12
100047be:	bd90      	pop	{r4, r7, pc}

100047c0 <PWM_CCU4_Start>:
/**********************************************************************************************************/
/*Starts the CCU4_CC4 slice. This needs to be called even if external start is configured.*/
PWM_CCU4_STATUS_t PWM_CCU4_Start(PWM_CCU4_t* handle_ptr)
{
100047c0:	b580      	push	{r7, lr}
100047c2:	b084      	sub	sp, #16
100047c4:	af00      	add	r7, sp, #0
100047c6:	6078      	str	r0, [r7, #4]
  PWM_CCU4_STATUS_t status;

  status = PWM_CCU4_STATUS_FAILURE;
100047c8:	230f      	movs	r3, #15
100047ca:	18fb      	adds	r3, r7, r3
100047cc:	2201      	movs	r2, #1
100047ce:	701a      	strb	r2, [r3, #0]
  XMC_ASSERT("PWM_CCU4_Start:handle_ptr NULL", (handle_ptr != NULL));
  if ((PWM_CCU4_STATE_INITIALIZED == handle_ptr->state) || (PWM_CCU4_STATE_STOPPED == handle_ptr->state))
100047d0:	687b      	ldr	r3, [r7, #4]
100047d2:	7f1b      	ldrb	r3, [r3, #28]
100047d4:	2b01      	cmp	r3, #1
100047d6:	d003      	beq.n	100047e0 <PWM_CCU4_Start+0x20>
100047d8:	687b      	ldr	r3, [r7, #4]
100047da:	7f1b      	ldrb	r3, [r3, #28]
100047dc:	2b03      	cmp	r3, #3
100047de:	d119      	bne.n	10004814 <PWM_CCU4_Start+0x54>
  {
    /* clear IDLE mode for the slice; Start timer */
    XMC_CCU4_EnableClock(handle_ptr->ccu4_module_ptr, handle_ptr->slice_number);
100047e0:	687b      	ldr	r3, [r7, #4]
100047e2:	685a      	ldr	r2, [r3, #4]
100047e4:	687b      	ldr	r3, [r7, #4]
100047e6:	7b5b      	ldrb	r3, [r3, #13]
100047e8:	1c10      	adds	r0, r2, #0
100047ea:	1c19      	adds	r1, r3, #0
100047ec:	f7ff fd52 	bl	10004294 <XMC_CCU4_EnableClock>

    if (XMC_CCU4_SLICE_EVENT_NONE == handle_ptr->config_ptr->ext_start_event)
100047f0:	687b      	ldr	r3, [r7, #4]
100047f2:	681b      	ldr	r3, [r3, #0]
100047f4:	2220      	movs	r2, #32
100047f6:	5c9b      	ldrb	r3, [r3, r2]
100047f8:	2b00      	cmp	r3, #0
100047fa:	d104      	bne.n	10004806 <PWM_CCU4_Start+0x46>
    {
      XMC_CCU4_SLICE_StartTimer(handle_ptr->ccu4_slice_ptr);
100047fc:	687b      	ldr	r3, [r7, #4]
100047fe:	689b      	ldr	r3, [r3, #8]
10004800:	1c18      	adds	r0, r3, #0
10004802:	f7ff fd69 	bl	100042d8 <XMC_CCU4_SLICE_StartTimer>
    }

    handle_ptr->state = PWM_CCU4_STATE_RUNNING;
10004806:	687b      	ldr	r3, [r7, #4]
10004808:	2202      	movs	r2, #2
1000480a:	771a      	strb	r2, [r3, #28]
    status = PWM_CCU4_STATUS_SUCCESS;
1000480c:	230f      	movs	r3, #15
1000480e:	18fb      	adds	r3, r7, r3
10004810:	2200      	movs	r2, #0
10004812:	701a      	strb	r2, [r3, #0]
    XMC_DEBUG("PWM_CCU4_Start:start PWM");
  }
  return (status);
10004814:	230f      	movs	r3, #15
10004816:	18fb      	adds	r3, r7, r3
10004818:	781b      	ldrb	r3, [r3, #0]
} /* end of PWM_CCU4_Start() api */
1000481a:	1c18      	adds	r0, r3, #0
1000481c:	46bd      	mov	sp, r7
1000481e:	b004      	add	sp, #16
10004820:	bd80      	pop	{r7, pc}
10004822:	46c0      	nop			; (mov r8, r8)

10004824 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
10004824:	b580      	push	{r7, lr}
10004826:	b082      	sub	sp, #8
10004828:	af00      	add	r7, sp, #0
1000482a:	1c02      	adds	r2, r0, #0
1000482c:	1dfb      	adds	r3, r7, #7
1000482e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
10004830:	1dfb      	adds	r3, r7, #7
10004832:	781b      	ldrb	r3, [r3, #0]
10004834:	2b7f      	cmp	r3, #127	; 0x7f
10004836:	d809      	bhi.n	1000484c <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
10004838:	4b06      	ldr	r3, [pc, #24]	; (10004854 <__NVIC_EnableIRQ+0x30>)
1000483a:	1dfa      	adds	r2, r7, #7
1000483c:	7812      	ldrb	r2, [r2, #0]
1000483e:	1c11      	adds	r1, r2, #0
10004840:	221f      	movs	r2, #31
10004842:	400a      	ands	r2, r1
10004844:	2101      	movs	r1, #1
10004846:	4091      	lsls	r1, r2
10004848:	1c0a      	adds	r2, r1, #0
1000484a:	601a      	str	r2, [r3, #0]
  }
}
1000484c:	46bd      	mov	sp, r7
1000484e:	b002      	add	sp, #8
10004850:	bd80      	pop	{r7, pc}
10004852:	46c0      	nop			; (mov r8, r8)
10004854:	e000e100 	.word	0xe000e100

10004858 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
10004858:	b5b0      	push	{r4, r5, r7, lr}
1000485a:	b082      	sub	sp, #8
1000485c:	af00      	add	r7, sp, #0
1000485e:	1c02      	adds	r2, r0, #0
10004860:	6039      	str	r1, [r7, #0]
10004862:	1dfb      	adds	r3, r7, #7
10004864:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
10004866:	1dfb      	adds	r3, r7, #7
10004868:	781b      	ldrb	r3, [r3, #0]
1000486a:	2b7f      	cmp	r3, #127	; 0x7f
1000486c:	d827      	bhi.n	100048be <__NVIC_SetPriority+0x66>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
1000486e:	4c2d      	ldr	r4, [pc, #180]	; (10004924 <__NVIC_SetPriority+0xcc>)
10004870:	1dfb      	adds	r3, r7, #7
10004872:	781b      	ldrb	r3, [r3, #0]
10004874:	b25b      	sxtb	r3, r3
10004876:	089b      	lsrs	r3, r3, #2
10004878:	492a      	ldr	r1, [pc, #168]	; (10004924 <__NVIC_SetPriority+0xcc>)
1000487a:	1dfa      	adds	r2, r7, #7
1000487c:	7812      	ldrb	r2, [r2, #0]
1000487e:	b252      	sxtb	r2, r2
10004880:	0892      	lsrs	r2, r2, #2
10004882:	32c0      	adds	r2, #192	; 0xc0
10004884:	0092      	lsls	r2, r2, #2
10004886:	5852      	ldr	r2, [r2, r1]
10004888:	1df9      	adds	r1, r7, #7
1000488a:	7809      	ldrb	r1, [r1, #0]
1000488c:	1c08      	adds	r0, r1, #0
1000488e:	2103      	movs	r1, #3
10004890:	4001      	ands	r1, r0
10004892:	00c9      	lsls	r1, r1, #3
10004894:	1c08      	adds	r0, r1, #0
10004896:	21ff      	movs	r1, #255	; 0xff
10004898:	4081      	lsls	r1, r0
1000489a:	43c9      	mvns	r1, r1
1000489c:	4011      	ands	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
1000489e:	683a      	ldr	r2, [r7, #0]
100048a0:	0192      	lsls	r2, r2, #6
100048a2:	20ff      	movs	r0, #255	; 0xff
100048a4:	4002      	ands	r2, r0
100048a6:	1df8      	adds	r0, r7, #7
100048a8:	7800      	ldrb	r0, [r0, #0]
100048aa:	1c05      	adds	r5, r0, #0
100048ac:	2003      	movs	r0, #3
100048ae:	4028      	ands	r0, r5
100048b0:	00c0      	lsls	r0, r0, #3
100048b2:	4082      	lsls	r2, r0
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
100048b4:	430a      	orrs	r2, r1
100048b6:	33c0      	adds	r3, #192	; 0xc0
100048b8:	009b      	lsls	r3, r3, #2
100048ba:	511a      	str	r2, [r3, r4]
100048bc:	e02e      	b.n	1000491c <__NVIC_SetPriority+0xc4>
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
100048be:	4c1a      	ldr	r4, [pc, #104]	; (10004928 <__NVIC_SetPriority+0xd0>)
100048c0:	1dfb      	adds	r3, r7, #7
100048c2:	781b      	ldrb	r3, [r3, #0]
100048c4:	1c1a      	adds	r2, r3, #0
100048c6:	230f      	movs	r3, #15
100048c8:	4013      	ands	r3, r2
100048ca:	3b08      	subs	r3, #8
100048cc:	0899      	lsrs	r1, r3, #2
100048ce:	4a16      	ldr	r2, [pc, #88]	; (10004928 <__NVIC_SetPriority+0xd0>)
100048d0:	1dfb      	adds	r3, r7, #7
100048d2:	781b      	ldrb	r3, [r3, #0]
100048d4:	1c18      	adds	r0, r3, #0
100048d6:	230f      	movs	r3, #15
100048d8:	4003      	ands	r3, r0
100048da:	3b08      	subs	r3, #8
100048dc:	089b      	lsrs	r3, r3, #2
100048de:	3306      	adds	r3, #6
100048e0:	009b      	lsls	r3, r3, #2
100048e2:	18d3      	adds	r3, r2, r3
100048e4:	685b      	ldr	r3, [r3, #4]
100048e6:	1dfa      	adds	r2, r7, #7
100048e8:	7812      	ldrb	r2, [r2, #0]
100048ea:	1c10      	adds	r0, r2, #0
100048ec:	2203      	movs	r2, #3
100048ee:	4002      	ands	r2, r0
100048f0:	00d2      	lsls	r2, r2, #3
100048f2:	1c10      	adds	r0, r2, #0
100048f4:	22ff      	movs	r2, #255	; 0xff
100048f6:	4082      	lsls	r2, r0
100048f8:	43d2      	mvns	r2, r2
100048fa:	401a      	ands	r2, r3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
100048fc:	683b      	ldr	r3, [r7, #0]
100048fe:	019b      	lsls	r3, r3, #6
10004900:	20ff      	movs	r0, #255	; 0xff
10004902:	4003      	ands	r3, r0
10004904:	1df8      	adds	r0, r7, #7
10004906:	7800      	ldrb	r0, [r0, #0]
10004908:	1c05      	adds	r5, r0, #0
1000490a:	2003      	movs	r0, #3
1000490c:	4028      	ands	r0, r5
1000490e:	00c0      	lsls	r0, r0, #3
10004910:	4083      	lsls	r3, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10004912:	431a      	orrs	r2, r3
10004914:	1d8b      	adds	r3, r1, #6
10004916:	009b      	lsls	r3, r3, #2
10004918:	18e3      	adds	r3, r4, r3
1000491a:	605a      	str	r2, [r3, #4]
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
1000491c:	46bd      	mov	sp, r7
1000491e:	b002      	add	sp, #8
10004920:	bdb0      	pop	{r4, r5, r7, pc}
10004922:	46c0      	nop			; (mov r8, r8)
10004924:	e000e100 	.word	0xe000e100
10004928:	e000ed00 	.word	0xe000ed00

1000492c <INTERRUPT_Enable>:
 *    return 0;
 *  }
 * @endcode<BR> </p>
 */
__STATIC_INLINE void INTERRUPT_Enable(const INTERRUPT_t *const handler)
{
1000492c:	b580      	push	{r7, lr}
1000492e:	b082      	sub	sp, #8
10004930:	af00      	add	r7, sp, #0
10004932:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("Handler NULL", (handler != NULL));
  NVIC_EnableIRQ(handler->node);
10004934:	687b      	ldr	r3, [r7, #4]
10004936:	781b      	ldrb	r3, [r3, #0]
10004938:	b25b      	sxtb	r3, r3
1000493a:	1c18      	adds	r0, r3, #0
1000493c:	f7ff ff72 	bl	10004824 <__NVIC_EnableIRQ>
}
10004940:	46bd      	mov	sp, r7
10004942:	b002      	add	sp, #8
10004944:	bd80      	pop	{r7, pc}
10004946:	46c0      	nop			; (mov r8, r8)

10004948 <INTERRUPT_Init>:

/*
 * API to initialize the INTERRUPT APP
 */
INTERRUPT_STATUS_t INTERRUPT_Init(const INTERRUPT_t *const handler)
{
10004948:	b580      	push	{r7, lr}
1000494a:	b082      	sub	sp, #8
1000494c:	af00      	add	r7, sp, #0
1000494e:	6078      	str	r0, [r7, #4]
    INTERRUPT_Enable(handler);
  }
#endif

#if(UC_FAMILY == XMC1)
  NVIC_SetPriority(handler->node, handler->priority);
10004950:	687b      	ldr	r3, [r7, #4]
10004952:	781a      	ldrb	r2, [r3, #0]
10004954:	687b      	ldr	r3, [r7, #4]
10004956:	785b      	ldrb	r3, [r3, #1]
10004958:	1c19      	adds	r1, r3, #0
1000495a:	b253      	sxtb	r3, r2
1000495c:	1c18      	adds	r0, r3, #0
1000495e:	f7ff ff7b 	bl	10004858 <__NVIC_SetPriority>
#if (UC_SERIES == XMC14)
  XMC_SCU_SetInterruptControl((uint8_t)handler->node, (XMC_SCU_IRQCTRL_t)((handler->node << 8) | handler->irqctrl));
#endif

  /* Enable the interrupt if enable_at_init is enabled */
  if (handler->enable_at_init == true)
10004962:	687b      	ldr	r3, [r7, #4]
10004964:	789b      	ldrb	r3, [r3, #2]
10004966:	2b00      	cmp	r3, #0
10004968:	d003      	beq.n	10004972 <INTERRUPT_Init+0x2a>
  {
    INTERRUPT_Enable(handler);
1000496a:	687b      	ldr	r3, [r7, #4]
1000496c:	1c18      	adds	r0, r3, #0
1000496e:	f7ff ffdd 	bl	1000492c <INTERRUPT_Enable>
  }
#endif

  return (INTERRUPT_STATUS_SUCCESS);
10004972:	2300      	movs	r3, #0
}
10004974:	1c18      	adds	r0, r3, #0
10004976:	46bd      	mov	sp, r7
10004978:	b002      	add	sp, #8
1000497a:	bd80      	pop	{r7, pc}

1000497c <XMC_CCU8_StartPrescaler>:
 * \par<b>Related APIs:</b><br>
 * XMC_CCU8_Init()<BR>  XMC_CCU8_EnableClock()<BR>  XMC_CCU8_DisableClock()<BR>  XMC_CCU8_StartPrescaler()<BR> 
 *  XMC_CCU8_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU8_StartPrescaler(XMC_CCU8_MODULE_t *const module)
{
1000497c:	b580      	push	{r7, lr}
1000497e:	b082      	sub	sp, #8
10004980:	af00      	add	r7, sp, #0
10004982:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU8_StartPrescaler:Invalid Module Pointer", XMC_CCU8_IsValidModule(module));
  module->GIDLC |= (uint32_t) CCU8_GIDLC_SPRB_Msk;
10004984:	687b      	ldr	r3, [r7, #4]
10004986:	68db      	ldr	r3, [r3, #12]
10004988:	2280      	movs	r2, #128	; 0x80
1000498a:	0052      	lsls	r2, r2, #1
1000498c:	431a      	orrs	r2, r3
1000498e:	687b      	ldr	r3, [r7, #4]
10004990:	60da      	str	r2, [r3, #12]
}
10004992:	46bd      	mov	sp, r7
10004994:	b002      	add	sp, #8
10004996:	bd80      	pop	{r7, pc}

10004998 <GLOBAL_CCU8_Init>:
  return version;
}

/* Initializes the slice with the generated configuration */
GLOBAL_CCU8_STATUS_t GLOBAL_CCU8_Init(GLOBAL_CCU8_t* handle)
{
10004998:	b580      	push	{r7, lr}
1000499a:	b082      	sub	sp, #8
1000499c:	af00      	add	r7, sp, #0
1000499e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("GLOBAL_CCU8_Init:NULL handler", (NULL != handle));

  if (false == handle->is_initialized)
100049a0:	687b      	ldr	r3, [r7, #4]
100049a2:	7b5b      	ldrb	r3, [r3, #13]
100049a4:	2201      	movs	r2, #1
100049a6:	4053      	eors	r3, r2
100049a8:	b2db      	uxtb	r3, r3
100049aa:	2b00      	cmp	r3, #0
100049ac:	d00f      	beq.n	100049ce <GLOBAL_CCU8_Init+0x36>
  {
    /* Enable CCU8 module */
    XMC_CCU8_Init(handle->module_ptr,handle->mcs_action);
100049ae:	687b      	ldr	r3, [r7, #4]
100049b0:	689a      	ldr	r2, [r3, #8]
100049b2:	687b      	ldr	r3, [r7, #4]
100049b4:	7b1b      	ldrb	r3, [r3, #12]
100049b6:	1c10      	adds	r0, r2, #0
100049b8:	1c19      	adds	r1, r3, #0
100049ba:	f7fd f91f 	bl	10001bfc <XMC_CCU8_Init>
    /* Start the prescaler */
    XMC_CCU8_StartPrescaler(handle->module_ptr);
100049be:	687b      	ldr	r3, [r7, #4]
100049c0:	689b      	ldr	r3, [r3, #8]
100049c2:	1c18      	adds	r0, r3, #0
100049c4:	f7ff ffda 	bl	1000497c <XMC_CCU8_StartPrescaler>
    /* Restricts multiple initializations */
    handle->is_initialized = true;
100049c8:	687b      	ldr	r3, [r7, #4]
100049ca:	2201      	movs	r2, #1
100049cc:	735a      	strb	r2, [r3, #13]
  }

  return (GLOBAL_CCU8_STATUS_SUCCESS);
100049ce:	2300      	movs	r3, #0
}
100049d0:	1c18      	adds	r0, r3, #0
100049d2:	46bd      	mov	sp, r7
100049d4:	b002      	add	sp, #8
100049d6:	bd80      	pop	{r7, pc}

100049d8 <XMC_CCU4_StartPrescaler>:
 * \par<b>Related APIs:</b><br>
 * XMC_CCU4_Init()<BR> XMC_CCU4_EnableClock()<BR> XMC_CCU4_DisableClock()<BR> XMC_CCU4_StartPrescaler()<BR>
 * XMC_CCU4_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU4_StartPrescaler(XMC_CCU4_MODULE_t *const module)
{
100049d8:	b580      	push	{r7, lr}
100049da:	b082      	sub	sp, #8
100049dc:	af00      	add	r7, sp, #0
100049de:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_StartPrescaler:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
  module->GIDLC |= (uint32_t) CCU4_GIDLC_SPRB_Msk;
100049e0:	687b      	ldr	r3, [r7, #4]
100049e2:	68db      	ldr	r3, [r3, #12]
100049e4:	2280      	movs	r2, #128	; 0x80
100049e6:	0052      	lsls	r2, r2, #1
100049e8:	431a      	orrs	r2, r3
100049ea:	687b      	ldr	r3, [r7, #4]
100049ec:	60da      	str	r2, [r3, #12]
}
100049ee:	46bd      	mov	sp, r7
100049f0:	b002      	add	sp, #8
100049f2:	bd80      	pop	{r7, pc}

100049f4 <GLOBAL_CCU4_Init>:
  return version;
}

/* Initializes the slice with the generated configuration */
GLOBAL_CCU4_STATUS_t GLOBAL_CCU4_Init(GLOBAL_CCU4_t* handle)
{
100049f4:	b580      	push	{r7, lr}
100049f6:	b082      	sub	sp, #8
100049f8:	af00      	add	r7, sp, #0
100049fa:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("GLOBAL_CCU4_Init:NULL handler", (NULL != handle));

  if (false == handle->is_initialized)
100049fc:	687b      	ldr	r3, [r7, #4]
100049fe:	7b5b      	ldrb	r3, [r3, #13]
10004a00:	2201      	movs	r2, #1
10004a02:	4053      	eors	r3, r2
10004a04:	b2db      	uxtb	r3, r3
10004a06:	2b00      	cmp	r3, #0
10004a08:	d00f      	beq.n	10004a2a <GLOBAL_CCU4_Init+0x36>
  {
    /* Enable CCU4 module */
    XMC_CCU4_Init(handle->module_ptr,handle->mcs_action);
10004a0a:	687b      	ldr	r3, [r7, #4]
10004a0c:	689a      	ldr	r2, [r3, #8]
10004a0e:	687b      	ldr	r3, [r7, #4]
10004a10:	7b1b      	ldrb	r3, [r3, #12]
10004a12:	1c10      	adds	r0, r2, #0
10004a14:	1c19      	adds	r1, r3, #0
10004a16:	f7fc fd83 	bl	10001520 <XMC_CCU4_Init>
    /* Start the prescaler */
    XMC_CCU4_StartPrescaler(handle->module_ptr);
10004a1a:	687b      	ldr	r3, [r7, #4]
10004a1c:	689b      	ldr	r3, [r3, #8]
10004a1e:	1c18      	adds	r0, r3, #0
10004a20:	f7ff ffda 	bl	100049d8 <XMC_CCU4_StartPrescaler>
    /* Restricts multiple initializations */
    handle->is_initialized = true;
10004a24:	687b      	ldr	r3, [r7, #4]
10004a26:	2201      	movs	r2, #1
10004a28:	735a      	strb	r2, [r3, #13]
  }

  return (GLOBAL_CCU4_STATUS_SUCCESS);
10004a2a:	2300      	movs	r3, #0
}
10004a2c:	1c18      	adds	r0, r3, #0
10004a2e:	46bd      	mov	sp, r7
10004a30:	b002      	add	sp, #8
10004a32:	bd80      	pop	{r7, pc}

10004a34 <XMC_VADC_GLOBAL_DisablePostCalibration>:
 * XMC_VADC_GLOBAL_DisablePostCalibration()<BR>
 * None
 */

__STATIC_INLINE void XMC_VADC_GLOBAL_DisablePostCalibration(XMC_VADC_GLOBAL_t *const global_ptr, uint32_t group_number)
{
10004a34:	b580      	push	{r7, lr}
10004a36:	b082      	sub	sp, #8
10004a38:	af00      	add	r7, sp, #0
10004a3a:	6078      	str	r0, [r7, #4]
10004a3c:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_VADC_GLOBAL_DisablePostCalibration:Wrong Module Pointer", (global_ptr == VADC))

  global_ptr->GLOBCFG |= (uint32_t)((uint32_t)1 << ((uint32_t)VADC_GLOBCFG_DPCAL0_Pos + group_number));
10004a3e:	687b      	ldr	r3, [r7, #4]
10004a40:	2280      	movs	r2, #128	; 0x80
10004a42:	589a      	ldr	r2, [r3, r2]
10004a44:	683b      	ldr	r3, [r7, #0]
10004a46:	3310      	adds	r3, #16
10004a48:	1c19      	adds	r1, r3, #0
10004a4a:	2301      	movs	r3, #1
10004a4c:	408b      	lsls	r3, r1
10004a4e:	431a      	orrs	r2, r3
10004a50:	687b      	ldr	r3, [r7, #4]
10004a52:	2180      	movs	r1, #128	; 0x80
10004a54:	505a      	str	r2, [r3, r1]
}
10004a56:	46bd      	mov	sp, r7
10004a58:	b002      	add	sp, #8
10004a5a:	bd80      	pop	{r7, pc}

10004a5c <XMC_VADC_GLOBAL_SHS_SetAnalogReference>:
 * \par<b>Related APIs:</b><BR>
 * None.
 */
 __STATIC_INLINE void XMC_VADC_GLOBAL_SHS_SetAnalogReference(XMC_VADC_GLOBAL_SHS_t *const shs_ptr,
                                                            const XMC_VADC_GLOBAL_SHS_AREF_t aref)
 {
10004a5c:	b580      	push	{r7, lr}
10004a5e:	b082      	sub	sp, #8
10004a60:	af00      	add	r7, sp, #0
10004a62:	6078      	str	r0, [r7, #4]
10004a64:	1c0a      	adds	r2, r1, #0
10004a66:	1cfb      	adds	r3, r7, #3
10004a68:	701a      	strb	r2, [r3, #0]
  XMC_ASSERT("XMC_VADC_GLOBAL_SHS_StepperInit:Wrong SHS Pointer",
             (shs_ptr == (XMC_VADC_GLOBAL_SHS_t*)(void*)SHS0))

  shs_ptr->SHSCFG |=  (shs_ptr->SHSCFG & (uint32_t)~SHS_SHSCFG_AREF_Msk) | (uint32_t)aref;  
10004a6a:	687b      	ldr	r3, [r7, #4]
10004a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
10004a6e:	4a06      	ldr	r2, [pc, #24]	; (10004a88 <XMC_VADC_GLOBAL_SHS_SetAnalogReference+0x2c>)
10004a70:	401a      	ands	r2, r3
10004a72:	1cfb      	adds	r3, r7, #3
10004a74:	781b      	ldrb	r3, [r3, #0]
10004a76:	431a      	orrs	r2, r3
10004a78:	687b      	ldr	r3, [r7, #4]
10004a7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
10004a7c:	431a      	orrs	r2, r3
10004a7e:	687b      	ldr	r3, [r7, #4]
10004a80:	641a      	str	r2, [r3, #64]	; 0x40
 }
10004a82:	46bd      	mov	sp, r7
10004a84:	b002      	add	sp, #8
10004a86:	bd80      	pop	{r7, pc}
10004a88:	fffff3ff 	.word	0xfffff3ff

10004a8c <XMC_VADC_GLOBAL_SHS_SetClockDivider>:
 *
 * \par<b>Related APIs:</b><BR>
 * None.
 */
__STATIC_INLINE void XMC_VADC_GLOBAL_SHS_SetClockDivider(XMC_VADC_GLOBAL_SHS_t *const shs_ptr, uint8_t divs_value)
{
10004a8c:	b580      	push	{r7, lr}
10004a8e:	b082      	sub	sp, #8
10004a90:	af00      	add	r7, sp, #0
10004a92:	6078      	str	r0, [r7, #4]
10004a94:	1c0a      	adds	r2, r1, #0
10004a96:	1cfb      	adds	r3, r7, #3
10004a98:	701a      	strb	r2, [r3, #0]
  XMC_ASSERT("XMC_VADC_GLOBAL_SHS_SetClockDivider:Wrong SHS Pointer",
             (shs_ptr == (XMC_VADC_GLOBAL_SHS_t*)(void*)SHS0))
  XMC_ASSERT("XMC_VADC_GLOBAL_SHS_SetClockDivider:Wrong divide factor selected",
             (divs_value < (uint32_t)0x10))

  shs_ptr->SHSCFG =  (shs_ptr->SHSCFG & (~(uint32_t)SHS_SHSCFG_DIVS_Msk)) | (uint32_t)SHS_SHSCFG_SCWC_Msk;
10004a9a:	687b      	ldr	r3, [r7, #4]
10004a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
10004a9e:	4a0a      	ldr	r2, [pc, #40]	; (10004ac8 <XMC_VADC_GLOBAL_SHS_SetClockDivider+0x3c>)
10004aa0:	4013      	ands	r3, r2
10004aa2:	2280      	movs	r2, #128	; 0x80
10004aa4:	0212      	lsls	r2, r2, #8
10004aa6:	431a      	orrs	r2, r3
10004aa8:	687b      	ldr	r3, [r7, #4]
10004aaa:	641a      	str	r2, [r3, #64]	; 0x40
  shs_ptr->SHSCFG |=  ((uint32_t)divs_value << SHS_SHSCFG_DIVS_Pos) | (uint32_t)SHS_SHSCFG_SCWC_Msk;
10004aac:	687b      	ldr	r3, [r7, #4]
10004aae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
10004ab0:	1cfb      	adds	r3, r7, #3
10004ab2:	781b      	ldrb	r3, [r3, #0]
10004ab4:	4313      	orrs	r3, r2
10004ab6:	2280      	movs	r2, #128	; 0x80
10004ab8:	0212      	lsls	r2, r2, #8
10004aba:	431a      	orrs	r2, r3
10004abc:	687b      	ldr	r3, [r7, #4]
10004abe:	641a      	str	r2, [r3, #64]	; 0x40
}
10004ac0:	46bd      	mov	sp, r7
10004ac2:	b002      	add	sp, #8
10004ac4:	bd80      	pop	{r7, pc}
10004ac6:	46c0      	nop			; (mov r8, r8)
10004ac8:	ffff7ff0 	.word	0xffff7ff0

10004acc <GLOBAL_ADC_Init>:
/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/**
 * This function initializes all instances of the ADC Global APP and low level app.
 */
GLOBAL_ADC_STATUS_t GLOBAL_ADC_Init(GLOBAL_ADC_t *const handle_ptr)
{
10004acc:	b580      	push	{r7, lr}
10004ace:	b084      	sub	sp, #16
10004ad0:	af00      	add	r7, sp, #0
10004ad2:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("GLOBAL_ADC_Init:Invalid handle_ptr", (handle_ptr != NULL))
#if (XMC_VADC_GROUP_AVAILABLE == 1U)
  uint32_t group_index;
#endif

  if (GLOBAL_ADC_UNINITIALIZED == handle_ptr->init_state)
10004ad4:	687b      	ldr	r3, [r7, #4]
10004ad6:	7e1b      	ldrb	r3, [r3, #24]
10004ad8:	2b02      	cmp	r3, #2
10004ada:	d15e      	bne.n	10004b9a <GLOBAL_ADC_Init+0xce>
  {  
    /* Initialize an instance of Global hardware */
    XMC_VADC_GLOBAL_Init(handle_ptr->module_ptr, handle_ptr->global_config_handle);
10004adc:	687b      	ldr	r3, [r7, #4]
10004ade:	68da      	ldr	r2, [r3, #12]
10004ae0:	687b      	ldr	r3, [r7, #4]
10004ae2:	689b      	ldr	r3, [r3, #8]
10004ae4:	1c10      	adds	r0, r2, #0
10004ae6:	1c19      	adds	r1, r3, #0
10004ae8:	f7fd ffb6 	bl	10002a58 <XMC_VADC_GLOBAL_Init>

    /* Initialize all the Groups */
#if (XMC_VADC_GROUP_AVAILABLE == 1U)
    for(group_index = (uint32_t)0; group_index < XMC_VADC_MAXIMUM_NUM_GROUPS; group_index++)
10004aec:	2300      	movs	r3, #0
10004aee:	60fb      	str	r3, [r7, #12]
10004af0:	e038      	b.n	10004b64 <GLOBAL_ADC_Init+0x98>
    {
      /*Initialize Group*/
      XMC_VADC_GROUP_Init(handle_ptr->group_ptrs_array[group_index]->group_handle,
10004af2:	687b      	ldr	r3, [r7, #4]
10004af4:	68fa      	ldr	r2, [r7, #12]
10004af6:	0092      	lsls	r2, r2, #2
10004af8:	58d3      	ldr	r3, [r2, r3]
10004afa:	6819      	ldr	r1, [r3, #0]
    		            handle_ptr->group_ptrs_array[group_index]->group_config_handle);
10004afc:	687b      	ldr	r3, [r7, #4]
10004afe:	68fa      	ldr	r2, [r7, #12]
10004b00:	0092      	lsls	r2, r2, #2
10004b02:	58d3      	ldr	r3, [r2, r3]
    /* Initialize all the Groups */
#if (XMC_VADC_GROUP_AVAILABLE == 1U)
    for(group_index = (uint32_t)0; group_index < XMC_VADC_MAXIMUM_NUM_GROUPS; group_index++)
    {
      /*Initialize Group*/
      XMC_VADC_GROUP_Init(handle_ptr->group_ptrs_array[group_index]->group_handle,
10004b04:	685b      	ldr	r3, [r3, #4]
10004b06:	1c08      	adds	r0, r1, #0
10004b08:	1c19      	adds	r1, r3, #0
10004b0a:	f7fe f80b 	bl	10002b24 <XMC_VADC_GROUP_Init>
    		            handle_ptr->group_ptrs_array[group_index]->group_config_handle);

      /* Switch on the converter of the Group[group_index]*/
      XMC_VADC_GROUP_SetPowerMode(handle_ptr->group_ptrs_array[group_index]->group_handle,
10004b0e:	687b      	ldr	r3, [r7, #4]
10004b10:	68fa      	ldr	r2, [r7, #12]
10004b12:	0092      	lsls	r2, r2, #2
10004b14:	58d3      	ldr	r3, [r2, r3]
10004b16:	681b      	ldr	r3, [r3, #0]
10004b18:	1c18      	adds	r0, r3, #0
10004b1a:	2103      	movs	r1, #3
10004b1c:	f7fe f8aa 	bl	10002c74 <XMC_VADC_GROUP_SetPowerMode>
                                  XMC_VADC_GROUP_POWERMODE_NORMAL);

      /* Disable the post calibration option for the respective group*/
      if ((bool)false == handle_ptr->group_ptrs_array[group_index]->post_calibration)
10004b20:	687b      	ldr	r3, [r7, #4]
10004b22:	68fa      	ldr	r2, [r7, #12]
10004b24:	0092      	lsls	r2, r2, #2
10004b26:	58d3      	ldr	r3, [r2, r3]
10004b28:	7a1b      	ldrb	r3, [r3, #8]
10004b2a:	2201      	movs	r2, #1
10004b2c:	4053      	eors	r3, r2
10004b2e:	b2db      	uxtb	r3, r3
10004b30:	2b00      	cmp	r3, #0
10004b32:	d006      	beq.n	10004b42 <GLOBAL_ADC_Init+0x76>
      {
        XMC_VADC_GLOBAL_DisablePostCalibration(handle_ptr->module_ptr,group_index);
10004b34:	687b      	ldr	r3, [r7, #4]
10004b36:	68da      	ldr	r2, [r3, #12]
10004b38:	68fb      	ldr	r3, [r7, #12]
10004b3a:	1c10      	adds	r0, r2, #0
10004b3c:	1c19      	adds	r1, r3, #0
10004b3e:	f7ff ff79 	bl	10004a34 <XMC_VADC_GLOBAL_DisablePostCalibration>
      }

#if(XMC_VADC_SHS_AVAILABLE == 1U)
      XMC_VADC_GLOBAL_SHS_EnableAcceleratedMode(handle_ptr->global_shs_ptr, (XMC_VADC_GROUP_INDEX_t)group_index);
10004b42:	687b      	ldr	r3, [r7, #4]
10004b44:	691a      	ldr	r2, [r3, #16]
10004b46:	68fb      	ldr	r3, [r7, #12]
10004b48:	b2db      	uxtb	r3, r3
10004b4a:	1c10      	adds	r0, r2, #0
10004b4c:	1c19      	adds	r1, r3, #0
10004b4e:	f7fe f913 	bl	10002d78 <XMC_VADC_GLOBAL_SHS_EnableAcceleratedMode>
#endif

      handle_ptr->group_ptrs_array[group_index]->state = GLOBAL_ADC_SUCCESS;
10004b52:	687b      	ldr	r3, [r7, #4]
10004b54:	68fa      	ldr	r2, [r7, #12]
10004b56:	0092      	lsls	r2, r2, #2
10004b58:	58d3      	ldr	r3, [r2, r3]
10004b5a:	2200      	movs	r2, #0
10004b5c:	725a      	strb	r2, [r3, #9]
    /* Initialize an instance of Global hardware */
    XMC_VADC_GLOBAL_Init(handle_ptr->module_ptr, handle_ptr->global_config_handle);

    /* Initialize all the Groups */
#if (XMC_VADC_GROUP_AVAILABLE == 1U)
    for(group_index = (uint32_t)0; group_index < XMC_VADC_MAXIMUM_NUM_GROUPS; group_index++)
10004b5e:	68fb      	ldr	r3, [r7, #12]
10004b60:	3301      	adds	r3, #1
10004b62:	60fb      	str	r3, [r7, #12]
10004b64:	68fb      	ldr	r3, [r7, #12]
10004b66:	2b01      	cmp	r3, #1
10004b68:	d9c3      	bls.n	10004af2 <GLOBAL_ADC_Init+0x26>
#endif

      handle_ptr->group_ptrs_array[group_index]->state = GLOBAL_ADC_SUCCESS;
    }
#if(XMC_VADC_SHS_AVAILABLE == 1U)
    XMC_VADC_GLOBAL_SHS_SetClockDivider(handle_ptr->global_shs_ptr, (uint8_t) GLOBAL_ADC_DIVS_VALUE);
10004b6a:	687b      	ldr	r3, [r7, #4]
10004b6c:	691b      	ldr	r3, [r3, #16]
10004b6e:	1c18      	adds	r0, r3, #0
10004b70:	2100      	movs	r1, #0
10004b72:	f7ff ff8b 	bl	10004a8c <XMC_VADC_GLOBAL_SHS_SetClockDivider>
#endif
#endif /* _XMC_VADC_GROUP_AVAILABLE_ */
#if(XMC_VADC_SHS_AVAILABLE == 1U)
    XMC_VADC_GLOBAL_SHS_SetAnalogReference(handle_ptr->global_shs_ptr, GLOBAL_ADC_AREF_VALUE);
10004b76:	687b      	ldr	r3, [r7, #4]
10004b78:	691b      	ldr	r3, [r3, #16]
10004b7a:	1c18      	adds	r0, r3, #0
10004b7c:	2100      	movs	r1, #0
10004b7e:	f7ff ff6d 	bl	10004a5c <XMC_VADC_GLOBAL_SHS_SetAnalogReference>
#endif
    if((bool)true == handle_ptr->enable_startup_calibration)
10004b82:	687b      	ldr	r3, [r7, #4]
10004b84:	7e5b      	ldrb	r3, [r3, #25]
10004b86:	2b00      	cmp	r3, #0
10004b88:	d004      	beq.n	10004b94 <GLOBAL_ADC_Init+0xc8>
    {
    	XMC_VADC_GLOBAL_StartupCalibration(handle_ptr->module_ptr);
10004b8a:	687b      	ldr	r3, [r7, #4]
10004b8c:	68db      	ldr	r3, [r3, #12]
10004b8e:	1c18      	adds	r0, r3, #0
10004b90:	f7fd ff8e 	bl	10002ab0 <XMC_VADC_GLOBAL_StartupCalibration>
    }
    handle_ptr->init_state = GLOBAL_ADC_SUCCESS;
10004b94:	687b      	ldr	r3, [r7, #4]
10004b96:	2200      	movs	r2, #0
10004b98:	761a      	strb	r2, [r3, #24]
  }
  return (handle_ptr->init_state);
10004b9a:	687b      	ldr	r3, [r7, #4]
10004b9c:	7e1b      	ldrb	r3, [r3, #24]
}
10004b9e:	1c18      	adds	r0, r3, #0
10004ba0:	46bd      	mov	sp, r7
10004ba2:	b004      	add	sp, #16
10004ba4:	bd80      	pop	{r7, pc}
10004ba6:	46c0      	nop			; (mov r8, r8)

10004ba8 <DIGITAL_IO_Init>:
* @param handler Pointer pointing to APP data structure.
* @return DIGITAL_IO_STATUS_t DIGITAL_IO APP status.
*/

DIGITAL_IO_STATUS_t DIGITAL_IO_Init(const DIGITAL_IO_t *const handler)
{
10004ba8:	b580      	push	{r7, lr}
10004baa:	b082      	sub	sp, #8
10004bac:	af00      	add	r7, sp, #0
10004bae:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("DIGITAL_IO_Init: handler null pointer", handler != NULL);

  /* Initializes input / output characteristics */
  XMC_GPIO_Init(handler->gpio_port, handler->gpio_pin, &handler->gpio_config);
10004bb0:	687b      	ldr	r3, [r7, #4]
10004bb2:	6819      	ldr	r1, [r3, #0]
10004bb4:	687b      	ldr	r3, [r7, #4]
10004bb6:	7b1a      	ldrb	r2, [r3, #12]
10004bb8:	687b      	ldr	r3, [r7, #4]
10004bba:	3304      	adds	r3, #4
10004bbc:	1c08      	adds	r0, r1, #0
10004bbe:	1c11      	adds	r1, r2, #0
10004bc0:	1c1a      	adds	r2, r3, #0
10004bc2:	f7fc faa7 	bl	10001114 <XMC_GPIO_Init>

  /*Configure hardware port control*/
  XMC_GPIO_SetHardwareControl(handler->gpio_port, handler->gpio_pin, handler->hwctrl);
10004bc6:	687b      	ldr	r3, [r7, #4]
10004bc8:	6819      	ldr	r1, [r3, #0]
10004bca:	687b      	ldr	r3, [r7, #4]
10004bcc:	7b1a      	ldrb	r2, [r3, #12]
10004bce:	687b      	ldr	r3, [r7, #4]
10004bd0:	7b5b      	ldrb	r3, [r3, #13]
10004bd2:	1c08      	adds	r0, r1, #0
10004bd4:	1c11      	adds	r1, r2, #0
10004bd6:	1c1a      	adds	r2, r3, #0
10004bd8:	f7fd fbb8 	bl	1000234c <XMC_GPIO_SetHardwareControl>

  return (DIGITAL_IO_STATUS_OK);
10004bdc:	2300      	movs	r3, #0
}
10004bde:	1c18      	adds	r0, r3, #0
10004be0:	46bd      	mov	sp, r7
10004be2:	b002      	add	sp, #8
10004be4:	bd80      	pop	{r7, pc}
10004be6:	46c0      	nop			; (mov r8, r8)

10004be8 <SystemCoreSetup>:
{
  .initialized = false
};
 
void SystemCoreSetup(void)
{
10004be8:	b580      	push	{r7, lr}
10004bea:	af00      	add	r7, sp, #0

}
10004bec:	46bd      	mov	sp, r7
10004bee:	bd80      	pop	{r7, pc}

10004bf0 <CLOCK_XMC1_Init>:

/*
 * API to initialize the CLOCK_XMC1 APP Interrupts
 */
CLOCK_XMC1_STATUS_t CLOCK_XMC1_Init(CLOCK_XMC1_t *handle)
{
10004bf0:	b580      	push	{r7, lr}
10004bf2:	b084      	sub	sp, #16
10004bf4:	af00      	add	r7, sp, #0
10004bf6:	6078      	str	r0, [r7, #4]
  CLOCK_XMC1_STATUS_t status = CLOCK_XMC1_STATUS_SUCCESS;
10004bf8:	230f      	movs	r3, #15
10004bfa:	18fb      	adds	r3, r7, r3
10004bfc:	2200      	movs	r2, #0
10004bfe:	701a      	strb	r2, [r3, #0]
  CLOCK_XMC1_STATUS_t loci_event_status = CLOCK_XMC1_STATUS_SUCCESS;
10004c00:	230e      	movs	r3, #14
10004c02:	18fb      	adds	r3, r7, r3
10004c04:	2200      	movs	r2, #0
10004c06:	701a      	strb	r2, [r3, #0]
  CLOCK_XMC1_STATUS_t stdbyclkfail_status = CLOCK_XMC1_STATUS_SUCCESS;
10004c08:	230d      	movs	r3, #13
10004c0a:	18fb      	adds	r3, r7, r3
10004c0c:	2200      	movs	r2, #0
10004c0e:	701a      	strb	r2, [r3, #0]
  CLOCK_XMC1_STATUS_t loss_ext_clock_event_status = CLOCK_XMC1_STATUS_SUCCESS;
10004c10:	230c      	movs	r3, #12
10004c12:	18fb      	adds	r3, r7, r3
10004c14:	2200      	movs	r2, #0
10004c16:	701a      	strb	r2, [r3, #0]
  CLOCK_XMC1_STATUS_t dco1_out_sync_status = CLOCK_XMC1_STATUS_SUCCESS;
10004c18:	230b      	movs	r3, #11
10004c1a:	18fb      	adds	r3, r7, r3
10004c1c:	2200      	movs	r2, #0
10004c1e:	701a      	strb	r2, [r3, #0]

  XMC_ASSERT("CLOCK_XMC1_Init: CLOCK_XMC1 APP handle pointer uninitialized", (handle != NULL));

  if (handle->init_status == false)
10004c20:	687b      	ldr	r3, [r7, #4]
10004c22:	781b      	ldrb	r3, [r3, #0]
10004c24:	2201      	movs	r2, #1
10004c26:	4053      	eors	r3, r2
10004c28:	b2db      	uxtb	r3, r3
10004c2a:	2b00      	cmp	r3, #0
10004c2c:	d01b      	beq.n	10004c66 <CLOCK_XMC1_Init+0x76>

#endif
    }

#endif
    status = (CLOCK_XMC1_STATUS_t)(((uint32_t)loci_event_status) | ((uint32_t)stdbyclkfail_status) |
10004c2e:	230e      	movs	r3, #14
10004c30:	18fa      	adds	r2, r7, r3
10004c32:	230d      	movs	r3, #13
10004c34:	18fb      	adds	r3, r7, r3
10004c36:	7812      	ldrb	r2, [r2, #0]
10004c38:	781b      	ldrb	r3, [r3, #0]
10004c3a:	4313      	orrs	r3, r2
10004c3c:	b2da      	uxtb	r2, r3
10004c3e:	230c      	movs	r3, #12
10004c40:	18fb      	adds	r3, r7, r3
10004c42:	781b      	ldrb	r3, [r3, #0]
10004c44:	4313      	orrs	r3, r2
10004c46:	b2d9      	uxtb	r1, r3
10004c48:	230f      	movs	r3, #15
10004c4a:	18fb      	adds	r3, r7, r3
10004c4c:	220b      	movs	r2, #11
10004c4e:	18ba      	adds	r2, r7, r2
10004c50:	7812      	ldrb	r2, [r2, #0]
10004c52:	430a      	orrs	r2, r1
10004c54:	701a      	strb	r2, [r3, #0]
    		                       ((uint32_t)loss_ext_clock_event_status) | ((uint32_t)dco1_out_sync_status));
    if (CLOCK_XMC1_STATUS_SUCCESS == status)
10004c56:	230f      	movs	r3, #15
10004c58:	18fb      	adds	r3, r7, r3
10004c5a:	781b      	ldrb	r3, [r3, #0]
10004c5c:	2b00      	cmp	r3, #0
10004c5e:	d102      	bne.n	10004c66 <CLOCK_XMC1_Init+0x76>
    {
      handle->init_status = true;
10004c60:	687b      	ldr	r3, [r7, #4]
10004c62:	2201      	movs	r2, #1
10004c64:	701a      	strb	r2, [r3, #0]
    }
  }
  return (status);
10004c66:	230f      	movs	r3, #15
10004c68:	18fb      	adds	r3, r7, r3
10004c6a:	781b      	ldrb	r3, [r3, #0]
}
10004c6c:	1c18      	adds	r0, r3, #0
10004c6e:	46bd      	mov	sp, r7
10004c70:	b004      	add	sp, #16
10004c72:	bd80      	pop	{r7, pc}

10004c74 <SystemCoreClockSetup>:

/**********************************************************************************************************************
* API IMPLEMENTATION
**********************************************************************************************************************/
void SystemCoreClockSetup(void)
{
10004c74:	b590      	push	{r4, r7, lr}
10004c76:	b085      	sub	sp, #20
10004c78:	af00      	add	r7, sp, #0
/* LOCAL DATA STRUCTURES */
const XMC_SCU_CLOCK_CONFIG_t CLOCK_XMC1_0_CONFIG =
10004c7a:	1d3b      	adds	r3, r7, #4
10004c7c:	4a04      	ldr	r2, [pc, #16]	; (10004c90 <SystemCoreClockSetup+0x1c>)
10004c7e:	ca13      	ldmia	r2!, {r0, r1, r4}
10004c80:	c313      	stmia	r3!, {r0, r1, r4}
  .idiv = 1U,  /**< 8 Bit integer divider */

};

  /* Configure FDIV, IDIV, PCLKSEL dividers*/
  XMC_SCU_CLOCK_Init(&CLOCK_XMC1_0_CONFIG);
10004c82:	1d3b      	adds	r3, r7, #4
10004c84:	1c18      	adds	r0, r3, #0
10004c86:	f7fc fb17 	bl	100012b8 <XMC_SCU_CLOCK_Init>
}
10004c8a:	46bd      	mov	sp, r7
10004c8c:	b005      	add	sp, #20
10004c8e:	bd90      	pop	{r4, r7, pc}
10004c90:	1000b548 	.word	0x1000b548

10004c94 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
10004c94:	b580      	push	{r7, lr}
10004c96:	b082      	sub	sp, #8
10004c98:	af00      	add	r7, sp, #0
10004c9a:	1c02      	adds	r2, r0, #0
10004c9c:	1dfb      	adds	r3, r7, #7
10004c9e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
10004ca0:	1dfb      	adds	r3, r7, #7
10004ca2:	781b      	ldrb	r3, [r3, #0]
10004ca4:	2b7f      	cmp	r3, #127	; 0x7f
10004ca6:	d809      	bhi.n	10004cbc <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
10004ca8:	4b06      	ldr	r3, [pc, #24]	; (10004cc4 <__NVIC_EnableIRQ+0x30>)
10004caa:	1dfa      	adds	r2, r7, #7
10004cac:	7812      	ldrb	r2, [r2, #0]
10004cae:	1c11      	adds	r1, r2, #0
10004cb0:	221f      	movs	r2, #31
10004cb2:	400a      	ands	r2, r1
10004cb4:	2101      	movs	r1, #1
10004cb6:	4091      	lsls	r1, r2
10004cb8:	1c0a      	adds	r2, r1, #0
10004cba:	601a      	str	r2, [r3, #0]
  }
}
10004cbc:	46bd      	mov	sp, r7
10004cbe:	b002      	add	sp, #8
10004cc0:	bd80      	pop	{r7, pc}
10004cc2:	46c0      	nop			; (mov r8, r8)
10004cc4:	e000e100 	.word	0xe000e100

10004cc8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
10004cc8:	b5b0      	push	{r4, r5, r7, lr}
10004cca:	b082      	sub	sp, #8
10004ccc:	af00      	add	r7, sp, #0
10004cce:	1c02      	adds	r2, r0, #0
10004cd0:	6039      	str	r1, [r7, #0]
10004cd2:	1dfb      	adds	r3, r7, #7
10004cd4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
10004cd6:	1dfb      	adds	r3, r7, #7
10004cd8:	781b      	ldrb	r3, [r3, #0]
10004cda:	2b7f      	cmp	r3, #127	; 0x7f
10004cdc:	d827      	bhi.n	10004d2e <__NVIC_SetPriority+0x66>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10004cde:	4c2d      	ldr	r4, [pc, #180]	; (10004d94 <__NVIC_SetPriority+0xcc>)
10004ce0:	1dfb      	adds	r3, r7, #7
10004ce2:	781b      	ldrb	r3, [r3, #0]
10004ce4:	b25b      	sxtb	r3, r3
10004ce6:	089b      	lsrs	r3, r3, #2
10004ce8:	492a      	ldr	r1, [pc, #168]	; (10004d94 <__NVIC_SetPriority+0xcc>)
10004cea:	1dfa      	adds	r2, r7, #7
10004cec:	7812      	ldrb	r2, [r2, #0]
10004cee:	b252      	sxtb	r2, r2
10004cf0:	0892      	lsrs	r2, r2, #2
10004cf2:	32c0      	adds	r2, #192	; 0xc0
10004cf4:	0092      	lsls	r2, r2, #2
10004cf6:	5852      	ldr	r2, [r2, r1]
10004cf8:	1df9      	adds	r1, r7, #7
10004cfa:	7809      	ldrb	r1, [r1, #0]
10004cfc:	1c08      	adds	r0, r1, #0
10004cfe:	2103      	movs	r1, #3
10004d00:	4001      	ands	r1, r0
10004d02:	00c9      	lsls	r1, r1, #3
10004d04:	1c08      	adds	r0, r1, #0
10004d06:	21ff      	movs	r1, #255	; 0xff
10004d08:	4081      	lsls	r1, r0
10004d0a:	43c9      	mvns	r1, r1
10004d0c:	4011      	ands	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
10004d0e:	683a      	ldr	r2, [r7, #0]
10004d10:	0192      	lsls	r2, r2, #6
10004d12:	20ff      	movs	r0, #255	; 0xff
10004d14:	4002      	ands	r2, r0
10004d16:	1df8      	adds	r0, r7, #7
10004d18:	7800      	ldrb	r0, [r0, #0]
10004d1a:	1c05      	adds	r5, r0, #0
10004d1c:	2003      	movs	r0, #3
10004d1e:	4028      	ands	r0, r5
10004d20:	00c0      	lsls	r0, r0, #3
10004d22:	4082      	lsls	r2, r0
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10004d24:	430a      	orrs	r2, r1
10004d26:	33c0      	adds	r3, #192	; 0xc0
10004d28:	009b      	lsls	r3, r3, #2
10004d2a:	511a      	str	r2, [r3, r4]
10004d2c:	e02e      	b.n	10004d8c <__NVIC_SetPriority+0xc4>
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10004d2e:	4c1a      	ldr	r4, [pc, #104]	; (10004d98 <__NVIC_SetPriority+0xd0>)
10004d30:	1dfb      	adds	r3, r7, #7
10004d32:	781b      	ldrb	r3, [r3, #0]
10004d34:	1c1a      	adds	r2, r3, #0
10004d36:	230f      	movs	r3, #15
10004d38:	4013      	ands	r3, r2
10004d3a:	3b08      	subs	r3, #8
10004d3c:	0899      	lsrs	r1, r3, #2
10004d3e:	4a16      	ldr	r2, [pc, #88]	; (10004d98 <__NVIC_SetPriority+0xd0>)
10004d40:	1dfb      	adds	r3, r7, #7
10004d42:	781b      	ldrb	r3, [r3, #0]
10004d44:	1c18      	adds	r0, r3, #0
10004d46:	230f      	movs	r3, #15
10004d48:	4003      	ands	r3, r0
10004d4a:	3b08      	subs	r3, #8
10004d4c:	089b      	lsrs	r3, r3, #2
10004d4e:	3306      	adds	r3, #6
10004d50:	009b      	lsls	r3, r3, #2
10004d52:	18d3      	adds	r3, r2, r3
10004d54:	685b      	ldr	r3, [r3, #4]
10004d56:	1dfa      	adds	r2, r7, #7
10004d58:	7812      	ldrb	r2, [r2, #0]
10004d5a:	1c10      	adds	r0, r2, #0
10004d5c:	2203      	movs	r2, #3
10004d5e:	4002      	ands	r2, r0
10004d60:	00d2      	lsls	r2, r2, #3
10004d62:	1c10      	adds	r0, r2, #0
10004d64:	22ff      	movs	r2, #255	; 0xff
10004d66:	4082      	lsls	r2, r0
10004d68:	43d2      	mvns	r2, r2
10004d6a:	401a      	ands	r2, r3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
10004d6c:	683b      	ldr	r3, [r7, #0]
10004d6e:	019b      	lsls	r3, r3, #6
10004d70:	20ff      	movs	r0, #255	; 0xff
10004d72:	4003      	ands	r3, r0
10004d74:	1df8      	adds	r0, r7, #7
10004d76:	7800      	ldrb	r0, [r0, #0]
10004d78:	1c05      	adds	r5, r0, #0
10004d7a:	2003      	movs	r0, #3
10004d7c:	4028      	ands	r0, r5
10004d7e:	00c0      	lsls	r0, r0, #3
10004d80:	4083      	lsls	r3, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10004d82:	431a      	orrs	r2, r3
10004d84:	1d8b      	adds	r3, r1, #6
10004d86:	009b      	lsls	r3, r3, #2
10004d88:	18e3      	adds	r3, r4, r3
10004d8a:	605a      	str	r2, [r3, #4]
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
10004d8c:	46bd      	mov	sp, r7
10004d8e:	b002      	add	sp, #8
10004d90:	bdb0      	pop	{r4, r5, r7, pc}
10004d92:	46c0      	nop			; (mov r8, r8)
10004d94:	e000e100 	.word	0xe000e100
10004d98:	e000ed00 	.word	0xe000ed00

10004d9c <XMC_VADC_GROUP_QueueEnableArbitrationSlot>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_VADC_GROUP_QueueDisableArbitrationSlot()<BR>
 */
__STATIC_INLINE void XMC_VADC_GROUP_QueueEnableArbitrationSlot(XMC_VADC_GROUP_t *const group_ptr)
{
10004d9c:	b580      	push	{r7, lr}
10004d9e:	b082      	sub	sp, #8
10004da0:	af00      	add	r7, sp, #0
10004da2:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_VADC_GROUP_QueueEnableArbitrationSlot:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr));
  group_ptr->ARBPR |= (uint32_t)((uint32_t)1 << VADC_G_ARBPR_ASEN0_Pos);
10004da4:	687b      	ldr	r3, [r7, #4]
10004da6:	2284      	movs	r2, #132	; 0x84
10004da8:	589b      	ldr	r3, [r3, r2]
10004daa:	2280      	movs	r2, #128	; 0x80
10004dac:	0452      	lsls	r2, r2, #17
10004dae:	431a      	orrs	r2, r3
10004db0:	687b      	ldr	r3, [r7, #4]
10004db2:	2184      	movs	r1, #132	; 0x84
10004db4:	505a      	str	r2, [r3, r1]
}
10004db6:	46bd      	mov	sp, r7
10004db8:	b002      	add	sp, #8
10004dba:	bd80      	pop	{r7, pc}

10004dbc <XMC_VADC_GROUP_QueueDisableArbitrationSlot>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_VADC_GROUP_QueueEnableArbitrationSlot()<BR>
 */
__STATIC_INLINE void XMC_VADC_GROUP_QueueDisableArbitrationSlot(XMC_VADC_GROUP_t *const group_ptr)
{
10004dbc:	b580      	push	{r7, lr}
10004dbe:	b082      	sub	sp, #8
10004dc0:	af00      	add	r7, sp, #0
10004dc2:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_VADC_GROUP_QueueDisableArbitrationSlot:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr));
  group_ptr->ARBPR &= ~((uint32_t)VADC_G_ARBPR_ASEN0_Msk);
10004dc4:	687b      	ldr	r3, [r7, #4]
10004dc6:	2284      	movs	r2, #132	; 0x84
10004dc8:	589b      	ldr	r3, [r3, r2]
10004dca:	4a04      	ldr	r2, [pc, #16]	; (10004ddc <XMC_VADC_GROUP_QueueDisableArbitrationSlot+0x20>)
10004dcc:	401a      	ands	r2, r3
10004dce:	687b      	ldr	r3, [r7, #4]
10004dd0:	2184      	movs	r1, #132	; 0x84
10004dd2:	505a      	str	r2, [r3, r1]
}
10004dd4:	46bd      	mov	sp, r7
10004dd6:	b002      	add	sp, #8
10004dd8:	bd80      	pop	{r7, pc}
10004dda:	46c0      	nop			; (mov r8, r8)
10004ddc:	feffffff 	.word	0xfeffffff

10004de0 <XMC_VADC_GROUP_QueueIsArbitrationSlotEnabled>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_VADC_GROUP_QueueEnableArbitrationSlot(),<BR>  XMC_VADC_GROUP_QueueDisableArbitrationSlot()<BR>
 */
__STATIC_INLINE bool XMC_VADC_GROUP_QueueIsArbitrationSlotEnabled(XMC_VADC_GROUP_t *const group_ptr)
{
10004de0:	b580      	push	{r7, lr}
10004de2:	b082      	sub	sp, #8
10004de4:	af00      	add	r7, sp, #0
10004de6:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_VADC_GROUP_QueueIsArbitrationSlotEnabled:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))

  return ((group_ptr->ARBPR & (uint32_t)VADC_G_ARBPR_ASEN0_Msk) >> VADC_G_ARBPR_ASEN0_Pos);
10004de8:	687b      	ldr	r3, [r7, #4]
10004dea:	2284      	movs	r2, #132	; 0x84
10004dec:	589a      	ldr	r2, [r3, r2]
10004dee:	2380      	movs	r3, #128	; 0x80
10004df0:	045b      	lsls	r3, r3, #17
10004df2:	4013      	ands	r3, r2
10004df4:	0e1b      	lsrs	r3, r3, #24
10004df6:	1e5a      	subs	r2, r3, #1
10004df8:	4193      	sbcs	r3, r2
10004dfa:	b2db      	uxtb	r3, r3
}
10004dfc:	1c18      	adds	r0, r3, #0
10004dfe:	46bd      	mov	sp, r7
10004e00:	b002      	add	sp, #8
10004e02:	bd80      	pop	{r7, pc}

10004e04 <XMC_VADC_GROUP_QueueSetGatingMode>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_VADC_GROUP_QueueSelectGating();
 */
__STATIC_INLINE void XMC_VADC_GROUP_QueueSetGatingMode(XMC_VADC_GROUP_t *const group_ptr, XMC_VADC_GATEMODE_t mode_sel)
{
10004e04:	b580      	push	{r7, lr}
10004e06:	b082      	sub	sp, #8
10004e08:	af00      	add	r7, sp, #0
10004e0a:	6078      	str	r0, [r7, #4]
10004e0c:	1c0a      	adds	r2, r1, #0
10004e0e:	1cfb      	adds	r3, r7, #3
10004e10:	701a      	strb	r2, [r3, #0]
  XMC_ASSERT("XMC_VADC_GROUP_QueueSetGatingMode:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  XMC_ASSERT("XMC_VADC_GROUP_QueueSetGatingMode:Wrong mode selected", (mode_sel <= XMC_VADC_GATEMODE_ACTIVELOW))

  /* Clear the existing gate configuration */
  group_ptr->QMR0 &= (uint32_t)(~((uint32_t) VADC_G_QMR0_ENGT_Msk));
10004e12:	687a      	ldr	r2, [r7, #4]
10004e14:	2382      	movs	r3, #130	; 0x82
10004e16:	005b      	lsls	r3, r3, #1
10004e18:	58d3      	ldr	r3, [r2, r3]
10004e1a:	2203      	movs	r2, #3
10004e1c:	4393      	bics	r3, r2
10004e1e:	1c19      	adds	r1, r3, #0
10004e20:	687a      	ldr	r2, [r7, #4]
10004e22:	2382      	movs	r3, #130	; 0x82
10004e24:	005b      	lsls	r3, r3, #1
10004e26:	50d1      	str	r1, [r2, r3]
  /* Set the new gating mode */
  group_ptr->QMR0 |= (uint32_t)((uint32_t)mode_sel << VADC_G_QMR0_ENGT_Pos);
10004e28:	687a      	ldr	r2, [r7, #4]
10004e2a:	2382      	movs	r3, #130	; 0x82
10004e2c:	005b      	lsls	r3, r3, #1
10004e2e:	58d2      	ldr	r2, [r2, r3]
10004e30:	1cfb      	adds	r3, r7, #3
10004e32:	781b      	ldrb	r3, [r3, #0]
10004e34:	431a      	orrs	r2, r3
10004e36:	1c11      	adds	r1, r2, #0
10004e38:	687a      	ldr	r2, [r7, #4]
10004e3a:	2382      	movs	r3, #130	; 0x82
10004e3c:	005b      	lsls	r3, r3, #1
10004e3e:	50d1      	str	r1, [r2, r3]
}
10004e40:	46bd      	mov	sp, r7
10004e42:	b002      	add	sp, #8
10004e44:	bd80      	pop	{r7, pc}
10004e46:	46c0      	nop			; (mov r8, r8)

10004e48 <XMC_VADC_GROUP_QueueInsertChannel>:
 * \par<b>Related APIs:</b><br>
 *  XMC_VADC_GROUP_QueueRemoveChannel()<BR>
 */
__STATIC_INLINE void XMC_VADC_GROUP_QueueInsertChannel(XMC_VADC_GROUP_t *const group_ptr,
                                                       const XMC_VADC_QUEUE_ENTRY_t entry)
{
10004e48:	b580      	push	{r7, lr}
10004e4a:	b082      	sub	sp, #8
10004e4c:	af00      	add	r7, sp, #0
10004e4e:	6078      	str	r0, [r7, #4]
10004e50:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_VADC_GROUP_QueueInsertChannel:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  /* Insert the channel physically and get the length of the queue*/
  group_ptr->QINR0 = entry.qinr0;
10004e52:	6839      	ldr	r1, [r7, #0]
10004e54:	687a      	ldr	r2, [r7, #4]
10004e56:	2388      	movs	r3, #136	; 0x88
10004e58:	005b      	lsls	r3, r3, #1
10004e5a:	50d1      	str	r1, [r2, r3]
}
10004e5c:	46bd      	mov	sp, r7
10004e5e:	b002      	add	sp, #8
10004e60:	bd80      	pop	{r7, pc}
10004e62:	46c0      	nop			; (mov r8, r8)

10004e64 <XMC_VADC_GROUP_ResultInit>:
 * XMC_VADC_GROUP_AddResultToFifo()<BR> XMC_VADC_GROUP_EnableResultEvent()<br> XMC_VADC_GROUP_DisableResultEvent()<BR>
 */
__STATIC_INLINE void XMC_VADC_GROUP_ResultInit(XMC_VADC_GROUP_t *const group_ptr,
                                               const uint32_t res_reg_num,
                                               const XMC_VADC_RESULT_CONFIG_t *config)
{
10004e64:	b580      	push	{r7, lr}
10004e66:	b084      	sub	sp, #16
10004e68:	af00      	add	r7, sp, #0
10004e6a:	60f8      	str	r0, [r7, #12]
10004e6c:	60b9      	str	r1, [r7, #8]
10004e6e:	607a      	str	r2, [r7, #4]
  XMC_ASSERT("XMC_VADC_GROUP_ResultInit:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  group_ptr->RCR[res_reg_num] = config->g_rcr;
10004e70:	687b      	ldr	r3, [r7, #4]
10004e72:	6819      	ldr	r1, [r3, #0]
10004e74:	68fb      	ldr	r3, [r7, #12]
10004e76:	68ba      	ldr	r2, [r7, #8]
10004e78:	32a0      	adds	r2, #160	; 0xa0
10004e7a:	0092      	lsls	r2, r2, #2
10004e7c:	50d1      	str	r1, [r2, r3]

}
10004e7e:	46bd      	mov	sp, r7
10004e80:	b004      	add	sp, #16
10004e82:	bd80      	pop	{r7, pc}

10004e84 <ADC_MEASUREMENT_ADV_lQueueInit>:
#endif
/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
#ifdef ADC_MEASUREMENT_ADV_LOCAL_QUEUE_USED
__STATIC_INLINE ADC_MEASUREMENT_ADV_STATUS_t ADC_MEASUREMENT_ADV_lQueueInit(ADC_MEASUREMENT_ADV_QUEUE_t *const handle_ptr,
                                                           uint8_t group_index)
{
10004e84:	b590      	push	{r4, r7, lr}
10004e86:	b085      	sub	sp, #20
10004e88:	af00      	add	r7, sp, #0
10004e8a:	6078      	str	r0, [r7, #4]
10004e8c:	1c0a      	adds	r2, r1, #0
10004e8e:	1cfb      	adds	r3, r7, #3
10004e90:	701a      	strb	r2, [r3, #0]
  ADC_MEASUREMENT_ADV_STATUS_t status;

  /*Initialization of APP 'GLOBAL_ADC'*/
  status = (ADC_MEASUREMENT_ADV_STATUS_t) GLOBAL_ADC_Init(ADC_MEASUREMENT_ADV_GLOBAL_HANDLE);
10004e92:	230f      	movs	r3, #15
10004e94:	18fc      	adds	r4, r7, r3
10004e96:	4b26      	ldr	r3, [pc, #152]	; (10004f30 <ADC_MEASUREMENT_ADV_lQueueInit+0xac>)
10004e98:	1c18      	adds	r0, r3, #0
10004e9a:	f7ff fe17 	bl	10004acc <GLOBAL_ADC_Init>
10004e9e:	1c03      	adds	r3, r0, #0
10004ea0:	7023      	strb	r3, [r4, #0]

  /*Class Configuration*/
  XMC_VADC_GROUP_InputClassInit(group_ptrs[group_index],handle_ptr->iclass_config_handle,
10004ea2:	1cfb      	adds	r3, r7, #3
10004ea4:	781a      	ldrb	r2, [r3, #0]
10004ea6:	4b23      	ldr	r3, [pc, #140]	; (10004f34 <ADC_MEASUREMENT_ADV_lQueueInit+0xb0>)
10004ea8:	0092      	lsls	r2, r2, #2
10004eaa:	58d2      	ldr	r2, [r2, r3]
                                XMC_VADC_GROUP_CONV_STD,handle_ptr->iclass_num);
10004eac:	687b      	ldr	r3, [r7, #4]
10004eae:	7d9b      	ldrb	r3, [r3, #22]

  /*Initialization of APP 'GLOBAL_ADC'*/
  status = (ADC_MEASUREMENT_ADV_STATUS_t) GLOBAL_ADC_Init(ADC_MEASUREMENT_ADV_GLOBAL_HANDLE);

  /*Class Configuration*/
  XMC_VADC_GROUP_InputClassInit(group_ptrs[group_index],handle_ptr->iclass_config_handle,
10004eb0:	1c1c      	adds	r4, r3, #0
10004eb2:	687b      	ldr	r3, [r7, #4]
10004eb4:	68db      	ldr	r3, [r3, #12]
10004eb6:	1c10      	adds	r0, r2, #0
10004eb8:	1c19      	adds	r1, r3, #0
10004eba:	2200      	movs	r2, #0
10004ebc:	1c23      	adds	r3, r4, #0
10004ebe:	f7fd fe6f 	bl	10002ba0 <XMC_VADC_GROUP_InputClassInit>
                                XMC_VADC_GROUP_CONV_STD,handle_ptr->iclass_num);

  /* Initialize the Queue hardware */
  XMC_VADC_GROUP_QueueInit(group_ptrs[group_index],handle_ptr->queue_config_handle);
10004ec2:	1cfb      	adds	r3, r7, #3
10004ec4:	781a      	ldrb	r2, [r3, #0]
10004ec6:	4b1b      	ldr	r3, [pc, #108]	; (10004f34 <ADC_MEASUREMENT_ADV_lQueueInit+0xb0>)
10004ec8:	0092      	lsls	r2, r2, #2
10004eca:	58d2      	ldr	r2, [r2, r3]
10004ecc:	687b      	ldr	r3, [r7, #4]
10004ece:	691b      	ldr	r3, [r3, #16]
10004ed0:	1c10      	adds	r0, r2, #0
10004ed2:	1c19      	adds	r1, r3, #0
10004ed4:	f7fd ff74 	bl	10002dc0 <XMC_VADC_GROUP_QueueInit>

  /* Configure the gating mode for queue*/
  XMC_VADC_GROUP_QueueSetGatingMode(group_ptrs[group_index], handle_ptr->gating_mode);
10004ed8:	1cfb      	adds	r3, r7, #3
10004eda:	781a      	ldrb	r2, [r3, #0]
10004edc:	4b15      	ldr	r3, [pc, #84]	; (10004f34 <ADC_MEASUREMENT_ADV_lQueueInit+0xb0>)
10004ede:	0092      	lsls	r2, r2, #2
10004ee0:	58d2      	ldr	r2, [r2, r3]
10004ee2:	687b      	ldr	r3, [r7, #4]
10004ee4:	7d1b      	ldrb	r3, [r3, #20]
10004ee6:	1c10      	adds	r0, r2, #0
10004ee8:	1c19      	adds	r1, r3, #0
10004eea:	f7ff ff8b 	bl	10004e04 <XMC_VADC_GROUP_QueueSetGatingMode>

  /*Interrupt Configuration*/
  if ((bool)true == handle_ptr->rs_intr_handle.interrupt_enable)
10004eee:	687b      	ldr	r3, [r7, #4]
10004ef0:	7a1b      	ldrb	r3, [r3, #8]
10004ef2:	2b00      	cmp	r3, #0
10004ef4:	d014      	beq.n	10004f20 <ADC_MEASUREMENT_ADV_lQueueInit+0x9c>
  {
#if (UC_FAMILY == XMC1)
    NVIC_SetPriority((IRQn_Type)handle_ptr->rs_intr_handle.node_id, handle_ptr->rs_intr_handle.priority);
10004ef6:	687b      	ldr	r3, [r7, #4]
10004ef8:	681b      	ldr	r3, [r3, #0]
10004efa:	b2da      	uxtb	r2, r3
10004efc:	687b      	ldr	r3, [r7, #4]
10004efe:	685b      	ldr	r3, [r3, #4]
10004f00:	b252      	sxtb	r2, r2
10004f02:	1c10      	adds	r0, r2, #0
10004f04:	1c19      	adds	r1, r3, #0
10004f06:	f7ff fedf 	bl	10004cc8 <__NVIC_SetPriority>
    XMC_SCU_SetInterruptControl(handle_ptr->rs_intr_handle.node_id,
                                ((handle_ptr->rs_intr_handle.node_id << 8) | handle_ptr->rs_intr_handle.irqctrl));
#endif

    /* Connect RS Events to NVIC nodes */
    XMC_VADC_GROUP_QueueSetReqSrcEventInterruptNode(group_ptrs[group_index], (XMC_VADC_SR_t)handle_ptr->srv_req_node);
10004f0a:	1cfb      	adds	r3, r7, #3
10004f0c:	781a      	ldrb	r2, [r3, #0]
10004f0e:	4b09      	ldr	r3, [pc, #36]	; (10004f34 <ADC_MEASUREMENT_ADV_lQueueInit+0xb0>)
10004f10:	0092      	lsls	r2, r2, #2
10004f12:	58d2      	ldr	r2, [r2, r3]
10004f14:	687b      	ldr	r3, [r7, #4]
10004f16:	7d5b      	ldrb	r3, [r3, #21]
10004f18:	1c10      	adds	r0, r2, #0
10004f1a:	1c19      	adds	r1, r3, #0
10004f1c:	f7fd ffa8 	bl	10002e70 <XMC_VADC_GROUP_QueueSetReqSrcEventInterruptNode>
  }

  return (status);
10004f20:	230f      	movs	r3, #15
10004f22:	18fb      	adds	r3, r7, r3
10004f24:	781b      	ldrb	r3, [r3, #0]
}
10004f26:	1c18      	adds	r0, r3, #0
10004f28:	46bd      	mov	sp, r7
10004f2a:	b005      	add	sp, #20
10004f2c:	bd90      	pop	{r4, r7, pc}
10004f2e:	46c0      	nop			; (mov r8, r8)
10004f30:	2000121c 	.word	0x2000121c
10004f34:	1000b554 	.word	0x1000b554

10004f38 <ADC_MEASUREMENT_ADV_lRequestSrcInit>:
#endif
/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/* Local function to do the request source initialization.*/
__STATIC_INLINE ADC_MEASUREMENT_ADV_STATUS_t ADC_MEASUREMENT_ADV_lRequestSrcInit(const ADC_MEASUREMENT_ADV_t
                                                                                 *const handle_ptr)
{
10004f38:	b590      	push	{r4, r7, lr}
10004f3a:	b085      	sub	sp, #20
10004f3c:	af00      	add	r7, sp, #0
10004f3e:	6078      	str	r0, [r7, #4]
#ifdef ADC_MEASUREMENT_ADV_LOCAL_QUEUE_USED
  #ifdef ADC_MEASUREMENT_ADV_ADC_QUEUE_USED
      if ( ADC_MEASUREMENT_ADV_REQUEST_SOURCE_QUEUE != handle_ptr->req_src)
  #endif
      {
        status = ADC_MEASUREMENT_ADV_lQueueInit(handle_ptr->local_queue_handle,handle_ptr->group_index);
10004f40:	687b      	ldr	r3, [r7, #4]
10004f42:	68da      	ldr	r2, [r3, #12]
10004f44:	687b      	ldr	r3, [r7, #4]
10004f46:	7d5b      	ldrb	r3, [r3, #21]
10004f48:	210f      	movs	r1, #15
10004f4a:	187c      	adds	r4, r7, r1
10004f4c:	1c10      	adds	r0, r2, #0
10004f4e:	1c19      	adds	r1, r3, #0
10004f50:	f7ff ff98 	bl	10004e84 <ADC_MEASUREMENT_ADV_lQueueInit>
10004f54:	1c03      	adds	r3, r0, #0
10004f56:	7023      	strb	r3, [r4, #0]
        status = (ADC_MEASUREMENT_ADV_STATUS_t) ADC_QUEUE_Init(handle_ptr->queue_handle);
      }
#endif
    }
#endif
    return (status);
10004f58:	230f      	movs	r3, #15
10004f5a:	18fb      	adds	r3, r7, r3
10004f5c:	781b      	ldrb	r3, [r3, #0]
}
10004f5e:	1c18      	adds	r0, r3, #0
10004f60:	46bd      	mov	sp, r7
10004f62:	b005      	add	sp, #20
10004f64:	bd90      	pop	{r4, r7, pc}
10004f66:	46c0      	nop			; (mov r8, r8)

10004f68 <ADC_MEASUREMENT_ADV_lQueueInsertEntries>:

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
#ifdef ADC_MEASUREMENT_ADV_LOCAL_QUEUE_USED
/* Local function to insert the queue entries into the hardware.*/
__STATIC_INLINE void ADC_MEASUREMENT_ADV_lQueueInsertEntries(const ADC_MEASUREMENT_ADV_t *const handle_ptr)
{
10004f68:	b580      	push	{r7, lr}
10004f6a:	b086      	sub	sp, #24
10004f6c:	af00      	add	r7, sp, #0
10004f6e:	6078      	str	r0, [r7, #4]
  uint32_t entry_index;

  XMC_VADC_GROUP_t *queue_group_ptr = group_ptrs[handle_ptr->group_index];
10004f70:	687b      	ldr	r3, [r7, #4]
10004f72:	7d5b      	ldrb	r3, [r3, #21]
10004f74:	1c1a      	adds	r2, r3, #0
10004f76:	4b10      	ldr	r3, [pc, #64]	; (10004fb8 <ADC_MEASUREMENT_ADV_lQueueInsertEntries+0x50>)
10004f78:	0092      	lsls	r2, r2, #2
10004f7a:	58d3      	ldr	r3, [r2, r3]
10004f7c:	613b      	str	r3, [r7, #16]
  const XMC_VADC_QUEUE_ENTRY_t **const entries_array = handle_ptr->local_queue_entries;
10004f7e:	687b      	ldr	r3, [r7, #4]
10004f80:	685b      	ldr	r3, [r3, #4]
10004f82:	60fb      	str	r3, [r7, #12]

  for(entry_index = 0; entry_index < handle_ptr->total_number_of_entries; entry_index++)
10004f84:	2300      	movs	r3, #0
10004f86:	617b      	str	r3, [r7, #20]
10004f88:	e00d      	b.n	10004fa6 <ADC_MEASUREMENT_ADV_lQueueInsertEntries+0x3e>
  {
    XMC_VADC_GROUP_QueueInsertChannel(queue_group_ptr, *entries_array[entry_index]);
10004f8a:	697b      	ldr	r3, [r7, #20]
10004f8c:	009b      	lsls	r3, r3, #2
10004f8e:	68fa      	ldr	r2, [r7, #12]
10004f90:	18d3      	adds	r3, r2, r3
10004f92:	681b      	ldr	r3, [r3, #0]
10004f94:	693a      	ldr	r2, [r7, #16]
10004f96:	681b      	ldr	r3, [r3, #0]
10004f98:	1c10      	adds	r0, r2, #0
10004f9a:	1c19      	adds	r1, r3, #0
10004f9c:	f7ff ff54 	bl	10004e48 <XMC_VADC_GROUP_QueueInsertChannel>
  uint32_t entry_index;

  XMC_VADC_GROUP_t *queue_group_ptr = group_ptrs[handle_ptr->group_index];
  const XMC_VADC_QUEUE_ENTRY_t **const entries_array = handle_ptr->local_queue_entries;

  for(entry_index = 0; entry_index < handle_ptr->total_number_of_entries; entry_index++)
10004fa0:	697b      	ldr	r3, [r7, #20]
10004fa2:	3301      	adds	r3, #1
10004fa4:	617b      	str	r3, [r7, #20]
10004fa6:	687b      	ldr	r3, [r7, #4]
10004fa8:	7d9b      	ldrb	r3, [r3, #22]
10004faa:	1e1a      	subs	r2, r3, #0
10004fac:	697b      	ldr	r3, [r7, #20]
10004fae:	429a      	cmp	r2, r3
10004fb0:	d8eb      	bhi.n	10004f8a <ADC_MEASUREMENT_ADV_lQueueInsertEntries+0x22>
  {
    XMC_VADC_GROUP_QueueInsertChannel(queue_group_ptr, *entries_array[entry_index]);
  }
}
10004fb2:	46bd      	mov	sp, r7
10004fb4:	b006      	add	sp, #24
10004fb6:	bd80      	pop	{r7, pc}
10004fb8:	1000b554 	.word	0x1000b554

10004fbc <ADC_MEASUREMENT_ADV_lArbitrationStatus>:
#endif

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
__STATIC_INLINE bool ADC_MEASUREMENT_ADV_lArbitrationStatus(const ADC_MEASUREMENT_ADV_t *const handle_ptr)
{
10004fbc:	b590      	push	{r4, r7, lr}
10004fbe:	b085      	sub	sp, #20
10004fc0:	af00      	add	r7, sp, #0
10004fc2:	6078      	str	r0, [r7, #4]
  bool arbitration_status;

#if !defined(CLOCK_GATING_SUPPORTED) || !defined(ADC_MEASUREMENT_ADV_CHECK_CLOCK_GATING)
  clock_reset_check = (bool)false;
#endif
  arbitration_status = (bool)false;
10004fc4:	230f      	movs	r3, #15
10004fc6:	18fb      	adds	r3, r7, r3
10004fc8:	2200      	movs	r2, #0
10004fca:	701a      	strb	r2, [r3, #0]

  /* To check if the arbiter is already enabled. Before checking this ensure that clock and reset states are correct */
#if defined(CLOCK_GATING_SUPPORTED) && defined(ADC_MEASUREMENT_ADV_CHECK_CLOCK_GATING)
  clock_reset_check = !XMC_SCU_CLOCK_IsPeripheralClockGated(XMC_SCU_PERIPHERAL_CLOCK_VADC);
10004fcc:	2001      	movs	r0, #1
10004fce:	f7fc f9b5 	bl	1000133c <XMC_SCU_CLOCK_IsPeripheralClockGated>
10004fd2:	1c03      	adds	r3, r0, #0
10004fd4:	1e5a      	subs	r2, r3, #1
10004fd6:	4193      	sbcs	r3, r2
10004fd8:	b2db      	uxtb	r3, r3
10004fda:	2201      	movs	r2, #1
10004fdc:	4053      	eors	r3, r2
10004fde:	b2db      	uxtb	r3, r3
10004fe0:	1c1a      	adds	r2, r3, #0
10004fe2:	230e      	movs	r3, #14
10004fe4:	18fb      	adds	r3, r7, r3
10004fe6:	701a      	strb	r2, [r3, #0]
10004fe8:	781a      	ldrb	r2, [r3, #0]
10004fea:	2101      	movs	r1, #1
10004fec:	400a      	ands	r2, r1
10004fee:	701a      	strb	r2, [r3, #0]
#endif
#ifdef PERIPHERAL_RESET_SUPPORTED
  clock_reset_check |= !XMC_SCU_RESET_IsPeripheralResetAsserted(XMC_SCU_PERIPHERAL_RESET_VADC);
#endif
  if(clock_reset_check != (bool)false)
10004ff0:	230e      	movs	r3, #14
10004ff2:	18fb      	adds	r3, r7, r3
10004ff4:	781b      	ldrb	r3, [r3, #0]
10004ff6:	2b00      	cmp	r3, #0
10004ff8:	d00c      	beq.n	10005014 <ADC_MEASUREMENT_ADV_lArbitrationStatus+0x58>
#ifdef ADC_MEASUREMENT_ADV_QUEUE_USED
  #ifdef ADC_MEASUREMENT_ADV_SCAN_USED
      else
  #endif
      {
        arbitration_status = XMC_VADC_GROUP_QueueIsArbitrationSlotEnabled(group_ptrs[handle_ptr->group_index]);
10004ffa:	687b      	ldr	r3, [r7, #4]
10004ffc:	7d5b      	ldrb	r3, [r3, #21]
10004ffe:	1c1a      	adds	r2, r3, #0
10005000:	4b08      	ldr	r3, [pc, #32]	; (10005024 <ADC_MEASUREMENT_ADV_lArbitrationStatus+0x68>)
10005002:	0092      	lsls	r2, r2, #2
10005004:	58d3      	ldr	r3, [r2, r3]
10005006:	220f      	movs	r2, #15
10005008:	18bc      	adds	r4, r7, r2
1000500a:	1c18      	adds	r0, r3, #0
1000500c:	f7ff fee8 	bl	10004de0 <XMC_VADC_GROUP_QueueIsArbitrationSlotEnabled>
10005010:	1c03      	adds	r3, r0, #0
10005012:	7023      	strb	r3, [r4, #0]
      }
#endif
  }
  return (arbitration_status);
10005014:	230f      	movs	r3, #15
10005016:	18fb      	adds	r3, r7, r3
10005018:	781b      	ldrb	r3, [r3, #0]
}
1000501a:	1c18      	adds	r0, r3, #0
1000501c:	46bd      	mov	sp, r7
1000501e:	b005      	add	sp, #20
10005020:	bd90      	pop	{r4, r7, pc}
10005022:	46c0      	nop			; (mov r8, r8)
10005024:	1000b554 	.word	0x1000b554

10005028 <ADC_MEASUREMENT_ADV_lDisableArbitration>:

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
__STATIC_INLINE void ADC_MEASUREMENT_ADV_lDisableArbitration(const ADC_MEASUREMENT_ADV_t *const handle_ptr,
                                                             bool arbitration_status)
{
10005028:	b580      	push	{r7, lr}
1000502a:	b082      	sub	sp, #8
1000502c:	af00      	add	r7, sp, #0
1000502e:	6078      	str	r0, [r7, #4]
10005030:	1c0a      	adds	r2, r1, #0
10005032:	1cfb      	adds	r3, r7, #3
10005034:	701a      	strb	r2, [r3, #0]
  if(arbitration_status == (bool)false)
10005036:	1cfb      	adds	r3, r7, #3
10005038:	781b      	ldrb	r3, [r3, #0]
1000503a:	2201      	movs	r2, #1
1000503c:	4053      	eors	r3, r2
1000503e:	b2db      	uxtb	r3, r3
10005040:	2b00      	cmp	r3, #0
10005042:	d008      	beq.n	10005056 <ADC_MEASUREMENT_ADV_lDisableArbitration+0x2e>
#ifdef ADC_MEASUREMENT_ADV_QUEUE_USED
  #ifdef ADC_MEASUREMENT_ADV_SCAN_USED
      else
  #endif
      {
        XMC_VADC_GROUP_QueueDisableArbitrationSlot(group_ptrs[handle_ptr->group_index]);
10005044:	687b      	ldr	r3, [r7, #4]
10005046:	7d5b      	ldrb	r3, [r3, #21]
10005048:	1c1a      	adds	r2, r3, #0
1000504a:	4b04      	ldr	r3, [pc, #16]	; (1000505c <ADC_MEASUREMENT_ADV_lDisableArbitration+0x34>)
1000504c:	0092      	lsls	r2, r2, #2
1000504e:	58d3      	ldr	r3, [r2, r3]
10005050:	1c18      	adds	r0, r3, #0
10005052:	f7ff feb3 	bl	10004dbc <XMC_VADC_GROUP_QueueDisableArbitrationSlot>
      }
#endif
  }
}
10005056:	46bd      	mov	sp, r7
10005058:	b002      	add	sp, #8
1000505a:	bd80      	pop	{r7, pc}
1000505c:	1000b554 	.word	0x1000b554

10005060 <ADC_MEASUREMENT_ADV_lInsertChannels>:

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/* Insert channels into the hardware*/
void ADC_MEASUREMENT_ADV_lInsertChannels(const ADC_MEASUREMENT_ADV_t *const handle_ptr)
{
10005060:	b580      	push	{r7, lr}
10005062:	b082      	sub	sp, #8
10005064:	af00      	add	r7, sp, #0
10005066:	6078      	str	r0, [r7, #4]
#ifdef ADC_MEASUREMENT_ADV_LOCAL_QUEUE_USED
  #ifdef ADC_MEASUREMENT_ADV_ADC_QUEUE_USED
      if ( ADC_MEASUREMENT_ADV_REQUEST_SOURCE_QUEUE != handle_ptr->req_src)
  #endif
      {
        ADC_MEASUREMENT_ADV_lQueueInsertEntries(handle_ptr);
10005068:	687b      	ldr	r3, [r7, #4]
1000506a:	1c18      	adds	r0, r3, #0
1000506c:	f7ff ff7c 	bl	10004f68 <ADC_MEASUREMENT_ADV_lQueueInsertEntries>
        ADC_QUEUE_AllEntriesInserted(handle_ptr->queue_handle);
      }
#endif
    }
#endif
}
10005070:	46bd      	mov	sp, r7
10005072:	b002      	add	sp, #8
10005074:	bd80      	pop	{r7, pc}
10005076:	46c0      	nop			; (mov r8, r8)

10005078 <ADC_MEASUREMENT_ADV_lSyncADCClocks>:
}
/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
#ifndef ADC_MEASUREMENT_ADV_SYNC_USED
/* Address the errata for the incorrect conversion.*/
void ADC_MEASUREMENT_ADV_lSyncADCClocks(void)
{
10005078:	b580      	push	{r7, lr}
1000507a:	b082      	sub	sp, #8
1000507c:	af00      	add	r7, sp, #0
  int32_t group_index;

  for (group_index = (int32_t)XMC_VADC_MAXIMUM_NUM_GROUPS - (int32_t)1; group_index >= (int32_t)0  ; group_index--)
1000507e:	2301      	movs	r3, #1
10005080:	607b      	str	r3, [r7, #4]
10005082:	e00a      	b.n	1000509a <ADC_MEASUREMENT_ADV_lSyncADCClocks+0x22>
  {
    XMC_VADC_GROUP_SetPowerMode(group_ptrs[group_index],XMC_VADC_GROUP_POWERMODE_OFF);
10005084:	4b19      	ldr	r3, [pc, #100]	; (100050ec <ADC_MEASUREMENT_ADV_lSyncADCClocks+0x74>)
10005086:	687a      	ldr	r2, [r7, #4]
10005088:	0092      	lsls	r2, r2, #2
1000508a:	58d3      	ldr	r3, [r2, r3]
1000508c:	1c18      	adds	r0, r3, #0
1000508e:	2100      	movs	r1, #0
10005090:	f7fd fdf0 	bl	10002c74 <XMC_VADC_GROUP_SetPowerMode>
/* Address the errata for the incorrect conversion.*/
void ADC_MEASUREMENT_ADV_lSyncADCClocks(void)
{
  int32_t group_index;

  for (group_index = (int32_t)XMC_VADC_MAXIMUM_NUM_GROUPS - (int32_t)1; group_index >= (int32_t)0  ; group_index--)
10005094:	687b      	ldr	r3, [r7, #4]
10005096:	3b01      	subs	r3, #1
10005098:	607b      	str	r3, [r7, #4]
1000509a:	687b      	ldr	r3, [r7, #4]
1000509c:	2b00      	cmp	r3, #0
1000509e:	daf1      	bge.n	10005084 <ADC_MEASUREMENT_ADV_lSyncADCClocks+0xc>
  {
    XMC_VADC_GROUP_SetPowerMode(group_ptrs[group_index],XMC_VADC_GROUP_POWERMODE_OFF);
  }

  for (group_index = (int32_t)XMC_VADC_MAXIMUM_NUM_GROUPS - (int32_t)1; group_index > (int32_t)0  ; group_index--)
100050a0:	2301      	movs	r3, #1
100050a2:	607b      	str	r3, [r7, #4]
100050a4:	e012      	b.n	100050cc <ADC_MEASUREMENT_ADV_lSyncADCClocks+0x54>
  {
    XMC_VADC_GROUP_SetSyncSlave(group_ptrs[group_index], (uint32_t)0, (uint32_t)group_index);
100050a6:	4b11      	ldr	r3, [pc, #68]	; (100050ec <ADC_MEASUREMENT_ADV_lSyncADCClocks+0x74>)
100050a8:	687a      	ldr	r2, [r7, #4]
100050aa:	0092      	lsls	r2, r2, #2
100050ac:	58d2      	ldr	r2, [r2, r3]
100050ae:	687b      	ldr	r3, [r7, #4]
100050b0:	1c10      	adds	r0, r2, #0
100050b2:	2100      	movs	r1, #0
100050b4:	1c1a      	adds	r2, r3, #0
100050b6:	f7fd fdf9 	bl	10002cac <XMC_VADC_GROUP_SetSyncSlave>

    XMC_VADC_GROUP_CheckSlaveReadiness(group_ptrs[0U], (uint32_t)group_index);
100050ba:	4a0d      	ldr	r2, [pc, #52]	; (100050f0 <ADC_MEASUREMENT_ADV_lSyncADCClocks+0x78>)
100050bc:	687b      	ldr	r3, [r7, #4]
100050be:	1c10      	adds	r0, r2, #0
100050c0:	1c19      	adds	r1, r3, #0
100050c2:	f7fd fe27 	bl	10002d14 <XMC_VADC_GROUP_CheckSlaveReadiness>
  for (group_index = (int32_t)XMC_VADC_MAXIMUM_NUM_GROUPS - (int32_t)1; group_index >= (int32_t)0  ; group_index--)
  {
    XMC_VADC_GROUP_SetPowerMode(group_ptrs[group_index],XMC_VADC_GROUP_POWERMODE_OFF);
  }

  for (group_index = (int32_t)XMC_VADC_MAXIMUM_NUM_GROUPS - (int32_t)1; group_index > (int32_t)0  ; group_index--)
100050c6:	687b      	ldr	r3, [r7, #4]
100050c8:	3b01      	subs	r3, #1
100050ca:	607b      	str	r3, [r7, #4]
100050cc:	687b      	ldr	r3, [r7, #4]
100050ce:	2b00      	cmp	r3, #0
100050d0:	dce9      	bgt.n	100050a6 <ADC_MEASUREMENT_ADV_lSyncADCClocks+0x2e>
    XMC_VADC_GROUP_SetSyncSlave(group_ptrs[group_index], (uint32_t)0, (uint32_t)group_index);

    XMC_VADC_GROUP_CheckSlaveReadiness(group_ptrs[0U], (uint32_t)group_index);
  }

  XMC_VADC_GROUP_SetSyncMaster(group_ptrs[0U]);
100050d2:	4b07      	ldr	r3, [pc, #28]	; (100050f0 <ADC_MEASUREMENT_ADV_lSyncADCClocks+0x78>)
100050d4:	1c18      	adds	r0, r3, #0
100050d6:	f7fd fe09 	bl	10002cec <XMC_VADC_GROUP_SetSyncMaster>

  XMC_VADC_GROUP_SetPowerMode(group_ptrs[0U],XMC_VADC_GROUP_POWERMODE_NORMAL);
100050da:	4b05      	ldr	r3, [pc, #20]	; (100050f0 <ADC_MEASUREMENT_ADV_lSyncADCClocks+0x78>)
100050dc:	1c18      	adds	r0, r3, #0
100050de:	2103      	movs	r1, #3
100050e0:	f7fd fdc8 	bl	10002c74 <XMC_VADC_GROUP_SetPowerMode>
}
100050e4:	46bd      	mov	sp, r7
100050e6:	b002      	add	sp, #8
100050e8:	bd80      	pop	{r7, pc}
100050ea:	46c0      	nop			; (mov r8, r8)
100050ec:	1000b554 	.word	0x1000b554
100050f0:	48030400 	.word	0x48030400

100050f4 <ADC_MEASUREMENT_ADV_StartADC>:
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/* Enables the arbiter of the selected request source*/
void ADC_MEASUREMENT_ADV_StartADC(const ADC_MEASUREMENT_ADV_t *const handle_ptr)
{
100050f4:	b580      	push	{r7, lr}
100050f6:	b082      	sub	sp, #8
100050f8:	af00      	add	r7, sp, #0
100050fa:	6078      	str	r0, [r7, #4]
#ifdef ADC_MEASUREMENT_ADV_QUEUE_USED
  #ifdef ADC_MEASUREMENT_ADV_SCAN_USED
      else
  #endif
      {
        XMC_VADC_GROUP_QueueEnableArbitrationSlot(group_ptrs[handle_ptr->group_index]);
100050fc:	687b      	ldr	r3, [r7, #4]
100050fe:	7d5b      	ldrb	r3, [r3, #21]
10005100:	1c1a      	adds	r2, r3, #0
10005102:	4b04      	ldr	r3, [pc, #16]	; (10005114 <ADC_MEASUREMENT_ADV_StartADC+0x20>)
10005104:	0092      	lsls	r2, r2, #2
10005106:	58d3      	ldr	r3, [r2, r3]
10005108:	1c18      	adds	r0, r3, #0
1000510a:	f7ff fe47 	bl	10004d9c <XMC_VADC_GROUP_QueueEnableArbitrationSlot>
      }
#endif
}
1000510e:	46bd      	mov	sp, r7
10005110:	b002      	add	sp, #8
10005112:	bd80      	pop	{r7, pc}
10005114:	1000b554 	.word	0x1000b554

10005118 <ADC_MEASUREMENT_ADC_lNvicEnable>:


/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/* Enables the NVIC(if needed) when scan/queue request source is consumed internally in the APP. */
void ADC_MEASUREMENT_ADC_lNvicEnable(const ADC_MEASUREMENT_ADV_t *const handle_ptr)
{
10005118:	b580      	push	{r7, lr}
1000511a:	b082      	sub	sp, #8
1000511c:	af00      	add	r7, sp, #0
1000511e:	6078      	str	r0, [r7, #4]
    {
      NVIC_EnableIRQ((IRQn_Type)handle_ptr->local_scan_handle->rs_intr_handle.node_id);
    }
#endif
#ifdef ADC_MEASUREMENT_ADV_LOCAL_QUEUE_USED
    if (((bool)true == handle_ptr->local_queue_handle->rs_intr_handle.interrupt_enable) &&
10005120:	687b      	ldr	r3, [r7, #4]
10005122:	68db      	ldr	r3, [r3, #12]
10005124:	7a1b      	ldrb	r3, [r3, #8]
10005126:	2b00      	cmp	r3, #0
10005128:	d00b      	beq.n	10005142 <ADC_MEASUREMENT_ADC_lNvicEnable+0x2a>
        (ADC_MEASUREMENT_ADV_REQUEST_SOURCE_LOCAL_QUEUE == handle_ptr->req_src))
1000512a:	687b      	ldr	r3, [r7, #4]
1000512c:	7d1b      	ldrb	r3, [r3, #20]
    {
      NVIC_EnableIRQ((IRQn_Type)handle_ptr->local_scan_handle->rs_intr_handle.node_id);
    }
#endif
#ifdef ADC_MEASUREMENT_ADV_LOCAL_QUEUE_USED
    if (((bool)true == handle_ptr->local_queue_handle->rs_intr_handle.interrupt_enable) &&
1000512e:	2b03      	cmp	r3, #3
10005130:	d107      	bne.n	10005142 <ADC_MEASUREMENT_ADC_lNvicEnable+0x2a>
        (ADC_MEASUREMENT_ADV_REQUEST_SOURCE_LOCAL_QUEUE == handle_ptr->req_src))
    {
      NVIC_EnableIRQ((IRQn_Type)handle_ptr->local_queue_handle->rs_intr_handle.node_id);
10005132:	687b      	ldr	r3, [r7, #4]
10005134:	68db      	ldr	r3, [r3, #12]
10005136:	681b      	ldr	r3, [r3, #0]
10005138:	b2db      	uxtb	r3, r3
1000513a:	b25b      	sxtb	r3, r3
1000513c:	1c18      	adds	r0, r3, #0
1000513e:	f7ff fda9 	bl	10004c94 <__NVIC_EnableIRQ>
    }
#endif
}
10005142:	46bd      	mov	sp, r7
10005144:	b002      	add	sp, #8
10005146:	bd80      	pop	{r7, pc}

10005148 <ADC_MEASUREMENT_ADC_lResultInit>:

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/* Configures the result results . */
__STATIC_INLINE void ADC_MEASUREMENT_ADC_lResultInit(const ADC_MEASUREMENT_ADV_CHANNEL_t *indexed)
{
10005148:	b580      	push	{r7, lr}
1000514a:	b082      	sub	sp, #8
1000514c:	af00      	add	r7, sp, #0
1000514e:	6078      	str	r0, [r7, #4]
      XMC_VADC_GROUP_ResultInit(group_ptrs[indexed->group_index], (uint32_t)indexed->result_fifo_tail_number,
                                indexed->res_handle[ADC_MEASUREMENT_ADV_TAIL_RESULT_REG_CONFIG]);
  }
#endif
      /* Initialize for configured result registers For FIFO Head configuration*/
      XMC_VADC_GROUP_ResultInit(group_ptrs[indexed->group_index], (uint32_t)indexed->ch_handle->result_reg_number,
10005150:	687b      	ldr	r3, [r7, #4]
10005152:	7a1b      	ldrb	r3, [r3, #8]
10005154:	1c1a      	adds	r2, r3, #0
10005156:	4b09      	ldr	r3, [pc, #36]	; (1000517c <ADC_MEASUREMENT_ADC_lResultInit+0x34>)
10005158:	0092      	lsls	r2, r2, #2
1000515a:	58d2      	ldr	r2, [r2, r3]
1000515c:	687b      	ldr	r3, [r7, #4]
1000515e:	681b      	ldr	r3, [r3, #0]
10005160:	789b      	ldrb	r3, [r3, #2]
10005162:	071b      	lsls	r3, r3, #28
10005164:	0f1b      	lsrs	r3, r3, #28
10005166:	b2db      	uxtb	r3, r3
10005168:	1c19      	adds	r1, r3, #0
                                indexed->res_handle[ADC_MEASUREMENT_ADV_HEAD_RESULT_REG_CONFIG]);
1000516a:	687b      	ldr	r3, [r7, #4]
1000516c:	685b      	ldr	r3, [r3, #4]
      XMC_VADC_GROUP_ResultInit(group_ptrs[indexed->group_index], (uint32_t)indexed->result_fifo_tail_number,
                                indexed->res_handle[ADC_MEASUREMENT_ADV_TAIL_RESULT_REG_CONFIG]);
  }
#endif
      /* Initialize for configured result registers For FIFO Head configuration*/
      XMC_VADC_GROUP_ResultInit(group_ptrs[indexed->group_index], (uint32_t)indexed->ch_handle->result_reg_number,
1000516e:	1c10      	adds	r0, r2, #0
10005170:	1c1a      	adds	r2, r3, #0
10005172:	f7ff fe77 	bl	10004e64 <XMC_VADC_GROUP_ResultInit>
                                indexed->res_handle[ADC_MEASUREMENT_ADV_HEAD_RESULT_REG_CONFIG]);
}
10005176:	46bd      	mov	sp, r7
10005178:	b002      	add	sp, #8
1000517a:	bd80      	pop	{r7, pc}
1000517c:	1000b554 	.word	0x1000b554

10005180 <ADC_MEASUREMENT_ADV_Init>:

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/* Initialization routine to call ADC LLD API's */
ADC_MEASUREMENT_ADV_STATUS_t ADC_MEASUREMENT_ADV_Init(const ADC_MEASUREMENT_ADV_t *const handle_ptr)
{
10005180:	b590      	push	{r4, r7, lr}
10005182:	b085      	sub	sp, #20
10005184:	af00      	add	r7, sp, #0
10005186:	6078      	str	r0, [r7, #4]
  uint8_t total_number_of_channels;
  ADC_MEASUREMENT_ADV_STATUS_t status;
#ifdef ADC_MEASUREMENT_ADV_SHS_GAIN_NON_DEFAULT
  uint8_t channel_number;
#endif
  bool arbitration_status = (bool)false;
10005188:	230e      	movs	r3, #14
1000518a:	18fb      	adds	r3, r7, r3
1000518c:	2200      	movs	r2, #0
1000518e:	701a      	strb	r2, [r3, #0]

  if (ADC_MEASUREMENT_ADV_STATUS_UNINITIALIZED == *handle_ptr->init_state)
10005190:	687b      	ldr	r3, [r7, #4]
10005192:	691b      	ldr	r3, [r3, #16]
10005194:	781b      	ldrb	r3, [r3, #0]
10005196:	2b02      	cmp	r3, #2
10005198:	d163      	bne.n	10005262 <ADC_MEASUREMENT_ADV_Init+0xe2>
  {

    arbitration_status = ADC_MEASUREMENT_ADV_lArbitrationStatus(handle_ptr);
1000519a:	230e      	movs	r3, #14
1000519c:	18fc      	adds	r4, r7, r3
1000519e:	687b      	ldr	r3, [r7, #4]
100051a0:	1c18      	adds	r0, r3, #0
100051a2:	f7ff ff0b 	bl	10004fbc <ADC_MEASUREMENT_ADV_lArbitrationStatus>
100051a6:	1c03      	adds	r3, r0, #0
100051a8:	7023      	strb	r3, [r4, #0]

   /* Initialize the scan/queue request source.*/
   status = ADC_MEASUREMENT_ADV_lRequestSrcInit(handle_ptr);
100051aa:	230d      	movs	r3, #13
100051ac:	18fc      	adds	r4, r7, r3
100051ae:	687b      	ldr	r3, [r7, #4]
100051b0:	1c18      	adds	r0, r3, #0
100051b2:	f7ff fec1 	bl	10004f38 <ADC_MEASUREMENT_ADV_lRequestSrcInit>
100051b6:	1c03      	adds	r3, r0, #0
100051b8:	7023      	strb	r3, [r4, #0]

   /* Disable the Arbitration if no other instance has enabled it*/
   ADC_MEASUREMENT_ADV_lDisableArbitration(handle_ptr,arbitration_status);
100051ba:	687a      	ldr	r2, [r7, #4]
100051bc:	230e      	movs	r3, #14
100051be:	18fb      	adds	r3, r7, r3
100051c0:	781b      	ldrb	r3, [r3, #0]
100051c2:	1c10      	adds	r0, r2, #0
100051c4:	1c19      	adds	r1, r3, #0
100051c6:	f7ff ff2f 	bl	10005028 <ADC_MEASUREMENT_ADV_lDisableArbitration>
    {
      /*  Configure the Sync conversion operation */
      ADC_MEASUREMENT_ADV_lSyncInit(handle_ptr);
    }
#else
   ADC_MEASUREMENT_ADV_lSyncADCClocks();
100051ca:	f7ff ff55 	bl	10005078 <ADC_MEASUREMENT_ADV_lSyncADCClocks>
#ifdef ADC_MEASUREMENT_ADV_MUX_USED
  #ifdef ADC_MEASUREMENT_ADV_MUX_NOT_ALL_USED
    if (handle_ptr->event_config != NULL)
  #endif
    {
      (handle_ptr->event_config)();
100051ce:	687b      	ldr	r3, [r7, #4]
100051d0:	689b      	ldr	r3, [r3, #8]
100051d2:	4798      	blx	r3
    }
#endif

    total_number_of_channels = (uint8_t)handle_ptr->total_number_of_channels;
100051d4:	230c      	movs	r3, #12
100051d6:	18fb      	adds	r3, r7, r3
100051d8:	687a      	ldr	r2, [r7, #4]
100051da:	7dd2      	ldrb	r2, [r2, #23]
100051dc:	701a      	strb	r2, [r3, #0]
    for (ch_num = (uint8_t)0; ch_num < (uint8_t)total_number_of_channels; ch_num++)
100051de:	230f      	movs	r3, #15
100051e0:	18fb      	adds	r3, r7, r3
100051e2:	2200      	movs	r2, #0
100051e4:	701a      	strb	r2, [r3, #0]
100051e6:	e022      	b.n	1000522e <ADC_MEASUREMENT_ADV_Init+0xae>
    {
      indexed = handle_ptr->channel_array[ch_num];
100051e8:	687b      	ldr	r3, [r7, #4]
100051ea:	681a      	ldr	r2, [r3, #0]
100051ec:	230f      	movs	r3, #15
100051ee:	18fb      	adds	r3, r7, r3
100051f0:	781b      	ldrb	r3, [r3, #0]
100051f2:	009b      	lsls	r3, r3, #2
100051f4:	18d3      	adds	r3, r2, r3
100051f6:	681b      	ldr	r3, [r3, #0]
100051f8:	60bb      	str	r3, [r7, #8]

      /* Initialize for configured channels*/
      XMC_VADC_GROUP_ChannelInit(group_ptrs[indexed->group_index],(uint32_t)indexed->ch_num, indexed->ch_handle);
100051fa:	68bb      	ldr	r3, [r7, #8]
100051fc:	7a1b      	ldrb	r3, [r3, #8]
100051fe:	1c1a      	adds	r2, r3, #0
10005200:	4b1b      	ldr	r3, [pc, #108]	; (10005270 <ADC_MEASUREMENT_ADV_Init+0xf0>)
10005202:	0092      	lsls	r2, r2, #2
10005204:	58d2      	ldr	r2, [r2, r3]
10005206:	68bb      	ldr	r3, [r7, #8]
10005208:	7a5b      	ldrb	r3, [r3, #9]
1000520a:	1c19      	adds	r1, r3, #0
1000520c:	68bb      	ldr	r3, [r7, #8]
1000520e:	681b      	ldr	r3, [r3, #0]
10005210:	1c10      	adds	r0, r2, #0
10005212:	1c1a      	adds	r2, r3, #0
10005214:	f7fd fe4a 	bl	10002eac <XMC_VADC_GROUP_ChannelInit>
                                        channel_number);
  #endif
#endif

      /* Result Init both with and without FIFO */
      ADC_MEASUREMENT_ADC_lResultInit(indexed);
10005218:	68bb      	ldr	r3, [r7, #8]
1000521a:	1c18      	adds	r0, r3, #0
1000521c:	f7ff ff94 	bl	10005148 <ADC_MEASUREMENT_ADC_lResultInit>
      (handle_ptr->event_config)();
    }
#endif

    total_number_of_channels = (uint8_t)handle_ptr->total_number_of_channels;
    for (ch_num = (uint8_t)0; ch_num < (uint8_t)total_number_of_channels; ch_num++)
10005220:	230f      	movs	r3, #15
10005222:	18fb      	adds	r3, r7, r3
10005224:	781a      	ldrb	r2, [r3, #0]
10005226:	230f      	movs	r3, #15
10005228:	18fb      	adds	r3, r7, r3
1000522a:	3201      	adds	r2, #1
1000522c:	701a      	strb	r2, [r3, #0]
1000522e:	230f      	movs	r3, #15
10005230:	18fa      	adds	r2, r7, r3
10005232:	230c      	movs	r3, #12
10005234:	18fb      	adds	r3, r7, r3
10005236:	7812      	ldrb	r2, [r2, #0]
10005238:	781b      	ldrb	r3, [r3, #0]
1000523a:	429a      	cmp	r2, r3
1000523c:	d3d4      	bcc.n	100051e8 <ADC_MEASUREMENT_ADV_Init+0x68>
      }
    }
#endif

    /* Enables the NVIC node if NVIC node is consumed inside the APP*/
    ADC_MEASUREMENT_ADC_lNvicEnable(handle_ptr);
1000523e:	687b      	ldr	r3, [r7, #4]
10005240:	1c18      	adds	r0, r3, #0
10005242:	f7ff ff69 	bl	10005118 <ADC_MEASUREMENT_ADC_lNvicEnable>

    /* Load the queue/scan entries into the hardware */
    ADC_MEASUREMENT_ADV_lInsertChannels(handle_ptr);
10005246:	687b      	ldr	r3, [r7, #4]
10005248:	1c18      	adds	r0, r3, #0
1000524a:	f7ff ff09 	bl	10005060 <ADC_MEASUREMENT_ADV_lInsertChannels>
#ifdef ADC_MEASUREMENT_ADV_START_ADC
  #ifdef ADC_MEASUREMENT_ADV_NOT_ALL_REQ_START
    if ((bool)false  != handle_ptr->start_at_initialization)
  #endif
    {
      ADC_MEASUREMENT_ADV_StartADC(handle_ptr);
1000524e:	687b      	ldr	r3, [r7, #4]
10005250:	1c18      	adds	r0, r3, #0
10005252:	f7ff ff4f 	bl	100050f4 <ADC_MEASUREMENT_ADV_StartADC>
    }
#endif

    *handle_ptr->init_state = status;
10005256:	687b      	ldr	r3, [r7, #4]
10005258:	691b      	ldr	r3, [r3, #16]
1000525a:	220d      	movs	r2, #13
1000525c:	18ba      	adds	r2, r7, r2
1000525e:	7812      	ldrb	r2, [r2, #0]
10005260:	701a      	strb	r2, [r3, #0]
  }
  return (*handle_ptr->init_state);
10005262:	687b      	ldr	r3, [r7, #4]
10005264:	691b      	ldr	r3, [r3, #16]
10005266:	781b      	ldrb	r3, [r3, #0]
}
10005268:	1c18      	adds	r0, r3, #0
1000526a:	46bd      	mov	sp, r7
1000526c:	b005      	add	sp, #20
1000526e:	bd90      	pop	{r4, r7, pc}
10005270:	1000b554 	.word	0x1000b554

10005274 <VOLT_CURR_TEMP_event_config>:

/* This function would be called in the ADC_MEASUREMENT_Init() to initialize the SR lines of the
 * Result event/channel event.
 */
static void VOLT_CURR_TEMP_event_config(void)
{
10005274:	b580      	push	{r7, lr}
10005276:	af00      	add	r7, sp, #0

	/* Result Event Node Mux Configuration for Temperature (Group-0 channel-2 Result_Register-9)*/
	XMC_VADC_GROUP_SetResultInterruptNode(VADC_G0, 9U, XMC_VADC_SR_GROUP_SR1);
10005278:	4b03      	ldr	r3, [pc, #12]	; (10005288 <VOLT_CURR_TEMP_event_config+0x14>)
1000527a:	1c18      	adds	r0, r3, #0
1000527c:	2109      	movs	r1, #9
1000527e:	2201      	movs	r2, #1
10005280:	f7fd fe82 	bl	10002f88 <XMC_VADC_GROUP_SetResultInterruptNode>

}
10005284:	46bd      	mov	sp, r7
10005286:	bd80      	pop	{r7, pc}
10005288:	48030400 	.word	0x48030400

1000528c <ACOMP_event_config>:

/* This function would be called in the ADC_MEASUREMENT_Init() to initialize the SR lines of the
 * Result event/channel event.
 */
static void ACOMP_event_config(void)
{
1000528c:	b580      	push	{r7, lr}
1000528e:	af00      	add	r7, sp, #0

	/* Result Event Node Mux Configuration for VRef (Group-1 channel-5 Result_Register-10)*/
	XMC_VADC_GROUP_SetResultInterruptNode(VADC_G1, 10U, XMC_VADC_SR_GROUP_SR1);
10005290:	4b03      	ldr	r3, [pc, #12]	; (100052a0 <ACOMP_event_config+0x14>)
10005292:	1c18      	adds	r0, r3, #0
10005294:	210a      	movs	r1, #10
10005296:	2201      	movs	r2, #1
10005298:	f7fd fe76 	bl	10002f88 <XMC_VADC_GROUP_SetResultInterruptNode>

}
1000529c:	46bd      	mov	sp, r7
1000529e:	bd80      	pop	{r7, pc}
100052a0:	48030800 	.word	0x48030800

100052a4 <DAVE_Init>:
 * @param[in]  None
 *
 * @return  DAVE_STATUS_t <BR>
 ******************************************************************************/
DAVE_STATUS_t DAVE_Init(void)
{
100052a4:	b590      	push	{r4, r7, lr}
100052a6:	b083      	sub	sp, #12
100052a8:	af00      	add	r7, sp, #0
  DAVE_STATUS_t init_status;
  
  init_status = DAVE_STATUS_SUCCESS;
100052aa:	1dfb      	adds	r3, r7, #7
100052ac:	2200      	movs	r2, #0
100052ae:	701a      	strb	r2, [r3, #0]
     /** @Initialization of APPs Init Functions */
     init_status = (DAVE_STATUS_t)CLOCK_XMC1_Init(&CLOCK_XMC1_0);
100052b0:	1dfc      	adds	r4, r7, #7
100052b2:	4b74      	ldr	r3, [pc, #464]	; (10005484 <DAVE_Init+0x1e0>)
100052b4:	1c18      	adds	r0, r3, #0
100052b6:	f7ff fc9b 	bl	10004bf0 <CLOCK_XMC1_Init>
100052ba:	1c03      	adds	r3, r0, #0
100052bc:	7023      	strb	r3, [r4, #0]

  if (init_status == DAVE_STATUS_SUCCESS)
100052be:	1dfb      	adds	r3, r7, #7
100052c0:	781b      	ldrb	r3, [r3, #0]
100052c2:	2b00      	cmp	r3, #0
100052c4:	d106      	bne.n	100052d4 <DAVE_Init+0x30>
  {
	 /**  Initialization of DIGITAL_IO APP instance PWM_ENABLE */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&PWM_ENABLE); 
100052c6:	1dfc      	adds	r4, r7, #7
100052c8:	4b6f      	ldr	r3, [pc, #444]	; (10005488 <DAVE_Init+0x1e4>)
100052ca:	1c18      	adds	r0, r3, #0
100052cc:	f7ff fc6c 	bl	10004ba8 <DIGITAL_IO_Init>
100052d0:	1c03      	adds	r3, r0, #0
100052d2:	7023      	strb	r3, [r4, #0]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
100052d4:	1dfb      	adds	r3, r7, #7
100052d6:	781b      	ldrb	r3, [r3, #0]
100052d8:	2b00      	cmp	r3, #0
100052da:	d106      	bne.n	100052ea <DAVE_Init+0x46>
  {
	 /**  Initialization of DIGITAL_IO APP instance ENC_B */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&ENC_B); 
100052dc:	1dfc      	adds	r4, r7, #7
100052de:	4b6b      	ldr	r3, [pc, #428]	; (1000548c <DAVE_Init+0x1e8>)
100052e0:	1c18      	adds	r0, r3, #0
100052e2:	f7ff fc61 	bl	10004ba8 <DIGITAL_IO_Init>
100052e6:	1c03      	adds	r3, r0, #0
100052e8:	7023      	strb	r3, [r4, #0]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
100052ea:	1dfb      	adds	r3, r7, #7
100052ec:	781b      	ldrb	r3, [r3, #0]
100052ee:	2b00      	cmp	r3, #0
100052f0:	d106      	bne.n	10005300 <DAVE_Init+0x5c>
  {
	 /**  Initialization of DIGITAL_IO APP instance ENC_A */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&ENC_A); 
100052f2:	1dfc      	adds	r4, r7, #7
100052f4:	4b66      	ldr	r3, [pc, #408]	; (10005490 <DAVE_Init+0x1ec>)
100052f6:	1c18      	adds	r0, r3, #0
100052f8:	f7ff fc56 	bl	10004ba8 <DIGITAL_IO_Init>
100052fc:	1c03      	adds	r3, r0, #0
100052fe:	7023      	strb	r3, [r4, #0]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
10005300:	1dfb      	adds	r3, r7, #7
10005302:	781b      	ldrb	r3, [r3, #0]
10005304:	2b00      	cmp	r3, #0
10005306:	d106      	bne.n	10005316 <DAVE_Init+0x72>
  {
	 /**  Initialization of PWM_CCU8 APP instance PWM */
	 init_status = (DAVE_STATUS_t)PWM_CCU8_Init(&PWM); 
10005308:	1dfc      	adds	r4, r7, #7
1000530a:	4b62      	ldr	r3, [pc, #392]	; (10005494 <DAVE_Init+0x1f0>)
1000530c:	1c18      	adds	r0, r3, #0
1000530e:	f7fe fc03 	bl	10003b18 <PWM_CCU8_Init>
10005312:	1c03      	adds	r3, r0, #0
10005314:	7023      	strb	r3, [r4, #0]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
10005316:	1dfb      	adds	r3, r7, #7
10005318:	781b      	ldrb	r3, [r3, #0]
1000531a:	2b00      	cmp	r3, #0
1000531c:	d106      	bne.n	1000532c <DAVE_Init+0x88>
  {
	 /**  Initialization of ADC_MEASUREMENT_ADV APP instance VOLT_CURR_TEMP */
	 init_status = (DAVE_STATUS_t)ADC_MEASUREMENT_ADV_Init(&VOLT_CURR_TEMP); 
1000531e:	1dfc      	adds	r4, r7, #7
10005320:	4b5d      	ldr	r3, [pc, #372]	; (10005498 <DAVE_Init+0x1f4>)
10005322:	1c18      	adds	r0, r3, #0
10005324:	f7ff ff2c 	bl	10005180 <ADC_MEASUREMENT_ADV_Init>
10005328:	1c03      	adds	r3, r0, #0
1000532a:	7023      	strb	r3, [r4, #0]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
1000532c:	1dfb      	adds	r3, r7, #7
1000532e:	781b      	ldrb	r3, [r3, #0]
10005330:	2b00      	cmp	r3, #0
10005332:	d106      	bne.n	10005342 <DAVE_Init+0x9e>
  {
	 /**  Initialization of ADC_MEASUREMENT_ADV APP instance ACOMP */
	 init_status = (DAVE_STATUS_t)ADC_MEASUREMENT_ADV_Init(&ACOMP); 
10005334:	1dfc      	adds	r4, r7, #7
10005336:	4b59      	ldr	r3, [pc, #356]	; (1000549c <DAVE_Init+0x1f8>)
10005338:	1c18      	adds	r0, r3, #0
1000533a:	f7ff ff21 	bl	10005180 <ADC_MEASUREMENT_ADV_Init>
1000533e:	1c03      	adds	r3, r0, #0
10005340:	7023      	strb	r3, [r4, #0]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
10005342:	1dfb      	adds	r3, r7, #7
10005344:	781b      	ldrb	r3, [r3, #0]
10005346:	2b00      	cmp	r3, #0
10005348:	d106      	bne.n	10005358 <DAVE_Init+0xb4>
  {
	 /**  Initialization of UART APP instance COM */
	 init_status = (DAVE_STATUS_t)UART_Init(&COM); 
1000534a:	1dfc      	adds	r4, r7, #7
1000534c:	4b54      	ldr	r3, [pc, #336]	; (100054a0 <DAVE_Init+0x1fc>)
1000534e:	1c18      	adds	r0, r3, #0
10005350:	f7fd ff58 	bl	10003204 <UART_Init>
10005354:	1c03      	adds	r3, r0, #0
10005356:	7023      	strb	r3, [r4, #0]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
10005358:	1dfb      	adds	r3, r7, #7
1000535a:	781b      	ldrb	r3, [r3, #0]
1000535c:	2b00      	cmp	r3, #0
1000535e:	d106      	bne.n	1000536e <DAVE_Init+0xca>
  {
	 /**  Initialization of DIGITAL_IO APP instance B_LED */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&B_LED); 
10005360:	1dfc      	adds	r4, r7, #7
10005362:	4b50      	ldr	r3, [pc, #320]	; (100054a4 <DAVE_Init+0x200>)
10005364:	1c18      	adds	r0, r3, #0
10005366:	f7ff fc1f 	bl	10004ba8 <DIGITAL_IO_Init>
1000536a:	1c03      	adds	r3, r0, #0
1000536c:	7023      	strb	r3, [r4, #0]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
1000536e:	1dfb      	adds	r3, r7, #7
10005370:	781b      	ldrb	r3, [r3, #0]
10005372:	2b00      	cmp	r3, #0
10005374:	d106      	bne.n	10005384 <DAVE_Init+0xe0>
  {
	 /**  Initialization of DIGITAL_IO APP instance G_LED */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&G_LED); 
10005376:	1dfc      	adds	r4, r7, #7
10005378:	4b4b      	ldr	r3, [pc, #300]	; (100054a8 <DAVE_Init+0x204>)
1000537a:	1c18      	adds	r0, r3, #0
1000537c:	f7ff fc14 	bl	10004ba8 <DIGITAL_IO_Init>
10005380:	1c03      	adds	r3, r0, #0
10005382:	7023      	strb	r3, [r4, #0]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
10005384:	1dfb      	adds	r3, r7, #7
10005386:	781b      	ldrb	r3, [r3, #0]
10005388:	2b00      	cmp	r3, #0
1000538a:	d106      	bne.n	1000539a <DAVE_Init+0xf6>
  {
	 /**  Initialization of DIGITAL_IO APP instance R_LED */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&R_LED); 
1000538c:	1dfc      	adds	r4, r7, #7
1000538e:	4b47      	ldr	r3, [pc, #284]	; (100054ac <DAVE_Init+0x208>)
10005390:	1c18      	adds	r0, r3, #0
10005392:	f7ff fc09 	bl	10004ba8 <DIGITAL_IO_Init>
10005396:	1c03      	adds	r3, r0, #0
10005398:	7023      	strb	r3, [r4, #0]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
1000539a:	1dfb      	adds	r3, r7, #7
1000539c:	781b      	ldrb	r3, [r3, #0]
1000539e:	2b00      	cmp	r3, #0
100053a0:	d106      	bne.n	100053b0 <DAVE_Init+0x10c>
  {
	 /**  Initialization of DIGITAL_IO APP instance JMP_4 */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&JMP_4); 
100053a2:	1dfc      	adds	r4, r7, #7
100053a4:	4b42      	ldr	r3, [pc, #264]	; (100054b0 <DAVE_Init+0x20c>)
100053a6:	1c18      	adds	r0, r3, #0
100053a8:	f7ff fbfe 	bl	10004ba8 <DIGITAL_IO_Init>
100053ac:	1c03      	adds	r3, r0, #0
100053ae:	7023      	strb	r3, [r4, #0]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
100053b0:	1dfb      	adds	r3, r7, #7
100053b2:	781b      	ldrb	r3, [r3, #0]
100053b4:	2b00      	cmp	r3, #0
100053b6:	d106      	bne.n	100053c6 <DAVE_Init+0x122>
  {
	 /**  Initialization of DIGITAL_IO APP instance ENC_Switch */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&ENC_Switch); 
100053b8:	1dfc      	adds	r4, r7, #7
100053ba:	4b3e      	ldr	r3, [pc, #248]	; (100054b4 <DAVE_Init+0x210>)
100053bc:	1c18      	adds	r0, r3, #0
100053be:	f7ff fbf3 	bl	10004ba8 <DIGITAL_IO_Init>
100053c2:	1c03      	adds	r3, r0, #0
100053c4:	7023      	strb	r3, [r4, #0]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
100053c6:	1dfb      	adds	r3, r7, #7
100053c8:	781b      	ldrb	r3, [r3, #0]
100053ca:	2b00      	cmp	r3, #0
100053cc:	d106      	bne.n	100053dc <DAVE_Init+0x138>
  {
	 /**  Initialization of DIGITAL_IO APP instance JMP_3 */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&JMP_3); 
100053ce:	1dfc      	adds	r4, r7, #7
100053d0:	4b39      	ldr	r3, [pc, #228]	; (100054b8 <DAVE_Init+0x214>)
100053d2:	1c18      	adds	r0, r3, #0
100053d4:	f7ff fbe8 	bl	10004ba8 <DIGITAL_IO_Init>
100053d8:	1c03      	adds	r3, r0, #0
100053da:	7023      	strb	r3, [r4, #0]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
100053dc:	1dfb      	adds	r3, r7, #7
100053de:	781b      	ldrb	r3, [r3, #0]
100053e0:	2b00      	cmp	r3, #0
100053e2:	d106      	bne.n	100053f2 <DAVE_Init+0x14e>
  {
	 /**  Initialization of DIGITAL_IO APP instance JMP_2 */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&JMP_2); 
100053e4:	1dfc      	adds	r4, r7, #7
100053e6:	4b35      	ldr	r3, [pc, #212]	; (100054bc <DAVE_Init+0x218>)
100053e8:	1c18      	adds	r0, r3, #0
100053ea:	f7ff fbdd 	bl	10004ba8 <DIGITAL_IO_Init>
100053ee:	1c03      	adds	r3, r0, #0
100053f0:	7023      	strb	r3, [r4, #0]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
100053f2:	1dfb      	adds	r3, r7, #7
100053f4:	781b      	ldrb	r3, [r3, #0]
100053f6:	2b00      	cmp	r3, #0
100053f8:	d106      	bne.n	10005408 <DAVE_Init+0x164>
  {
	 /**  Initialization of DIGITAL_IO APP instance JMP_1 */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&JMP_1); 
100053fa:	1dfc      	adds	r4, r7, #7
100053fc:	4b30      	ldr	r3, [pc, #192]	; (100054c0 <DAVE_Init+0x21c>)
100053fe:	1c18      	adds	r0, r3, #0
10005400:	f7ff fbd2 	bl	10004ba8 <DIGITAL_IO_Init>
10005404:	1c03      	adds	r3, r0, #0
10005406:	7023      	strb	r3, [r4, #0]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
10005408:	1dfb      	adds	r3, r7, #7
1000540a:	781b      	ldrb	r3, [r3, #0]
1000540c:	2b00      	cmp	r3, #0
1000540e:	d106      	bne.n	1000541e <DAVE_Init+0x17a>
  {
	 /**  Initialization of PWM_CCU4 APP instance PULSE_5MS */
	 init_status = (DAVE_STATUS_t)PWM_CCU4_Init(&PULSE_5MS); 
10005410:	1dfc      	adds	r4, r7, #7
10005412:	4b2c      	ldr	r3, [pc, #176]	; (100054c4 <DAVE_Init+0x220>)
10005414:	1c18      	adds	r0, r3, #0
10005416:	f7fe ffa7 	bl	10004368 <PWM_CCU4_Init>
1000541a:	1c03      	adds	r3, r0, #0
1000541c:	7023      	strb	r3, [r4, #0]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
1000541e:	1dfb      	adds	r3, r7, #7
10005420:	781b      	ldrb	r3, [r3, #0]
10005422:	2b00      	cmp	r3, #0
10005424:	d106      	bne.n	10005434 <DAVE_Init+0x190>
  {
	 /**  Initialization of PWM_CCU4 APP instance PULSE_250US */
	 init_status = (DAVE_STATUS_t)PWM_CCU4_Init(&PULSE_250US); 
10005426:	1dfc      	adds	r4, r7, #7
10005428:	4b27      	ldr	r3, [pc, #156]	; (100054c8 <DAVE_Init+0x224>)
1000542a:	1c18      	adds	r0, r3, #0
1000542c:	f7fe ff9c 	bl	10004368 <PWM_CCU4_Init>
10005430:	1c03      	adds	r3, r0, #0
10005432:	7023      	strb	r3, [r4, #0]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
10005434:	1dfb      	adds	r3, r7, #7
10005436:	781b      	ldrb	r3, [r3, #0]
10005438:	2b00      	cmp	r3, #0
1000543a:	d106      	bne.n	1000544a <DAVE_Init+0x1a6>
  {
	 /**  Initialization of INTERRUPT APP instance TASK_20MS */
	 init_status = (DAVE_STATUS_t)INTERRUPT_Init(&TASK_20MS); 
1000543c:	1dfc      	adds	r4, r7, #7
1000543e:	4b23      	ldr	r3, [pc, #140]	; (100054cc <DAVE_Init+0x228>)
10005440:	1c18      	adds	r0, r3, #0
10005442:	f7ff fa81 	bl	10004948 <INTERRUPT_Init>
10005446:	1c03      	adds	r3, r0, #0
10005448:	7023      	strb	r3, [r4, #0]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
1000544a:	1dfb      	adds	r3, r7, #7
1000544c:	781b      	ldrb	r3, [r3, #0]
1000544e:	2b00      	cmp	r3, #0
10005450:	d106      	bne.n	10005460 <DAVE_Init+0x1bc>
  {
	 /**  Initialization of INTERRUPT APP instance ACOMP_1MS */
	 init_status = (DAVE_STATUS_t)INTERRUPT_Init(&ACOMP_1MS); 
10005452:	1dfc      	adds	r4, r7, #7
10005454:	4b1e      	ldr	r3, [pc, #120]	; (100054d0 <DAVE_Init+0x22c>)
10005456:	1c18      	adds	r0, r3, #0
10005458:	f7ff fa76 	bl	10004948 <INTERRUPT_Init>
1000545c:	1c03      	adds	r3, r0, #0
1000545e:	7023      	strb	r3, [r4, #0]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
10005460:	1dfb      	adds	r3, r7, #7
10005462:	781b      	ldrb	r3, [r3, #0]
10005464:	2b00      	cmp	r3, #0
10005466:	d106      	bne.n	10005476 <DAVE_Init+0x1d2>
  {
	 /**  Initialization of UART APP instance RS232 */
	 init_status = (DAVE_STATUS_t)UART_Init(&RS232); 
10005468:	1dfc      	adds	r4, r7, #7
1000546a:	4b1a      	ldr	r3, [pc, #104]	; (100054d4 <DAVE_Init+0x230>)
1000546c:	1c18      	adds	r0, r3, #0
1000546e:	f7fd fec9 	bl	10003204 <UART_Init>
10005472:	1c03      	adds	r3, r0, #0
10005474:	7023      	strb	r3, [r4, #0]
   }  
  return init_status;
10005476:	1dfb      	adds	r3, r7, #7
10005478:	781b      	ldrb	r3, [r3, #0]
} /**  End of function DAVE_Init */
1000547a:	1c18      	adds	r0, r3, #0
1000547c:	46bd      	mov	sp, r7
1000547e:	b003      	add	sp, #12
10005480:	bd90      	pop	{r4, r7, pc}
10005482:	46c0      	nop			; (mov r8, r8)
10005484:	20001350 	.word	0x20001350
10005488:	1000b498 	.word	0x1000b498
1000548c:	1000b4a8 	.word	0x1000b4a8
10005490:	1000b4b8 	.word	0x1000b4b8
10005494:	20001160 	.word	0x20001160
10005498:	1000b5ec 	.word	0x1000b5ec
1000549c:	1000b674 	.word	0x1000b674
100054a0:	20001148 	.word	0x20001148
100054a4:	1000b4c8 	.word	0x1000b4c8
100054a8:	1000b4d8 	.word	0x1000b4d8
100054ac:	1000b4e8 	.word	0x1000b4e8
100054b0:	1000b4f8 	.word	0x1000b4f8
100054b4:	1000b508 	.word	0x1000b508
100054b8:	1000b518 	.word	0x1000b518
100054bc:	1000b528 	.word	0x1000b528
100054c0:	1000b538 	.word	0x1000b538
100054c4:	20001194 	.word	0x20001194
100054c8:	200011bc 	.word	0x200011bc
100054cc:	1000b450 	.word	0x1000b450
100054d0:	1000b454 	.word	0x1000b454
100054d4:	20001154 	.word	0x20001154

100054d8 <XMC_GPIO_SetOutputHigh>:
 * Register Pn_OMR is virtual and does not contain any flip-flop. A read action delivers the value of 0.
 *
 */

__STATIC_INLINE void XMC_GPIO_SetOutputHigh(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
100054d8:	b580      	push	{r7, lr}
100054da:	b082      	sub	sp, #8
100054dc:	af00      	add	r7, sp, #0
100054de:	6078      	str	r0, [r7, #4]
100054e0:	1c0a      	adds	r2, r1, #0
100054e2:	1cfb      	adds	r3, r7, #3
100054e4:	701a      	strb	r2, [r3, #0]
  XMC_ASSERT("XMC_GPIO_SetOutputHigh: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = (uint32_t)0x1U << pin;
100054e6:	1cfb      	adds	r3, r7, #3
100054e8:	781b      	ldrb	r3, [r3, #0]
100054ea:	2201      	movs	r2, #1
100054ec:	409a      	lsls	r2, r3
100054ee:	687b      	ldr	r3, [r7, #4]
100054f0:	605a      	str	r2, [r3, #4]
}
100054f2:	46bd      	mov	sp, r7
100054f4:	b002      	add	sp, #8
100054f6:	bd80      	pop	{r7, pc}

100054f8 <XMC_GPIO_SetOutputLow>:
 * Register Pn_OMR is virtual and does not contain any flip-flop. A read action delivers the value of 0.\n
 *
 */

__STATIC_INLINE void XMC_GPIO_SetOutputLow(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
100054f8:	b580      	push	{r7, lr}
100054fa:	b082      	sub	sp, #8
100054fc:	af00      	add	r7, sp, #0
100054fe:	6078      	str	r0, [r7, #4]
10005500:	1c0a      	adds	r2, r1, #0
10005502:	1cfb      	adds	r3, r7, #3
10005504:	701a      	strb	r2, [r3, #0]
  XMC_ASSERT("XMC_GPIO_SetOutputLow: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = 0x10000U << pin;
10005506:	1cfb      	adds	r3, r7, #3
10005508:	781b      	ldrb	r3, [r3, #0]
1000550a:	2280      	movs	r2, #128	; 0x80
1000550c:	0252      	lsls	r2, r2, #9
1000550e:	409a      	lsls	r2, r3
10005510:	687b      	ldr	r3, [r7, #4]
10005512:	605a      	str	r2, [r3, #4]
}
10005514:	46bd      	mov	sp, r7
10005516:	b002      	add	sp, #8
10005518:	bd80      	pop	{r7, pc}
1000551a:	46c0      	nop			; (mov r8, r8)

1000551c <XMC_GPIO_GetInput>:
 * Prior to this api, user has to configure port pin to input mode using XMC_GPIO_SetMode().
 *
 */

__STATIC_INLINE uint32_t XMC_GPIO_GetInput(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
1000551c:	b580      	push	{r7, lr}
1000551e:	b082      	sub	sp, #8
10005520:	af00      	add	r7, sp, #0
10005522:	6078      	str	r0, [r7, #4]
10005524:	1c0a      	adds	r2, r1, #0
10005526:	1cfb      	adds	r3, r7, #3
10005528:	701a      	strb	r2, [r3, #0]
  XMC_ASSERT("XMC_GPIO_GetInput: Invalid port", XMC_GPIO_CHECK_PORT(port));

  return (((port->IN) >> pin) & 0x1U);
1000552a:	687b      	ldr	r3, [r7, #4]
1000552c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
1000552e:	1cfb      	adds	r3, r7, #3
10005530:	781b      	ldrb	r3, [r3, #0]
10005532:	40da      	lsrs	r2, r3
10005534:	1c13      	adds	r3, r2, #0
10005536:	2201      	movs	r2, #1
10005538:	4013      	ands	r3, r2
}
1000553a:	1c18      	adds	r0, r3, #0
1000553c:	46bd      	mov	sp, r7
1000553e:	b002      	add	sp, #8
10005540:	bd80      	pop	{r7, pc}
10005542:	46c0      	nop			; (mov r8, r8)

10005544 <DIGITAL_IO_SetOutputHigh>:
* }
*  @endcode
*/

__STATIC_INLINE void DIGITAL_IO_SetOutputHigh(const DIGITAL_IO_t *const handler)
{
10005544:	b580      	push	{r7, lr}
10005546:	b082      	sub	sp, #8
10005548:	af00      	add	r7, sp, #0
1000554a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("DIGITAL_IO_SetOutputHigh: handler null pointer", handler != NULL);
  XMC_GPIO_SetOutputHigh(handler->gpio_port, handler->gpio_pin);
1000554c:	687b      	ldr	r3, [r7, #4]
1000554e:	681a      	ldr	r2, [r3, #0]
10005550:	687b      	ldr	r3, [r7, #4]
10005552:	7b1b      	ldrb	r3, [r3, #12]
10005554:	1c10      	adds	r0, r2, #0
10005556:	1c19      	adds	r1, r3, #0
10005558:	f7ff ffbe 	bl	100054d8 <XMC_GPIO_SetOutputHigh>
}
1000555c:	46bd      	mov	sp, r7
1000555e:	b002      	add	sp, #8
10005560:	bd80      	pop	{r7, pc}
10005562:	46c0      	nop			; (mov r8, r8)

10005564 <DIGITAL_IO_SetOutputLow>:
* }
*  @endcode
*/

__STATIC_INLINE void DIGITAL_IO_SetOutputLow(const DIGITAL_IO_t *const handler)
{
10005564:	b580      	push	{r7, lr}
10005566:	b082      	sub	sp, #8
10005568:	af00      	add	r7, sp, #0
1000556a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("DIGITAL_IO_SetOutputLow: handler null pointer", handler != NULL);
  XMC_GPIO_SetOutputLow(handler->gpio_port,handler->gpio_pin);
1000556c:	687b      	ldr	r3, [r7, #4]
1000556e:	681a      	ldr	r2, [r3, #0]
10005570:	687b      	ldr	r3, [r7, #4]
10005572:	7b1b      	ldrb	r3, [r3, #12]
10005574:	1c10      	adds	r0, r2, #0
10005576:	1c19      	adds	r1, r3, #0
10005578:	f7ff ffbe 	bl	100054f8 <XMC_GPIO_SetOutputLow>
}
1000557c:	46bd      	mov	sp, r7
1000557e:	b002      	add	sp, #8
10005580:	bd80      	pop	{r7, pc}
10005582:	46c0      	nop			; (mov r8, r8)

10005584 <DIGITAL_IO_GetInput>:
* }
*  @endcode
*/

__STATIC_INLINE uint32_t DIGITAL_IO_GetInput(const DIGITAL_IO_t *const handler)
{
10005584:	b580      	push	{r7, lr}
10005586:	b082      	sub	sp, #8
10005588:	af00      	add	r7, sp, #0
1000558a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("DIGITAL_IO_GetInput: handler null pointer", handler != NULL);
  return XMC_GPIO_GetInput(handler->gpio_port, handler->gpio_pin);
1000558c:	687b      	ldr	r3, [r7, #4]
1000558e:	681a      	ldr	r2, [r3, #0]
10005590:	687b      	ldr	r3, [r7, #4]
10005592:	7b1b      	ldrb	r3, [r3, #12]
10005594:	1c10      	adds	r0, r2, #0
10005596:	1c19      	adds	r1, r3, #0
10005598:	f7ff ffc0 	bl	1000551c <XMC_GPIO_GetInput>
1000559c:	1c03      	adds	r3, r0, #0
}
1000559e:	1c18      	adds	r0, r3, #0
100055a0:	46bd      	mov	sp, r7
100055a2:	b002      	add	sp, #8
100055a4:	bd80      	pop	{r7, pc}
100055a6:	46c0      	nop			; (mov r8, r8)

100055a8 <XMC_VADC_GROUP_GetResult>:
 * \par<b>Related APIs:</b><br>
 * XMC_VADC_GROUP_GetDetailedResult().
 */
__STATIC_INLINE XMC_VADC_RESULT_SIZE_t XMC_VADC_GROUP_GetResult(XMC_VADC_GROUP_t *const group_ptr, 
                                                                const uint32_t res_reg)
{
100055a8:	b580      	push	{r7, lr}
100055aa:	b082      	sub	sp, #8
100055ac:	af00      	add	r7, sp, #0
100055ae:	6078      	str	r0, [r7, #4]
100055b0:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_VADC_GROUP_GetResult:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  XMC_ASSERT("XMC_VADC_GROUP_GetResult:Wrong Result Register", ((res_reg) < XMC_VADC_NUM_RESULT_REGISTERS))

  return ((XMC_VADC_RESULT_SIZE_t)group_ptr->RES[res_reg]);
100055b2:	687b      	ldr	r3, [r7, #4]
100055b4:	683a      	ldr	r2, [r7, #0]
100055b6:	32c0      	adds	r2, #192	; 0xc0
100055b8:	0092      	lsls	r2, r2, #2
100055ba:	58d3      	ldr	r3, [r2, r3]
100055bc:	b29b      	uxth	r3, r3
}
100055be:	1c18      	adds	r0, r3, #0
100055c0:	46bd      	mov	sp, r7
100055c2:	b002      	add	sp, #8
100055c4:	bd80      	pop	{r7, pc}
100055c6:	46c0      	nop			; (mov r8, r8)

100055c8 <ADC_MEASUREMENT_ADV_GetResult>:
  }
}
 * @endcode
 */
__STATIC_INLINE uint16_t ADC_MEASUREMENT_ADV_GetResult(const ADC_MEASUREMENT_ADV_CHANNEL_t *const handle_ptr)
{
100055c8:	b590      	push	{r4, r7, lr}
100055ca:	b085      	sub	sp, #20
100055cc:	af00      	add	r7, sp, #0
100055ce:	6078      	str	r0, [r7, #4]
  uint16_t result;
  extern XMC_VADC_GROUP_t *const group_ptrs[XMC_VADC_MAXIMUM_NUM_GROUPS];
  XMC_ASSERT("ADC_MEASUREMENT_ADV_GetResult:Invalid handle_ptr", (handle_ptr != NULL))

  result = XMC_VADC_GROUP_GetResult(group_ptrs[handle_ptr->group_index],
100055d0:	687b      	ldr	r3, [r7, #4]
100055d2:	7a1b      	ldrb	r3, [r3, #8]
100055d4:	1c1a      	adds	r2, r3, #0
100055d6:	4b0c      	ldr	r3, [pc, #48]	; (10005608 <ADC_MEASUREMENT_ADV_GetResult+0x40>)
100055d8:	0092      	lsls	r2, r2, #2
100055da:	58d2      	ldr	r2, [r2, r3]
                                    (uint32_t) handle_ptr->ch_handle->result_reg_number);
100055dc:	687b      	ldr	r3, [r7, #4]
100055de:	681b      	ldr	r3, [r3, #0]
100055e0:	789b      	ldrb	r3, [r3, #2]
100055e2:	071b      	lsls	r3, r3, #28
100055e4:	0f1b      	lsrs	r3, r3, #28
100055e6:	b2db      	uxtb	r3, r3
{
  uint16_t result;
  extern XMC_VADC_GROUP_t *const group_ptrs[XMC_VADC_MAXIMUM_NUM_GROUPS];
  XMC_ASSERT("ADC_MEASUREMENT_ADV_GetResult:Invalid handle_ptr", (handle_ptr != NULL))

  result = XMC_VADC_GROUP_GetResult(group_ptrs[handle_ptr->group_index],
100055e8:	210e      	movs	r1, #14
100055ea:	187c      	adds	r4, r7, r1
100055ec:	1c10      	adds	r0, r2, #0
100055ee:	1c19      	adds	r1, r3, #0
100055f0:	f7ff ffda 	bl	100055a8 <XMC_VADC_GROUP_GetResult>
100055f4:	1c03      	adds	r3, r0, #0
100055f6:	8023      	strh	r3, [r4, #0]
                                    (uint32_t) handle_ptr->ch_handle->result_reg_number);
  return(result);
100055f8:	230e      	movs	r3, #14
100055fa:	18fb      	adds	r3, r7, r3
100055fc:	881b      	ldrh	r3, [r3, #0]
}
100055fe:	1c18      	adds	r0, r3, #0
10005600:	46bd      	mov	sp, r7
10005602:	b005      	add	sp, #20
10005604:	bd90      	pop	{r4, r7, pc}
10005606:	46c0      	nop			; (mov r8, r8)
10005608:	1000b554 	.word	0x1000b554

1000560c <XMC_USIC_CH_RXFIFO_IsEmpty>:
 * 
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_RXFIFO_Flush(), XMC_USIC_CH_RXFIFO_PutData() \n\n\n
 */
__STATIC_INLINE bool XMC_USIC_CH_RXFIFO_IsEmpty(XMC_USIC_CH_t *const channel)
{
1000560c:	b580      	push	{r7, lr}
1000560e:	b082      	sub	sp, #8
10005610:	af00      	add	r7, sp, #0
10005612:	6078      	str	r0, [r7, #4]
  return (bool)(channel->TRBSR & USIC_CH_TRBSR_REMPTY_Msk);
10005614:	687a      	ldr	r2, [r7, #4]
10005616:	238a      	movs	r3, #138	; 0x8a
10005618:	005b      	lsls	r3, r3, #1
1000561a:	58d3      	ldr	r3, [r2, r3]
1000561c:	2208      	movs	r2, #8
1000561e:	4013      	ands	r3, r2
10005620:	1e5a      	subs	r2, r3, #1
10005622:	4193      	sbcs	r3, r2
10005624:	b2db      	uxtb	r3, r3
}
10005626:	1c18      	adds	r0, r3, #0
10005628:	46bd      	mov	sp, r7
1000562a:	b002      	add	sp, #8
1000562c:	bd80      	pop	{r7, pc}
1000562e:	46c0      	nop			; (mov r8, r8)

10005630 <UART_GetReceivedWord>:
 *  }
 * @endcode
 *
 */
__STATIC_INLINE uint8_t UART_GetReceivedWord(const UART_t* const handle)
{
10005630:	b580      	push	{r7, lr}
10005632:	b082      	sub	sp, #8
10005634:	af00      	add	r7, sp, #0
10005636:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("UART APP handle invalid", (handle != NULL))
  return (uint8_t)XMC_UART_CH_GetReceivedData(handle->channel);
10005638:	687b      	ldr	r3, [r7, #4]
1000563a:	681b      	ldr	r3, [r3, #0]
1000563c:	1c18      	adds	r0, r3, #0
1000563e:	f7fc ffd1 	bl	100025e4 <XMC_UART_CH_GetReceivedData>
10005642:	1c03      	adds	r3, r0, #0
10005644:	b2db      	uxtb	r3, r3
}
10005646:	1c18      	adds	r0, r3, #0
10005648:	46bd      	mov	sp, r7
1000564a:	b002      	add	sp, #8
1000564c:	bd80      	pop	{r7, pc}
1000564e:	46c0      	nop			; (mov r8, r8)

10005650 <UART_IsRXFIFOEmpty>:
 *   }
 * }
 * @endcode
 */
__STATIC_INLINE bool UART_IsRXFIFOEmpty(const UART_t* const handle)
{
10005650:	b580      	push	{r7, lr}
10005652:	b082      	sub	sp, #8
10005654:	af00      	add	r7, sp, #0
10005656:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("UART APP handle invalid", (handle != NULL))
  return XMC_USIC_CH_RXFIFO_IsEmpty(handle->channel);
10005658:	687b      	ldr	r3, [r7, #4]
1000565a:	681b      	ldr	r3, [r3, #0]
1000565c:	1c18      	adds	r0, r3, #0
1000565e:	f7ff ffd5 	bl	1000560c <XMC_USIC_CH_RXFIFO_IsEmpty>
10005662:	1c03      	adds	r3, r0, #0
}
10005664:	1c18      	adds	r0, r3, #0
10005666:	46bd      	mov	sp, r7
10005668:	b002      	add	sp, #8
1000566a:	bd80      	pop	{r7, pc}

1000566c <PWM_enable_disable_toggle>:
const float PWM_min_frequency = 100E3;
const float PWM_delta_frequency  = 1E3;
uint32_t histogram_received_patterns[256];

void PWM_enable_disable_toggle()
{
1000566c:	b580      	push	{r7, lr}
1000566e:	af00      	add	r7, sp, #0
	/* Toggle PWM enable */
	g_pwm_en ^=0x1;
10005670:	4b0f      	ldr	r3, [pc, #60]	; (100056b0 <PWM_enable_disable_toggle+0x44>)
10005672:	781b      	ldrb	r3, [r3, #0]
10005674:	b2db      	uxtb	r3, r3
10005676:	2201      	movs	r2, #1
10005678:	4053      	eors	r3, r2
1000567a:	b2da      	uxtb	r2, r3
1000567c:	4b0c      	ldr	r3, [pc, #48]	; (100056b0 <PWM_enable_disable_toggle+0x44>)
1000567e:	701a      	strb	r2, [r3, #0]

	/* Overwrite g_pwm_en to avoid enabling PWM in any critical situation */
	if ( g_critical_detected )
10005680:	4b0c      	ldr	r3, [pc, #48]	; (100056b4 <PWM_enable_disable_toggle+0x48>)
10005682:	681b      	ldr	r3, [r3, #0]
10005684:	2b00      	cmp	r3, #0
10005686:	d002      	beq.n	1000568e <PWM_enable_disable_toggle+0x22>
		g_pwm_en=0;
10005688:	4b09      	ldr	r3, [pc, #36]	; (100056b0 <PWM_enable_disable_toggle+0x44>)
1000568a:	2200      	movs	r2, #0
1000568c:	701a      	strb	r2, [r3, #0]

	if (g_pwm_en==1)
1000568e:	4b08      	ldr	r3, [pc, #32]	; (100056b0 <PWM_enable_disable_toggle+0x44>)
10005690:	781b      	ldrb	r3, [r3, #0]
10005692:	b2db      	uxtb	r3, r3
10005694:	2b01      	cmp	r3, #1
10005696:	d104      	bne.n	100056a2 <PWM_enable_disable_toggle+0x36>
	{
	    PWM_CCU8_Start(&PWM);
10005698:	4b07      	ldr	r3, [pc, #28]	; (100056b8 <PWM_enable_disable_toggle+0x4c>)
1000569a:	1c18      	adds	r0, r3, #0
1000569c:	f7fe fd14 	bl	100040c8 <PWM_CCU8_Start>
100056a0:	e003      	b.n	100056aa <PWM_enable_disable_toggle+0x3e>
	}
	else
	{
		PWM_CCU8_Stop(&PWM);
100056a2:	4b05      	ldr	r3, [pc, #20]	; (100056b8 <PWM_enable_disable_toggle+0x4c>)
100056a4:	1c18      	adds	r0, r3, #0
100056a6:	f7fe fd41 	bl	1000412c <PWM_CCU8_Stop>
	}
}
100056aa:	46bd      	mov	sp, r7
100056ac:	bd80      	pop	{r7, pc}
100056ae:	46c0      	nop			; (mov r8, r8)
100056b0:	20001395 	.word	0x20001395
100056b4:	20001390 	.word	0x20001390
100056b8:	20001160 	.word	0x20001160

100056bc <check_threshold>:

void check_threshold (uint32_t value, uint32_t threshold, uint32_t hysteresis_offset, volatile uint32_t* status)
{
100056bc:	b580      	push	{r7, lr}
100056be:	b084      	sub	sp, #16
100056c0:	af00      	add	r7, sp, #0
100056c2:	60f8      	str	r0, [r7, #12]
100056c4:	60b9      	str	r1, [r7, #8]
100056c6:	607a      	str	r2, [r7, #4]
100056c8:	603b      	str	r3, [r7, #0]
	if ( ( value > threshold + hysteresis_offset) && ( *status == 0 ) )
100056ca:	68ba      	ldr	r2, [r7, #8]
100056cc:	687b      	ldr	r3, [r7, #4]
100056ce:	18d2      	adds	r2, r2, r3
100056d0:	68fb      	ldr	r3, [r7, #12]
100056d2:	429a      	cmp	r2, r3
100056d4:	d206      	bcs.n	100056e4 <check_threshold+0x28>
100056d6:	683b      	ldr	r3, [r7, #0]
100056d8:	681b      	ldr	r3, [r3, #0]
100056da:	2b00      	cmp	r3, #0
100056dc:	d102      	bne.n	100056e4 <check_threshold+0x28>
	{
		*status = 1;
100056de:	683b      	ldr	r3, [r7, #0]
100056e0:	2201      	movs	r2, #1
100056e2:	601a      	str	r2, [r3, #0]
	}
	if ( ( value < threshold - hysteresis_offset) && ( *status == 1 ) )
100056e4:	68ba      	ldr	r2, [r7, #8]
100056e6:	687b      	ldr	r3, [r7, #4]
100056e8:	1ad2      	subs	r2, r2, r3
100056ea:	68fb      	ldr	r3, [r7, #12]
100056ec:	429a      	cmp	r2, r3
100056ee:	d906      	bls.n	100056fe <check_threshold+0x42>
100056f0:	683b      	ldr	r3, [r7, #0]
100056f2:	681b      	ldr	r3, [r3, #0]
100056f4:	2b01      	cmp	r3, #1
100056f6:	d102      	bne.n	100056fe <check_threshold+0x42>
	{
		*status = 0;
100056f8:	683b      	ldr	r3, [r7, #0]
100056fa:	2200      	movs	r2, #0
100056fc:	601a      	str	r2, [r3, #0]
	}
	return;
100056fe:	46c0      	nop			; (mov r8, r8)
}
10005700:	46bd      	mov	sp, r7
10005702:	b004      	add	sp, #16
10005704:	bd80      	pop	{r7, pc}
10005706:	46c0      	nop			; (mov r8, r8)

10005708 <average_calc>:

float average_calc(float new_value, float current_average, uint16_t filter)
{
10005708:	b590      	push	{r4, r7, lr}
1000570a:	b085      	sub	sp, #20
1000570c:	af00      	add	r7, sp, #0
1000570e:	60f8      	str	r0, [r7, #12]
10005710:	60b9      	str	r1, [r7, #8]
10005712:	1dbb      	adds	r3, r7, #6
10005714:	801a      	strh	r2, [r3, #0]
	return (current_average*((float)filter-1) + new_value)/filter;
10005716:	1dbb      	adds	r3, r7, #6
10005718:	881b      	ldrh	r3, [r3, #0]
1000571a:	1c18      	adds	r0, r3, #0
1000571c:	f001 fcd4 	bl	100070c8 <__aeabi_ui2f>
10005720:	1c03      	adds	r3, r0, #0
10005722:	1c18      	adds	r0, r3, #0
10005724:	21fe      	movs	r1, #254	; 0xfe
10005726:	0589      	lsls	r1, r1, #22
10005728:	f001 fae8 	bl	10006cfc <__aeabi_fsub>
1000572c:	1c03      	adds	r3, r0, #0
1000572e:	1c18      	adds	r0, r3, #0
10005730:	68b9      	ldr	r1, [r7, #8]
10005732:	f001 f9b1 	bl	10006a98 <__aeabi_fmul>
10005736:	1c03      	adds	r3, r0, #0
10005738:	1c18      	adds	r0, r3, #0
1000573a:	68f9      	ldr	r1, [r7, #12]
1000573c:	f000 fe3e 	bl	100063bc <__aeabi_fadd>
10005740:	1c03      	adds	r3, r0, #0
10005742:	1c1c      	adds	r4, r3, #0
10005744:	1dbb      	adds	r3, r7, #6
10005746:	881b      	ldrh	r3, [r3, #0]
10005748:	1c18      	adds	r0, r3, #0
1000574a:	f001 fc75 	bl	10007038 <__aeabi_i2f>
1000574e:	1c03      	adds	r3, r0, #0
10005750:	1c20      	adds	r0, r4, #0
10005752:	1c19      	adds	r1, r3, #0
10005754:	f000 ffae 	bl	100066b4 <__aeabi_fdiv>
10005758:	1c03      	adds	r3, r0, #0
}
1000575a:	1c18      	adds	r0, r3, #0
1000575c:	46bd      	mov	sp, r7
1000575e:	b005      	add	sp, #20
10005760:	bd90      	pop	{r4, r7, pc}
10005762:	46c0      	nop			; (mov r8, r8)

10005764 <main>:

int main(void)
{
10005764:	b5f0      	push	{r4, r5, r6, r7, lr}
10005766:	465f      	mov	r7, fp
10005768:	4656      	mov	r6, sl
1000576a:	464d      	mov	r5, r9
1000576c:	4644      	mov	r4, r8
1000576e:	b4f0      	push	{r4, r5, r6, r7}
10005770:	b0a7      	sub	sp, #156	; 0x9c
10005772:	af12      	add	r7, sp, #72	; 0x48
  DAVE_STATUS_t status;
  uint8_t received_byte,index=0;
10005774:	2327      	movs	r3, #39	; 0x27
10005776:	2228      	movs	r2, #40	; 0x28
10005778:	4694      	mov	ip, r2
1000577a:	44bc      	add	ip, r7
1000577c:	4463      	add	r3, ip
1000577e:	2200      	movs	r2, #0
10005780:	701a      	strb	r2, [r3, #0]
  uint8_t receive_buffer[5],power_up,power_down;
  uint8_t debounce_enc_switch_cnt=0,debounce_enc_switch_state=0,debounce_enc_switch_state_old=1;
10005782:	2324      	movs	r3, #36	; 0x24
10005784:	2228      	movs	r2, #40	; 0x28
10005786:	4694      	mov	ip, r2
10005788:	44bc      	add	ip, r7
1000578a:	4463      	add	r3, ip
1000578c:	2200      	movs	r2, #0
1000578e:	701a      	strb	r2, [r3, #0]
10005790:	2323      	movs	r3, #35	; 0x23
10005792:	2228      	movs	r2, #40	; 0x28
10005794:	4694      	mov	ip, r2
10005796:	44bc      	add	ip, r7
10005798:	4463      	add	r3, ip
1000579a:	2200      	movs	r2, #0
1000579c:	701a      	strb	r2, [r3, #0]
1000579e:	2322      	movs	r3, #34	; 0x22
100057a0:	2228      	movs	r2, #40	; 0x28
100057a2:	4694      	mov	ip, r2
100057a4:	44bc      	add	ip, r7
100057a6:	4463      	add	r3, ip
100057a8:	2201      	movs	r2, #1
100057aa:	701a      	strb	r2, [r3, #0]
  uint32_t ENC_A_new, ENC_B_new;


  static uint32_t samples=0;

  status = DAVE_Init();           /* Initialization of DAVE APPs  */
100057ac:	2313      	movs	r3, #19
100057ae:	2228      	movs	r2, #40	; 0x28
100057b0:	18ba      	adds	r2, r7, r2
100057b2:	18d4      	adds	r4, r2, r3
100057b4:	f7ff fd76 	bl	100052a4 <DAVE_Init>
100057b8:	1c03      	adds	r3, r0, #0
100057ba:	7023      	strb	r3, [r4, #0]

  for (uint32_t index=0; index<256;index++)
100057bc:	2300      	movs	r3, #0
100057be:	63fb      	str	r3, [r7, #60]	; 0x3c
100057c0:	e007      	b.n	100057d2 <main+0x6e>
	  histogram_received_patterns[index]=0;
100057c2:	4b64      	ldr	r3, [pc, #400]	; (10005954 <main+0x1f0>)
100057c4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
100057c6:	0092      	lsls	r2, r2, #2
100057c8:	2100      	movs	r1, #0
100057ca:	50d1      	str	r1, [r2, r3]

  static uint32_t samples=0;

  status = DAVE_Init();           /* Initialization of DAVE APPs  */

  for (uint32_t index=0; index<256;index++)
100057cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
100057ce:	3301      	adds	r3, #1
100057d0:	63fb      	str	r3, [r7, #60]	; 0x3c
100057d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
100057d4:	2bff      	cmp	r3, #255	; 0xff
100057d6:	d9f4      	bls.n	100057c2 <main+0x5e>
	  histogram_received_patterns[index]=0;

  if(status != DAVE_STATUS_SUCCESS)
100057d8:	2313      	movs	r3, #19
100057da:	2228      	movs	r2, #40	; 0x28
100057dc:	4694      	mov	ip, r2
100057de:	44bc      	add	ip, r7
100057e0:	4463      	add	r3, ip
100057e2:	781b      	ldrb	r3, [r3, #0]
100057e4:	2b00      	cmp	r3, #0
100057e6:	d000      	beq.n	100057ea <main+0x86>
    XMC_DEBUG("DAVE APPs initialization failed\n");

    while(1U)
    {

    }
100057e8:	e7fe      	b.n	100057e8 <main+0x84>

  /* Placeholder for user application code. The while loop below can be replaced with user application code. */
  while(1U)
  {
	// TODO: Temperature is overwritten here with 50. For debugging only until sensor is calibrated
	g_temperature_average=50;
100057ea:	4b5b      	ldr	r3, [pc, #364]	; (10005958 <main+0x1f4>)
100057ec:	4a5b      	ldr	r2, [pc, #364]	; (1000595c <main+0x1f8>)
100057ee:	601a      	str	r2, [r3, #0]

	/* Check for overvoltage, -current, temperature situations */
	check_threshold (g_voltage_average, VOLTAGE_MAX, VOLTAGE_HYSTERESIS, &g_overvoltage_detected);
100057f0:	4b5b      	ldr	r3, [pc, #364]	; (10005960 <main+0x1fc>)
100057f2:	681b      	ldr	r3, [r3, #0]
100057f4:	1c18      	adds	r0, r3, #0
100057f6:	f000 fdc9 	bl	1000638c <__aeabi_f2uiz>
100057fa:	495a      	ldr	r1, [pc, #360]	; (10005964 <main+0x200>)
100057fc:	23fa      	movs	r3, #250	; 0xfa
100057fe:	009a      	lsls	r2, r3, #2
10005800:	4b59      	ldr	r3, [pc, #356]	; (10005968 <main+0x204>)
10005802:	f7ff ff5b 	bl	100056bc <check_threshold>
	check_threshold (g_current_average, CURRENT_MAX, CURRENT_HYSTERESIS, &g_overcurrent_detected);
10005806:	4b59      	ldr	r3, [pc, #356]	; (1000596c <main+0x208>)
10005808:	681b      	ldr	r3, [r3, #0]
1000580a:	1c18      	adds	r0, r3, #0
1000580c:	f000 fdbe 	bl	1000638c <__aeabi_f2uiz>
10005810:	4957      	ldr	r1, [pc, #348]	; (10005970 <main+0x20c>)
10005812:	23fa      	movs	r3, #250	; 0xfa
10005814:	009a      	lsls	r2, r3, #2
10005816:	4b57      	ldr	r3, [pc, #348]	; (10005974 <main+0x210>)
10005818:	f7ff ff50 	bl	100056bc <check_threshold>
	check_threshold (g_temperature_average, TEMP_MAX, TEMP_HYSTERESIS, &g_overtemperature_detected);
1000581c:	4b4e      	ldr	r3, [pc, #312]	; (10005958 <main+0x1f4>)
1000581e:	681b      	ldr	r3, [r3, #0]
10005820:	1c18      	adds	r0, r3, #0
10005822:	f000 fdb3 	bl	1000638c <__aeabi_f2uiz>
10005826:	1c02      	adds	r2, r0, #0
10005828:	4b53      	ldr	r3, [pc, #332]	; (10005978 <main+0x214>)
1000582a:	1c10      	adds	r0, r2, #0
1000582c:	216e      	movs	r1, #110	; 0x6e
1000582e:	2214      	movs	r2, #20
10005830:	f7ff ff44 	bl	100056bc <check_threshold>

	g_critical_detected = g_overvoltage_detected | g_overcurrent_detected | g_overtemperature_detected | g_clamp;
10005834:	4b4c      	ldr	r3, [pc, #304]	; (10005968 <main+0x204>)
10005836:	681a      	ldr	r2, [r3, #0]
10005838:	4b4e      	ldr	r3, [pc, #312]	; (10005974 <main+0x210>)
1000583a:	681b      	ldr	r3, [r3, #0]
1000583c:	431a      	orrs	r2, r3
1000583e:	4b4e      	ldr	r3, [pc, #312]	; (10005978 <main+0x214>)
10005840:	681b      	ldr	r3, [r3, #0]
10005842:	4313      	orrs	r3, r2
10005844:	4a4d      	ldr	r2, [pc, #308]	; (1000597c <main+0x218>)
10005846:	7812      	ldrb	r2, [r2, #0]
10005848:	b2d2      	uxtb	r2, r2
1000584a:	431a      	orrs	r2, r3
1000584c:	4b4c      	ldr	r3, [pc, #304]	; (10005980 <main+0x21c>)
1000584e:	601a      	str	r2, [r3, #0]

	/* Check for critical overvoltage, -current, temperature situations and set red/green LEDs*/
	if ( g_critical_detected )
10005850:	4b4b      	ldr	r3, [pc, #300]	; (10005980 <main+0x21c>)
10005852:	681b      	ldr	r3, [r3, #0]
10005854:	2b00      	cmp	r3, #0
10005856:	d015      	beq.n	10005884 <main+0x120>
	{
		g_pwm_en = 0;
10005858:	4b4a      	ldr	r3, [pc, #296]	; (10005984 <main+0x220>)
1000585a:	2200      	movs	r2, #0
1000585c:	701a      	strb	r2, [r3, #0]
		PWM_CCU8_Stop(&PWM);
1000585e:	4b4a      	ldr	r3, [pc, #296]	; (10005988 <main+0x224>)
10005860:	1c18      	adds	r0, r3, #0
10005862:	f7fe fc63 	bl	1000412c <PWM_CCU8_Stop>
		DIGITAL_IO_SetOutputHigh(&G_LED); /*Micrium:*/ led_g=1;
10005866:	4b49      	ldr	r3, [pc, #292]	; (1000598c <main+0x228>)
10005868:	1c18      	adds	r0, r3, #0
1000586a:	f7ff fe6b 	bl	10005544 <DIGITAL_IO_SetOutputHigh>
1000586e:	4b48      	ldr	r3, [pc, #288]	; (10005990 <main+0x22c>)
10005870:	2201      	movs	r2, #1
10005872:	701a      	strb	r2, [r3, #0]
		DIGITAL_IO_SetOutputLow(&R_LED); /*Micrium:*/ led_r=0;
10005874:	4b47      	ldr	r3, [pc, #284]	; (10005994 <main+0x230>)
10005876:	1c18      	adds	r0, r3, #0
10005878:	f7ff fe74 	bl	10005564 <DIGITAL_IO_SetOutputLow>
1000587c:	4b46      	ldr	r3, [pc, #280]	; (10005998 <main+0x234>)
1000587e:	2200      	movs	r2, #0
10005880:	701a      	strb	r2, [r3, #0]
10005882:	e00d      	b.n	100058a0 <main+0x13c>
	}
	else
	{
		DIGITAL_IO_SetOutputLow(&G_LED); /*Micrium:*/ led_g=0;
10005884:	4b41      	ldr	r3, [pc, #260]	; (1000598c <main+0x228>)
10005886:	1c18      	adds	r0, r3, #0
10005888:	f7ff fe6c 	bl	10005564 <DIGITAL_IO_SetOutputLow>
1000588c:	4b40      	ldr	r3, [pc, #256]	; (10005990 <main+0x22c>)
1000588e:	2200      	movs	r2, #0
10005890:	701a      	strb	r2, [r3, #0]
		DIGITAL_IO_SetOutputHigh(&R_LED); /*Micrium:*/ led_r=1;
10005892:	4b40      	ldr	r3, [pc, #256]	; (10005994 <main+0x230>)
10005894:	1c18      	adds	r0, r3, #0
10005896:	f7ff fe55 	bl	10005544 <DIGITAL_IO_SetOutputHigh>
1000589a:	4b3f      	ldr	r3, [pc, #252]	; (10005998 <main+0x234>)
1000589c:	2201      	movs	r2, #1
1000589e:	701a      	strb	r2, [r3, #0]
	}

	/* Process incoming patterns from inField UART communication */
	g_power_up=0;
100058a0:	4b3e      	ldr	r3, [pc, #248]	; (1000599c <main+0x238>)
100058a2:	2200      	movs	r2, #0
100058a4:	601a      	str	r2, [r3, #0]
	g_power_down=0;
100058a6:	4b3e      	ldr	r3, [pc, #248]	; (100059a0 <main+0x23c>)
100058a8:	2200      	movs	r2, #0
100058aa:	601a      	str	r2, [r3, #0]

	while (!UART_IsRXFIFOEmpty (&COM))
100058ac:	e0f8      	b.n	10005aa0 <main+0x33c>
	{
		/* Store last 5 bytes inside array received_byte*/
		received_byte = UART_GetReceivedWord(&COM);
100058ae:	232f      	movs	r3, #47	; 0x2f
100058b0:	18fc      	adds	r4, r7, r3
100058b2:	4b3c      	ldr	r3, [pc, #240]	; (100059a4 <main+0x240>)
100058b4:	1c18      	adds	r0, r3, #0
100058b6:	f7ff febb 	bl	10005630 <UART_GetReceivedWord>
100058ba:	1c03      	adds	r3, r0, #0
100058bc:	7023      	strb	r3, [r4, #0]
		if (index<5)
100058be:	2327      	movs	r3, #39	; 0x27
100058c0:	2228      	movs	r2, #40	; 0x28
100058c2:	4694      	mov	ip, r2
100058c4:	44bc      	add	ip, r7
100058c6:	4463      	add	r3, ip
100058c8:	781b      	ldrb	r3, [r3, #0]
100058ca:	2b04      	cmp	r3, #4
100058cc:	d822      	bhi.n	10005914 <main+0x1b0>
		{
			receive_buffer[index] = received_byte;
100058ce:	2327      	movs	r3, #39	; 0x27
100058d0:	2228      	movs	r2, #40	; 0x28
100058d2:	4694      	mov	ip, r2
100058d4:	44bc      	add	ip, r7
100058d6:	4463      	add	r3, ip
100058d8:	781b      	ldrb	r3, [r3, #0]
100058da:	2228      	movs	r2, #40	; 0x28
100058dc:	18ba      	adds	r2, r7, r2
100058de:	212f      	movs	r1, #47	; 0x2f
100058e0:	1879      	adds	r1, r7, r1
100058e2:	7809      	ldrb	r1, [r1, #0]
100058e4:	54d1      	strb	r1, [r2, r3]
			histogram_received_patterns[received_byte]++;
100058e6:	232f      	movs	r3, #47	; 0x2f
100058e8:	18fb      	adds	r3, r7, r3
100058ea:	781b      	ldrb	r3, [r3, #0]
100058ec:	4a19      	ldr	r2, [pc, #100]	; (10005954 <main+0x1f0>)
100058ee:	0099      	lsls	r1, r3, #2
100058f0:	588a      	ldr	r2, [r1, r2]
100058f2:	1c51      	adds	r1, r2, #1
100058f4:	4a17      	ldr	r2, [pc, #92]	; (10005954 <main+0x1f0>)
100058f6:	009b      	lsls	r3, r3, #2
100058f8:	5099      	str	r1, [r3, r2]
			index++;
100058fa:	2327      	movs	r3, #39	; 0x27
100058fc:	2228      	movs	r2, #40	; 0x28
100058fe:	4694      	mov	ip, r2
10005900:	44bc      	add	ip, r7
10005902:	4463      	add	r3, ip
10005904:	781a      	ldrb	r2, [r3, #0]
10005906:	2327      	movs	r3, #39	; 0x27
10005908:	2128      	movs	r1, #40	; 0x28
1000590a:	468c      	mov	ip, r1
1000590c:	44bc      	add	ip, r7
1000590e:	4463      	add	r3, ip
10005910:	3201      	adds	r2, #1
10005912:	701a      	strb	r2, [r3, #0]
		}
		/* 5 bytes received?
		 * Process and check for power-up/down commands
		 */
		if (index==5)
10005914:	2327      	movs	r3, #39	; 0x27
10005916:	2228      	movs	r2, #40	; 0x28
10005918:	4694      	mov	ip, r2
1000591a:	44bc      	add	ip, r7
1000591c:	4463      	add	r3, ip
1000591e:	781b      	ldrb	r3, [r3, #0]
10005920:	2b05      	cmp	r3, #5
10005922:	d000      	beq.n	10005926 <main+0x1c2>
10005924:	e0ba      	b.n	10005a9c <main+0x338>
		{
			power_up=0;
10005926:	2326      	movs	r3, #38	; 0x26
10005928:	2228      	movs	r2, #40	; 0x28
1000592a:	4694      	mov	ip, r2
1000592c:	44bc      	add	ip, r7
1000592e:	4463      	add	r3, ip
10005930:	2200      	movs	r2, #0
10005932:	701a      	strb	r2, [r3, #0]
			power_down=0;
10005934:	2325      	movs	r3, #37	; 0x25
10005936:	2228      	movs	r2, #40	; 0x28
10005938:	4694      	mov	ip, r2
1000593a:	44bc      	add	ip, r7
1000593c:	4463      	add	r3, ip
1000593e:	2200      	movs	r2, #0
10005940:	701a      	strb	r2, [r3, #0]
			for (index=0; index<5; index++)
10005942:	2327      	movs	r3, #39	; 0x27
10005944:	2228      	movs	r2, #40	; 0x28
10005946:	4694      	mov	ip, r2
10005948:	44bc      	add	ip, r7
1000594a:	4463      	add	r3, ip
1000594c:	2200      	movs	r2, #0
1000594e:	701a      	strb	r2, [r3, #0]
10005950:	e07d      	b.n	10005a4e <main+0x2ea>
10005952:	46c0      	nop			; (mov r8, r8)
10005954:	200014bc 	.word	0x200014bc
10005958:	20001368 	.word	0x20001368
1000595c:	42480000 	.word	0x42480000
10005960:	20001370 	.word	0x20001370
10005964:	00006d60 	.word	0x00006d60
10005968:	20001384 	.word	0x20001384
1000596c:	20001378 	.word	0x20001378
10005970:	00002af8 	.word	0x00002af8
10005974:	20001388 	.word	0x20001388
10005978:	2000138c 	.word	0x2000138c
1000597c:	20001394 	.word	0x20001394
10005980:	20001390 	.word	0x20001390
10005984:	20001395 	.word	0x20001395
10005988:	20001160 	.word	0x20001160
1000598c:	1000b4d8 	.word	0x1000b4d8
10005990:	20001381 	.word	0x20001381
10005994:	1000b4e8 	.word	0x1000b4e8
10005998:	20001380 	.word	0x20001380
1000599c:	20001354 	.word	0x20001354
100059a0:	20001358 	.word	0x20001358
100059a4:	20001148 	.word	0x20001148
			{
				if ((receive_buffer[index]==POWER_UP_0)||
100059a8:	2327      	movs	r3, #39	; 0x27
100059aa:	2228      	movs	r2, #40	; 0x28
100059ac:	4694      	mov	ip, r2
100059ae:	44bc      	add	ip, r7
100059b0:	4463      	add	r3, ip
100059b2:	781b      	ldrb	r3, [r3, #0]
100059b4:	2228      	movs	r2, #40	; 0x28
100059b6:	18ba      	adds	r2, r7, r2
100059b8:	5cd3      	ldrb	r3, [r2, r3]
100059ba:	2b8e      	cmp	r3, #142	; 0x8e
100059bc:	d00a      	beq.n	100059d4 <main+0x270>
					(receive_buffer[index]==POWER_UP_1)
100059be:	2327      	movs	r3, #39	; 0x27
100059c0:	2228      	movs	r2, #40	; 0x28
100059c2:	4694      	mov	ip, r2
100059c4:	44bc      	add	ip, r7
100059c6:	4463      	add	r3, ip
100059c8:	781b      	ldrb	r3, [r3, #0]
100059ca:	2228      	movs	r2, #40	; 0x28
100059cc:	18ba      	adds	r2, r7, r2
100059ce:	5cd3      	ldrb	r3, [r2, r3]
		{
			power_up=0;
			power_down=0;
			for (index=0; index<5; index++)
			{
				if ((receive_buffer[index]==POWER_UP_0)||
100059d0:	2b0e      	cmp	r3, #14
100059d2:	d10c      	bne.n	100059ee <main+0x28a>
					(receive_buffer[index]==POWER_UP_1)
				   )
					power_up++;
100059d4:	2326      	movs	r3, #38	; 0x26
100059d6:	2228      	movs	r2, #40	; 0x28
100059d8:	4694      	mov	ip, r2
100059da:	44bc      	add	ip, r7
100059dc:	4463      	add	r3, ip
100059de:	781a      	ldrb	r2, [r3, #0]
100059e0:	2326      	movs	r3, #38	; 0x26
100059e2:	2128      	movs	r1, #40	; 0x28
100059e4:	468c      	mov	ip, r1
100059e6:	44bc      	add	ip, r7
100059e8:	4463      	add	r3, ip
100059ea:	3201      	adds	r2, #1
100059ec:	701a      	strb	r2, [r3, #0]
				if ((receive_buffer[index]==POWER_DOWN_0)||
100059ee:	2327      	movs	r3, #39	; 0x27
100059f0:	2228      	movs	r2, #40	; 0x28
100059f2:	4694      	mov	ip, r2
100059f4:	44bc      	add	ip, r7
100059f6:	4463      	add	r3, ip
100059f8:	781b      	ldrb	r3, [r3, #0]
100059fa:	2228      	movs	r2, #40	; 0x28
100059fc:	18ba      	adds	r2, r7, r2
100059fe:	5cd3      	ldrb	r3, [r2, r3]
10005a00:	2b66      	cmp	r3, #102	; 0x66
10005a02:	d00a      	beq.n	10005a1a <main+0x2b6>
					(receive_buffer[index]==POWER_DOWN_1))
10005a04:	2327      	movs	r3, #39	; 0x27
10005a06:	2228      	movs	r2, #40	; 0x28
10005a08:	4694      	mov	ip, r2
10005a0a:	44bc      	add	ip, r7
10005a0c:	4463      	add	r3, ip
10005a0e:	781b      	ldrb	r3, [r3, #0]
10005a10:	2228      	movs	r2, #40	; 0x28
10005a12:	18ba      	adds	r2, r7, r2
10005a14:	5cd3      	ldrb	r3, [r2, r3]
			{
				if ((receive_buffer[index]==POWER_UP_0)||
					(receive_buffer[index]==POWER_UP_1)
				   )
					power_up++;
				if ((receive_buffer[index]==POWER_DOWN_0)||
10005a16:	2be6      	cmp	r3, #230	; 0xe6
10005a18:	d10c      	bne.n	10005a34 <main+0x2d0>
					(receive_buffer[index]==POWER_DOWN_1))
					power_down++;
10005a1a:	2325      	movs	r3, #37	; 0x25
10005a1c:	2228      	movs	r2, #40	; 0x28
10005a1e:	4694      	mov	ip, r2
10005a20:	44bc      	add	ip, r7
10005a22:	4463      	add	r3, ip
10005a24:	781a      	ldrb	r2, [r3, #0]
10005a26:	2325      	movs	r3, #37	; 0x25
10005a28:	2128      	movs	r1, #40	; 0x28
10005a2a:	468c      	mov	ip, r1
10005a2c:	44bc      	add	ip, r7
10005a2e:	4463      	add	r3, ip
10005a30:	3201      	adds	r2, #1
10005a32:	701a      	strb	r2, [r3, #0]
		 */
		if (index==5)
		{
			power_up=0;
			power_down=0;
			for (index=0; index<5; index++)
10005a34:	2327      	movs	r3, #39	; 0x27
10005a36:	2228      	movs	r2, #40	; 0x28
10005a38:	4694      	mov	ip, r2
10005a3a:	44bc      	add	ip, r7
10005a3c:	4463      	add	r3, ip
10005a3e:	781a      	ldrb	r2, [r3, #0]
10005a40:	2327      	movs	r3, #39	; 0x27
10005a42:	2128      	movs	r1, #40	; 0x28
10005a44:	468c      	mov	ip, r1
10005a46:	44bc      	add	ip, r7
10005a48:	4463      	add	r3, ip
10005a4a:	3201      	adds	r2, #1
10005a4c:	701a      	strb	r2, [r3, #0]
10005a4e:	2327      	movs	r3, #39	; 0x27
10005a50:	2228      	movs	r2, #40	; 0x28
10005a52:	4694      	mov	ip, r2
10005a54:	44bc      	add	ip, r7
10005a56:	4463      	add	r3, ip
10005a58:	781b      	ldrb	r3, [r3, #0]
10005a5a:	2b04      	cmp	r3, #4
10005a5c:	d9a4      	bls.n	100059a8 <main+0x244>
					power_up++;
				if ((receive_buffer[index]==POWER_DOWN_0)||
					(receive_buffer[index]==POWER_DOWN_1))
					power_down++;
			}
			if (power_up>=3)
10005a5e:	2326      	movs	r3, #38	; 0x26
10005a60:	2228      	movs	r2, #40	; 0x28
10005a62:	4694      	mov	ip, r2
10005a64:	44bc      	add	ip, r7
10005a66:	4463      	add	r3, ip
10005a68:	781b      	ldrb	r3, [r3, #0]
10005a6a:	2b02      	cmp	r3, #2
10005a6c:	d903      	bls.n	10005a76 <main+0x312>
			{
				g_power_up=1;
10005a6e:	4bd8      	ldr	r3, [pc, #864]	; (10005dd0 <main+0x66c>)
10005a70:	22fe      	movs	r2, #254	; 0xfe
10005a72:	0592      	lsls	r2, r2, #22
10005a74:	601a      	str	r2, [r3, #0]
			}
			if (power_down>=3)
10005a76:	2325      	movs	r3, #37	; 0x25
10005a78:	2228      	movs	r2, #40	; 0x28
10005a7a:	4694      	mov	ip, r2
10005a7c:	44bc      	add	ip, r7
10005a7e:	4463      	add	r3, ip
10005a80:	781b      	ldrb	r3, [r3, #0]
10005a82:	2b02      	cmp	r3, #2
10005a84:	d903      	bls.n	10005a8e <main+0x32a>
			{
				g_power_down=1;
10005a86:	4bd3      	ldr	r3, [pc, #844]	; (10005dd4 <main+0x670>)
10005a88:	22fe      	movs	r2, #254	; 0xfe
10005a8a:	0592      	lsls	r2, r2, #22
10005a8c:	601a      	str	r2, [r3, #0]
			}
			index = 0;
10005a8e:	2327      	movs	r3, #39	; 0x27
10005a90:	2228      	movs	r2, #40	; 0x28
10005a92:	4694      	mov	ip, r2
10005a94:	44bc      	add	ip, r7
10005a96:	4463      	add	r3, ip
10005a98:	2200      	movs	r2, #0
10005a9a:	701a      	strb	r2, [r3, #0]
		}
		/* Reset watchdog of InField-communication */
		watchdog_inField_communication = 0;
10005a9c:	2300      	movs	r3, #0
10005a9e:	647b      	str	r3, [r7, #68]	; 0x44

	/* Process incoming patterns from inField UART communication */
	g_power_up=0;
	g_power_down=0;

	while (!UART_IsRXFIFOEmpty (&COM))
10005aa0:	4bcd      	ldr	r3, [pc, #820]	; (10005dd8 <main+0x674>)
10005aa2:	1c18      	adds	r0, r3, #0
10005aa4:	f7ff fdd4 	bl	10005650 <UART_IsRXFIFOEmpty>
10005aa8:	1c03      	adds	r3, r0, #0
10005aaa:	1c1a      	adds	r2, r3, #0
10005aac:	2301      	movs	r3, #1
10005aae:	4053      	eors	r3, r2
10005ab0:	b2db      	uxtb	r3, r3
10005ab2:	2b00      	cmp	r3, #0
10005ab4:	d000      	beq.n	10005ab8 <main+0x354>
10005ab6:	e6fa      	b.n	100058ae <main+0x14a>
		/* Reset watchdog of InField-communication */
		watchdog_inField_communication = 0;
	}

	/* Debug output on UART every 200 millisecond */
	if (counter_20ms>10)
10005ab8:	4bc8      	ldr	r3, [pc, #800]	; (10005ddc <main+0x678>)
10005aba:	681b      	ldr	r3, [r3, #0]
10005abc:	2b0a      	cmp	r3, #10
10005abe:	d800      	bhi.n	10005ac2 <main+0x35e>
10005ac0:	e07d      	b.n	10005bbe <main+0x45a>
	{
		counter_20ms=0;
10005ac2:	4bc6      	ldr	r3, [pc, #792]	; (10005ddc <main+0x678>)
10005ac4:	2200      	movs	r2, #0
10005ac6:	601a      	str	r2, [r3, #0]
		sprintf ((char *)debug_output_buffer,"Volt[mV]:%07.1f   Curr[mA]:%07.1f   Pow[W]:%05.1f   Temp[°C]: %05.1f   Frequ[kHz]:%07.3f OV:%1i OC:%1i OT:%1i CL:%1i %2x %2x %2x %2x %2x  \n\r",
10005ac8:	4bc5      	ldr	r3, [pc, #788]	; (10005de0 <main+0x67c>)
10005aca:	681b      	ldr	r3, [r3, #0]
10005acc:	1c18      	adds	r0, r3, #0
10005ace:	f002 f977 	bl	10007dc0 <__aeabi_f2d>
10005ad2:	6238      	str	r0, [r7, #32]
10005ad4:	6279      	str	r1, [r7, #36]	; 0x24
10005ad6:	4bc3      	ldr	r3, [pc, #780]	; (10005de4 <main+0x680>)
10005ad8:	681b      	ldr	r3, [r3, #0]
10005ada:	1c18      	adds	r0, r3, #0
10005adc:	f002 f970 	bl	10007dc0 <__aeabi_f2d>
10005ae0:	1c04      	adds	r4, r0, #0
10005ae2:	1c0d      	adds	r5, r1, #0
10005ae4:	4bc0      	ldr	r3, [pc, #768]	; (10005de8 <main+0x684>)
10005ae6:	681b      	ldr	r3, [r3, #0]
10005ae8:	1c18      	adds	r0, r3, #0
10005aea:	f002 f969 	bl	10007dc0 <__aeabi_f2d>
10005aee:	61b8      	str	r0, [r7, #24]
10005af0:	61f9      	str	r1, [r7, #28]
10005af2:	4bbe      	ldr	r3, [pc, #760]	; (10005dec <main+0x688>)
10005af4:	681b      	ldr	r3, [r3, #0]
10005af6:	1c18      	adds	r0, r3, #0
10005af8:	f002 f962 	bl	10007dc0 <__aeabi_f2d>
10005afc:	6138      	str	r0, [r7, #16]
10005afe:	6179      	str	r1, [r7, #20]
10005b00:	4bbb      	ldr	r3, [pc, #748]	; (10005df0 <main+0x68c>)
10005b02:	681b      	ldr	r3, [r3, #0]
10005b04:	1c18      	adds	r0, r3, #0
10005b06:	f002 f95b 	bl	10007dc0 <__aeabi_f2d>
10005b0a:	60b8      	str	r0, [r7, #8]
10005b0c:	60f9      	str	r1, [r7, #12]
10005b0e:	4bb9      	ldr	r3, [pc, #740]	; (10005df4 <main+0x690>)
10005b10:	681b      	ldr	r3, [r3, #0]
10005b12:	607b      	str	r3, [r7, #4]
10005b14:	4bb8      	ldr	r3, [pc, #736]	; (10005df8 <main+0x694>)
10005b16:	681b      	ldr	r3, [r3, #0]
10005b18:	469b      	mov	fp, r3
10005b1a:	4bb8      	ldr	r3, [pc, #736]	; (10005dfc <main+0x698>)
10005b1c:	681b      	ldr	r3, [r3, #0]
10005b1e:	469a      	mov	sl, r3
10005b20:	4bb7      	ldr	r3, [pc, #732]	; (10005e00 <main+0x69c>)
10005b22:	781b      	ldrb	r3, [r3, #0]
10005b24:	b2db      	uxtb	r3, r3
10005b26:	4699      	mov	r9, r3
				g_PWM_current_frequency,
				(int)g_overvoltage_detected,
				(int)g_overcurrent_detected,
				(int)g_overtemperature_detected,
				(int)g_clamp,
				(int)receive_buffer[0],
10005b28:	2328      	movs	r3, #40	; 0x28
10005b2a:	18fb      	adds	r3, r7, r3
10005b2c:	781b      	ldrb	r3, [r3, #0]

	/* Debug output on UART every 200 millisecond */
	if (counter_20ms>10)
	{
		counter_20ms=0;
		sprintf ((char *)debug_output_buffer,"Volt[mV]:%07.1f   Curr[mA]:%07.1f   Pow[W]:%05.1f   Temp[°C]: %05.1f   Frequ[kHz]:%07.3f OV:%1i OC:%1i OT:%1i CL:%1i %2x %2x %2x %2x %2x  \n\r",
10005b2e:	4698      	mov	r8, r3
				(int)g_overvoltage_detected,
				(int)g_overcurrent_detected,
				(int)g_overtemperature_detected,
				(int)g_clamp,
				(int)receive_buffer[0],
				(int)receive_buffer[1],
10005b30:	2328      	movs	r3, #40	; 0x28
10005b32:	18fb      	adds	r3, r7, r3
10005b34:	785b      	ldrb	r3, [r3, #1]

	/* Debug output on UART every 200 millisecond */
	if (counter_20ms>10)
	{
		counter_20ms=0;
		sprintf ((char *)debug_output_buffer,"Volt[mV]:%07.1f   Curr[mA]:%07.1f   Pow[W]:%05.1f   Temp[°C]: %05.1f   Frequ[kHz]:%07.3f OV:%1i OC:%1i OT:%1i CL:%1i %2x %2x %2x %2x %2x  \n\r",
10005b36:	469c      	mov	ip, r3
				(int)g_overcurrent_detected,
				(int)g_overtemperature_detected,
				(int)g_clamp,
				(int)receive_buffer[0],
				(int)receive_buffer[1],
				(int)receive_buffer[2],
10005b38:	2328      	movs	r3, #40	; 0x28
10005b3a:	18fb      	adds	r3, r7, r3
10005b3c:	789b      	ldrb	r3, [r3, #2]

	/* Debug output on UART every 200 millisecond */
	if (counter_20ms>10)
	{
		counter_20ms=0;
		sprintf ((char *)debug_output_buffer,"Volt[mV]:%07.1f   Curr[mA]:%07.1f   Pow[W]:%05.1f   Temp[°C]: %05.1f   Frequ[kHz]:%07.3f OV:%1i OC:%1i OT:%1i CL:%1i %2x %2x %2x %2x %2x  \n\r",
10005b3e:	1c1e      	adds	r6, r3, #0
				(int)g_overtemperature_detected,
				(int)g_clamp,
				(int)receive_buffer[0],
				(int)receive_buffer[1],
				(int)receive_buffer[2],
				(int)receive_buffer[3],
10005b40:	2328      	movs	r3, #40	; 0x28
10005b42:	18fb      	adds	r3, r7, r3
10005b44:	78db      	ldrb	r3, [r3, #3]

	/* Debug output on UART every 200 millisecond */
	if (counter_20ms>10)
	{
		counter_20ms=0;
		sprintf ((char *)debug_output_buffer,"Volt[mV]:%07.1f   Curr[mA]:%07.1f   Pow[W]:%05.1f   Temp[°C]: %05.1f   Frequ[kHz]:%07.3f OV:%1i OC:%1i OT:%1i CL:%1i %2x %2x %2x %2x %2x  \n\r",
10005b46:	1c18      	adds	r0, r3, #0
				(int)g_clamp,
				(int)receive_buffer[0],
				(int)receive_buffer[1],
				(int)receive_buffer[2],
				(int)receive_buffer[3],
				(int)receive_buffer[4]
10005b48:	2328      	movs	r3, #40	; 0x28
10005b4a:	18fb      	adds	r3, r7, r3
10005b4c:	791b      	ldrb	r3, [r3, #4]

	/* Debug output on UART every 200 millisecond */
	if (counter_20ms>10)
	{
		counter_20ms=0;
		sprintf ((char *)debug_output_buffer,"Volt[mV]:%07.1f   Curr[mA]:%07.1f   Pow[W]:%05.1f   Temp[°C]: %05.1f   Frequ[kHz]:%07.3f OV:%1i OC:%1i OT:%1i CL:%1i %2x %2x %2x %2x %2x  \n\r",
10005b4e:	1c19      	adds	r1, r3, #0
10005b50:	4aac      	ldr	r2, [pc, #688]	; (10005e04 <main+0x6a0>)
10005b52:	4bad      	ldr	r3, [pc, #692]	; (10005e08 <main+0x6a4>)
10005b54:	9400      	str	r4, [sp, #0]
10005b56:	9501      	str	r5, [sp, #4]
10005b58:	69bc      	ldr	r4, [r7, #24]
10005b5a:	69fd      	ldr	r5, [r7, #28]
10005b5c:	9402      	str	r4, [sp, #8]
10005b5e:	9503      	str	r5, [sp, #12]
10005b60:	693c      	ldr	r4, [r7, #16]
10005b62:	697d      	ldr	r5, [r7, #20]
10005b64:	9404      	str	r4, [sp, #16]
10005b66:	9505      	str	r5, [sp, #20]
10005b68:	68bc      	ldr	r4, [r7, #8]
10005b6a:	68fd      	ldr	r5, [r7, #12]
10005b6c:	9406      	str	r4, [sp, #24]
10005b6e:	9507      	str	r5, [sp, #28]
10005b70:	687c      	ldr	r4, [r7, #4]
10005b72:	9408      	str	r4, [sp, #32]
10005b74:	465c      	mov	r4, fp
10005b76:	9409      	str	r4, [sp, #36]	; 0x24
10005b78:	4654      	mov	r4, sl
10005b7a:	940a      	str	r4, [sp, #40]	; 0x28
10005b7c:	464c      	mov	r4, r9
10005b7e:	940b      	str	r4, [sp, #44]	; 0x2c
10005b80:	4644      	mov	r4, r8
10005b82:	940c      	str	r4, [sp, #48]	; 0x30
10005b84:	4664      	mov	r4, ip
10005b86:	940d      	str	r4, [sp, #52]	; 0x34
10005b88:	960e      	str	r6, [sp, #56]	; 0x38
10005b8a:	900f      	str	r0, [sp, #60]	; 0x3c
10005b8c:	9110      	str	r1, [sp, #64]	; 0x40
10005b8e:	1c10      	adds	r0, r2, #0
10005b90:	1c19      	adds	r1, r3, #0
10005b92:	6a3a      	ldr	r2, [r7, #32]
10005b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
10005b96:	f002 febd 	bl	10008914 <siprintf>
				(int)receive_buffer[2],
				(int)receive_buffer[3],
				(int)receive_buffer[4]
									);

		UART_Transmit(&RS232, debug_output_buffer, (uint32_t)strlen((char *)debug_output_buffer));
10005b9a:	4b9a      	ldr	r3, [pc, #616]	; (10005e04 <main+0x6a0>)
10005b9c:	1c18      	adds	r0, r3, #0
10005b9e:	f002 fedb 	bl	10008958 <strlen>
10005ba2:	1c04      	adds	r4, r0, #0
10005ba4:	4a99      	ldr	r2, [pc, #612]	; (10005e0c <main+0x6a8>)
10005ba6:	4b97      	ldr	r3, [pc, #604]	; (10005e04 <main+0x6a0>)
10005ba8:	1c10      	adds	r0, r2, #0
10005baa:	1c19      	adds	r1, r3, #0
10005bac:	1c22      	adds	r2, r4, #0
10005bae:	f7fd fb41 	bl	10003234 <UART_Transmit>
		/* Use this timer to increment watchdog on inField communication */
		if (watchdog_inField_communication < 5)
10005bb2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
10005bb4:	2b04      	cmp	r3, #4
10005bb6:	d802      	bhi.n	10005bbe <main+0x45a>
			watchdog_inField_communication++;
10005bb8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
10005bba:	3301      	adds	r3, #1
10005bbc:	647b      	str	r3, [r7, #68]	; 0x44
	}

	/* Check if automatic control is enabled.
	 * If yes, process power up/down commands from inField communication
	 */
	if (DIGITAL_IO_GetInput(&JMP_1)==JMP1_AUTOMATIC_CONTROL)
10005bbe:	4b94      	ldr	r3, [pc, #592]	; (10005e10 <main+0x6ac>)
10005bc0:	1c18      	adds	r0, r3, #0
10005bc2:	f7ff fcdf 	bl	10005584 <DIGITAL_IO_GetInput>
10005bc6:	1e03      	subs	r3, r0, #0
10005bc8:	2b01      	cmp	r3, #1
10005bca:	d155      	bne.n	10005c78 <main+0x514>
	{
		/* automatic control */
		if (g_power_up==1)
10005bcc:	4b80      	ldr	r3, [pc, #512]	; (10005dd0 <main+0x66c>)
10005bce:	681b      	ldr	r3, [r3, #0]
10005bd0:	1c18      	adds	r0, r3, #0
10005bd2:	21fe      	movs	r1, #254	; 0xfe
10005bd4:	0589      	lsls	r1, r1, #22
10005bd6:	f000 fbab 	bl	10006330 <__aeabi_fcmpeq>
10005bda:	1e03      	subs	r3, r0, #0
10005bdc:	d021      	beq.n	10005c22 <main+0x4be>
		{
			/* Decrease PWM frequency for power up */
			if (g_PWM_current_frequency > PWM_min_frequency)
10005bde:	4b84      	ldr	r3, [pc, #528]	; (10005df0 <main+0x68c>)
10005be0:	681b      	ldr	r3, [r3, #0]
10005be2:	4a8c      	ldr	r2, [pc, #560]	; (10005e14 <main+0x6b0>)
10005be4:	1c18      	adds	r0, r3, #0
10005be6:	1c11      	adds	r1, r2, #0
10005be8:	f000 fbbc 	bl	10006364 <__aeabi_fcmpgt>
10005bec:	1e03      	subs	r3, r0, #0
10005bee:	d015      	beq.n	10005c1c <main+0x4b8>
			{
				g_PWM_current_frequency = g_PWM_current_frequency - PWM_delta_frequency;
10005bf0:	4b7f      	ldr	r3, [pc, #508]	; (10005df0 <main+0x68c>)
10005bf2:	681b      	ldr	r3, [r3, #0]
10005bf4:	4a88      	ldr	r2, [pc, #544]	; (10005e18 <main+0x6b4>)
10005bf6:	1c18      	adds	r0, r3, #0
10005bf8:	1c11      	adds	r1, r2, #0
10005bfa:	f001 f87f 	bl	10006cfc <__aeabi_fsub>
10005bfe:	1c03      	adds	r3, r0, #0
10005c00:	1c1a      	adds	r2, r3, #0
10005c02:	4b7b      	ldr	r3, [pc, #492]	; (10005df0 <main+0x68c>)
10005c04:	601a      	str	r2, [r3, #0]
				PWM_CCU8_SetFreqSymmetric(&PWM, (uint32_t)g_PWM_current_frequency);
10005c06:	4b7a      	ldr	r3, [pc, #488]	; (10005df0 <main+0x68c>)
10005c08:	681b      	ldr	r3, [r3, #0]
10005c0a:	1c18      	adds	r0, r3, #0
10005c0c:	f000 fbbe 	bl	1000638c <__aeabi_f2uiz>
10005c10:	1c02      	adds	r2, r0, #0
10005c12:	4b82      	ldr	r3, [pc, #520]	; (10005e1c <main+0x6b8>)
10005c14:	1c18      	adds	r0, r3, #0
10005c16:	1c11      	adds	r1, r2, #0
10005c18:	f7fe faac 	bl	10004174 <PWM_CCU8_SetFreqSymmetric>
			}
			g_power_up=0;
10005c1c:	4b6c      	ldr	r3, [pc, #432]	; (10005dd0 <main+0x66c>)
10005c1e:	2200      	movs	r2, #0
10005c20:	601a      	str	r2, [r3, #0]
		}
		if (g_power_down==1)
10005c22:	4b6c      	ldr	r3, [pc, #432]	; (10005dd4 <main+0x670>)
10005c24:	681b      	ldr	r3, [r3, #0]
10005c26:	1c18      	adds	r0, r3, #0
10005c28:	21fe      	movs	r1, #254	; 0xfe
10005c2a:	0589      	lsls	r1, r1, #22
10005c2c:	f000 fb80 	bl	10006330 <__aeabi_fcmpeq>
10005c30:	1e03      	subs	r3, r0, #0
10005c32:	d021      	beq.n	10005c78 <main+0x514>
		{
			/* Increase PWM frequency for power down */
			if (g_PWM_current_frequency < PWM_max_frequency)
10005c34:	4b6e      	ldr	r3, [pc, #440]	; (10005df0 <main+0x68c>)
10005c36:	681b      	ldr	r3, [r3, #0]
10005c38:	4a79      	ldr	r2, [pc, #484]	; (10005e20 <main+0x6bc>)
10005c3a:	1c18      	adds	r0, r3, #0
10005c3c:	1c11      	adds	r1, r2, #0
10005c3e:	f000 fb7d 	bl	1000633c <__aeabi_fcmplt>
10005c42:	1e03      	subs	r3, r0, #0
10005c44:	d015      	beq.n	10005c72 <main+0x50e>
			{
				g_PWM_current_frequency = g_PWM_current_frequency + PWM_delta_frequency;
10005c46:	4b6a      	ldr	r3, [pc, #424]	; (10005df0 <main+0x68c>)
10005c48:	681b      	ldr	r3, [r3, #0]
10005c4a:	4a73      	ldr	r2, [pc, #460]	; (10005e18 <main+0x6b4>)
10005c4c:	1c18      	adds	r0, r3, #0
10005c4e:	1c11      	adds	r1, r2, #0
10005c50:	f000 fbb4 	bl	100063bc <__aeabi_fadd>
10005c54:	1c03      	adds	r3, r0, #0
10005c56:	1c1a      	adds	r2, r3, #0
10005c58:	4b65      	ldr	r3, [pc, #404]	; (10005df0 <main+0x68c>)
10005c5a:	601a      	str	r2, [r3, #0]
				PWM_CCU8_SetFreqSymmetric(&PWM, (uint32_t)g_PWM_current_frequency);
10005c5c:	4b64      	ldr	r3, [pc, #400]	; (10005df0 <main+0x68c>)
10005c5e:	681b      	ldr	r3, [r3, #0]
10005c60:	1c18      	adds	r0, r3, #0
10005c62:	f000 fb93 	bl	1000638c <__aeabi_f2uiz>
10005c66:	1c02      	adds	r2, r0, #0
10005c68:	4b6c      	ldr	r3, [pc, #432]	; (10005e1c <main+0x6b8>)
10005c6a:	1c18      	adds	r0, r3, #0
10005c6c:	1c11      	adds	r1, r2, #0
10005c6e:	f7fe fa81 	bl	10004174 <PWM_CCU8_SetFreqSymmetric>
			}
			g_power_down=0;
10005c72:	4b58      	ldr	r3, [pc, #352]	; (10005dd4 <main+0x670>)
10005c74:	2200      	movs	r2, #0
10005c76:	601a      	str	r2, [r3, #0]
		}
	}

	/* Check for automatic/manual control */
	if (DIGITAL_IO_GetInput(&JMP_1)!=JMP1_AUTOMATIC_CONTROL)
10005c78:	4b65      	ldr	r3, [pc, #404]	; (10005e10 <main+0x6ac>)
10005c7a:	1c18      	adds	r0, r3, #0
10005c7c:	f7ff fc82 	bl	10005584 <DIGITAL_IO_GetInput>
10005c80:	1e03      	subs	r3, r0, #0
10005c82:	2b01      	cmp	r3, #1
10005c84:	d057      	beq.n	10005d36 <main+0x5d2>
	{
		ENC_A_new = DIGITAL_IO_GetInput(&ENC_A);
10005c86:	4b67      	ldr	r3, [pc, #412]	; (10005e24 <main+0x6c0>)
10005c88:	1c18      	adds	r0, r3, #0
10005c8a:	f7ff fc7b 	bl	10005584 <DIGITAL_IO_GetInput>
10005c8e:	1c03      	adds	r3, r0, #0
10005c90:	637b      	str	r3, [r7, #52]	; 0x34
		ENC_B_new = DIGITAL_IO_GetInput(&ENC_B);
10005c92:	4b65      	ldr	r3, [pc, #404]	; (10005e28 <main+0x6c4>)
10005c94:	1c18      	adds	r0, r3, #0
10005c96:	f7ff fc75 	bl	10005584 <DIGITAL_IO_GetInput>
10005c9a:	1c03      	adds	r3, r0, #0
10005c9c:	633b      	str	r3, [r7, #48]	; 0x30

		/* manual control */
		if ((ENC_A_new==0)&&(ENC_A_old==1))
10005c9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
10005ca0:	2b00      	cmp	r3, #0
10005ca2:	d146      	bne.n	10005d32 <main+0x5ce>
10005ca4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
10005ca6:	2b01      	cmp	r3, #1
10005ca8:	d143      	bne.n	10005d32 <main+0x5ce>
		{
			if (ENC_B_new==1)
10005caa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10005cac:	2b01      	cmp	r3, #1
10005cae:	d11e      	bne.n	10005cee <main+0x58a>
			{
				/* Decrease PWM frequency for power up */
				if (g_PWM_current_frequency > PWM_min_frequency)
10005cb0:	4b4f      	ldr	r3, [pc, #316]	; (10005df0 <main+0x68c>)
10005cb2:	681b      	ldr	r3, [r3, #0]
10005cb4:	4a57      	ldr	r2, [pc, #348]	; (10005e14 <main+0x6b0>)
10005cb6:	1c18      	adds	r0, r3, #0
10005cb8:	1c11      	adds	r1, r2, #0
10005cba:	f000 fb53 	bl	10006364 <__aeabi_fcmpgt>
10005cbe:	1e03      	subs	r3, r0, #0
10005cc0:	d015      	beq.n	10005cee <main+0x58a>
				{
					g_PWM_current_frequency = g_PWM_current_frequency - PWM_delta_frequency;
10005cc2:	4b4b      	ldr	r3, [pc, #300]	; (10005df0 <main+0x68c>)
10005cc4:	681b      	ldr	r3, [r3, #0]
10005cc6:	4a54      	ldr	r2, [pc, #336]	; (10005e18 <main+0x6b4>)
10005cc8:	1c18      	adds	r0, r3, #0
10005cca:	1c11      	adds	r1, r2, #0
10005ccc:	f001 f816 	bl	10006cfc <__aeabi_fsub>
10005cd0:	1c03      	adds	r3, r0, #0
10005cd2:	1c1a      	adds	r2, r3, #0
10005cd4:	4b46      	ldr	r3, [pc, #280]	; (10005df0 <main+0x68c>)
10005cd6:	601a      	str	r2, [r3, #0]
					PWM_CCU8_SetFreqSymmetric(&PWM, (uint32_t)g_PWM_current_frequency);
10005cd8:	4b45      	ldr	r3, [pc, #276]	; (10005df0 <main+0x68c>)
10005cda:	681b      	ldr	r3, [r3, #0]
10005cdc:	1c18      	adds	r0, r3, #0
10005cde:	f000 fb55 	bl	1000638c <__aeabi_f2uiz>
10005ce2:	1c02      	adds	r2, r0, #0
10005ce4:	4b4d      	ldr	r3, [pc, #308]	; (10005e1c <main+0x6b8>)
10005ce6:	1c18      	adds	r0, r3, #0
10005ce8:	1c11      	adds	r1, r2, #0
10005cea:	f7fe fa43 	bl	10004174 <PWM_CCU8_SetFreqSymmetric>
				}

			}
			if (ENC_B_new==0)
10005cee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10005cf0:	2b00      	cmp	r3, #0
10005cf2:	d11e      	bne.n	10005d32 <main+0x5ce>
			{
				/* Increase PWM frequency for power down */
				if (g_PWM_current_frequency < PWM_max_frequency)
10005cf4:	4b3e      	ldr	r3, [pc, #248]	; (10005df0 <main+0x68c>)
10005cf6:	681b      	ldr	r3, [r3, #0]
10005cf8:	4a49      	ldr	r2, [pc, #292]	; (10005e20 <main+0x6bc>)
10005cfa:	1c18      	adds	r0, r3, #0
10005cfc:	1c11      	adds	r1, r2, #0
10005cfe:	f000 fb1d 	bl	1000633c <__aeabi_fcmplt>
10005d02:	1e03      	subs	r3, r0, #0
10005d04:	d015      	beq.n	10005d32 <main+0x5ce>
				{
					g_PWM_current_frequency = g_PWM_current_frequency + PWM_delta_frequency;
10005d06:	4b3a      	ldr	r3, [pc, #232]	; (10005df0 <main+0x68c>)
10005d08:	681b      	ldr	r3, [r3, #0]
10005d0a:	4a43      	ldr	r2, [pc, #268]	; (10005e18 <main+0x6b4>)
10005d0c:	1c18      	adds	r0, r3, #0
10005d0e:	1c11      	adds	r1, r2, #0
10005d10:	f000 fb54 	bl	100063bc <__aeabi_fadd>
10005d14:	1c03      	adds	r3, r0, #0
10005d16:	1c1a      	adds	r2, r3, #0
10005d18:	4b35      	ldr	r3, [pc, #212]	; (10005df0 <main+0x68c>)
10005d1a:	601a      	str	r2, [r3, #0]
					PWM_CCU8_SetFreqSymmetric(&PWM, (uint32_t)g_PWM_current_frequency);
10005d1c:	4b34      	ldr	r3, [pc, #208]	; (10005df0 <main+0x68c>)
10005d1e:	681b      	ldr	r3, [r3, #0]
10005d20:	1c18      	adds	r0, r3, #0
10005d22:	f000 fb33 	bl	1000638c <__aeabi_f2uiz>
10005d26:	1c02      	adds	r2, r0, #0
10005d28:	4b3c      	ldr	r3, [pc, #240]	; (10005e1c <main+0x6b8>)
10005d2a:	1c18      	adds	r0, r3, #0
10005d2c:	1c11      	adds	r1, r2, #0
10005d2e:	f7fe fa21 	bl	10004174 <PWM_CCU8_SetFreqSymmetric>
				}
			}
		}
		ENC_A_old=ENC_A_new;
10005d32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
10005d34:	643b      	str	r3, [r7, #64]	; 0x40
	}

	/* Check encoder switch and toggle on/off state of PLL */
	if (DIGITAL_IO_GetInput(&ENC_Switch)==debounce_enc_switch_state)
10005d36:	4b3d      	ldr	r3, [pc, #244]	; (10005e2c <main+0x6c8>)
10005d38:	1c18      	adds	r0, r3, #0
10005d3a:	f7ff fc23 	bl	10005584 <DIGITAL_IO_GetInput>
10005d3e:	1c02      	adds	r2, r0, #0
10005d40:	2323      	movs	r3, #35	; 0x23
10005d42:	2128      	movs	r1, #40	; 0x28
10005d44:	468c      	mov	ip, r1
10005d46:	44bc      	add	ip, r7
10005d48:	4463      	add	r3, ip
10005d4a:	781b      	ldrb	r3, [r3, #0]
10005d4c:	429a      	cmp	r2, r3
10005d4e:	d16f      	bne.n	10005e30 <main+0x6cc>
	{
		debounce_enc_switch_cnt++;
10005d50:	2324      	movs	r3, #36	; 0x24
10005d52:	2228      	movs	r2, #40	; 0x28
10005d54:	4694      	mov	ip, r2
10005d56:	44bc      	add	ip, r7
10005d58:	4463      	add	r3, ip
10005d5a:	781a      	ldrb	r2, [r3, #0]
10005d5c:	2324      	movs	r3, #36	; 0x24
10005d5e:	2128      	movs	r1, #40	; 0x28
10005d60:	468c      	mov	ip, r1
10005d62:	44bc      	add	ip, r7
10005d64:	4463      	add	r3, ip
10005d66:	3201      	adds	r2, #1
10005d68:	701a      	strb	r2, [r3, #0]
		if (debounce_enc_switch_cnt>=30)
10005d6a:	2324      	movs	r3, #36	; 0x24
10005d6c:	2228      	movs	r2, #40	; 0x28
10005d6e:	4694      	mov	ip, r2
10005d70:	44bc      	add	ip, r7
10005d72:	4463      	add	r3, ip
10005d74:	781b      	ldrb	r3, [r3, #0]
10005d76:	2b1d      	cmp	r3, #29
10005d78:	d961      	bls.n	10005e3e <main+0x6da>
		{
			if ((debounce_enc_switch_state==0)&&(debounce_enc_switch_state_old!=debounce_enc_switch_state))
10005d7a:	2323      	movs	r3, #35	; 0x23
10005d7c:	2228      	movs	r2, #40	; 0x28
10005d7e:	4694      	mov	ip, r2
10005d80:	44bc      	add	ip, r7
10005d82:	4463      	add	r3, ip
10005d84:	781b      	ldrb	r3, [r3, #0]
10005d86:	2b00      	cmp	r3, #0
10005d88:	d10e      	bne.n	10005da8 <main+0x644>
10005d8a:	2322      	movs	r3, #34	; 0x22
10005d8c:	2228      	movs	r2, #40	; 0x28
10005d8e:	18ba      	adds	r2, r7, r2
10005d90:	18d2      	adds	r2, r2, r3
10005d92:	2323      	movs	r3, #35	; 0x23
10005d94:	2128      	movs	r1, #40	; 0x28
10005d96:	468c      	mov	ip, r1
10005d98:	44bc      	add	ip, r7
10005d9a:	4463      	add	r3, ip
10005d9c:	7812      	ldrb	r2, [r2, #0]
10005d9e:	781b      	ldrb	r3, [r3, #0]
10005da0:	429a      	cmp	r2, r3
10005da2:	d001      	beq.n	10005da8 <main+0x644>
			{
				PWM_enable_disable_toggle();
10005da4:	f7ff fc62 	bl	1000566c <PWM_enable_disable_toggle>
			}
			debounce_enc_switch_cnt=0;
10005da8:	2324      	movs	r3, #36	; 0x24
10005daa:	2228      	movs	r2, #40	; 0x28
10005dac:	4694      	mov	ip, r2
10005dae:	44bc      	add	ip, r7
10005db0:	4463      	add	r3, ip
10005db2:	2200      	movs	r2, #0
10005db4:	701a      	strb	r2, [r3, #0]
			debounce_enc_switch_state_old=debounce_enc_switch_state;
10005db6:	2322      	movs	r3, #34	; 0x22
10005db8:	2228      	movs	r2, #40	; 0x28
10005dba:	4694      	mov	ip, r2
10005dbc:	44bc      	add	ip, r7
10005dbe:	4463      	add	r3, ip
10005dc0:	2223      	movs	r2, #35	; 0x23
10005dc2:	2128      	movs	r1, #40	; 0x28
10005dc4:	468c      	mov	ip, r1
10005dc6:	44bc      	add	ip, r7
10005dc8:	4462      	add	r2, ip
10005dca:	7812      	ldrb	r2, [r2, #0]
10005dcc:	701a      	strb	r2, [r3, #0]
10005dce:	e036      	b.n	10005e3e <main+0x6da>
10005dd0:	20001354 	.word	0x20001354
10005dd4:	20001358 	.word	0x20001358
10005dd8:	20001148 	.word	0x20001148
10005ddc:	200013ac 	.word	0x200013ac
10005de0:	20001370 	.word	0x20001370
10005de4:	20001378 	.word	0x20001378
10005de8:	2000137c 	.word	0x2000137c
10005dec:	20001368 	.word	0x20001368
10005df0:	2000126c 	.word	0x2000126c
10005df4:	20001384 	.word	0x20001384
10005df8:	20001388 	.word	0x20001388
10005dfc:	2000138c 	.word	0x2000138c
10005e00:	20001394 	.word	0x20001394
10005e04:	200013bc 	.word	0x200013bc
10005e08:	1000b690 	.word	0x1000b690
10005e0c:	20001154 	.word	0x20001154
10005e10:	1000b538 	.word	0x1000b538
10005e14:	47c35000 	.word	0x47c35000
10005e18:	447a0000 	.word	0x447a0000
10005e1c:	20001160 	.word	0x20001160
10005e20:	48483200 	.word	0x48483200
10005e24:	1000b4b8 	.word	0x1000b4b8
10005e28:	1000b4a8 	.word	0x1000b4a8
10005e2c:	1000b508 	.word	0x1000b508
		}
	}
	else
	{
		debounce_enc_switch_cnt=0;
10005e30:	2324      	movs	r3, #36	; 0x24
10005e32:	2228      	movs	r2, #40	; 0x28
10005e34:	4694      	mov	ip, r2
10005e36:	44bc      	add	ip, r7
10005e38:	4463      	add	r3, ip
10005e3a:	2200      	movs	r2, #0
10005e3c:	701a      	strb	r2, [r3, #0]
	}
	debounce_enc_switch_state=DIGITAL_IO_GetInput(&ENC_Switch);
10005e3e:	4b33      	ldr	r3, [pc, #204]	; (10005f0c <main+0x7a8>)
10005e40:	1c18      	adds	r0, r3, #0
10005e42:	f7ff fb9f 	bl	10005584 <DIGITAL_IO_GetInput>
10005e46:	1c02      	adds	r2, r0, #0
10005e48:	2323      	movs	r3, #35	; 0x23
10005e4a:	2128      	movs	r1, #40	; 0x28
10005e4c:	468c      	mov	ip, r1
10005e4e:	44bc      	add	ip, r7
10005e50:	4463      	add	r3, ip
10005e52:	701a      	strb	r2, [r3, #0]

	/* Check if sudden current drop is detected. If yes, reset PWM frequency to start frequency */
	if (g_current_average/2 > (float)g_current)
10005e54:	4b2e      	ldr	r3, [pc, #184]	; (10005f10 <main+0x7ac>)
10005e56:	681b      	ldr	r3, [r3, #0]
10005e58:	1c18      	adds	r0, r3, #0
10005e5a:	2180      	movs	r1, #128	; 0x80
10005e5c:	05c9      	lsls	r1, r1, #23
10005e5e:	f000 fc29 	bl	100066b4 <__aeabi_fdiv>
10005e62:	1c03      	adds	r3, r0, #0
10005e64:	1c1a      	adds	r2, r3, #0
10005e66:	4b2b      	ldr	r3, [pc, #172]	; (10005f14 <main+0x7b0>)
10005e68:	681b      	ldr	r3, [r3, #0]
10005e6a:	1c10      	adds	r0, r2, #0
10005e6c:	1c19      	adds	r1, r3, #0
10005e6e:	f000 fa79 	bl	10006364 <__aeabi_fcmpgt>
10005e72:	1e03      	subs	r3, r0, #0
10005e74:	d016      	beq.n	10005ea4 <main+0x740>
	{
		if (g_PWM_current_frequency > PWM_start_frequency)
10005e76:	4b28      	ldr	r3, [pc, #160]	; (10005f18 <main+0x7b4>)
10005e78:	681b      	ldr	r3, [r3, #0]
10005e7a:	4a28      	ldr	r2, [pc, #160]	; (10005f1c <main+0x7b8>)
10005e7c:	1c18      	adds	r0, r3, #0
10005e7e:	1c11      	adds	r1, r2, #0
10005e80:	f000 fa70 	bl	10006364 <__aeabi_fcmpgt>
10005e84:	1e03      	subs	r3, r0, #0
10005e86:	d00d      	beq.n	10005ea4 <main+0x740>
		{
			g_PWM_current_frequency = PWM_start_frequency;
10005e88:	4a24      	ldr	r2, [pc, #144]	; (10005f1c <main+0x7b8>)
10005e8a:	4b23      	ldr	r3, [pc, #140]	; (10005f18 <main+0x7b4>)
10005e8c:	601a      	str	r2, [r3, #0]
			PWM_CCU8_SetFreqSymmetric(&PWM, (uint32_t)g_PWM_current_frequency);
10005e8e:	4b22      	ldr	r3, [pc, #136]	; (10005f18 <main+0x7b4>)
10005e90:	681b      	ldr	r3, [r3, #0]
10005e92:	1c18      	adds	r0, r3, #0
10005e94:	f000 fa7a 	bl	1000638c <__aeabi_f2uiz>
10005e98:	1c02      	adds	r2, r0, #0
10005e9a:	4b21      	ldr	r3, [pc, #132]	; (10005f20 <main+0x7bc>)
10005e9c:	1c18      	adds	r0, r3, #0
10005e9e:	1c11      	adds	r1, r2, #0
10005ea0:	f7fe f968 	bl	10004174 <PWM_CCU8_SetFreqSymmetric>
		}
	}

	/* Set blue LED */
	if (DIGITAL_IO_GetInput(&JMP_1)==JMP1_AUTOMATIC_CONTROL)
10005ea4:	4b1f      	ldr	r3, [pc, #124]	; (10005f24 <main+0x7c0>)
10005ea6:	1c18      	adds	r0, r3, #0
10005ea8:	f7ff fb6c 	bl	10005584 <DIGITAL_IO_GetInput>
10005eac:	1e03      	subs	r3, r0, #0
10005eae:	2b01      	cmp	r3, #1
10005eb0:	d117      	bne.n	10005ee2 <main+0x77e>
	{
		/* automatic mode */
		/* In automatic mode blue LED is turned on as long as command patterns are received
		 * from receiver and PWM is still enabled
		 * */
		if ( (watchdog_inField_communication < 3) && ( g_pwm_en == 1) )
10005eb2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
10005eb4:	2b02      	cmp	r3, #2
10005eb6:	d80c      	bhi.n	10005ed2 <main+0x76e>
10005eb8:	4b1b      	ldr	r3, [pc, #108]	; (10005f28 <main+0x7c4>)
10005eba:	781b      	ldrb	r3, [r3, #0]
10005ebc:	b2db      	uxtb	r3, r3
10005ebe:	2b01      	cmp	r3, #1
10005ec0:	d107      	bne.n	10005ed2 <main+0x76e>
		{
			DIGITAL_IO_SetOutputLow(&B_LED);   /*Micrium:*/ led_b=0;
10005ec2:	4b1a      	ldr	r3, [pc, #104]	; (10005f2c <main+0x7c8>)
10005ec4:	1c18      	adds	r0, r3, #0
10005ec6:	f7ff fb4d 	bl	10005564 <DIGITAL_IO_SetOutputLow>
10005eca:	4b19      	ldr	r3, [pc, #100]	; (10005f30 <main+0x7cc>)
10005ecc:	2200      	movs	r2, #0
10005ece:	701a      	strb	r2, [r3, #0]
10005ed0:	e01b      	b.n	10005f0a <main+0x7a6>
		}
		else
		{
			DIGITAL_IO_SetOutputHigh(&B_LED);  /*Micrium:*/ led_b=1;
10005ed2:	4b16      	ldr	r3, [pc, #88]	; (10005f2c <main+0x7c8>)
10005ed4:	1c18      	adds	r0, r3, #0
10005ed6:	f7ff fb35 	bl	10005544 <DIGITAL_IO_SetOutputHigh>
10005eda:	4b15      	ldr	r3, [pc, #84]	; (10005f30 <main+0x7cc>)
10005edc:	2201      	movs	r2, #1
10005ede:	701a      	strb	r2, [r3, #0]
10005ee0:	e013      	b.n	10005f0a <main+0x7a6>
	}
	else
	{
		/* manual mode */
		/* In manual mode blue LED is turned on as long as PWM is still enabled */
		if ( g_pwm_en == 1 )
10005ee2:	4b11      	ldr	r3, [pc, #68]	; (10005f28 <main+0x7c4>)
10005ee4:	781b      	ldrb	r3, [r3, #0]
10005ee6:	b2db      	uxtb	r3, r3
10005ee8:	2b01      	cmp	r3, #1
10005eea:	d107      	bne.n	10005efc <main+0x798>
		{
			DIGITAL_IO_SetOutputLow(&B_LED); /*Micrium:*/ led_b=0;
10005eec:	4b0f      	ldr	r3, [pc, #60]	; (10005f2c <main+0x7c8>)
10005eee:	1c18      	adds	r0, r3, #0
10005ef0:	f7ff fb38 	bl	10005564 <DIGITAL_IO_SetOutputLow>
10005ef4:	4b0e      	ldr	r3, [pc, #56]	; (10005f30 <main+0x7cc>)
10005ef6:	2200      	movs	r2, #0
10005ef8:	701a      	strb	r2, [r3, #0]
10005efa:	e006      	b.n	10005f0a <main+0x7a6>
		}
		else
		{
			DIGITAL_IO_SetOutputHigh(&B_LED); /*Micrium:*/ led_b=1;
10005efc:	4b0b      	ldr	r3, [pc, #44]	; (10005f2c <main+0x7c8>)
10005efe:	1c18      	adds	r0, r3, #0
10005f00:	f7ff fb20 	bl	10005544 <DIGITAL_IO_SetOutputHigh>
10005f04:	4b0a      	ldr	r3, [pc, #40]	; (10005f30 <main+0x7cc>)
10005f06:	2201      	movs	r2, #1
10005f08:	701a      	strb	r2, [r3, #0]
		}
	}
  }
10005f0a:	e46e      	b.n	100057ea <main+0x86>
10005f0c:	1000b508 	.word	0x1000b508
10005f10:	20001378 	.word	0x20001378
10005f14:	20001374 	.word	0x20001374
10005f18:	2000126c 	.word	0x2000126c
10005f1c:	482ae600 	.word	0x482ae600
10005f20:	20001160 	.word	0x20001160
10005f24:	1000b538 	.word	0x1000b538
10005f28:	20001395 	.word	0x20001395
10005f2c:	1000b4c8 	.word	0x1000b4c8
10005f30:	20001382 	.word	0x20001382

10005f34 <VADC0_G0_1_IRQHandler>:
}

void task_20ms(void)
{
10005f34:	b590      	push	{r4, r7, lr}
10005f36:	b089      	sub	sp, #36	; 0x24
10005f38:	af00      	add	r7, sp, #0
	const float R1_  = 1000;
10005f3a:	4b96      	ldr	r3, [pc, #600]	; (10006194 <VADC0_G0_1_IRQHandler+0x260>)
10005f3c:	61fb      	str	r3, [r7, #28]
	const float R2_  = 47;
10005f3e:	4b96      	ldr	r3, [pc, #600]	; (10006198 <VADC0_G0_1_IRQHandler+0x264>)
10005f40:	61bb      	str	r3, [r7, #24]

	const uint32_t ads_max_plus1=1024;
10005f42:	2380      	movs	r3, #128	; 0x80
10005f44:	00db      	lsls	r3, r3, #3
10005f46:	617b      	str	r3, [r7, #20]

	const float Ntc_teiler = 3.74;
10005f48:	4b94      	ldr	r3, [pc, #592]	; (1000619c <VADC0_G0_1_IRQHandler+0x268>)
10005f4a:	613b      	str	r3, [r7, #16]
	const float Ntc_offset = 121;
10005f4c:	4b94      	ldr	r3, [pc, #592]	; (100061a0 <VADC0_G0_1_IRQHandler+0x26c>)
10005f4e:	60fb      	str	r3, [r7, #12]

	uint16_t ADC_voltage, ADC_current, ADC_temperature;
	float temperature_s;

	counter_20ms++;
10005f50:	4b94      	ldr	r3, [pc, #592]	; (100061a4 <VADC0_G0_1_IRQHandler+0x270>)
10005f52:	681b      	ldr	r3, [r3, #0]
10005f54:	1c5a      	adds	r2, r3, #1
10005f56:	4b93      	ldr	r3, [pc, #588]	; (100061a4 <VADC0_G0_1_IRQHandler+0x270>)
10005f58:	601a      	str	r2, [r3, #0]

	/* Read analog to digital converters */
	g_ADC_voltage     = ADC_MEASUREMENT_ADV_GetResult(&VOLT_CURR_TEMP_Voltage_handle) / 4; // 4-samples filter inside ADC_MEASUREMENT_ADV enabled
10005f5a:	4b93      	ldr	r3, [pc, #588]	; (100061a8 <VADC0_G0_1_IRQHandler+0x274>)
10005f5c:	1c18      	adds	r0, r3, #0
10005f5e:	f7ff fb33 	bl	100055c8 <ADC_MEASUREMENT_ADV_GetResult>
10005f62:	1c03      	adds	r3, r0, #0
10005f64:	089b      	lsrs	r3, r3, #2
10005f66:	b29b      	uxth	r3, r3
10005f68:	1c1a      	adds	r2, r3, #0
10005f6a:	4b90      	ldr	r3, [pc, #576]	; (100061ac <VADC0_G0_1_IRQHandler+0x278>)
10005f6c:	601a      	str	r2, [r3, #0]
	g_ADC_current     = ADC_MEASUREMENT_ADV_GetResult(&VOLT_CURR_TEMP_Current_handle) / 4; // 4-samples filter inside ADC_MEASUREMENT_ADV enabled
10005f6e:	4b90      	ldr	r3, [pc, #576]	; (100061b0 <VADC0_G0_1_IRQHandler+0x27c>)
10005f70:	1c18      	adds	r0, r3, #0
10005f72:	f7ff fb29 	bl	100055c8 <ADC_MEASUREMENT_ADV_GetResult>
10005f76:	1c03      	adds	r3, r0, #0
10005f78:	089b      	lsrs	r3, r3, #2
10005f7a:	b29b      	uxth	r3, r3
10005f7c:	1c1a      	adds	r2, r3, #0
10005f7e:	4b8d      	ldr	r3, [pc, #564]	; (100061b4 <VADC0_G0_1_IRQHandler+0x280>)
10005f80:	601a      	str	r2, [r3, #0]
	g_ADC_temperature = ADC_MEASUREMENT_ADV_GetResult(&VOLT_CURR_TEMP_Temperature_handle) / 4; // 4-samples filter inside ADC_MEASUREMENT_ADV enabled
10005f82:	4b8d      	ldr	r3, [pc, #564]	; (100061b8 <VADC0_G0_1_IRQHandler+0x284>)
10005f84:	1c18      	adds	r0, r3, #0
10005f86:	f7ff fb1f 	bl	100055c8 <ADC_MEASUREMENT_ADV_GetResult>
10005f8a:	1c03      	adds	r3, r0, #0
10005f8c:	089b      	lsrs	r3, r3, #2
10005f8e:	b29b      	uxth	r3, r3
10005f90:	1c1a      	adds	r2, r3, #0
10005f92:	4b8a      	ldr	r3, [pc, #552]	; (100061bc <VADC0_G0_1_IRQHandler+0x288>)
10005f94:	601a      	str	r2, [r3, #0]
	 *               (Adc_max_plus1 - Adc_wert)
	 *  Temperatur = -------------------------- - Ntc_Offset
	 *                    Ntc_Teiler
	 */

	ADC_temperature = g_ADC_temperature / 4;	// 12 bit --> 10bit
10005f96:	4b89      	ldr	r3, [pc, #548]	; (100061bc <VADC0_G0_1_IRQHandler+0x288>)
10005f98:	681b      	ldr	r3, [r3, #0]
10005f9a:	089a      	lsrs	r2, r3, #2
10005f9c:	230a      	movs	r3, #10
10005f9e:	18fb      	adds	r3, r7, r3
10005fa0:	801a      	strh	r2, [r3, #0]

	temperature_s = ads_max_plus1 - (float)ADC_temperature;
10005fa2:	6978      	ldr	r0, [r7, #20]
10005fa4:	f001 f890 	bl	100070c8 <__aeabi_ui2f>
10005fa8:	1c04      	adds	r4, r0, #0
10005faa:	230a      	movs	r3, #10
10005fac:	18fb      	adds	r3, r7, r3
10005fae:	881b      	ldrh	r3, [r3, #0]
10005fb0:	1c18      	adds	r0, r3, #0
10005fb2:	f001 f889 	bl	100070c8 <__aeabi_ui2f>
10005fb6:	1c03      	adds	r3, r0, #0
10005fb8:	1c20      	adds	r0, r4, #0
10005fba:	1c19      	adds	r1, r3, #0
10005fbc:	f000 fe9e 	bl	10006cfc <__aeabi_fsub>
10005fc0:	1c03      	adds	r3, r0, #0
10005fc2:	607b      	str	r3, [r7, #4]
	temperature_s = temperature_s / Ntc_teiler;
10005fc4:	6878      	ldr	r0, [r7, #4]
10005fc6:	6939      	ldr	r1, [r7, #16]
10005fc8:	f000 fb74 	bl	100066b4 <__aeabi_fdiv>
10005fcc:	1c03      	adds	r3, r0, #0
10005fce:	607b      	str	r3, [r7, #4]
	temperature_s = temperature_s - Ntc_offset;
10005fd0:	6878      	ldr	r0, [r7, #4]
10005fd2:	68f9      	ldr	r1, [r7, #12]
10005fd4:	f000 fe92 	bl	10006cfc <__aeabi_fsub>
10005fd8:	1c03      	adds	r3, r0, #0
10005fda:	607b      	str	r3, [r7, #4]
	g_temperature = (int)(temperature_s + 0.5);
10005fdc:	6878      	ldr	r0, [r7, #4]
10005fde:	f001 feef 	bl	10007dc0 <__aeabi_f2d>
10005fe2:	1c03      	adds	r3, r0, #0
10005fe4:	1c0c      	adds	r4, r1, #0
10005fe6:	1c18      	adds	r0, r3, #0
10005fe8:	1c21      	adds	r1, r4, #0
10005fea:	2200      	movs	r2, #0
10005fec:	4b74      	ldr	r3, [pc, #464]	; (100061c0 <VADC0_G0_1_IRQHandler+0x28c>)
10005fee:	f001 f8b3 	bl	10007158 <__aeabi_dadd>
10005ff2:	1c03      	adds	r3, r0, #0
10005ff4:	1c0c      	adds	r4, r1, #0
10005ff6:	1c18      	adds	r0, r3, #0
10005ff8:	1c21      	adds	r1, r4, #0
10005ffa:	f001 fe6f 	bl	10007cdc <__aeabi_d2iz>
10005ffe:	1c03      	adds	r3, r0, #0
10006000:	1c18      	adds	r0, r3, #0
10006002:	f001 f819 	bl	10007038 <__aeabi_i2f>
10006006:	1c02      	adds	r2, r0, #0
10006008:	4b6e      	ldr	r3, [pc, #440]	; (100061c4 <VADC0_G0_1_IRQHandler+0x290>)
1000600a:	601a      	str	r2, [r3, #0]

	if (g_temperature_average == 0)
1000600c:	4b6e      	ldr	r3, [pc, #440]	; (100061c8 <VADC0_G0_1_IRQHandler+0x294>)
1000600e:	681b      	ldr	r3, [r3, #0]
10006010:	1c18      	adds	r0, r3, #0
10006012:	2100      	movs	r1, #0
10006014:	f000 f98c 	bl	10006330 <__aeabi_fcmpeq>
10006018:	1e03      	subs	r3, r0, #0
1000601a:	d003      	beq.n	10006024 <VADC0_G0_1_IRQHandler+0xf0>
		g_temperature_average = g_temperature;
1000601c:	4b69      	ldr	r3, [pc, #420]	; (100061c4 <VADC0_G0_1_IRQHandler+0x290>)
1000601e:	681a      	ldr	r2, [r3, #0]
10006020:	4b69      	ldr	r3, [pc, #420]	; (100061c8 <VADC0_G0_1_IRQHandler+0x294>)
10006022:	601a      	str	r2, [r3, #0]
	g_temperature_average = average_calc(g_temperature, g_temperature_average, 16);
10006024:	4b67      	ldr	r3, [pc, #412]	; (100061c4 <VADC0_G0_1_IRQHandler+0x290>)
10006026:	681a      	ldr	r2, [r3, #0]
10006028:	4b67      	ldr	r3, [pc, #412]	; (100061c8 <VADC0_G0_1_IRQHandler+0x294>)
1000602a:	681b      	ldr	r3, [r3, #0]
1000602c:	1c10      	adds	r0, r2, #0
1000602e:	1c19      	adds	r1, r3, #0
10006030:	2210      	movs	r2, #16
10006032:	f7ff fb69 	bl	10005708 <average_calc>
10006036:	1c02      	adds	r2, r0, #0
10006038:	4b63      	ldr	r3, [pc, #396]	; (100061c8 <VADC0_G0_1_IRQHandler+0x294>)
1000603a:	601a      	str	r2, [r3, #0]
	/* Voltage processing
	 *          (R1 + R2) * Adc_Wert
	 *   U_out = --------------------------
	 *           R2
	 */
	ADC_voltage = VREF_VALUE_MV * g_ADC_voltage / g_ADC_vref_average;
1000603c:	4b5b      	ldr	r3, [pc, #364]	; (100061ac <VADC0_G0_1_IRQHandler+0x278>)
1000603e:	681b      	ldr	r3, [r3, #0]
10006040:	229b      	movs	r2, #155	; 0x9b
10006042:	0112      	lsls	r2, r2, #4
10006044:	4353      	muls	r3, r2
10006046:	1c18      	adds	r0, r3, #0
10006048:	f001 f83e 	bl	100070c8 <__aeabi_ui2f>
1000604c:	1c02      	adds	r2, r0, #0
1000604e:	4b5f      	ldr	r3, [pc, #380]	; (100061cc <VADC0_G0_1_IRQHandler+0x298>)
10006050:	681b      	ldr	r3, [r3, #0]
10006052:	1c10      	adds	r0, r2, #0
10006054:	1c19      	adds	r1, r3, #0
10006056:	f000 fb2d 	bl	100066b4 <__aeabi_fdiv>
1000605a:	1c03      	adds	r3, r0, #0
1000605c:	1cbc      	adds	r4, r7, #2
1000605e:	1c18      	adds	r0, r3, #0
10006060:	f000 f994 	bl	1000638c <__aeabi_f2uiz>
10006064:	1c03      	adds	r3, r0, #0
10006066:	8023      	strh	r3, [r4, #0]
	g_voltage = ((float)ADC_voltage * (R1_ + R2_) ) / R2_;
10006068:	1cbb      	adds	r3, r7, #2
1000606a:	881b      	ldrh	r3, [r3, #0]
1000606c:	1c18      	adds	r0, r3, #0
1000606e:	f001 f82b 	bl	100070c8 <__aeabi_ui2f>
10006072:	1c04      	adds	r4, r0, #0
10006074:	69f8      	ldr	r0, [r7, #28]
10006076:	69b9      	ldr	r1, [r7, #24]
10006078:	f000 f9a0 	bl	100063bc <__aeabi_fadd>
1000607c:	1c03      	adds	r3, r0, #0
1000607e:	1c20      	adds	r0, r4, #0
10006080:	1c19      	adds	r1, r3, #0
10006082:	f000 fd09 	bl	10006a98 <__aeabi_fmul>
10006086:	1c03      	adds	r3, r0, #0
10006088:	1c18      	adds	r0, r3, #0
1000608a:	69b9      	ldr	r1, [r7, #24]
1000608c:	f000 fb12 	bl	100066b4 <__aeabi_fdiv>
10006090:	1c03      	adds	r3, r0, #0
10006092:	1c1a      	adds	r2, r3, #0
10006094:	4b4e      	ldr	r3, [pc, #312]	; (100061d0 <VADC0_G0_1_IRQHandler+0x29c>)
10006096:	601a      	str	r2, [r3, #0]

	if (g_voltage_average == 0)
10006098:	4b4e      	ldr	r3, [pc, #312]	; (100061d4 <VADC0_G0_1_IRQHandler+0x2a0>)
1000609a:	681b      	ldr	r3, [r3, #0]
1000609c:	1c18      	adds	r0, r3, #0
1000609e:	2100      	movs	r1, #0
100060a0:	f000 f946 	bl	10006330 <__aeabi_fcmpeq>
100060a4:	1e03      	subs	r3, r0, #0
100060a6:	d003      	beq.n	100060b0 <VADC0_G0_1_IRQHandler+0x17c>
		g_voltage_average = g_voltage;
100060a8:	4b49      	ldr	r3, [pc, #292]	; (100061d0 <VADC0_G0_1_IRQHandler+0x29c>)
100060aa:	681a      	ldr	r2, [r3, #0]
100060ac:	4b49      	ldr	r3, [pc, #292]	; (100061d4 <VADC0_G0_1_IRQHandler+0x2a0>)
100060ae:	601a      	str	r2, [r3, #0]
	g_voltage_average = average_calc(g_voltage, g_voltage_average, 16);
100060b0:	4b47      	ldr	r3, [pc, #284]	; (100061d0 <VADC0_G0_1_IRQHandler+0x29c>)
100060b2:	681a      	ldr	r2, [r3, #0]
100060b4:	4b47      	ldr	r3, [pc, #284]	; (100061d4 <VADC0_G0_1_IRQHandler+0x2a0>)
100060b6:	681b      	ldr	r3, [r3, #0]
100060b8:	1c10      	adds	r0, r2, #0
100060ba:	1c19      	adds	r1, r3, #0
100060bc:	2210      	movs	r2, #16
100060be:	f7ff fb23 	bl	10005708 <average_calc>
100060c2:	1c02      	adds	r2, r0, #0
100060c4:	4b43      	ldr	r3, [pc, #268]	; (100061d4 <VADC0_G0_1_IRQHandler+0x2a0>)
100060c6:	601a      	str	r2, [r3, #0]

	/* Current processing
	 *
	 */
	ADC_current = VREF_VALUE_MV * g_ADC_current / g_ADC_vref_average;
100060c8:	4b3a      	ldr	r3, [pc, #232]	; (100061b4 <VADC0_G0_1_IRQHandler+0x280>)
100060ca:	681b      	ldr	r3, [r3, #0]
100060cc:	229b      	movs	r2, #155	; 0x9b
100060ce:	0112      	lsls	r2, r2, #4
100060d0:	4353      	muls	r3, r2
100060d2:	1c18      	adds	r0, r3, #0
100060d4:	f000 fff8 	bl	100070c8 <__aeabi_ui2f>
100060d8:	1c02      	adds	r2, r0, #0
100060da:	4b3c      	ldr	r3, [pc, #240]	; (100061cc <VADC0_G0_1_IRQHandler+0x298>)
100060dc:	681b      	ldr	r3, [r3, #0]
100060de:	1c10      	adds	r0, r2, #0
100060e0:	1c19      	adds	r1, r3, #0
100060e2:	f000 fae7 	bl	100066b4 <__aeabi_fdiv>
100060e6:	1c03      	adds	r3, r0, #0
100060e8:	1c3c      	adds	r4, r7, #0
100060ea:	1c18      	adds	r0, r3, #0
100060ec:	f000 f94e 	bl	1000638c <__aeabi_f2uiz>
100060f0:	1c03      	adds	r3, r0, #0
100060f2:	8023      	strh	r3, [r4, #0]

	g_current =  ADC_current * 4.5;
100060f4:	1c3b      	adds	r3, r7, #0
100060f6:	881b      	ldrh	r3, [r3, #0]
100060f8:	1c18      	adds	r0, r3, #0
100060fa:	f001 fe25 	bl	10007d48 <__aeabi_i2d>
100060fe:	1c03      	adds	r3, r0, #0
10006100:	1c0c      	adds	r4, r1, #0
10006102:	1c18      	adds	r0, r3, #0
10006104:	1c21      	adds	r1, r4, #0
10006106:	2200      	movs	r2, #0
10006108:	4b33      	ldr	r3, [pc, #204]	; (100061d8 <VADC0_G0_1_IRQHandler+0x2a4>)
1000610a:	f001 fb4d 	bl	100077a8 <__aeabi_dmul>
1000610e:	1c03      	adds	r3, r0, #0
10006110:	1c0c      	adds	r4, r1, #0
10006112:	1c18      	adds	r0, r3, #0
10006114:	1c21      	adds	r1, r4, #0
10006116:	f001 fea7 	bl	10007e68 <__aeabi_d2f>
1000611a:	1c02      	adds	r2, r0, #0
1000611c:	4b2f      	ldr	r3, [pc, #188]	; (100061dc <VADC0_G0_1_IRQHandler+0x2a8>)
1000611e:	601a      	str	r2, [r3, #0]
	if (g_current_average == 0)
10006120:	4b2f      	ldr	r3, [pc, #188]	; (100061e0 <VADC0_G0_1_IRQHandler+0x2ac>)
10006122:	681b      	ldr	r3, [r3, #0]
10006124:	1c18      	adds	r0, r3, #0
10006126:	2100      	movs	r1, #0
10006128:	f000 f902 	bl	10006330 <__aeabi_fcmpeq>
1000612c:	1e03      	subs	r3, r0, #0
1000612e:	d003      	beq.n	10006138 <VADC0_G0_1_IRQHandler+0x204>
		g_current_average = g_current;
10006130:	4b2a      	ldr	r3, [pc, #168]	; (100061dc <VADC0_G0_1_IRQHandler+0x2a8>)
10006132:	681a      	ldr	r2, [r3, #0]
10006134:	4b2a      	ldr	r3, [pc, #168]	; (100061e0 <VADC0_G0_1_IRQHandler+0x2ac>)
10006136:	601a      	str	r2, [r3, #0]
	g_current_average = average_calc(g_current, g_current_average, 16);
10006138:	4b28      	ldr	r3, [pc, #160]	; (100061dc <VADC0_G0_1_IRQHandler+0x2a8>)
1000613a:	681a      	ldr	r2, [r3, #0]
1000613c:	4b28      	ldr	r3, [pc, #160]	; (100061e0 <VADC0_G0_1_IRQHandler+0x2ac>)
1000613e:	681b      	ldr	r3, [r3, #0]
10006140:	1c10      	adds	r0, r2, #0
10006142:	1c19      	adds	r1, r3, #0
10006144:	2210      	movs	r2, #16
10006146:	f7ff fadf 	bl	10005708 <average_calc>
1000614a:	1c02      	adds	r2, r0, #0
1000614c:	4b24      	ldr	r3, [pc, #144]	; (100061e0 <VADC0_G0_1_IRQHandler+0x2ac>)
1000614e:	601a      	str	r2, [r3, #0]

	/* Power processing
	 */
	g_P_out = g_voltage_average * g_current_average * 1E-6;
10006150:	4b20      	ldr	r3, [pc, #128]	; (100061d4 <VADC0_G0_1_IRQHandler+0x2a0>)
10006152:	681a      	ldr	r2, [r3, #0]
10006154:	4b22      	ldr	r3, [pc, #136]	; (100061e0 <VADC0_G0_1_IRQHandler+0x2ac>)
10006156:	681b      	ldr	r3, [r3, #0]
10006158:	1c10      	adds	r0, r2, #0
1000615a:	1c19      	adds	r1, r3, #0
1000615c:	f000 fc9c 	bl	10006a98 <__aeabi_fmul>
10006160:	1c03      	adds	r3, r0, #0
10006162:	1c18      	adds	r0, r3, #0
10006164:	f001 fe2c 	bl	10007dc0 <__aeabi_f2d>
10006168:	1c03      	adds	r3, r0, #0
1000616a:	1c0c      	adds	r4, r1, #0
1000616c:	1c18      	adds	r0, r3, #0
1000616e:	1c21      	adds	r1, r4, #0
10006170:	4a1c      	ldr	r2, [pc, #112]	; (100061e4 <VADC0_G0_1_IRQHandler+0x2b0>)
10006172:	4b1d      	ldr	r3, [pc, #116]	; (100061e8 <VADC0_G0_1_IRQHandler+0x2b4>)
10006174:	f001 fb18 	bl	100077a8 <__aeabi_dmul>
10006178:	1c03      	adds	r3, r0, #0
1000617a:	1c0c      	adds	r4, r1, #0
1000617c:	1c18      	adds	r0, r3, #0
1000617e:	1c21      	adds	r1, r4, #0
10006180:	f001 fe72 	bl	10007e68 <__aeabi_d2f>
10006184:	1c02      	adds	r2, r0, #0
10006186:	4b19      	ldr	r3, [pc, #100]	; (100061ec <VADC0_G0_1_IRQHandler+0x2b8>)
10006188:	601a      	str	r2, [r3, #0]

	return;
1000618a:	46c0      	nop			; (mov r8, r8)
}
1000618c:	46bd      	mov	sp, r7
1000618e:	b009      	add	sp, #36	; 0x24
10006190:	bd90      	pop	{r4, r7, pc}
10006192:	46c0      	nop			; (mov r8, r8)
10006194:	447a0000 	.word	0x447a0000
10006198:	423c0000 	.word	0x423c0000
1000619c:	406f5c29 	.word	0x406f5c29
100061a0:	42f20000 	.word	0x42f20000
100061a4:	200013ac 	.word	0x200013ac
100061a8:	1000b570 	.word	0x1000b570
100061ac:	20001398 	.word	0x20001398
100061b0:	1000b590 	.word	0x1000b590
100061b4:	2000139c 	.word	0x2000139c
100061b8:	1000b5b0 	.word	0x1000b5b0
100061bc:	200013a0 	.word	0x200013a0
100061c0:	3fe00000 	.word	0x3fe00000
100061c4:	20001364 	.word	0x20001364
100061c8:	20001368 	.word	0x20001368
100061cc:	20001268 	.word	0x20001268
100061d0:	2000136c 	.word	0x2000136c
100061d4:	20001370 	.word	0x20001370
100061d8:	40120000 	.word	0x40120000
100061dc:	20001374 	.word	0x20001374
100061e0:	20001378 	.word	0x20001378
100061e4:	a0b5ed8d 	.word	0xa0b5ed8d
100061e8:	3eb0c6f7 	.word	0x3eb0c6f7
100061ec:	2000137c 	.word	0x2000137c

100061f0 <VADC0_G1_1_IRQHandler>:

void ACOMP_ISR(void)
{
100061f0:	b580      	push	{r7, lr}
100061f2:	af00      	add	r7, sp, #0
	static uint8_t startup_blank = 0;

	/* For the first 160ms (32*5ms) after startup ignore clamp */
	if (startup_blank < 32)
100061f4:	4b3c      	ldr	r3, [pc, #240]	; (100062e8 <VADC0_G1_1_IRQHandler+0xf8>)
100061f6:	781b      	ldrb	r3, [r3, #0]
100061f8:	2b1f      	cmp	r3, #31
100061fa:	d805      	bhi.n	10006208 <VADC0_G1_1_IRQHandler+0x18>
		startup_blank++;
100061fc:	4b3a      	ldr	r3, [pc, #232]	; (100062e8 <VADC0_G1_1_IRQHandler+0xf8>)
100061fe:	781b      	ldrb	r3, [r3, #0]
10006200:	3301      	adds	r3, #1
10006202:	b2da      	uxtb	r2, r3
10006204:	4b38      	ldr	r3, [pc, #224]	; (100062e8 <VADC0_G1_1_IRQHandler+0xf8>)
10006206:	701a      	strb	r2, [r3, #0]

	/* Read analog to digital converters */
	g_ADC_acomp = ADC_MEASUREMENT_ADV_GetResult(&ACOMP_ACOMP_handle)/4; // 4-samples filter inside ADC_MEASUREMENT_ADV enabled
10006208:	4b38      	ldr	r3, [pc, #224]	; (100062ec <VADC0_G1_1_IRQHandler+0xfc>)
1000620a:	1c18      	adds	r0, r3, #0
1000620c:	f7ff f9dc 	bl	100055c8 <ADC_MEASUREMENT_ADV_GetResult>
10006210:	1c03      	adds	r3, r0, #0
10006212:	089b      	lsrs	r3, r3, #2
10006214:	b29b      	uxth	r3, r3
10006216:	1c1a      	adds	r2, r3, #0
10006218:	4b35      	ldr	r3, [pc, #212]	; (100062f0 <VADC0_G1_1_IRQHandler+0x100>)
1000621a:	601a      	str	r2, [r3, #0]
	g_ADC_vref  =ADC_MEASUREMENT_ADV_GetResult(&ACOMP_VRef_handle)/4; // 4-samples filter inside ADC_MEASUREMENT_ADV enabled
1000621c:	4b35      	ldr	r3, [pc, #212]	; (100062f4 <VADC0_G1_1_IRQHandler+0x104>)
1000621e:	1c18      	adds	r0, r3, #0
10006220:	f7ff f9d2 	bl	100055c8 <ADC_MEASUREMENT_ADV_GetResult>
10006224:	1c03      	adds	r3, r0, #0
10006226:	089b      	lsrs	r3, r3, #2
10006228:	b29b      	uxth	r3, r3
1000622a:	1c1a      	adds	r2, r3, #0
1000622c:	4b32      	ldr	r3, [pc, #200]	; (100062f8 <VADC0_G1_1_IRQHandler+0x108>)
1000622e:	601a      	str	r2, [r3, #0]
	g_ADC_vref_average = average_calc((float)g_ADC_vref, g_ADC_vref_average, 256);
10006230:	4b31      	ldr	r3, [pc, #196]	; (100062f8 <VADC0_G1_1_IRQHandler+0x108>)
10006232:	681b      	ldr	r3, [r3, #0]
10006234:	1c18      	adds	r0, r3, #0
10006236:	f000 ff47 	bl	100070c8 <__aeabi_ui2f>
1000623a:	1c01      	adds	r1, r0, #0
1000623c:	4b2f      	ldr	r3, [pc, #188]	; (100062fc <VADC0_G1_1_IRQHandler+0x10c>)
1000623e:	681a      	ldr	r2, [r3, #0]
10006240:	2380      	movs	r3, #128	; 0x80
10006242:	005b      	lsls	r3, r3, #1
10006244:	1c08      	adds	r0, r1, #0
10006246:	1c11      	adds	r1, r2, #0
10006248:	1c1a      	adds	r2, r3, #0
1000624a:	f7ff fa5d 	bl	10005708 <average_calc>
1000624e:	1c02      	adds	r2, r0, #0
10006250:	4b2a      	ldr	r3, [pc, #168]	; (100062fc <VADC0_G1_1_IRQHandler+0x10c>)
10006252:	601a      	str	r2, [r3, #0]

	g_acomp_mV = (float)g_ADC_acomp * VREF_VALUE_MV / g_ADC_vref_average;;
10006254:	4b26      	ldr	r3, [pc, #152]	; (100062f0 <VADC0_G1_1_IRQHandler+0x100>)
10006256:	681b      	ldr	r3, [r3, #0]
10006258:	1c18      	adds	r0, r3, #0
1000625a:	f000 ff35 	bl	100070c8 <__aeabi_ui2f>
1000625e:	1c03      	adds	r3, r0, #0
10006260:	1c18      	adds	r0, r3, #0
10006262:	4927      	ldr	r1, [pc, #156]	; (10006300 <VADC0_G1_1_IRQHandler+0x110>)
10006264:	f000 fc18 	bl	10006a98 <__aeabi_fmul>
10006268:	1c03      	adds	r3, r0, #0
1000626a:	1c1a      	adds	r2, r3, #0
1000626c:	4b23      	ldr	r3, [pc, #140]	; (100062fc <VADC0_G1_1_IRQHandler+0x10c>)
1000626e:	681b      	ldr	r3, [r3, #0]
10006270:	1c10      	adds	r0, r2, #0
10006272:	1c19      	adds	r1, r3, #0
10006274:	f000 fa1e 	bl	100066b4 <__aeabi_fdiv>
10006278:	1c03      	adds	r3, r0, #0
1000627a:	1c1a      	adds	r2, r3, #0
1000627c:	4b21      	ldr	r3, [pc, #132]	; (10006304 <VADC0_G1_1_IRQHandler+0x114>)
1000627e:	601a      	str	r2, [r3, #0]
	g_acomp_mV_average = average_calc(g_acomp_mV, g_acomp_mV_average, 32);
10006280:	4b20      	ldr	r3, [pc, #128]	; (10006304 <VADC0_G1_1_IRQHandler+0x114>)
10006282:	681a      	ldr	r2, [r3, #0]
10006284:	4b20      	ldr	r3, [pc, #128]	; (10006308 <VADC0_G1_1_IRQHandler+0x118>)
10006286:	681b      	ldr	r3, [r3, #0]
10006288:	1c10      	adds	r0, r2, #0
1000628a:	1c19      	adds	r1, r3, #0
1000628c:	2220      	movs	r2, #32
1000628e:	f7ff fa3b 	bl	10005708 <average_calc>
10006292:	1c02      	adds	r2, r0, #0
10006294:	4b1c      	ldr	r3, [pc, #112]	; (10006308 <VADC0_G1_1_IRQHandler+0x118>)
10006296:	601a      	str	r2, [r3, #0]

	if (((g_acomp_mV_average > ACOMP_MAX + ACOMP_HYSTERESIS ) && (g_clamp == 0) && (startup_blank>=32)))
10006298:	4b1b      	ldr	r3, [pc, #108]	; (10006308 <VADC0_G1_1_IRQHandler+0x118>)
1000629a:	681b      	ldr	r3, [r3, #0]
1000629c:	1c18      	adds	r0, r3, #0
1000629e:	491b      	ldr	r1, [pc, #108]	; (1000630c <VADC0_G1_1_IRQHandler+0x11c>)
100062a0:	f000 f860 	bl	10006364 <__aeabi_fcmpgt>
100062a4:	1e03      	subs	r3, r0, #0
100062a6:	d00b      	beq.n	100062c0 <VADC0_G1_1_IRQHandler+0xd0>
100062a8:	4b19      	ldr	r3, [pc, #100]	; (10006310 <VADC0_G1_1_IRQHandler+0x120>)
100062aa:	781b      	ldrb	r3, [r3, #0]
100062ac:	b2db      	uxtb	r3, r3
100062ae:	2b00      	cmp	r3, #0
100062b0:	d106      	bne.n	100062c0 <VADC0_G1_1_IRQHandler+0xd0>
100062b2:	4b0d      	ldr	r3, [pc, #52]	; (100062e8 <VADC0_G1_1_IRQHandler+0xf8>)
100062b4:	781b      	ldrb	r3, [r3, #0]
100062b6:	2b1f      	cmp	r3, #31
100062b8:	d902      	bls.n	100062c0 <VADC0_G1_1_IRQHandler+0xd0>
	{
		// Upper boundary transition
		g_clamp = 1;
100062ba:	4b15      	ldr	r3, [pc, #84]	; (10006310 <VADC0_G1_1_IRQHandler+0x120>)
100062bc:	2201      	movs	r2, #1
100062be:	701a      	strb	r2, [r3, #0]
	}
	if ((g_acomp_mV_average < ACOMP_MAX - ACOMP_HYSTERESIS ) && (g_clamp == 1))
100062c0:	4b11      	ldr	r3, [pc, #68]	; (10006308 <VADC0_G1_1_IRQHandler+0x118>)
100062c2:	681b      	ldr	r3, [r3, #0]
100062c4:	1c18      	adds	r0, r3, #0
100062c6:	4913      	ldr	r1, [pc, #76]	; (10006314 <VADC0_G1_1_IRQHandler+0x124>)
100062c8:	f000 f838 	bl	1000633c <__aeabi_fcmplt>
100062cc:	1e03      	subs	r3, r0, #0
100062ce:	d100      	bne.n	100062d2 <VADC0_G1_1_IRQHandler+0xe2>
	{
		// Lower boundary transition
		g_clamp = 0;
	}

	return;
100062d0:	e008      	b.n	100062e4 <VADC0_G1_1_IRQHandler+0xf4>
	if (((g_acomp_mV_average > ACOMP_MAX + ACOMP_HYSTERESIS ) && (g_clamp == 0) && (startup_blank>=32)))
	{
		// Upper boundary transition
		g_clamp = 1;
	}
	if ((g_acomp_mV_average < ACOMP_MAX - ACOMP_HYSTERESIS ) && (g_clamp == 1))
100062d2:	4b0f      	ldr	r3, [pc, #60]	; (10006310 <VADC0_G1_1_IRQHandler+0x120>)
100062d4:	781b      	ldrb	r3, [r3, #0]
100062d6:	b2db      	uxtb	r3, r3
100062d8:	2b01      	cmp	r3, #1
100062da:	d102      	bne.n	100062e2 <VADC0_G1_1_IRQHandler+0xf2>
	{
		// Lower boundary transition
		g_clamp = 0;
100062dc:	4b0c      	ldr	r3, [pc, #48]	; (10006310 <VADC0_G1_1_IRQHandler+0x120>)
100062de:	2200      	movs	r2, #0
100062e0:	701a      	strb	r2, [r3, #0]
	}

	return;
100062e2:	46c0      	nop			; (mov r8, r8)
}
100062e4:	46bd      	mov	sp, r7
100062e6:	bd80      	pop	{r7, pc}
100062e8:	200013b0 	.word	0x200013b0
100062ec:	1000b61c 	.word	0x1000b61c
100062f0:	200013a4 	.word	0x200013a4
100062f4:	1000b63c 	.word	0x1000b63c
100062f8:	200013a8 	.word	0x200013a8
100062fc:	20001268 	.word	0x20001268
10006300:	451b0000 	.word	0x451b0000
10006304:	2000135c 	.word	0x2000135c
10006308:	20001360 	.word	0x20001360
1000630c:	45002000 	.word	0x45002000
10006310:	20001394 	.word	0x20001394
10006314:	44f3c000 	.word	0x44f3c000

10006318 <__aeabi_cfrcmple>:
10006318:	4684      	mov	ip, r0
1000631a:	1c08      	adds	r0, r1, #0
1000631c:	4661      	mov	r1, ip
1000631e:	e7ff      	b.n	10006320 <__aeabi_cfcmpeq>

10006320 <__aeabi_cfcmpeq>:
10006320:	b51f      	push	{r0, r1, r2, r3, r4, lr}
10006322:	f000 fb73 	bl	10006a0c <__lesf2>
10006326:	2800      	cmp	r0, #0
10006328:	d401      	bmi.n	1000632e <__aeabi_cfcmpeq+0xe>
1000632a:	2100      	movs	r1, #0
1000632c:	42c8      	cmn	r0, r1
1000632e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

10006330 <__aeabi_fcmpeq>:
10006330:	b510      	push	{r4, lr}
10006332:	f000 faf7 	bl	10006924 <__eqsf2>
10006336:	4240      	negs	r0, r0
10006338:	3001      	adds	r0, #1
1000633a:	bd10      	pop	{r4, pc}

1000633c <__aeabi_fcmplt>:
1000633c:	b510      	push	{r4, lr}
1000633e:	f000 fb65 	bl	10006a0c <__lesf2>
10006342:	2800      	cmp	r0, #0
10006344:	db01      	blt.n	1000634a <__aeabi_fcmplt+0xe>
10006346:	2000      	movs	r0, #0
10006348:	bd10      	pop	{r4, pc}
1000634a:	2001      	movs	r0, #1
1000634c:	bd10      	pop	{r4, pc}
1000634e:	46c0      	nop			; (mov r8, r8)

10006350 <__aeabi_fcmple>:
10006350:	b510      	push	{r4, lr}
10006352:	f000 fb5b 	bl	10006a0c <__lesf2>
10006356:	2800      	cmp	r0, #0
10006358:	dd01      	ble.n	1000635e <__aeabi_fcmple+0xe>
1000635a:	2000      	movs	r0, #0
1000635c:	bd10      	pop	{r4, pc}
1000635e:	2001      	movs	r0, #1
10006360:	bd10      	pop	{r4, pc}
10006362:	46c0      	nop			; (mov r8, r8)

10006364 <__aeabi_fcmpgt>:
10006364:	b510      	push	{r4, lr}
10006366:	f000 fb07 	bl	10006978 <__gesf2>
1000636a:	2800      	cmp	r0, #0
1000636c:	dc01      	bgt.n	10006372 <__aeabi_fcmpgt+0xe>
1000636e:	2000      	movs	r0, #0
10006370:	bd10      	pop	{r4, pc}
10006372:	2001      	movs	r0, #1
10006374:	bd10      	pop	{r4, pc}
10006376:	46c0      	nop			; (mov r8, r8)

10006378 <__aeabi_fcmpge>:
10006378:	b510      	push	{r4, lr}
1000637a:	f000 fafd 	bl	10006978 <__gesf2>
1000637e:	2800      	cmp	r0, #0
10006380:	da01      	bge.n	10006386 <__aeabi_fcmpge+0xe>
10006382:	2000      	movs	r0, #0
10006384:	bd10      	pop	{r4, pc}
10006386:	2001      	movs	r0, #1
10006388:	bd10      	pop	{r4, pc}
1000638a:	46c0      	nop			; (mov r8, r8)

1000638c <__aeabi_f2uiz>:
1000638c:	219e      	movs	r1, #158	; 0x9e
1000638e:	b510      	push	{r4, lr}
10006390:	05c9      	lsls	r1, r1, #23
10006392:	1c04      	adds	r4, r0, #0
10006394:	f7ff fff0 	bl	10006378 <__aeabi_fcmpge>
10006398:	2800      	cmp	r0, #0
1000639a:	d103      	bne.n	100063a4 <__aeabi_f2uiz+0x18>
1000639c:	1c20      	adds	r0, r4, #0
1000639e:	f000 fe2b 	bl	10006ff8 <__aeabi_f2iz>
100063a2:	bd10      	pop	{r4, pc}
100063a4:	219e      	movs	r1, #158	; 0x9e
100063a6:	1c20      	adds	r0, r4, #0
100063a8:	05c9      	lsls	r1, r1, #23
100063aa:	f000 fca7 	bl	10006cfc <__aeabi_fsub>
100063ae:	f000 fe23 	bl	10006ff8 <__aeabi_f2iz>
100063b2:	2380      	movs	r3, #128	; 0x80
100063b4:	061b      	lsls	r3, r3, #24
100063b6:	469c      	mov	ip, r3
100063b8:	4460      	add	r0, ip
100063ba:	e7f2      	b.n	100063a2 <__aeabi_f2uiz+0x16>

100063bc <__aeabi_fadd>:
100063bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100063be:	004a      	lsls	r2, r1, #1
100063c0:	0243      	lsls	r3, r0, #9
100063c2:	0044      	lsls	r4, r0, #1
100063c4:	024e      	lsls	r6, r1, #9
100063c6:	0fc5      	lsrs	r5, r0, #31
100063c8:	0e24      	lsrs	r4, r4, #24
100063ca:	1c28      	adds	r0, r5, #0
100063cc:	099b      	lsrs	r3, r3, #6
100063ce:	0e12      	lsrs	r2, r2, #24
100063d0:	0fc9      	lsrs	r1, r1, #31
100063d2:	09b7      	lsrs	r7, r6, #6
100063d4:	428d      	cmp	r5, r1
100063d6:	d040      	beq.n	1000645a <__aeabi_fadd+0x9e>
100063d8:	1aa0      	subs	r0, r4, r2
100063da:	2800      	cmp	r0, #0
100063dc:	dc00      	bgt.n	100063e0 <__aeabi_fadd+0x24>
100063de:	e084      	b.n	100064ea <__aeabi_fadd+0x12e>
100063e0:	2a00      	cmp	r2, #0
100063e2:	d11c      	bne.n	1000641e <__aeabi_fadd+0x62>
100063e4:	2f00      	cmp	r7, #0
100063e6:	d15c      	bne.n	100064a2 <__aeabi_fadd+0xe6>
100063e8:	075a      	lsls	r2, r3, #29
100063ea:	d004      	beq.n	100063f6 <__aeabi_fadd+0x3a>
100063ec:	220f      	movs	r2, #15
100063ee:	401a      	ands	r2, r3
100063f0:	2a04      	cmp	r2, #4
100063f2:	d000      	beq.n	100063f6 <__aeabi_fadd+0x3a>
100063f4:	3304      	adds	r3, #4
100063f6:	2280      	movs	r2, #128	; 0x80
100063f8:	04d2      	lsls	r2, r2, #19
100063fa:	401a      	ands	r2, r3
100063fc:	1c28      	adds	r0, r5, #0
100063fe:	2a00      	cmp	r2, #0
10006400:	d024      	beq.n	1000644c <__aeabi_fadd+0x90>
10006402:	3401      	adds	r4, #1
10006404:	2cff      	cmp	r4, #255	; 0xff
10006406:	d100      	bne.n	1000640a <__aeabi_fadd+0x4e>
10006408:	e07b      	b.n	10006502 <__aeabi_fadd+0x146>
1000640a:	019b      	lsls	r3, r3, #6
1000640c:	0a5b      	lsrs	r3, r3, #9
1000640e:	b2e4      	uxtb	r4, r4
10006410:	025b      	lsls	r3, r3, #9
10006412:	05e4      	lsls	r4, r4, #23
10006414:	0a5b      	lsrs	r3, r3, #9
10006416:	4323      	orrs	r3, r4
10006418:	07c0      	lsls	r0, r0, #31
1000641a:	4318      	orrs	r0, r3
1000641c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000641e:	2cff      	cmp	r4, #255	; 0xff
10006420:	d0e2      	beq.n	100063e8 <__aeabi_fadd+0x2c>
10006422:	2280      	movs	r2, #128	; 0x80
10006424:	04d2      	lsls	r2, r2, #19
10006426:	4317      	orrs	r7, r2
10006428:	2601      	movs	r6, #1
1000642a:	281b      	cmp	r0, #27
1000642c:	dc08      	bgt.n	10006440 <__aeabi_fadd+0x84>
1000642e:	1c39      	adds	r1, r7, #0
10006430:	2220      	movs	r2, #32
10006432:	1c3e      	adds	r6, r7, #0
10006434:	40c1      	lsrs	r1, r0
10006436:	1a10      	subs	r0, r2, r0
10006438:	4086      	lsls	r6, r0
1000643a:	1e77      	subs	r7, r6, #1
1000643c:	41be      	sbcs	r6, r7
1000643e:	430e      	orrs	r6, r1
10006440:	1b9b      	subs	r3, r3, r6
10006442:	015a      	lsls	r2, r3, #5
10006444:	d433      	bmi.n	100064ae <__aeabi_fadd+0xf2>
10006446:	1c28      	adds	r0, r5, #0
10006448:	075a      	lsls	r2, r3, #29
1000644a:	d1cf      	bne.n	100063ec <__aeabi_fadd+0x30>
1000644c:	08db      	lsrs	r3, r3, #3
1000644e:	2cff      	cmp	r4, #255	; 0xff
10006450:	d01e      	beq.n	10006490 <__aeabi_fadd+0xd4>
10006452:	025b      	lsls	r3, r3, #9
10006454:	0a5b      	lsrs	r3, r3, #9
10006456:	b2e4      	uxtb	r4, r4
10006458:	e7da      	b.n	10006410 <__aeabi_fadd+0x54>
1000645a:	1aa1      	subs	r1, r4, r2
1000645c:	2900      	cmp	r1, #0
1000645e:	dd57      	ble.n	10006510 <__aeabi_fadd+0x154>
10006460:	2a00      	cmp	r2, #0
10006462:	d03a      	beq.n	100064da <__aeabi_fadd+0x11e>
10006464:	2cff      	cmp	r4, #255	; 0xff
10006466:	d0bf      	beq.n	100063e8 <__aeabi_fadd+0x2c>
10006468:	2280      	movs	r2, #128	; 0x80
1000646a:	04d2      	lsls	r2, r2, #19
1000646c:	4317      	orrs	r7, r2
1000646e:	2601      	movs	r6, #1
10006470:	291b      	cmp	r1, #27
10006472:	dd72      	ble.n	1000655a <__aeabi_fadd+0x19e>
10006474:	199b      	adds	r3, r3, r6
10006476:	015a      	lsls	r2, r3, #5
10006478:	d5e5      	bpl.n	10006446 <__aeabi_fadd+0x8a>
1000647a:	3401      	adds	r4, #1
1000647c:	2cff      	cmp	r4, #255	; 0xff
1000647e:	d100      	bne.n	10006482 <__aeabi_fadd+0xc6>
10006480:	e087      	b.n	10006592 <__aeabi_fadd+0x1d6>
10006482:	2101      	movs	r1, #1
10006484:	4a8a      	ldr	r2, [pc, #552]	; (100066b0 <__aeabi_fadd+0x2f4>)
10006486:	4019      	ands	r1, r3
10006488:	4013      	ands	r3, r2
1000648a:	085b      	lsrs	r3, r3, #1
1000648c:	430b      	orrs	r3, r1
1000648e:	e7ab      	b.n	100063e8 <__aeabi_fadd+0x2c>
10006490:	2b00      	cmp	r3, #0
10006492:	d036      	beq.n	10006502 <__aeabi_fadd+0x146>
10006494:	2280      	movs	r2, #128	; 0x80
10006496:	03d2      	lsls	r2, r2, #15
10006498:	4313      	orrs	r3, r2
1000649a:	025b      	lsls	r3, r3, #9
1000649c:	0a5b      	lsrs	r3, r3, #9
1000649e:	24ff      	movs	r4, #255	; 0xff
100064a0:	e7b6      	b.n	10006410 <__aeabi_fadd+0x54>
100064a2:	3801      	subs	r0, #1
100064a4:	2800      	cmp	r0, #0
100064a6:	d13f      	bne.n	10006528 <__aeabi_fadd+0x16c>
100064a8:	1bdb      	subs	r3, r3, r7
100064aa:	015a      	lsls	r2, r3, #5
100064ac:	d5cb      	bpl.n	10006446 <__aeabi_fadd+0x8a>
100064ae:	019b      	lsls	r3, r3, #6
100064b0:	099e      	lsrs	r6, r3, #6
100064b2:	1c30      	adds	r0, r6, #0
100064b4:	f001 fd68 	bl	10007f88 <__clzsi2>
100064b8:	3805      	subs	r0, #5
100064ba:	4086      	lsls	r6, r0
100064bc:	4284      	cmp	r4, r0
100064be:	dc23      	bgt.n	10006508 <__aeabi_fadd+0x14c>
100064c0:	1b00      	subs	r0, r0, r4
100064c2:	241f      	movs	r4, #31
100064c4:	1c32      	adds	r2, r6, #0
100064c6:	1c43      	adds	r3, r0, #1
100064c8:	1a20      	subs	r0, r4, r0
100064ca:	40da      	lsrs	r2, r3
100064cc:	4086      	lsls	r6, r0
100064ce:	1c13      	adds	r3, r2, #0
100064d0:	1e74      	subs	r4, r6, #1
100064d2:	41a6      	sbcs	r6, r4
100064d4:	2400      	movs	r4, #0
100064d6:	4333      	orrs	r3, r6
100064d8:	e786      	b.n	100063e8 <__aeabi_fadd+0x2c>
100064da:	2f00      	cmp	r7, #0
100064dc:	d100      	bne.n	100064e0 <__aeabi_fadd+0x124>
100064de:	e783      	b.n	100063e8 <__aeabi_fadd+0x2c>
100064e0:	3901      	subs	r1, #1
100064e2:	2900      	cmp	r1, #0
100064e4:	d150      	bne.n	10006588 <__aeabi_fadd+0x1cc>
100064e6:	19db      	adds	r3, r3, r7
100064e8:	e7c5      	b.n	10006476 <__aeabi_fadd+0xba>
100064ea:	2800      	cmp	r0, #0
100064ec:	d120      	bne.n	10006530 <__aeabi_fadd+0x174>
100064ee:	1c62      	adds	r2, r4, #1
100064f0:	b2d2      	uxtb	r2, r2
100064f2:	2a01      	cmp	r2, #1
100064f4:	dd5e      	ble.n	100065b4 <__aeabi_fadd+0x1f8>
100064f6:	1bde      	subs	r6, r3, r7
100064f8:	0172      	lsls	r2, r6, #5
100064fa:	d528      	bpl.n	1000654e <__aeabi_fadd+0x192>
100064fc:	1afe      	subs	r6, r7, r3
100064fe:	1c0d      	adds	r5, r1, #0
10006500:	e7d7      	b.n	100064b2 <__aeabi_fadd+0xf6>
10006502:	24ff      	movs	r4, #255	; 0xff
10006504:	2300      	movs	r3, #0
10006506:	e783      	b.n	10006410 <__aeabi_fadd+0x54>
10006508:	4b69      	ldr	r3, [pc, #420]	; (100066b0 <__aeabi_fadd+0x2f4>)
1000650a:	1a24      	subs	r4, r4, r0
1000650c:	4033      	ands	r3, r6
1000650e:	e76b      	b.n	100063e8 <__aeabi_fadd+0x2c>
10006510:	2900      	cmp	r1, #0
10006512:	d158      	bne.n	100065c6 <__aeabi_fadd+0x20a>
10006514:	1c62      	adds	r2, r4, #1
10006516:	b2d1      	uxtb	r1, r2
10006518:	2901      	cmp	r1, #1
1000651a:	dd3c      	ble.n	10006596 <__aeabi_fadd+0x1da>
1000651c:	2aff      	cmp	r2, #255	; 0xff
1000651e:	d037      	beq.n	10006590 <__aeabi_fadd+0x1d4>
10006520:	18fb      	adds	r3, r7, r3
10006522:	085b      	lsrs	r3, r3, #1
10006524:	1c14      	adds	r4, r2, #0
10006526:	e75f      	b.n	100063e8 <__aeabi_fadd+0x2c>
10006528:	2cff      	cmp	r4, #255	; 0xff
1000652a:	d000      	beq.n	1000652e <__aeabi_fadd+0x172>
1000652c:	e77c      	b.n	10006428 <__aeabi_fadd+0x6c>
1000652e:	e75b      	b.n	100063e8 <__aeabi_fadd+0x2c>
10006530:	2c00      	cmp	r4, #0
10006532:	d01e      	beq.n	10006572 <__aeabi_fadd+0x1b6>
10006534:	2aff      	cmp	r2, #255	; 0xff
10006536:	d023      	beq.n	10006580 <__aeabi_fadd+0x1c4>
10006538:	2480      	movs	r4, #128	; 0x80
1000653a:	04e4      	lsls	r4, r4, #19
1000653c:	4240      	negs	r0, r0
1000653e:	4323      	orrs	r3, r4
10006540:	281b      	cmp	r0, #27
10006542:	dd5b      	ble.n	100065fc <__aeabi_fadd+0x240>
10006544:	2301      	movs	r3, #1
10006546:	1afb      	subs	r3, r7, r3
10006548:	1c14      	adds	r4, r2, #0
1000654a:	1c0d      	adds	r5, r1, #0
1000654c:	e7ad      	b.n	100064aa <__aeabi_fadd+0xee>
1000654e:	2e00      	cmp	r6, #0
10006550:	d1af      	bne.n	100064b2 <__aeabi_fadd+0xf6>
10006552:	2300      	movs	r3, #0
10006554:	2000      	movs	r0, #0
10006556:	2400      	movs	r4, #0
10006558:	e778      	b.n	1000644c <__aeabi_fadd+0x90>
1000655a:	1c3a      	adds	r2, r7, #0
1000655c:	40ca      	lsrs	r2, r1
1000655e:	4694      	mov	ip, r2
10006560:	2220      	movs	r2, #32
10006562:	1c3e      	adds	r6, r7, #0
10006564:	1a51      	subs	r1, r2, r1
10006566:	408e      	lsls	r6, r1
10006568:	4662      	mov	r2, ip
1000656a:	1e77      	subs	r7, r6, #1
1000656c:	41be      	sbcs	r6, r7
1000656e:	4316      	orrs	r6, r2
10006570:	e780      	b.n	10006474 <__aeabi_fadd+0xb8>
10006572:	2b00      	cmp	r3, #0
10006574:	d03e      	beq.n	100065f4 <__aeabi_fadd+0x238>
10006576:	43c0      	mvns	r0, r0
10006578:	2800      	cmp	r0, #0
1000657a:	d0e4      	beq.n	10006546 <__aeabi_fadd+0x18a>
1000657c:	2aff      	cmp	r2, #255	; 0xff
1000657e:	d1df      	bne.n	10006540 <__aeabi_fadd+0x184>
10006580:	1c3b      	adds	r3, r7, #0
10006582:	24ff      	movs	r4, #255	; 0xff
10006584:	1c0d      	adds	r5, r1, #0
10006586:	e72f      	b.n	100063e8 <__aeabi_fadd+0x2c>
10006588:	2cff      	cmp	r4, #255	; 0xff
1000658a:	d000      	beq.n	1000658e <__aeabi_fadd+0x1d2>
1000658c:	e76f      	b.n	1000646e <__aeabi_fadd+0xb2>
1000658e:	e72b      	b.n	100063e8 <__aeabi_fadd+0x2c>
10006590:	24ff      	movs	r4, #255	; 0xff
10006592:	2300      	movs	r3, #0
10006594:	e75a      	b.n	1000644c <__aeabi_fadd+0x90>
10006596:	2c00      	cmp	r4, #0
10006598:	d15a      	bne.n	10006650 <__aeabi_fadd+0x294>
1000659a:	2b00      	cmp	r3, #0
1000659c:	d07f      	beq.n	1000669e <__aeabi_fadd+0x2e2>
1000659e:	2f00      	cmp	r7, #0
100065a0:	d100      	bne.n	100065a4 <__aeabi_fadd+0x1e8>
100065a2:	e721      	b.n	100063e8 <__aeabi_fadd+0x2c>
100065a4:	19db      	adds	r3, r3, r7
100065a6:	015a      	lsls	r2, r3, #5
100065a8:	d400      	bmi.n	100065ac <__aeabi_fadd+0x1f0>
100065aa:	e74c      	b.n	10006446 <__aeabi_fadd+0x8a>
100065ac:	4a40      	ldr	r2, [pc, #256]	; (100066b0 <__aeabi_fadd+0x2f4>)
100065ae:	3401      	adds	r4, #1
100065b0:	4013      	ands	r3, r2
100065b2:	e719      	b.n	100063e8 <__aeabi_fadd+0x2c>
100065b4:	2c00      	cmp	r4, #0
100065b6:	d115      	bne.n	100065e4 <__aeabi_fadd+0x228>
100065b8:	2b00      	cmp	r3, #0
100065ba:	d12f      	bne.n	1000661c <__aeabi_fadd+0x260>
100065bc:	2f00      	cmp	r7, #0
100065be:	d05d      	beq.n	1000667c <__aeabi_fadd+0x2c0>
100065c0:	1c3b      	adds	r3, r7, #0
100065c2:	1c0d      	adds	r5, r1, #0
100065c4:	e710      	b.n	100063e8 <__aeabi_fadd+0x2c>
100065c6:	2c00      	cmp	r4, #0
100065c8:	d121      	bne.n	1000660e <__aeabi_fadd+0x252>
100065ca:	2b00      	cmp	r3, #0
100065cc:	d053      	beq.n	10006676 <__aeabi_fadd+0x2ba>
100065ce:	43c9      	mvns	r1, r1
100065d0:	2900      	cmp	r1, #0
100065d2:	d004      	beq.n	100065de <__aeabi_fadd+0x222>
100065d4:	2aff      	cmp	r2, #255	; 0xff
100065d6:	d04b      	beq.n	10006670 <__aeabi_fadd+0x2b4>
100065d8:	291b      	cmp	r1, #27
100065da:	dd57      	ble.n	1000668c <__aeabi_fadd+0x2d0>
100065dc:	2301      	movs	r3, #1
100065de:	19db      	adds	r3, r3, r7
100065e0:	1c14      	adds	r4, r2, #0
100065e2:	e748      	b.n	10006476 <__aeabi_fadd+0xba>
100065e4:	2b00      	cmp	r3, #0
100065e6:	d122      	bne.n	1000662e <__aeabi_fadd+0x272>
100065e8:	2f00      	cmp	r7, #0
100065ea:	d04a      	beq.n	10006682 <__aeabi_fadd+0x2c6>
100065ec:	1c3b      	adds	r3, r7, #0
100065ee:	1c0d      	adds	r5, r1, #0
100065f0:	24ff      	movs	r4, #255	; 0xff
100065f2:	e6f9      	b.n	100063e8 <__aeabi_fadd+0x2c>
100065f4:	1c3b      	adds	r3, r7, #0
100065f6:	1c14      	adds	r4, r2, #0
100065f8:	1c0d      	adds	r5, r1, #0
100065fa:	e6f5      	b.n	100063e8 <__aeabi_fadd+0x2c>
100065fc:	1c1d      	adds	r5, r3, #0
100065fe:	2420      	movs	r4, #32
10006600:	40c5      	lsrs	r5, r0
10006602:	1a20      	subs	r0, r4, r0
10006604:	4083      	lsls	r3, r0
10006606:	1e58      	subs	r0, r3, #1
10006608:	4183      	sbcs	r3, r0
1000660a:	432b      	orrs	r3, r5
1000660c:	e79b      	b.n	10006546 <__aeabi_fadd+0x18a>
1000660e:	2aff      	cmp	r2, #255	; 0xff
10006610:	d02e      	beq.n	10006670 <__aeabi_fadd+0x2b4>
10006612:	2480      	movs	r4, #128	; 0x80
10006614:	04e4      	lsls	r4, r4, #19
10006616:	4249      	negs	r1, r1
10006618:	4323      	orrs	r3, r4
1000661a:	e7dd      	b.n	100065d8 <__aeabi_fadd+0x21c>
1000661c:	2f00      	cmp	r7, #0
1000661e:	d100      	bne.n	10006622 <__aeabi_fadd+0x266>
10006620:	e6e2      	b.n	100063e8 <__aeabi_fadd+0x2c>
10006622:	1bda      	subs	r2, r3, r7
10006624:	0150      	lsls	r0, r2, #5
10006626:	d53c      	bpl.n	100066a2 <__aeabi_fadd+0x2e6>
10006628:	1afb      	subs	r3, r7, r3
1000662a:	1c0d      	adds	r5, r1, #0
1000662c:	e6dc      	b.n	100063e8 <__aeabi_fadd+0x2c>
1000662e:	24ff      	movs	r4, #255	; 0xff
10006630:	2f00      	cmp	r7, #0
10006632:	d100      	bne.n	10006636 <__aeabi_fadd+0x27a>
10006634:	e6d8      	b.n	100063e8 <__aeabi_fadd+0x2c>
10006636:	2280      	movs	r2, #128	; 0x80
10006638:	08db      	lsrs	r3, r3, #3
1000663a:	03d2      	lsls	r2, r2, #15
1000663c:	4213      	tst	r3, r2
1000663e:	d004      	beq.n	1000664a <__aeabi_fadd+0x28e>
10006640:	08fe      	lsrs	r6, r7, #3
10006642:	4216      	tst	r6, r2
10006644:	d101      	bne.n	1000664a <__aeabi_fadd+0x28e>
10006646:	1c33      	adds	r3, r6, #0
10006648:	1c0d      	adds	r5, r1, #0
1000664a:	00db      	lsls	r3, r3, #3
1000664c:	24ff      	movs	r4, #255	; 0xff
1000664e:	e6cb      	b.n	100063e8 <__aeabi_fadd+0x2c>
10006650:	2b00      	cmp	r3, #0
10006652:	d00d      	beq.n	10006670 <__aeabi_fadd+0x2b4>
10006654:	24ff      	movs	r4, #255	; 0xff
10006656:	2f00      	cmp	r7, #0
10006658:	d100      	bne.n	1000665c <__aeabi_fadd+0x2a0>
1000665a:	e6c5      	b.n	100063e8 <__aeabi_fadd+0x2c>
1000665c:	2280      	movs	r2, #128	; 0x80
1000665e:	08db      	lsrs	r3, r3, #3
10006660:	03d2      	lsls	r2, r2, #15
10006662:	4213      	tst	r3, r2
10006664:	d0f1      	beq.n	1000664a <__aeabi_fadd+0x28e>
10006666:	08fe      	lsrs	r6, r7, #3
10006668:	4216      	tst	r6, r2
1000666a:	d1ee      	bne.n	1000664a <__aeabi_fadd+0x28e>
1000666c:	1c33      	adds	r3, r6, #0
1000666e:	e7ec      	b.n	1000664a <__aeabi_fadd+0x28e>
10006670:	1c3b      	adds	r3, r7, #0
10006672:	24ff      	movs	r4, #255	; 0xff
10006674:	e6b8      	b.n	100063e8 <__aeabi_fadd+0x2c>
10006676:	1c3b      	adds	r3, r7, #0
10006678:	1c14      	adds	r4, r2, #0
1000667a:	e6b5      	b.n	100063e8 <__aeabi_fadd+0x2c>
1000667c:	1c23      	adds	r3, r4, #0
1000667e:	2000      	movs	r0, #0
10006680:	e6e4      	b.n	1000644c <__aeabi_fadd+0x90>
10006682:	2380      	movs	r3, #128	; 0x80
10006684:	2000      	movs	r0, #0
10006686:	049b      	lsls	r3, r3, #18
10006688:	24ff      	movs	r4, #255	; 0xff
1000668a:	e6df      	b.n	1000644c <__aeabi_fadd+0x90>
1000668c:	1c1e      	adds	r6, r3, #0
1000668e:	2420      	movs	r4, #32
10006690:	40ce      	lsrs	r6, r1
10006692:	1a61      	subs	r1, r4, r1
10006694:	408b      	lsls	r3, r1
10006696:	1e59      	subs	r1, r3, #1
10006698:	418b      	sbcs	r3, r1
1000669a:	4333      	orrs	r3, r6
1000669c:	e79f      	b.n	100065de <__aeabi_fadd+0x222>
1000669e:	1c3b      	adds	r3, r7, #0
100066a0:	e6a2      	b.n	100063e8 <__aeabi_fadd+0x2c>
100066a2:	1e13      	subs	r3, r2, #0
100066a4:	d000      	beq.n	100066a8 <__aeabi_fadd+0x2ec>
100066a6:	e6ce      	b.n	10006446 <__aeabi_fadd+0x8a>
100066a8:	2300      	movs	r3, #0
100066aa:	2000      	movs	r0, #0
100066ac:	e6ce      	b.n	1000644c <__aeabi_fadd+0x90>
100066ae:	46c0      	nop			; (mov r8, r8)
100066b0:	fbffffff 	.word	0xfbffffff

100066b4 <__aeabi_fdiv>:
100066b4:	b5f0      	push	{r4, r5, r6, r7, lr}
100066b6:	4656      	mov	r6, sl
100066b8:	464d      	mov	r5, r9
100066ba:	465f      	mov	r7, fp
100066bc:	4644      	mov	r4, r8
100066be:	b4f0      	push	{r4, r5, r6, r7}
100066c0:	0243      	lsls	r3, r0, #9
100066c2:	0045      	lsls	r5, r0, #1
100066c4:	0fc7      	lsrs	r7, r0, #31
100066c6:	b083      	sub	sp, #12
100066c8:	468a      	mov	sl, r1
100066ca:	0a5c      	lsrs	r4, r3, #9
100066cc:	0e2e      	lsrs	r6, r5, #24
100066ce:	46b9      	mov	r9, r7
100066d0:	d041      	beq.n	10006756 <__aeabi_fdiv+0xa2>
100066d2:	2eff      	cmp	r6, #255	; 0xff
100066d4:	d026      	beq.n	10006724 <__aeabi_fdiv+0x70>
100066d6:	2380      	movs	r3, #128	; 0x80
100066d8:	041b      	lsls	r3, r3, #16
100066da:	4323      	orrs	r3, r4
100066dc:	00dc      	lsls	r4, r3, #3
100066de:	2300      	movs	r3, #0
100066e0:	4698      	mov	r8, r3
100066e2:	469b      	mov	fp, r3
100066e4:	3e7f      	subs	r6, #127	; 0x7f
100066e6:	4653      	mov	r3, sl
100066e8:	025b      	lsls	r3, r3, #9
100066ea:	0a5d      	lsrs	r5, r3, #9
100066ec:	4653      	mov	r3, sl
100066ee:	005a      	lsls	r2, r3, #1
100066f0:	0fdb      	lsrs	r3, r3, #31
100066f2:	0e12      	lsrs	r2, r2, #24
100066f4:	469a      	mov	sl, r3
100066f6:	d039      	beq.n	1000676c <__aeabi_fdiv+0xb8>
100066f8:	2aff      	cmp	r2, #255	; 0xff
100066fa:	d033      	beq.n	10006764 <__aeabi_fdiv+0xb0>
100066fc:	2380      	movs	r3, #128	; 0x80
100066fe:	041b      	lsls	r3, r3, #16
10006700:	432b      	orrs	r3, r5
10006702:	00dd      	lsls	r5, r3, #3
10006704:	2300      	movs	r3, #0
10006706:	3a7f      	subs	r2, #127	; 0x7f
10006708:	4651      	mov	r1, sl
1000670a:	1ab2      	subs	r2, r6, r2
1000670c:	4646      	mov	r6, r8
1000670e:	4079      	eors	r1, r7
10006710:	1c08      	adds	r0, r1, #0
10006712:	9201      	str	r2, [sp, #4]
10006714:	431e      	orrs	r6, r3
10006716:	2e0f      	cmp	r6, #15
10006718:	d900      	bls.n	1000671c <__aeabi_fdiv+0x68>
1000671a:	e076      	b.n	1000680a <__aeabi_fdiv+0x156>
1000671c:	4a7e      	ldr	r2, [pc, #504]	; (10006918 <__aeabi_fdiv+0x264>)
1000671e:	00b6      	lsls	r6, r6, #2
10006720:	5996      	ldr	r6, [r2, r6]
10006722:	46b7      	mov	pc, r6
10006724:	2c00      	cmp	r4, #0
10006726:	d130      	bne.n	1000678a <__aeabi_fdiv+0xd6>
10006728:	2308      	movs	r3, #8
1000672a:	4698      	mov	r8, r3
1000672c:	3b06      	subs	r3, #6
1000672e:	469b      	mov	fp, r3
10006730:	e7d9      	b.n	100066e6 <__aeabi_fdiv+0x32>
10006732:	2380      	movs	r3, #128	; 0x80
10006734:	2100      	movs	r1, #0
10006736:	03db      	lsls	r3, r3, #15
10006738:	24ff      	movs	r4, #255	; 0xff
1000673a:	025b      	lsls	r3, r3, #9
1000673c:	05e4      	lsls	r4, r4, #23
1000673e:	0a5b      	lsrs	r3, r3, #9
10006740:	07c9      	lsls	r1, r1, #31
10006742:	4323      	orrs	r3, r4
10006744:	430b      	orrs	r3, r1
10006746:	1c18      	adds	r0, r3, #0
10006748:	b003      	add	sp, #12
1000674a:	bc3c      	pop	{r2, r3, r4, r5}
1000674c:	4690      	mov	r8, r2
1000674e:	4699      	mov	r9, r3
10006750:	46a2      	mov	sl, r4
10006752:	46ab      	mov	fp, r5
10006754:	bdf0      	pop	{r4, r5, r6, r7, pc}
10006756:	2c00      	cmp	r4, #0
10006758:	d128      	bne.n	100067ac <__aeabi_fdiv+0xf8>
1000675a:	2304      	movs	r3, #4
1000675c:	4698      	mov	r8, r3
1000675e:	3b03      	subs	r3, #3
10006760:	469b      	mov	fp, r3
10006762:	e7c0      	b.n	100066e6 <__aeabi_fdiv+0x32>
10006764:	2d00      	cmp	r5, #0
10006766:	d11f      	bne.n	100067a8 <__aeabi_fdiv+0xf4>
10006768:	2302      	movs	r3, #2
1000676a:	e002      	b.n	10006772 <__aeabi_fdiv+0xbe>
1000676c:	2d00      	cmp	r5, #0
1000676e:	d111      	bne.n	10006794 <__aeabi_fdiv+0xe0>
10006770:	2301      	movs	r3, #1
10006772:	1ab2      	subs	r2, r6, r2
10006774:	4650      	mov	r0, sl
10006776:	4646      	mov	r6, r8
10006778:	4078      	eors	r0, r7
1000677a:	9201      	str	r2, [sp, #4]
1000677c:	431e      	orrs	r6, r3
1000677e:	2e0f      	cmp	r6, #15
10006780:	d827      	bhi.n	100067d2 <__aeabi_fdiv+0x11e>
10006782:	4966      	ldr	r1, [pc, #408]	; (1000691c <__aeabi_fdiv+0x268>)
10006784:	00b6      	lsls	r6, r6, #2
10006786:	5989      	ldr	r1, [r1, r6]
10006788:	468f      	mov	pc, r1
1000678a:	230c      	movs	r3, #12
1000678c:	4698      	mov	r8, r3
1000678e:	3b09      	subs	r3, #9
10006790:	469b      	mov	fp, r3
10006792:	e7a8      	b.n	100066e6 <__aeabi_fdiv+0x32>
10006794:	1c28      	adds	r0, r5, #0
10006796:	f001 fbf7 	bl	10007f88 <__clzsi2>
1000679a:	2276      	movs	r2, #118	; 0x76
1000679c:	1f43      	subs	r3, r0, #5
1000679e:	4252      	negs	r2, r2
100067a0:	409d      	lsls	r5, r3
100067a2:	1a12      	subs	r2, r2, r0
100067a4:	2300      	movs	r3, #0
100067a6:	e7af      	b.n	10006708 <__aeabi_fdiv+0x54>
100067a8:	2303      	movs	r3, #3
100067aa:	e7ad      	b.n	10006708 <__aeabi_fdiv+0x54>
100067ac:	1c20      	adds	r0, r4, #0
100067ae:	f001 fbeb 	bl	10007f88 <__clzsi2>
100067b2:	1f43      	subs	r3, r0, #5
100067b4:	409c      	lsls	r4, r3
100067b6:	2376      	movs	r3, #118	; 0x76
100067b8:	425b      	negs	r3, r3
100067ba:	1a1e      	subs	r6, r3, r0
100067bc:	2300      	movs	r3, #0
100067be:	4698      	mov	r8, r3
100067c0:	469b      	mov	fp, r3
100067c2:	e790      	b.n	100066e6 <__aeabi_fdiv+0x32>
100067c4:	2500      	movs	r5, #0
100067c6:	46d1      	mov	r9, sl
100067c8:	469b      	mov	fp, r3
100067ca:	465b      	mov	r3, fp
100067cc:	4648      	mov	r0, r9
100067ce:	2b02      	cmp	r3, #2
100067d0:	d16f      	bne.n	100068b2 <__aeabi_fdiv+0x1fe>
100067d2:	2101      	movs	r1, #1
100067d4:	24ff      	movs	r4, #255	; 0xff
100067d6:	4001      	ands	r1, r0
100067d8:	2300      	movs	r3, #0
100067da:	e7ae      	b.n	1000673a <__aeabi_fdiv+0x86>
100067dc:	237e      	movs	r3, #126	; 0x7e
100067de:	9a01      	ldr	r2, [sp, #4]
100067e0:	425b      	negs	r3, r3
100067e2:	1a9b      	subs	r3, r3, r2
100067e4:	2b1b      	cmp	r3, #27
100067e6:	dd6d      	ble.n	100068c4 <__aeabi_fdiv+0x210>
100067e8:	2101      	movs	r1, #1
100067ea:	464b      	mov	r3, r9
100067ec:	4019      	ands	r1, r3
100067ee:	2400      	movs	r4, #0
100067f0:	2300      	movs	r3, #0
100067f2:	e7a2      	b.n	1000673a <__aeabi_fdiv+0x86>
100067f4:	2380      	movs	r3, #128	; 0x80
100067f6:	03db      	lsls	r3, r3, #15
100067f8:	421c      	tst	r4, r3
100067fa:	d149      	bne.n	10006890 <__aeabi_fdiv+0x1dc>
100067fc:	2380      	movs	r3, #128	; 0x80
100067fe:	03db      	lsls	r3, r3, #15
10006800:	4323      	orrs	r3, r4
10006802:	025b      	lsls	r3, r3, #9
10006804:	0a5b      	lsrs	r3, r3, #9
10006806:	1c39      	adds	r1, r7, #0
10006808:	e796      	b.n	10006738 <__aeabi_fdiv+0x84>
1000680a:	0163      	lsls	r3, r4, #5
1000680c:	016d      	lsls	r5, r5, #5
1000680e:	42ab      	cmp	r3, r5
10006810:	d337      	bcc.n	10006882 <__aeabi_fdiv+0x1ce>
10006812:	4689      	mov	r9, r1
10006814:	201a      	movs	r0, #26
10006816:	2101      	movs	r1, #1
10006818:	1b5b      	subs	r3, r3, r5
1000681a:	2401      	movs	r4, #1
1000681c:	1c1e      	adds	r6, r3, #0
1000681e:	0049      	lsls	r1, r1, #1
10006820:	005b      	lsls	r3, r3, #1
10006822:	2e00      	cmp	r6, #0
10006824:	db01      	blt.n	1000682a <__aeabi_fdiv+0x176>
10006826:	42ab      	cmp	r3, r5
10006828:	d301      	bcc.n	1000682e <__aeabi_fdiv+0x17a>
1000682a:	1b5b      	subs	r3, r3, r5
1000682c:	4321      	orrs	r1, r4
1000682e:	3801      	subs	r0, #1
10006830:	2800      	cmp	r0, #0
10006832:	d1f3      	bne.n	1000681c <__aeabi_fdiv+0x168>
10006834:	1e58      	subs	r0, r3, #1
10006836:	4183      	sbcs	r3, r0
10006838:	430b      	orrs	r3, r1
1000683a:	1c1d      	adds	r5, r3, #0
1000683c:	9c01      	ldr	r4, [sp, #4]
1000683e:	347f      	adds	r4, #127	; 0x7f
10006840:	2c00      	cmp	r4, #0
10006842:	ddcb      	ble.n	100067dc <__aeabi_fdiv+0x128>
10006844:	076b      	lsls	r3, r5, #29
10006846:	d004      	beq.n	10006852 <__aeabi_fdiv+0x19e>
10006848:	230f      	movs	r3, #15
1000684a:	402b      	ands	r3, r5
1000684c:	2b04      	cmp	r3, #4
1000684e:	d000      	beq.n	10006852 <__aeabi_fdiv+0x19e>
10006850:	3504      	adds	r5, #4
10006852:	012b      	lsls	r3, r5, #4
10006854:	d504      	bpl.n	10006860 <__aeabi_fdiv+0x1ac>
10006856:	9a01      	ldr	r2, [sp, #4]
10006858:	4b31      	ldr	r3, [pc, #196]	; (10006920 <__aeabi_fdiv+0x26c>)
1000685a:	3280      	adds	r2, #128	; 0x80
1000685c:	1c14      	adds	r4, r2, #0
1000685e:	401d      	ands	r5, r3
10006860:	2cfe      	cmp	r4, #254	; 0xfe
10006862:	dd07      	ble.n	10006874 <__aeabi_fdiv+0x1c0>
10006864:	464b      	mov	r3, r9
10006866:	2101      	movs	r1, #1
10006868:	24ff      	movs	r4, #255	; 0xff
1000686a:	4019      	ands	r1, r3
1000686c:	2300      	movs	r3, #0
1000686e:	e764      	b.n	1000673a <__aeabi_fdiv+0x86>
10006870:	1c25      	adds	r5, r4, #0
10006872:	e7aa      	b.n	100067ca <__aeabi_fdiv+0x116>
10006874:	2101      	movs	r1, #1
10006876:	464a      	mov	r2, r9
10006878:	01ab      	lsls	r3, r5, #6
1000687a:	0a5b      	lsrs	r3, r3, #9
1000687c:	b2e4      	uxtb	r4, r4
1000687e:	4011      	ands	r1, r2
10006880:	e75b      	b.n	1000673a <__aeabi_fdiv+0x86>
10006882:	9a01      	ldr	r2, [sp, #4]
10006884:	4689      	mov	r9, r1
10006886:	3a01      	subs	r2, #1
10006888:	9201      	str	r2, [sp, #4]
1000688a:	201b      	movs	r0, #27
1000688c:	2100      	movs	r1, #0
1000688e:	e7c4      	b.n	1000681a <__aeabi_fdiv+0x166>
10006890:	421d      	tst	r5, r3
10006892:	d007      	beq.n	100068a4 <__aeabi_fdiv+0x1f0>
10006894:	4323      	orrs	r3, r4
10006896:	025b      	lsls	r3, r3, #9
10006898:	0a5b      	lsrs	r3, r3, #9
1000689a:	1c39      	adds	r1, r7, #0
1000689c:	e74c      	b.n	10006738 <__aeabi_fdiv+0x84>
1000689e:	2500      	movs	r5, #0
100068a0:	0263      	lsls	r3, r4, #9
100068a2:	d5ab      	bpl.n	100067fc <__aeabi_fdiv+0x148>
100068a4:	2380      	movs	r3, #128	; 0x80
100068a6:	03db      	lsls	r3, r3, #15
100068a8:	432b      	orrs	r3, r5
100068aa:	025b      	lsls	r3, r3, #9
100068ac:	0a5b      	lsrs	r3, r3, #9
100068ae:	4651      	mov	r1, sl
100068b0:	e742      	b.n	10006738 <__aeabi_fdiv+0x84>
100068b2:	2b03      	cmp	r3, #3
100068b4:	d025      	beq.n	10006902 <__aeabi_fdiv+0x24e>
100068b6:	2b01      	cmp	r3, #1
100068b8:	d1c0      	bne.n	1000683c <__aeabi_fdiv+0x188>
100068ba:	2101      	movs	r1, #1
100068bc:	2400      	movs	r4, #0
100068be:	4001      	ands	r1, r0
100068c0:	2300      	movs	r3, #0
100068c2:	e73a      	b.n	1000673a <__aeabi_fdiv+0x86>
100068c4:	1c29      	adds	r1, r5, #0
100068c6:	40d9      	lsrs	r1, r3
100068c8:	1c2b      	adds	r3, r5, #0
100068ca:	9a01      	ldr	r2, [sp, #4]
100068cc:	329e      	adds	r2, #158	; 0x9e
100068ce:	4093      	lsls	r3, r2
100068d0:	1e5d      	subs	r5, r3, #1
100068d2:	41ab      	sbcs	r3, r5
100068d4:	430b      	orrs	r3, r1
100068d6:	075a      	lsls	r2, r3, #29
100068d8:	d004      	beq.n	100068e4 <__aeabi_fdiv+0x230>
100068da:	220f      	movs	r2, #15
100068dc:	401a      	ands	r2, r3
100068de:	2a04      	cmp	r2, #4
100068e0:	d000      	beq.n	100068e4 <__aeabi_fdiv+0x230>
100068e2:	3304      	adds	r3, #4
100068e4:	015a      	lsls	r2, r3, #5
100068e6:	d505      	bpl.n	100068f4 <__aeabi_fdiv+0x240>
100068e8:	464b      	mov	r3, r9
100068ea:	2101      	movs	r1, #1
100068ec:	2401      	movs	r4, #1
100068ee:	4019      	ands	r1, r3
100068f0:	2300      	movs	r3, #0
100068f2:	e722      	b.n	1000673a <__aeabi_fdiv+0x86>
100068f4:	2101      	movs	r1, #1
100068f6:	464a      	mov	r2, r9
100068f8:	019b      	lsls	r3, r3, #6
100068fa:	0a5b      	lsrs	r3, r3, #9
100068fc:	4011      	ands	r1, r2
100068fe:	2400      	movs	r4, #0
10006900:	e71b      	b.n	1000673a <__aeabi_fdiv+0x86>
10006902:	2380      	movs	r3, #128	; 0x80
10006904:	2101      	movs	r1, #1
10006906:	464a      	mov	r2, r9
10006908:	03db      	lsls	r3, r3, #15
1000690a:	432b      	orrs	r3, r5
1000690c:	025b      	lsls	r3, r3, #9
1000690e:	400a      	ands	r2, r1
10006910:	0a5b      	lsrs	r3, r3, #9
10006912:	1c11      	adds	r1, r2, #0
10006914:	e710      	b.n	10006738 <__aeabi_fdiv+0x84>
10006916:	46c0      	nop			; (mov r8, r8)
10006918:	1000b720 	.word	0x1000b720
1000691c:	1000b760 	.word	0x1000b760
10006920:	f7ffffff 	.word	0xf7ffffff

10006924 <__eqsf2>:
10006924:	0243      	lsls	r3, r0, #9
10006926:	b570      	push	{r4, r5, r6, lr}
10006928:	0042      	lsls	r2, r0, #1
1000692a:	004c      	lsls	r4, r1, #1
1000692c:	0a5d      	lsrs	r5, r3, #9
1000692e:	0fc3      	lsrs	r3, r0, #31
10006930:	0248      	lsls	r0, r1, #9
10006932:	0e12      	lsrs	r2, r2, #24
10006934:	0a46      	lsrs	r6, r0, #9
10006936:	0e24      	lsrs	r4, r4, #24
10006938:	0fc9      	lsrs	r1, r1, #31
1000693a:	2aff      	cmp	r2, #255	; 0xff
1000693c:	d005      	beq.n	1000694a <__eqsf2+0x26>
1000693e:	2cff      	cmp	r4, #255	; 0xff
10006940:	d008      	beq.n	10006954 <__eqsf2+0x30>
10006942:	2001      	movs	r0, #1
10006944:	42a2      	cmp	r2, r4
10006946:	d00b      	beq.n	10006960 <__eqsf2+0x3c>
10006948:	bd70      	pop	{r4, r5, r6, pc}
1000694a:	2001      	movs	r0, #1
1000694c:	2d00      	cmp	r5, #0
1000694e:	d1fb      	bne.n	10006948 <__eqsf2+0x24>
10006950:	2cff      	cmp	r4, #255	; 0xff
10006952:	d1f6      	bne.n	10006942 <__eqsf2+0x1e>
10006954:	2001      	movs	r0, #1
10006956:	2e00      	cmp	r6, #0
10006958:	d1f6      	bne.n	10006948 <__eqsf2+0x24>
1000695a:	2001      	movs	r0, #1
1000695c:	42a2      	cmp	r2, r4
1000695e:	d1f3      	bne.n	10006948 <__eqsf2+0x24>
10006960:	42b5      	cmp	r5, r6
10006962:	d1f1      	bne.n	10006948 <__eqsf2+0x24>
10006964:	428b      	cmp	r3, r1
10006966:	d005      	beq.n	10006974 <__eqsf2+0x50>
10006968:	2a00      	cmp	r2, #0
1000696a:	d1ed      	bne.n	10006948 <__eqsf2+0x24>
1000696c:	1c28      	adds	r0, r5, #0
1000696e:	1e43      	subs	r3, r0, #1
10006970:	4198      	sbcs	r0, r3
10006972:	e7e9      	b.n	10006948 <__eqsf2+0x24>
10006974:	2000      	movs	r0, #0
10006976:	e7e7      	b.n	10006948 <__eqsf2+0x24>

10006978 <__gesf2>:
10006978:	b5f0      	push	{r4, r5, r6, r7, lr}
1000697a:	0243      	lsls	r3, r0, #9
1000697c:	024d      	lsls	r5, r1, #9
1000697e:	004a      	lsls	r2, r1, #1
10006980:	0044      	lsls	r4, r0, #1
10006982:	0a5e      	lsrs	r6, r3, #9
10006984:	0e24      	lsrs	r4, r4, #24
10006986:	0fc3      	lsrs	r3, r0, #31
10006988:	0a6d      	lsrs	r5, r5, #9
1000698a:	0e12      	lsrs	r2, r2, #24
1000698c:	0fc9      	lsrs	r1, r1, #31
1000698e:	2cff      	cmp	r4, #255	; 0xff
10006990:	d00d      	beq.n	100069ae <__gesf2+0x36>
10006992:	2aff      	cmp	r2, #255	; 0xff
10006994:	d031      	beq.n	100069fa <__gesf2+0x82>
10006996:	2c00      	cmp	r4, #0
10006998:	d10d      	bne.n	100069b6 <__gesf2+0x3e>
1000699a:	4277      	negs	r7, r6
1000699c:	4177      	adcs	r7, r6
1000699e:	2a00      	cmp	r2, #0
100069a0:	d123      	bne.n	100069ea <__gesf2+0x72>
100069a2:	2d00      	cmp	r5, #0
100069a4:	d121      	bne.n	100069ea <__gesf2+0x72>
100069a6:	2000      	movs	r0, #0
100069a8:	2f00      	cmp	r7, #0
100069aa:	d10b      	bne.n	100069c4 <__gesf2+0x4c>
100069ac:	e007      	b.n	100069be <__gesf2+0x46>
100069ae:	2e00      	cmp	r6, #0
100069b0:	d128      	bne.n	10006a04 <__gesf2+0x8c>
100069b2:	2aff      	cmp	r2, #255	; 0xff
100069b4:	d021      	beq.n	100069fa <__gesf2+0x82>
100069b6:	2a00      	cmp	r2, #0
100069b8:	d005      	beq.n	100069c6 <__gesf2+0x4e>
100069ba:	428b      	cmp	r3, r1
100069bc:	d007      	beq.n	100069ce <__gesf2+0x56>
100069be:	4258      	negs	r0, r3
100069c0:	2301      	movs	r3, #1
100069c2:	4318      	orrs	r0, r3
100069c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
100069c6:	2d00      	cmp	r5, #0
100069c8:	d0f9      	beq.n	100069be <__gesf2+0x46>
100069ca:	428b      	cmp	r3, r1
100069cc:	d1f7      	bne.n	100069be <__gesf2+0x46>
100069ce:	4294      	cmp	r4, r2
100069d0:	dcf5      	bgt.n	100069be <__gesf2+0x46>
100069d2:	db04      	blt.n	100069de <__gesf2+0x66>
100069d4:	42ae      	cmp	r6, r5
100069d6:	d8f2      	bhi.n	100069be <__gesf2+0x46>
100069d8:	2000      	movs	r0, #0
100069da:	42ae      	cmp	r6, r5
100069dc:	d2f2      	bcs.n	100069c4 <__gesf2+0x4c>
100069de:	4258      	negs	r0, r3
100069e0:	4143      	adcs	r3, r0
100069e2:	2001      	movs	r0, #1
100069e4:	425b      	negs	r3, r3
100069e6:	4318      	orrs	r0, r3
100069e8:	e7ec      	b.n	100069c4 <__gesf2+0x4c>
100069ea:	2f00      	cmp	r7, #0
100069ec:	d0e5      	beq.n	100069ba <__gesf2+0x42>
100069ee:	4248      	negs	r0, r1
100069f0:	4141      	adcs	r1, r0
100069f2:	2001      	movs	r0, #1
100069f4:	4249      	negs	r1, r1
100069f6:	4308      	orrs	r0, r1
100069f8:	e7e4      	b.n	100069c4 <__gesf2+0x4c>
100069fa:	2d00      	cmp	r5, #0
100069fc:	d102      	bne.n	10006a04 <__gesf2+0x8c>
100069fe:	2c00      	cmp	r4, #0
10006a00:	d0cb      	beq.n	1000699a <__gesf2+0x22>
10006a02:	e7da      	b.n	100069ba <__gesf2+0x42>
10006a04:	2002      	movs	r0, #2
10006a06:	4240      	negs	r0, r0
10006a08:	e7dc      	b.n	100069c4 <__gesf2+0x4c>
10006a0a:	46c0      	nop			; (mov r8, r8)

10006a0c <__lesf2>:
10006a0c:	0243      	lsls	r3, r0, #9
10006a0e:	b5f0      	push	{r4, r5, r6, r7, lr}
10006a10:	0042      	lsls	r2, r0, #1
10006a12:	004c      	lsls	r4, r1, #1
10006a14:	0a5e      	lsrs	r6, r3, #9
10006a16:	0fc3      	lsrs	r3, r0, #31
10006a18:	0248      	lsls	r0, r1, #9
10006a1a:	0e12      	lsrs	r2, r2, #24
10006a1c:	0a45      	lsrs	r5, r0, #9
10006a1e:	0e24      	lsrs	r4, r4, #24
10006a20:	0fc9      	lsrs	r1, r1, #31
10006a22:	2aff      	cmp	r2, #255	; 0xff
10006a24:	d00f      	beq.n	10006a46 <__lesf2+0x3a>
10006a26:	2cff      	cmp	r4, #255	; 0xff
10006a28:	d01a      	beq.n	10006a60 <__lesf2+0x54>
10006a2a:	2a00      	cmp	r2, #0
10006a2c:	d110      	bne.n	10006a50 <__lesf2+0x44>
10006a2e:	4277      	negs	r7, r6
10006a30:	4177      	adcs	r7, r6
10006a32:	2c00      	cmp	r4, #0
10006a34:	d029      	beq.n	10006a8a <__lesf2+0x7e>
10006a36:	2f00      	cmp	r7, #0
10006a38:	d017      	beq.n	10006a6a <__lesf2+0x5e>
10006a3a:	4248      	negs	r0, r1
10006a3c:	4141      	adcs	r1, r0
10006a3e:	2001      	movs	r0, #1
10006a40:	4249      	negs	r1, r1
10006a42:	4308      	orrs	r0, r1
10006a44:	e00b      	b.n	10006a5e <__lesf2+0x52>
10006a46:	2002      	movs	r0, #2
10006a48:	2e00      	cmp	r6, #0
10006a4a:	d108      	bne.n	10006a5e <__lesf2+0x52>
10006a4c:	2cff      	cmp	r4, #255	; 0xff
10006a4e:	d007      	beq.n	10006a60 <__lesf2+0x54>
10006a50:	2c00      	cmp	r4, #0
10006a52:	d10a      	bne.n	10006a6a <__lesf2+0x5e>
10006a54:	2d00      	cmp	r5, #0
10006a56:	d108      	bne.n	10006a6a <__lesf2+0x5e>
10006a58:	4258      	negs	r0, r3
10006a5a:	2301      	movs	r3, #1
10006a5c:	4318      	orrs	r0, r3
10006a5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
10006a60:	2002      	movs	r0, #2
10006a62:	2d00      	cmp	r5, #0
10006a64:	d1fb      	bne.n	10006a5e <__lesf2+0x52>
10006a66:	2a00      	cmp	r2, #0
10006a68:	d0e1      	beq.n	10006a2e <__lesf2+0x22>
10006a6a:	428b      	cmp	r3, r1
10006a6c:	d1f4      	bne.n	10006a58 <__lesf2+0x4c>
10006a6e:	42a2      	cmp	r2, r4
10006a70:	dcf2      	bgt.n	10006a58 <__lesf2+0x4c>
10006a72:	db04      	blt.n	10006a7e <__lesf2+0x72>
10006a74:	42ae      	cmp	r6, r5
10006a76:	d8ef      	bhi.n	10006a58 <__lesf2+0x4c>
10006a78:	2000      	movs	r0, #0
10006a7a:	42ae      	cmp	r6, r5
10006a7c:	d2ef      	bcs.n	10006a5e <__lesf2+0x52>
10006a7e:	4258      	negs	r0, r3
10006a80:	4143      	adcs	r3, r0
10006a82:	2001      	movs	r0, #1
10006a84:	425b      	negs	r3, r3
10006a86:	4318      	orrs	r0, r3
10006a88:	e7e9      	b.n	10006a5e <__lesf2+0x52>
10006a8a:	2d00      	cmp	r5, #0
10006a8c:	d1d3      	bne.n	10006a36 <__lesf2+0x2a>
10006a8e:	2000      	movs	r0, #0
10006a90:	2f00      	cmp	r7, #0
10006a92:	d1e4      	bne.n	10006a5e <__lesf2+0x52>
10006a94:	e7e0      	b.n	10006a58 <__lesf2+0x4c>
10006a96:	46c0      	nop			; (mov r8, r8)

10006a98 <__aeabi_fmul>:
10006a98:	b5f0      	push	{r4, r5, r6, r7, lr}
10006a9a:	465f      	mov	r7, fp
10006a9c:	4656      	mov	r6, sl
10006a9e:	464d      	mov	r5, r9
10006aa0:	4644      	mov	r4, r8
10006aa2:	b4f0      	push	{r4, r5, r6, r7}
10006aa4:	0245      	lsls	r5, r0, #9
10006aa6:	0046      	lsls	r6, r0, #1
10006aa8:	0fc4      	lsrs	r4, r0, #31
10006aaa:	b083      	sub	sp, #12
10006aac:	1c0f      	adds	r7, r1, #0
10006aae:	0a6d      	lsrs	r5, r5, #9
10006ab0:	0e36      	lsrs	r6, r6, #24
10006ab2:	46a3      	mov	fp, r4
10006ab4:	d045      	beq.n	10006b42 <__aeabi_fmul+0xaa>
10006ab6:	2eff      	cmp	r6, #255	; 0xff
10006ab8:	d025      	beq.n	10006b06 <__aeabi_fmul+0x6e>
10006aba:	2380      	movs	r3, #128	; 0x80
10006abc:	041b      	lsls	r3, r3, #16
10006abe:	431d      	orrs	r5, r3
10006ac0:	2300      	movs	r3, #0
10006ac2:	469a      	mov	sl, r3
10006ac4:	00ed      	lsls	r5, r5, #3
10006ac6:	3e7f      	subs	r6, #127	; 0x7f
10006ac8:	9301      	str	r3, [sp, #4]
10006aca:	027b      	lsls	r3, r7, #9
10006acc:	0a5b      	lsrs	r3, r3, #9
10006ace:	4698      	mov	r8, r3
10006ad0:	0078      	lsls	r0, r7, #1
10006ad2:	0ffb      	lsrs	r3, r7, #31
10006ad4:	0e00      	lsrs	r0, r0, #24
10006ad6:	4699      	mov	r9, r3
10006ad8:	d040      	beq.n	10006b5c <__aeabi_fmul+0xc4>
10006ada:	28ff      	cmp	r0, #255	; 0xff
10006adc:	d038      	beq.n	10006b50 <__aeabi_fmul+0xb8>
10006ade:	2380      	movs	r3, #128	; 0x80
10006ae0:	4642      	mov	r2, r8
10006ae2:	041b      	lsls	r3, r3, #16
10006ae4:	4313      	orrs	r3, r2
10006ae6:	00db      	lsls	r3, r3, #3
10006ae8:	4698      	mov	r8, r3
10006aea:	2300      	movs	r3, #0
10006aec:	387f      	subs	r0, #127	; 0x7f
10006aee:	464a      	mov	r2, r9
10006af0:	9f01      	ldr	r7, [sp, #4]
10006af2:	1830      	adds	r0, r6, r0
10006af4:	4062      	eors	r2, r4
10006af6:	1c41      	adds	r1, r0, #1
10006af8:	431f      	orrs	r7, r3
10006afa:	2f0f      	cmp	r7, #15
10006afc:	d869      	bhi.n	10006bd2 <__aeabi_fmul+0x13a>
10006afe:	4e7d      	ldr	r6, [pc, #500]	; (10006cf4 <__aeabi_fmul+0x25c>)
10006b00:	00bf      	lsls	r7, r7, #2
10006b02:	59f6      	ldr	r6, [r6, r7]
10006b04:	46b7      	mov	pc, r6
10006b06:	2d00      	cmp	r5, #0
10006b08:	d145      	bne.n	10006b96 <__aeabi_fmul+0xfe>
10006b0a:	2308      	movs	r3, #8
10006b0c:	9301      	str	r3, [sp, #4]
10006b0e:	3b06      	subs	r3, #6
10006b10:	469a      	mov	sl, r3
10006b12:	e7da      	b.n	10006aca <__aeabi_fmul+0x32>
10006b14:	4693      	mov	fp, r2
10006b16:	4653      	mov	r3, sl
10006b18:	2b02      	cmp	r3, #2
10006b1a:	d12f      	bne.n	10006b7c <__aeabi_fmul+0xe4>
10006b1c:	465b      	mov	r3, fp
10006b1e:	2401      	movs	r4, #1
10006b20:	2500      	movs	r5, #0
10006b22:	401c      	ands	r4, r3
10006b24:	23ff      	movs	r3, #255	; 0xff
10006b26:	026d      	lsls	r5, r5, #9
10006b28:	05db      	lsls	r3, r3, #23
10006b2a:	0a6d      	lsrs	r5, r5, #9
10006b2c:	07e4      	lsls	r4, r4, #31
10006b2e:	431d      	orrs	r5, r3
10006b30:	4325      	orrs	r5, r4
10006b32:	1c28      	adds	r0, r5, #0
10006b34:	b003      	add	sp, #12
10006b36:	bc3c      	pop	{r2, r3, r4, r5}
10006b38:	4690      	mov	r8, r2
10006b3a:	4699      	mov	r9, r3
10006b3c:	46a2      	mov	sl, r4
10006b3e:	46ab      	mov	fp, r5
10006b40:	bdf0      	pop	{r4, r5, r6, r7, pc}
10006b42:	2d00      	cmp	r5, #0
10006b44:	d12c      	bne.n	10006ba0 <__aeabi_fmul+0x108>
10006b46:	2304      	movs	r3, #4
10006b48:	9301      	str	r3, [sp, #4]
10006b4a:	3b03      	subs	r3, #3
10006b4c:	469a      	mov	sl, r3
10006b4e:	e7bc      	b.n	10006aca <__aeabi_fmul+0x32>
10006b50:	4643      	mov	r3, r8
10006b52:	425a      	negs	r2, r3
10006b54:	4153      	adcs	r3, r2
10006b56:	2203      	movs	r2, #3
10006b58:	1ad3      	subs	r3, r2, r3
10006b5a:	e7c8      	b.n	10006aee <__aeabi_fmul+0x56>
10006b5c:	4642      	mov	r2, r8
10006b5e:	2301      	movs	r3, #1
10006b60:	2a00      	cmp	r2, #0
10006b62:	d0c4      	beq.n	10006aee <__aeabi_fmul+0x56>
10006b64:	4640      	mov	r0, r8
10006b66:	f001 fa0f 	bl	10007f88 <__clzsi2>
10006b6a:	4642      	mov	r2, r8
10006b6c:	1f43      	subs	r3, r0, #5
10006b6e:	409a      	lsls	r2, r3
10006b70:	2376      	movs	r3, #118	; 0x76
10006b72:	425b      	negs	r3, r3
10006b74:	1a18      	subs	r0, r3, r0
10006b76:	4690      	mov	r8, r2
10006b78:	2300      	movs	r3, #0
10006b7a:	e7b8      	b.n	10006aee <__aeabi_fmul+0x56>
10006b7c:	2b03      	cmp	r3, #3
10006b7e:	d100      	bne.n	10006b82 <__aeabi_fmul+0xea>
10006b80:	e0ad      	b.n	10006cde <__aeabi_fmul+0x246>
10006b82:	2b01      	cmp	r3, #1
10006b84:	d000      	beq.n	10006b88 <__aeabi_fmul+0xf0>
10006b86:	e08c      	b.n	10006ca2 <__aeabi_fmul+0x20a>
10006b88:	465b      	mov	r3, fp
10006b8a:	4654      	mov	r4, sl
10006b8c:	401c      	ands	r4, r3
10006b8e:	b2e4      	uxtb	r4, r4
10006b90:	2300      	movs	r3, #0
10006b92:	2500      	movs	r5, #0
10006b94:	e7c7      	b.n	10006b26 <__aeabi_fmul+0x8e>
10006b96:	230c      	movs	r3, #12
10006b98:	9301      	str	r3, [sp, #4]
10006b9a:	3b09      	subs	r3, #9
10006b9c:	469a      	mov	sl, r3
10006b9e:	e794      	b.n	10006aca <__aeabi_fmul+0x32>
10006ba0:	1c28      	adds	r0, r5, #0
10006ba2:	f001 f9f1 	bl	10007f88 <__clzsi2>
10006ba6:	2676      	movs	r6, #118	; 0x76
10006ba8:	1f43      	subs	r3, r0, #5
10006baa:	409d      	lsls	r5, r3
10006bac:	2300      	movs	r3, #0
10006bae:	4276      	negs	r6, r6
10006bb0:	1a36      	subs	r6, r6, r0
10006bb2:	9301      	str	r3, [sp, #4]
10006bb4:	469a      	mov	sl, r3
10006bb6:	e788      	b.n	10006aca <__aeabi_fmul+0x32>
10006bb8:	2580      	movs	r5, #128	; 0x80
10006bba:	2400      	movs	r4, #0
10006bbc:	03ed      	lsls	r5, r5, #15
10006bbe:	23ff      	movs	r3, #255	; 0xff
10006bc0:	e7b1      	b.n	10006b26 <__aeabi_fmul+0x8e>
10006bc2:	4645      	mov	r5, r8
10006bc4:	46cb      	mov	fp, r9
10006bc6:	469a      	mov	sl, r3
10006bc8:	e7a5      	b.n	10006b16 <__aeabi_fmul+0x7e>
10006bca:	4645      	mov	r5, r8
10006bcc:	4693      	mov	fp, r2
10006bce:	469a      	mov	sl, r3
10006bd0:	e7a1      	b.n	10006b16 <__aeabi_fmul+0x7e>
10006bd2:	4643      	mov	r3, r8
10006bd4:	042c      	lsls	r4, r5, #16
10006bd6:	0c1b      	lsrs	r3, r3, #16
10006bd8:	469c      	mov	ip, r3
10006bda:	0c23      	lsrs	r3, r4, #16
10006bdc:	4644      	mov	r4, r8
10006bde:	0426      	lsls	r6, r4, #16
10006be0:	1c1c      	adds	r4, r3, #0
10006be2:	0c36      	lsrs	r6, r6, #16
10006be4:	0c2f      	lsrs	r7, r5, #16
10006be6:	4374      	muls	r4, r6
10006be8:	1c35      	adds	r5, r6, #0
10006bea:	4666      	mov	r6, ip
10006bec:	437d      	muls	r5, r7
10006bee:	4373      	muls	r3, r6
10006bf0:	4377      	muls	r7, r6
10006bf2:	18eb      	adds	r3, r5, r3
10006bf4:	0c26      	lsrs	r6, r4, #16
10006bf6:	199e      	adds	r6, r3, r6
10006bf8:	42b5      	cmp	r5, r6
10006bfa:	d903      	bls.n	10006c04 <__aeabi_fmul+0x16c>
10006bfc:	2380      	movs	r3, #128	; 0x80
10006bfe:	025b      	lsls	r3, r3, #9
10006c00:	469c      	mov	ip, r3
10006c02:	4467      	add	r7, ip
10006c04:	0424      	lsls	r4, r4, #16
10006c06:	0433      	lsls	r3, r6, #16
10006c08:	0c24      	lsrs	r4, r4, #16
10006c0a:	191b      	adds	r3, r3, r4
10006c0c:	019d      	lsls	r5, r3, #6
10006c0e:	1e6c      	subs	r4, r5, #1
10006c10:	41a5      	sbcs	r5, r4
10006c12:	0e9b      	lsrs	r3, r3, #26
10006c14:	0c36      	lsrs	r6, r6, #16
10006c16:	432b      	orrs	r3, r5
10006c18:	19bd      	adds	r5, r7, r6
10006c1a:	01ad      	lsls	r5, r5, #6
10006c1c:	431d      	orrs	r5, r3
10006c1e:	012b      	lsls	r3, r5, #4
10006c20:	d504      	bpl.n	10006c2c <__aeabi_fmul+0x194>
10006c22:	2301      	movs	r3, #1
10006c24:	0868      	lsrs	r0, r5, #1
10006c26:	401d      	ands	r5, r3
10006c28:	4305      	orrs	r5, r0
10006c2a:	1c08      	adds	r0, r1, #0
10006c2c:	1c03      	adds	r3, r0, #0
10006c2e:	337f      	adds	r3, #127	; 0x7f
10006c30:	2b00      	cmp	r3, #0
10006c32:	dd2c      	ble.n	10006c8e <__aeabi_fmul+0x1f6>
10006c34:	0769      	lsls	r1, r5, #29
10006c36:	d004      	beq.n	10006c42 <__aeabi_fmul+0x1aa>
10006c38:	210f      	movs	r1, #15
10006c3a:	4029      	ands	r1, r5
10006c3c:	2904      	cmp	r1, #4
10006c3e:	d000      	beq.n	10006c42 <__aeabi_fmul+0x1aa>
10006c40:	3504      	adds	r5, #4
10006c42:	0129      	lsls	r1, r5, #4
10006c44:	d503      	bpl.n	10006c4e <__aeabi_fmul+0x1b6>
10006c46:	4b2c      	ldr	r3, [pc, #176]	; (10006cf8 <__aeabi_fmul+0x260>)
10006c48:	401d      	ands	r5, r3
10006c4a:	1c03      	adds	r3, r0, #0
10006c4c:	3380      	adds	r3, #128	; 0x80
10006c4e:	2bfe      	cmp	r3, #254	; 0xfe
10006c50:	dd17      	ble.n	10006c82 <__aeabi_fmul+0x1ea>
10006c52:	2401      	movs	r4, #1
10006c54:	23ff      	movs	r3, #255	; 0xff
10006c56:	4014      	ands	r4, r2
10006c58:	2500      	movs	r5, #0
10006c5a:	e764      	b.n	10006b26 <__aeabi_fmul+0x8e>
10006c5c:	2080      	movs	r0, #128	; 0x80
10006c5e:	03c0      	lsls	r0, r0, #15
10006c60:	4205      	tst	r5, r0
10006c62:	d009      	beq.n	10006c78 <__aeabi_fmul+0x1e0>
10006c64:	4643      	mov	r3, r8
10006c66:	4203      	tst	r3, r0
10006c68:	d106      	bne.n	10006c78 <__aeabi_fmul+0x1e0>
10006c6a:	4645      	mov	r5, r8
10006c6c:	4305      	orrs	r5, r0
10006c6e:	026d      	lsls	r5, r5, #9
10006c70:	0a6d      	lsrs	r5, r5, #9
10006c72:	464c      	mov	r4, r9
10006c74:	23ff      	movs	r3, #255	; 0xff
10006c76:	e756      	b.n	10006b26 <__aeabi_fmul+0x8e>
10006c78:	4305      	orrs	r5, r0
10006c7a:	026d      	lsls	r5, r5, #9
10006c7c:	0a6d      	lsrs	r5, r5, #9
10006c7e:	23ff      	movs	r3, #255	; 0xff
10006c80:	e751      	b.n	10006b26 <__aeabi_fmul+0x8e>
10006c82:	2401      	movs	r4, #1
10006c84:	01ad      	lsls	r5, r5, #6
10006c86:	0a6d      	lsrs	r5, r5, #9
10006c88:	b2db      	uxtb	r3, r3
10006c8a:	4014      	ands	r4, r2
10006c8c:	e74b      	b.n	10006b26 <__aeabi_fmul+0x8e>
10006c8e:	237e      	movs	r3, #126	; 0x7e
10006c90:	425b      	negs	r3, r3
10006c92:	1a1b      	subs	r3, r3, r0
10006c94:	2b1b      	cmp	r3, #27
10006c96:	dd07      	ble.n	10006ca8 <__aeabi_fmul+0x210>
10006c98:	2401      	movs	r4, #1
10006c9a:	2300      	movs	r3, #0
10006c9c:	4014      	ands	r4, r2
10006c9e:	2500      	movs	r5, #0
10006ca0:	e741      	b.n	10006b26 <__aeabi_fmul+0x8e>
10006ca2:	1c08      	adds	r0, r1, #0
10006ca4:	465a      	mov	r2, fp
10006ca6:	e7c1      	b.n	10006c2c <__aeabi_fmul+0x194>
10006ca8:	309e      	adds	r0, #158	; 0x9e
10006caa:	1c29      	adds	r1, r5, #0
10006cac:	4085      	lsls	r5, r0
10006cae:	40d9      	lsrs	r1, r3
10006cb0:	1e68      	subs	r0, r5, #1
10006cb2:	4185      	sbcs	r5, r0
10006cb4:	430d      	orrs	r5, r1
10006cb6:	076b      	lsls	r3, r5, #29
10006cb8:	d004      	beq.n	10006cc4 <__aeabi_fmul+0x22c>
10006cba:	230f      	movs	r3, #15
10006cbc:	402b      	ands	r3, r5
10006cbe:	2b04      	cmp	r3, #4
10006cc0:	d000      	beq.n	10006cc4 <__aeabi_fmul+0x22c>
10006cc2:	3504      	adds	r5, #4
10006cc4:	016b      	lsls	r3, r5, #5
10006cc6:	d504      	bpl.n	10006cd2 <__aeabi_fmul+0x23a>
10006cc8:	2401      	movs	r4, #1
10006cca:	2301      	movs	r3, #1
10006ccc:	4014      	ands	r4, r2
10006cce:	2500      	movs	r5, #0
10006cd0:	e729      	b.n	10006b26 <__aeabi_fmul+0x8e>
10006cd2:	2401      	movs	r4, #1
10006cd4:	01ad      	lsls	r5, r5, #6
10006cd6:	0a6d      	lsrs	r5, r5, #9
10006cd8:	4014      	ands	r4, r2
10006cda:	2300      	movs	r3, #0
10006cdc:	e723      	b.n	10006b26 <__aeabi_fmul+0x8e>
10006cde:	2380      	movs	r3, #128	; 0x80
10006ce0:	03db      	lsls	r3, r3, #15
10006ce2:	431d      	orrs	r5, r3
10006ce4:	2401      	movs	r4, #1
10006ce6:	465b      	mov	r3, fp
10006ce8:	026d      	lsls	r5, r5, #9
10006cea:	4023      	ands	r3, r4
10006cec:	1c1c      	adds	r4, r3, #0
10006cee:	0a6d      	lsrs	r5, r5, #9
10006cf0:	23ff      	movs	r3, #255	; 0xff
10006cf2:	e718      	b.n	10006b26 <__aeabi_fmul+0x8e>
10006cf4:	1000b7a0 	.word	0x1000b7a0
10006cf8:	f7ffffff 	.word	0xf7ffffff

10006cfc <__aeabi_fsub>:
10006cfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10006cfe:	004a      	lsls	r2, r1, #1
10006d00:	0243      	lsls	r3, r0, #9
10006d02:	0044      	lsls	r4, r0, #1
10006d04:	024d      	lsls	r5, r1, #9
10006d06:	0fc0      	lsrs	r0, r0, #31
10006d08:	0e24      	lsrs	r4, r4, #24
10006d0a:	1c06      	adds	r6, r0, #0
10006d0c:	099b      	lsrs	r3, r3, #6
10006d0e:	0e12      	lsrs	r2, r2, #24
10006d10:	0fc9      	lsrs	r1, r1, #31
10006d12:	09ad      	lsrs	r5, r5, #6
10006d14:	2aff      	cmp	r2, #255	; 0xff
10006d16:	d100      	bne.n	10006d1a <__aeabi_fsub+0x1e>
10006d18:	e075      	b.n	10006e06 <__aeabi_fsub+0x10a>
10006d1a:	2701      	movs	r7, #1
10006d1c:	4079      	eors	r1, r7
10006d1e:	4288      	cmp	r0, r1
10006d20:	d050      	beq.n	10006dc4 <__aeabi_fsub+0xc8>
10006d22:	1aa0      	subs	r0, r4, r2
10006d24:	2800      	cmp	r0, #0
10006d26:	dc00      	bgt.n	10006d2a <__aeabi_fsub+0x2e>
10006d28:	e08f      	b.n	10006e4a <__aeabi_fsub+0x14e>
10006d2a:	2a00      	cmp	r2, #0
10006d2c:	d11e      	bne.n	10006d6c <__aeabi_fsub+0x70>
10006d2e:	2d00      	cmp	r5, #0
10006d30:	d000      	beq.n	10006d34 <__aeabi_fsub+0x38>
10006d32:	e075      	b.n	10006e20 <__aeabi_fsub+0x124>
10006d34:	075a      	lsls	r2, r3, #29
10006d36:	d004      	beq.n	10006d42 <__aeabi_fsub+0x46>
10006d38:	220f      	movs	r2, #15
10006d3a:	401a      	ands	r2, r3
10006d3c:	2a04      	cmp	r2, #4
10006d3e:	d000      	beq.n	10006d42 <__aeabi_fsub+0x46>
10006d40:	3304      	adds	r3, #4
10006d42:	2280      	movs	r2, #128	; 0x80
10006d44:	2001      	movs	r0, #1
10006d46:	04d2      	lsls	r2, r2, #19
10006d48:	401a      	ands	r2, r3
10006d4a:	4030      	ands	r0, r6
10006d4c:	2a00      	cmp	r2, #0
10006d4e:	d032      	beq.n	10006db6 <__aeabi_fsub+0xba>
10006d50:	3401      	adds	r4, #1
10006d52:	2cff      	cmp	r4, #255	; 0xff
10006d54:	d100      	bne.n	10006d58 <__aeabi_fsub+0x5c>
10006d56:	e084      	b.n	10006e62 <__aeabi_fsub+0x166>
10006d58:	019b      	lsls	r3, r3, #6
10006d5a:	0a5b      	lsrs	r3, r3, #9
10006d5c:	b2e4      	uxtb	r4, r4
10006d5e:	025b      	lsls	r3, r3, #9
10006d60:	05e4      	lsls	r4, r4, #23
10006d62:	0a5b      	lsrs	r3, r3, #9
10006d64:	4323      	orrs	r3, r4
10006d66:	07c0      	lsls	r0, r0, #31
10006d68:	4318      	orrs	r0, r3
10006d6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10006d6c:	2cff      	cmp	r4, #255	; 0xff
10006d6e:	d0e1      	beq.n	10006d34 <__aeabi_fsub+0x38>
10006d70:	2280      	movs	r2, #128	; 0x80
10006d72:	04d2      	lsls	r2, r2, #19
10006d74:	4315      	orrs	r5, r2
10006d76:	281b      	cmp	r0, #27
10006d78:	dd7a      	ble.n	10006e70 <__aeabi_fsub+0x174>
10006d7a:	2501      	movs	r5, #1
10006d7c:	1b5b      	subs	r3, r3, r5
10006d7e:	015a      	lsls	r2, r3, #5
10006d80:	d55d      	bpl.n	10006e3e <__aeabi_fsub+0x142>
10006d82:	019b      	lsls	r3, r3, #6
10006d84:	099f      	lsrs	r7, r3, #6
10006d86:	1c38      	adds	r0, r7, #0
10006d88:	f001 f8fe 	bl	10007f88 <__clzsi2>
10006d8c:	3805      	subs	r0, #5
10006d8e:	4087      	lsls	r7, r0
10006d90:	4284      	cmp	r4, r0
10006d92:	dc69      	bgt.n	10006e68 <__aeabi_fsub+0x16c>
10006d94:	1b00      	subs	r0, r0, r4
10006d96:	241f      	movs	r4, #31
10006d98:	1c3a      	adds	r2, r7, #0
10006d9a:	1c43      	adds	r3, r0, #1
10006d9c:	1a20      	subs	r0, r4, r0
10006d9e:	40da      	lsrs	r2, r3
10006da0:	4087      	lsls	r7, r0
10006da2:	1c13      	adds	r3, r2, #0
10006da4:	1e7c      	subs	r4, r7, #1
10006da6:	41a7      	sbcs	r7, r4
10006da8:	2400      	movs	r4, #0
10006daa:	433b      	orrs	r3, r7
10006dac:	e7c2      	b.n	10006d34 <__aeabi_fsub+0x38>
10006dae:	1e13      	subs	r3, r2, #0
10006db0:	d145      	bne.n	10006e3e <__aeabi_fsub+0x142>
10006db2:	2300      	movs	r3, #0
10006db4:	2000      	movs	r0, #0
10006db6:	08db      	lsrs	r3, r3, #3
10006db8:	2cff      	cmp	r4, #255	; 0xff
10006dba:	d028      	beq.n	10006e0e <__aeabi_fsub+0x112>
10006dbc:	025b      	lsls	r3, r3, #9
10006dbe:	0a5b      	lsrs	r3, r3, #9
10006dc0:	b2e4      	uxtb	r4, r4
10006dc2:	e7cc      	b.n	10006d5e <__aeabi_fsub+0x62>
10006dc4:	1aa1      	subs	r1, r4, r2
10006dc6:	2900      	cmp	r1, #0
10006dc8:	dd5b      	ble.n	10006e82 <__aeabi_fsub+0x186>
10006dca:	2a00      	cmp	r2, #0
10006dcc:	d02e      	beq.n	10006e2c <__aeabi_fsub+0x130>
10006dce:	2cff      	cmp	r4, #255	; 0xff
10006dd0:	d0b0      	beq.n	10006d34 <__aeabi_fsub+0x38>
10006dd2:	2280      	movs	r2, #128	; 0x80
10006dd4:	04d2      	lsls	r2, r2, #19
10006dd6:	4315      	orrs	r5, r2
10006dd8:	291b      	cmp	r1, #27
10006dda:	dc74      	bgt.n	10006ec6 <__aeabi_fsub+0x1ca>
10006ddc:	1c2f      	adds	r7, r5, #0
10006dde:	2220      	movs	r2, #32
10006de0:	40cf      	lsrs	r7, r1
10006de2:	1a51      	subs	r1, r2, r1
10006de4:	408d      	lsls	r5, r1
10006de6:	1e69      	subs	r1, r5, #1
10006de8:	418d      	sbcs	r5, r1
10006dea:	433d      	orrs	r5, r7
10006dec:	195b      	adds	r3, r3, r5
10006dee:	015a      	lsls	r2, r3, #5
10006df0:	d525      	bpl.n	10006e3e <__aeabi_fsub+0x142>
10006df2:	3401      	adds	r4, #1
10006df4:	2cff      	cmp	r4, #255	; 0xff
10006df6:	d074      	beq.n	10006ee2 <__aeabi_fsub+0x1e6>
10006df8:	2101      	movs	r1, #1
10006dfa:	4a7e      	ldr	r2, [pc, #504]	; (10006ff4 <__aeabi_fsub+0x2f8>)
10006dfc:	4019      	ands	r1, r3
10006dfe:	4013      	ands	r3, r2
10006e00:	085b      	lsrs	r3, r3, #1
10006e02:	430b      	orrs	r3, r1
10006e04:	e796      	b.n	10006d34 <__aeabi_fsub+0x38>
10006e06:	2d00      	cmp	r5, #0
10006e08:	d000      	beq.n	10006e0c <__aeabi_fsub+0x110>
10006e0a:	e788      	b.n	10006d1e <__aeabi_fsub+0x22>
10006e0c:	e785      	b.n	10006d1a <__aeabi_fsub+0x1e>
10006e0e:	2b00      	cmp	r3, #0
10006e10:	d027      	beq.n	10006e62 <__aeabi_fsub+0x166>
10006e12:	2280      	movs	r2, #128	; 0x80
10006e14:	03d2      	lsls	r2, r2, #15
10006e16:	4313      	orrs	r3, r2
10006e18:	025b      	lsls	r3, r3, #9
10006e1a:	0a5b      	lsrs	r3, r3, #9
10006e1c:	24ff      	movs	r4, #255	; 0xff
10006e1e:	e79e      	b.n	10006d5e <__aeabi_fsub+0x62>
10006e20:	3801      	subs	r0, #1
10006e22:	2800      	cmp	r0, #0
10006e24:	d0aa      	beq.n	10006d7c <__aeabi_fsub+0x80>
10006e26:	2cff      	cmp	r4, #255	; 0xff
10006e28:	d1a5      	bne.n	10006d76 <__aeabi_fsub+0x7a>
10006e2a:	e783      	b.n	10006d34 <__aeabi_fsub+0x38>
10006e2c:	2d00      	cmp	r5, #0
10006e2e:	d100      	bne.n	10006e32 <__aeabi_fsub+0x136>
10006e30:	e780      	b.n	10006d34 <__aeabi_fsub+0x38>
10006e32:	3901      	subs	r1, #1
10006e34:	2900      	cmp	r1, #0
10006e36:	d0d9      	beq.n	10006dec <__aeabi_fsub+0xf0>
10006e38:	2cff      	cmp	r4, #255	; 0xff
10006e3a:	d1cd      	bne.n	10006dd8 <__aeabi_fsub+0xdc>
10006e3c:	e77a      	b.n	10006d34 <__aeabi_fsub+0x38>
10006e3e:	075a      	lsls	r2, r3, #29
10006e40:	d000      	beq.n	10006e44 <__aeabi_fsub+0x148>
10006e42:	e779      	b.n	10006d38 <__aeabi_fsub+0x3c>
10006e44:	2001      	movs	r0, #1
10006e46:	4030      	ands	r0, r6
10006e48:	e7b5      	b.n	10006db6 <__aeabi_fsub+0xba>
10006e4a:	2800      	cmp	r0, #0
10006e4c:	d125      	bne.n	10006e9a <__aeabi_fsub+0x19e>
10006e4e:	1c62      	adds	r2, r4, #1
10006e50:	b2d2      	uxtb	r2, r2
10006e52:	2a01      	cmp	r2, #1
10006e54:	dd55      	ble.n	10006f02 <__aeabi_fsub+0x206>
10006e56:	1b5f      	subs	r7, r3, r5
10006e58:	017a      	lsls	r2, r7, #5
10006e5a:	d52d      	bpl.n	10006eb8 <__aeabi_fsub+0x1bc>
10006e5c:	1aef      	subs	r7, r5, r3
10006e5e:	1c0e      	adds	r6, r1, #0
10006e60:	e791      	b.n	10006d86 <__aeabi_fsub+0x8a>
10006e62:	24ff      	movs	r4, #255	; 0xff
10006e64:	2300      	movs	r3, #0
10006e66:	e77a      	b.n	10006d5e <__aeabi_fsub+0x62>
10006e68:	4b62      	ldr	r3, [pc, #392]	; (10006ff4 <__aeabi_fsub+0x2f8>)
10006e6a:	1a24      	subs	r4, r4, r0
10006e6c:	403b      	ands	r3, r7
10006e6e:	e761      	b.n	10006d34 <__aeabi_fsub+0x38>
10006e70:	1c29      	adds	r1, r5, #0
10006e72:	2220      	movs	r2, #32
10006e74:	40c1      	lsrs	r1, r0
10006e76:	1a10      	subs	r0, r2, r0
10006e78:	4085      	lsls	r5, r0
10006e7a:	1e68      	subs	r0, r5, #1
10006e7c:	4185      	sbcs	r5, r0
10006e7e:	430d      	orrs	r5, r1
10006e80:	e77c      	b.n	10006d7c <__aeabi_fsub+0x80>
10006e82:	2900      	cmp	r1, #0
10006e84:	d146      	bne.n	10006f14 <__aeabi_fsub+0x218>
10006e86:	1c62      	adds	r2, r4, #1
10006e88:	b2d1      	uxtb	r1, r2
10006e8a:	2901      	cmp	r1, #1
10006e8c:	dd2b      	ble.n	10006ee6 <__aeabi_fsub+0x1ea>
10006e8e:	2aff      	cmp	r2, #255	; 0xff
10006e90:	d026      	beq.n	10006ee0 <__aeabi_fsub+0x1e4>
10006e92:	18eb      	adds	r3, r5, r3
10006e94:	085b      	lsrs	r3, r3, #1
10006e96:	1c14      	adds	r4, r2, #0
10006e98:	e74c      	b.n	10006d34 <__aeabi_fsub+0x38>
10006e9a:	2c00      	cmp	r4, #0
10006e9c:	d015      	beq.n	10006eca <__aeabi_fsub+0x1ce>
10006e9e:	2aff      	cmp	r2, #255	; 0xff
10006ea0:	d01a      	beq.n	10006ed8 <__aeabi_fsub+0x1dc>
10006ea2:	2480      	movs	r4, #128	; 0x80
10006ea4:	04e4      	lsls	r4, r4, #19
10006ea6:	4240      	negs	r0, r0
10006ea8:	4323      	orrs	r3, r4
10006eaa:	281b      	cmp	r0, #27
10006eac:	dd4d      	ble.n	10006f4a <__aeabi_fsub+0x24e>
10006eae:	2301      	movs	r3, #1
10006eb0:	1aeb      	subs	r3, r5, r3
10006eb2:	1c14      	adds	r4, r2, #0
10006eb4:	1c0e      	adds	r6, r1, #0
10006eb6:	e762      	b.n	10006d7e <__aeabi_fsub+0x82>
10006eb8:	2f00      	cmp	r7, #0
10006eba:	d000      	beq.n	10006ebe <__aeabi_fsub+0x1c2>
10006ebc:	e763      	b.n	10006d86 <__aeabi_fsub+0x8a>
10006ebe:	2300      	movs	r3, #0
10006ec0:	2000      	movs	r0, #0
10006ec2:	2400      	movs	r4, #0
10006ec4:	e777      	b.n	10006db6 <__aeabi_fsub+0xba>
10006ec6:	2501      	movs	r5, #1
10006ec8:	e790      	b.n	10006dec <__aeabi_fsub+0xf0>
10006eca:	2b00      	cmp	r3, #0
10006ecc:	d039      	beq.n	10006f42 <__aeabi_fsub+0x246>
10006ece:	43c0      	mvns	r0, r0
10006ed0:	2800      	cmp	r0, #0
10006ed2:	d0ed      	beq.n	10006eb0 <__aeabi_fsub+0x1b4>
10006ed4:	2aff      	cmp	r2, #255	; 0xff
10006ed6:	d1e8      	bne.n	10006eaa <__aeabi_fsub+0x1ae>
10006ed8:	1c2b      	adds	r3, r5, #0
10006eda:	24ff      	movs	r4, #255	; 0xff
10006edc:	1c0e      	adds	r6, r1, #0
10006ede:	e729      	b.n	10006d34 <__aeabi_fsub+0x38>
10006ee0:	24ff      	movs	r4, #255	; 0xff
10006ee2:	2300      	movs	r3, #0
10006ee4:	e767      	b.n	10006db6 <__aeabi_fsub+0xba>
10006ee6:	2c00      	cmp	r4, #0
10006ee8:	d15a      	bne.n	10006fa0 <__aeabi_fsub+0x2a4>
10006eea:	2b00      	cmp	r3, #0
10006eec:	d07f      	beq.n	10006fee <__aeabi_fsub+0x2f2>
10006eee:	2d00      	cmp	r5, #0
10006ef0:	d100      	bne.n	10006ef4 <__aeabi_fsub+0x1f8>
10006ef2:	e71f      	b.n	10006d34 <__aeabi_fsub+0x38>
10006ef4:	195b      	adds	r3, r3, r5
10006ef6:	015a      	lsls	r2, r3, #5
10006ef8:	d5a1      	bpl.n	10006e3e <__aeabi_fsub+0x142>
10006efa:	4a3e      	ldr	r2, [pc, #248]	; (10006ff4 <__aeabi_fsub+0x2f8>)
10006efc:	3401      	adds	r4, #1
10006efe:	4013      	ands	r3, r2
10006f00:	e718      	b.n	10006d34 <__aeabi_fsub+0x38>
10006f02:	2c00      	cmp	r4, #0
10006f04:	d115      	bne.n	10006f32 <__aeabi_fsub+0x236>
10006f06:	2b00      	cmp	r3, #0
10006f08:	d12f      	bne.n	10006f6a <__aeabi_fsub+0x26e>
10006f0a:	2d00      	cmp	r5, #0
10006f0c:	d05e      	beq.n	10006fcc <__aeabi_fsub+0x2d0>
10006f0e:	1c2b      	adds	r3, r5, #0
10006f10:	1c0e      	adds	r6, r1, #0
10006f12:	e70f      	b.n	10006d34 <__aeabi_fsub+0x38>
10006f14:	2c00      	cmp	r4, #0
10006f16:	d121      	bne.n	10006f5c <__aeabi_fsub+0x260>
10006f18:	2b00      	cmp	r3, #0
10006f1a:	d054      	beq.n	10006fc6 <__aeabi_fsub+0x2ca>
10006f1c:	43c9      	mvns	r1, r1
10006f1e:	2900      	cmp	r1, #0
10006f20:	d004      	beq.n	10006f2c <__aeabi_fsub+0x230>
10006f22:	2aff      	cmp	r2, #255	; 0xff
10006f24:	d04c      	beq.n	10006fc0 <__aeabi_fsub+0x2c4>
10006f26:	291b      	cmp	r1, #27
10006f28:	dd58      	ble.n	10006fdc <__aeabi_fsub+0x2e0>
10006f2a:	2301      	movs	r3, #1
10006f2c:	195b      	adds	r3, r3, r5
10006f2e:	1c14      	adds	r4, r2, #0
10006f30:	e75d      	b.n	10006dee <__aeabi_fsub+0xf2>
10006f32:	2b00      	cmp	r3, #0
10006f34:	d123      	bne.n	10006f7e <__aeabi_fsub+0x282>
10006f36:	2d00      	cmp	r5, #0
10006f38:	d04b      	beq.n	10006fd2 <__aeabi_fsub+0x2d6>
10006f3a:	1c2b      	adds	r3, r5, #0
10006f3c:	1c0e      	adds	r6, r1, #0
10006f3e:	24ff      	movs	r4, #255	; 0xff
10006f40:	e6f8      	b.n	10006d34 <__aeabi_fsub+0x38>
10006f42:	1c2b      	adds	r3, r5, #0
10006f44:	1c14      	adds	r4, r2, #0
10006f46:	1c0e      	adds	r6, r1, #0
10006f48:	e6f4      	b.n	10006d34 <__aeabi_fsub+0x38>
10006f4a:	1c1e      	adds	r6, r3, #0
10006f4c:	2420      	movs	r4, #32
10006f4e:	40c6      	lsrs	r6, r0
10006f50:	1a20      	subs	r0, r4, r0
10006f52:	4083      	lsls	r3, r0
10006f54:	1e58      	subs	r0, r3, #1
10006f56:	4183      	sbcs	r3, r0
10006f58:	4333      	orrs	r3, r6
10006f5a:	e7a9      	b.n	10006eb0 <__aeabi_fsub+0x1b4>
10006f5c:	2aff      	cmp	r2, #255	; 0xff
10006f5e:	d02f      	beq.n	10006fc0 <__aeabi_fsub+0x2c4>
10006f60:	2480      	movs	r4, #128	; 0x80
10006f62:	04e4      	lsls	r4, r4, #19
10006f64:	4249      	negs	r1, r1
10006f66:	4323      	orrs	r3, r4
10006f68:	e7dd      	b.n	10006f26 <__aeabi_fsub+0x22a>
10006f6a:	2d00      	cmp	r5, #0
10006f6c:	d100      	bne.n	10006f70 <__aeabi_fsub+0x274>
10006f6e:	e6e1      	b.n	10006d34 <__aeabi_fsub+0x38>
10006f70:	1b5a      	subs	r2, r3, r5
10006f72:	0150      	lsls	r0, r2, #5
10006f74:	d400      	bmi.n	10006f78 <__aeabi_fsub+0x27c>
10006f76:	e71a      	b.n	10006dae <__aeabi_fsub+0xb2>
10006f78:	1aeb      	subs	r3, r5, r3
10006f7a:	1c0e      	adds	r6, r1, #0
10006f7c:	e6da      	b.n	10006d34 <__aeabi_fsub+0x38>
10006f7e:	24ff      	movs	r4, #255	; 0xff
10006f80:	2d00      	cmp	r5, #0
10006f82:	d100      	bne.n	10006f86 <__aeabi_fsub+0x28a>
10006f84:	e6d6      	b.n	10006d34 <__aeabi_fsub+0x38>
10006f86:	2280      	movs	r2, #128	; 0x80
10006f88:	08db      	lsrs	r3, r3, #3
10006f8a:	03d2      	lsls	r2, r2, #15
10006f8c:	4213      	tst	r3, r2
10006f8e:	d004      	beq.n	10006f9a <__aeabi_fsub+0x29e>
10006f90:	08ed      	lsrs	r5, r5, #3
10006f92:	4215      	tst	r5, r2
10006f94:	d101      	bne.n	10006f9a <__aeabi_fsub+0x29e>
10006f96:	1c2b      	adds	r3, r5, #0
10006f98:	1c0e      	adds	r6, r1, #0
10006f9a:	00db      	lsls	r3, r3, #3
10006f9c:	24ff      	movs	r4, #255	; 0xff
10006f9e:	e6c9      	b.n	10006d34 <__aeabi_fsub+0x38>
10006fa0:	2b00      	cmp	r3, #0
10006fa2:	d00d      	beq.n	10006fc0 <__aeabi_fsub+0x2c4>
10006fa4:	24ff      	movs	r4, #255	; 0xff
10006fa6:	2d00      	cmp	r5, #0
10006fa8:	d100      	bne.n	10006fac <__aeabi_fsub+0x2b0>
10006faa:	e6c3      	b.n	10006d34 <__aeabi_fsub+0x38>
10006fac:	2280      	movs	r2, #128	; 0x80
10006fae:	08db      	lsrs	r3, r3, #3
10006fb0:	03d2      	lsls	r2, r2, #15
10006fb2:	4213      	tst	r3, r2
10006fb4:	d0f1      	beq.n	10006f9a <__aeabi_fsub+0x29e>
10006fb6:	08ed      	lsrs	r5, r5, #3
10006fb8:	4215      	tst	r5, r2
10006fba:	d1ee      	bne.n	10006f9a <__aeabi_fsub+0x29e>
10006fbc:	1c2b      	adds	r3, r5, #0
10006fbe:	e7ec      	b.n	10006f9a <__aeabi_fsub+0x29e>
10006fc0:	1c2b      	adds	r3, r5, #0
10006fc2:	24ff      	movs	r4, #255	; 0xff
10006fc4:	e6b6      	b.n	10006d34 <__aeabi_fsub+0x38>
10006fc6:	1c2b      	adds	r3, r5, #0
10006fc8:	1c14      	adds	r4, r2, #0
10006fca:	e6b3      	b.n	10006d34 <__aeabi_fsub+0x38>
10006fcc:	1c23      	adds	r3, r4, #0
10006fce:	2000      	movs	r0, #0
10006fd0:	e6f1      	b.n	10006db6 <__aeabi_fsub+0xba>
10006fd2:	2380      	movs	r3, #128	; 0x80
10006fd4:	2000      	movs	r0, #0
10006fd6:	049b      	lsls	r3, r3, #18
10006fd8:	24ff      	movs	r4, #255	; 0xff
10006fda:	e6ec      	b.n	10006db6 <__aeabi_fsub+0xba>
10006fdc:	1c1f      	adds	r7, r3, #0
10006fde:	2420      	movs	r4, #32
10006fe0:	40cf      	lsrs	r7, r1
10006fe2:	1a61      	subs	r1, r4, r1
10006fe4:	408b      	lsls	r3, r1
10006fe6:	1e59      	subs	r1, r3, #1
10006fe8:	418b      	sbcs	r3, r1
10006fea:	433b      	orrs	r3, r7
10006fec:	e79e      	b.n	10006f2c <__aeabi_fsub+0x230>
10006fee:	1c2b      	adds	r3, r5, #0
10006ff0:	e6a0      	b.n	10006d34 <__aeabi_fsub+0x38>
10006ff2:	46c0      	nop			; (mov r8, r8)
10006ff4:	fbffffff 	.word	0xfbffffff

10006ff8 <__aeabi_f2iz>:
10006ff8:	0242      	lsls	r2, r0, #9
10006ffa:	0a51      	lsrs	r1, r2, #9
10006ffc:	0042      	lsls	r2, r0, #1
10006ffe:	0fc3      	lsrs	r3, r0, #31
10007000:	0e12      	lsrs	r2, r2, #24
10007002:	2000      	movs	r0, #0
10007004:	2a7e      	cmp	r2, #126	; 0x7e
10007006:	dd0d      	ble.n	10007024 <__aeabi_f2iz+0x2c>
10007008:	2a9d      	cmp	r2, #157	; 0x9d
1000700a:	dc0c      	bgt.n	10007026 <__aeabi_f2iz+0x2e>
1000700c:	2080      	movs	r0, #128	; 0x80
1000700e:	0400      	lsls	r0, r0, #16
10007010:	4301      	orrs	r1, r0
10007012:	2a95      	cmp	r2, #149	; 0x95
10007014:	dc0a      	bgt.n	1000702c <__aeabi_f2iz+0x34>
10007016:	2096      	movs	r0, #150	; 0x96
10007018:	1a82      	subs	r2, r0, r2
1000701a:	40d1      	lsrs	r1, r2
1000701c:	1c0a      	adds	r2, r1, #0
1000701e:	4258      	negs	r0, r3
10007020:	4042      	eors	r2, r0
10007022:	18d0      	adds	r0, r2, r3
10007024:	4770      	bx	lr
10007026:	4a03      	ldr	r2, [pc, #12]	; (10007034 <__aeabi_f2iz+0x3c>)
10007028:	1898      	adds	r0, r3, r2
1000702a:	e7fb      	b.n	10007024 <__aeabi_f2iz+0x2c>
1000702c:	3a96      	subs	r2, #150	; 0x96
1000702e:	4091      	lsls	r1, r2
10007030:	1c0a      	adds	r2, r1, #0
10007032:	e7f4      	b.n	1000701e <__aeabi_f2iz+0x26>
10007034:	7fffffff 	.word	0x7fffffff

10007038 <__aeabi_i2f>:
10007038:	b570      	push	{r4, r5, r6, lr}
1000703a:	1e04      	subs	r4, r0, #0
1000703c:	d039      	beq.n	100070b2 <__aeabi_i2f+0x7a>
1000703e:	0fc5      	lsrs	r5, r0, #31
10007040:	d000      	beq.n	10007044 <__aeabi_i2f+0xc>
10007042:	4244      	negs	r4, r0
10007044:	1c20      	adds	r0, r4, #0
10007046:	f000 ff9f 	bl	10007f88 <__clzsi2>
1000704a:	239e      	movs	r3, #158	; 0x9e
1000704c:	1c26      	adds	r6, r4, #0
1000704e:	1a1b      	subs	r3, r3, r0
10007050:	2b96      	cmp	r3, #150	; 0x96
10007052:	dc07      	bgt.n	10007064 <__aeabi_i2f+0x2c>
10007054:	2808      	cmp	r0, #8
10007056:	dd01      	ble.n	1000705c <__aeabi_i2f+0x24>
10007058:	3808      	subs	r0, #8
1000705a:	4084      	lsls	r4, r0
1000705c:	0264      	lsls	r4, r4, #9
1000705e:	0a64      	lsrs	r4, r4, #9
10007060:	b2d8      	uxtb	r0, r3
10007062:	e01e      	b.n	100070a2 <__aeabi_i2f+0x6a>
10007064:	2b99      	cmp	r3, #153	; 0x99
10007066:	dd0a      	ble.n	1000707e <__aeabi_i2f+0x46>
10007068:	2205      	movs	r2, #5
1000706a:	1c21      	adds	r1, r4, #0
1000706c:	1a12      	subs	r2, r2, r0
1000706e:	40d1      	lsrs	r1, r2
10007070:	1c0a      	adds	r2, r1, #0
10007072:	1c01      	adds	r1, r0, #0
10007074:	311b      	adds	r1, #27
10007076:	408e      	lsls	r6, r1
10007078:	1e71      	subs	r1, r6, #1
1000707a:	418e      	sbcs	r6, r1
1000707c:	4316      	orrs	r6, r2
1000707e:	2805      	cmp	r0, #5
10007080:	dd01      	ble.n	10007086 <__aeabi_i2f+0x4e>
10007082:	1f42      	subs	r2, r0, #5
10007084:	4096      	lsls	r6, r2
10007086:	4c0f      	ldr	r4, [pc, #60]	; (100070c4 <__aeabi_i2f+0x8c>)
10007088:	4034      	ands	r4, r6
1000708a:	0772      	lsls	r2, r6, #29
1000708c:	d004      	beq.n	10007098 <__aeabi_i2f+0x60>
1000708e:	220f      	movs	r2, #15
10007090:	4016      	ands	r6, r2
10007092:	2e04      	cmp	r6, #4
10007094:	d000      	beq.n	10007098 <__aeabi_i2f+0x60>
10007096:	3404      	adds	r4, #4
10007098:	0162      	lsls	r2, r4, #5
1000709a:	d40e      	bmi.n	100070ba <__aeabi_i2f+0x82>
1000709c:	01a4      	lsls	r4, r4, #6
1000709e:	0a64      	lsrs	r4, r4, #9
100070a0:	b2d8      	uxtb	r0, r3
100070a2:	0264      	lsls	r4, r4, #9
100070a4:	05c0      	lsls	r0, r0, #23
100070a6:	0a64      	lsrs	r4, r4, #9
100070a8:	07ed      	lsls	r5, r5, #31
100070aa:	4304      	orrs	r4, r0
100070ac:	432c      	orrs	r4, r5
100070ae:	1c20      	adds	r0, r4, #0
100070b0:	bd70      	pop	{r4, r5, r6, pc}
100070b2:	2500      	movs	r5, #0
100070b4:	2000      	movs	r0, #0
100070b6:	2400      	movs	r4, #0
100070b8:	e7f3      	b.n	100070a2 <__aeabi_i2f+0x6a>
100070ba:	4b02      	ldr	r3, [pc, #8]	; (100070c4 <__aeabi_i2f+0x8c>)
100070bc:	401c      	ands	r4, r3
100070be:	239f      	movs	r3, #159	; 0x9f
100070c0:	1a1b      	subs	r3, r3, r0
100070c2:	e7eb      	b.n	1000709c <__aeabi_i2f+0x64>
100070c4:	fbffffff 	.word	0xfbffffff

100070c8 <__aeabi_ui2f>:
100070c8:	b510      	push	{r4, lr}
100070ca:	1e04      	subs	r4, r0, #0
100070cc:	d035      	beq.n	1000713a <__aeabi_ui2f+0x72>
100070ce:	f000 ff5b 	bl	10007f88 <__clzsi2>
100070d2:	219e      	movs	r1, #158	; 0x9e
100070d4:	1a09      	subs	r1, r1, r0
100070d6:	2996      	cmp	r1, #150	; 0x96
100070d8:	dc09      	bgt.n	100070ee <__aeabi_ui2f+0x26>
100070da:	2808      	cmp	r0, #8
100070dc:	dd30      	ble.n	10007140 <__aeabi_ui2f+0x78>
100070de:	1c02      	adds	r2, r0, #0
100070e0:	1c23      	adds	r3, r4, #0
100070e2:	3a08      	subs	r2, #8
100070e4:	4093      	lsls	r3, r2
100070e6:	025b      	lsls	r3, r3, #9
100070e8:	0a5b      	lsrs	r3, r3, #9
100070ea:	b2c8      	uxtb	r0, r1
100070ec:	e020      	b.n	10007130 <__aeabi_ui2f+0x68>
100070ee:	2999      	cmp	r1, #153	; 0x99
100070f0:	dd0c      	ble.n	1000710c <__aeabi_ui2f+0x44>
100070f2:	2205      	movs	r2, #5
100070f4:	1c23      	adds	r3, r4, #0
100070f6:	1a12      	subs	r2, r2, r0
100070f8:	40d3      	lsrs	r3, r2
100070fa:	1c1a      	adds	r2, r3, #0
100070fc:	1c03      	adds	r3, r0, #0
100070fe:	331b      	adds	r3, #27
10007100:	409c      	lsls	r4, r3
10007102:	1c23      	adds	r3, r4, #0
10007104:	1e5c      	subs	r4, r3, #1
10007106:	41a3      	sbcs	r3, r4
10007108:	4313      	orrs	r3, r2
1000710a:	1c1c      	adds	r4, r3, #0
1000710c:	2805      	cmp	r0, #5
1000710e:	dd01      	ble.n	10007114 <__aeabi_ui2f+0x4c>
10007110:	1f43      	subs	r3, r0, #5
10007112:	409c      	lsls	r4, r3
10007114:	4b0f      	ldr	r3, [pc, #60]	; (10007154 <__aeabi_ui2f+0x8c>)
10007116:	4023      	ands	r3, r4
10007118:	0762      	lsls	r2, r4, #29
1000711a:	d004      	beq.n	10007126 <__aeabi_ui2f+0x5e>
1000711c:	220f      	movs	r2, #15
1000711e:	4014      	ands	r4, r2
10007120:	2c04      	cmp	r4, #4
10007122:	d000      	beq.n	10007126 <__aeabi_ui2f+0x5e>
10007124:	3304      	adds	r3, #4
10007126:	015a      	lsls	r2, r3, #5
10007128:	d40e      	bmi.n	10007148 <__aeabi_ui2f+0x80>
1000712a:	019b      	lsls	r3, r3, #6
1000712c:	0a5b      	lsrs	r3, r3, #9
1000712e:	b2c8      	uxtb	r0, r1
10007130:	025b      	lsls	r3, r3, #9
10007132:	0a5b      	lsrs	r3, r3, #9
10007134:	05c0      	lsls	r0, r0, #23
10007136:	4318      	orrs	r0, r3
10007138:	bd10      	pop	{r4, pc}
1000713a:	2000      	movs	r0, #0
1000713c:	2300      	movs	r3, #0
1000713e:	e7f7      	b.n	10007130 <__aeabi_ui2f+0x68>
10007140:	0263      	lsls	r3, r4, #9
10007142:	0a5b      	lsrs	r3, r3, #9
10007144:	b2c8      	uxtb	r0, r1
10007146:	e7f3      	b.n	10007130 <__aeabi_ui2f+0x68>
10007148:	219f      	movs	r1, #159	; 0x9f
1000714a:	4a02      	ldr	r2, [pc, #8]	; (10007154 <__aeabi_ui2f+0x8c>)
1000714c:	1a09      	subs	r1, r1, r0
1000714e:	4013      	ands	r3, r2
10007150:	e7eb      	b.n	1000712a <__aeabi_ui2f+0x62>
10007152:	46c0      	nop			; (mov r8, r8)
10007154:	fbffffff 	.word	0xfbffffff

10007158 <__aeabi_dadd>:
10007158:	b5f0      	push	{r4, r5, r6, r7, lr}
1000715a:	4645      	mov	r5, r8
1000715c:	4657      	mov	r7, sl
1000715e:	464e      	mov	r6, r9
10007160:	4694      	mov	ip, r2
10007162:	004c      	lsls	r4, r1, #1
10007164:	030a      	lsls	r2, r1, #12
10007166:	0fc9      	lsrs	r1, r1, #31
10007168:	b4e0      	push	{r5, r6, r7}
1000716a:	4688      	mov	r8, r1
1000716c:	1c0e      	adds	r6, r1, #0
1000716e:	0319      	lsls	r1, r3, #12
10007170:	0f47      	lsrs	r7, r0, #29
10007172:	00c5      	lsls	r5, r0, #3
10007174:	0a48      	lsrs	r0, r1, #9
10007176:	4661      	mov	r1, ip
10007178:	0f49      	lsrs	r1, r1, #29
1000717a:	4301      	orrs	r1, r0
1000717c:	4660      	mov	r0, ip
1000717e:	0a52      	lsrs	r2, r2, #9
10007180:	4317      	orrs	r7, r2
10007182:	00c0      	lsls	r0, r0, #3
10007184:	005a      	lsls	r2, r3, #1
10007186:	0d64      	lsrs	r4, r4, #21
10007188:	0d52      	lsrs	r2, r2, #21
1000718a:	0fdb      	lsrs	r3, r3, #31
1000718c:	4684      	mov	ip, r0
1000718e:	4598      	cmp	r8, r3
10007190:	d100      	bne.n	10007194 <__aeabi_dadd+0x3c>
10007192:	e0a7      	b.n	100072e4 <__aeabi_dadd+0x18c>
10007194:	1aa0      	subs	r0, r4, r2
10007196:	2800      	cmp	r0, #0
10007198:	dc00      	bgt.n	1000719c <__aeabi_dadd+0x44>
1000719a:	e101      	b.n	100073a0 <__aeabi_dadd+0x248>
1000719c:	2a00      	cmp	r2, #0
1000719e:	d13d      	bne.n	1000721c <__aeabi_dadd+0xc4>
100071a0:	4663      	mov	r3, ip
100071a2:	430b      	orrs	r3, r1
100071a4:	d000      	beq.n	100071a8 <__aeabi_dadd+0x50>
100071a6:	e0d4      	b.n	10007352 <__aeabi_dadd+0x1fa>
100071a8:	076b      	lsls	r3, r5, #29
100071aa:	d100      	bne.n	100071ae <__aeabi_dadd+0x56>
100071ac:	e088      	b.n	100072c0 <__aeabi_dadd+0x168>
100071ae:	230f      	movs	r3, #15
100071b0:	402b      	ands	r3, r5
100071b2:	2b04      	cmp	r3, #4
100071b4:	d100      	bne.n	100071b8 <__aeabi_dadd+0x60>
100071b6:	e083      	b.n	100072c0 <__aeabi_dadd+0x168>
100071b8:	1d2a      	adds	r2, r5, #4
100071ba:	42aa      	cmp	r2, r5
100071bc:	41ad      	sbcs	r5, r5
100071be:	2380      	movs	r3, #128	; 0x80
100071c0:	426d      	negs	r5, r5
100071c2:	197f      	adds	r7, r7, r5
100071c4:	041b      	lsls	r3, r3, #16
100071c6:	403b      	ands	r3, r7
100071c8:	4646      	mov	r6, r8
100071ca:	1c15      	adds	r5, r2, #0
100071cc:	2b00      	cmp	r3, #0
100071ce:	d100      	bne.n	100071d2 <__aeabi_dadd+0x7a>
100071d0:	e07c      	b.n	100072cc <__aeabi_dadd+0x174>
100071d2:	4bcc      	ldr	r3, [pc, #816]	; (10007504 <__aeabi_dadd+0x3ac>)
100071d4:	3401      	adds	r4, #1
100071d6:	429c      	cmp	r4, r3
100071d8:	d100      	bne.n	100071dc <__aeabi_dadd+0x84>
100071da:	e0fd      	b.n	100073d8 <__aeabi_dadd+0x280>
100071dc:	1c3a      	adds	r2, r7, #0
100071de:	4bca      	ldr	r3, [pc, #808]	; (10007508 <__aeabi_dadd+0x3b0>)
100071e0:	08ed      	lsrs	r5, r5, #3
100071e2:	401a      	ands	r2, r3
100071e4:	0750      	lsls	r0, r2, #29
100071e6:	0564      	lsls	r4, r4, #21
100071e8:	0252      	lsls	r2, r2, #9
100071ea:	4305      	orrs	r5, r0
100071ec:	0b12      	lsrs	r2, r2, #12
100071ee:	0d64      	lsrs	r4, r4, #21
100071f0:	2100      	movs	r1, #0
100071f2:	0312      	lsls	r2, r2, #12
100071f4:	0d0b      	lsrs	r3, r1, #20
100071f6:	051b      	lsls	r3, r3, #20
100071f8:	0564      	lsls	r4, r4, #21
100071fa:	0b12      	lsrs	r2, r2, #12
100071fc:	431a      	orrs	r2, r3
100071fe:	0863      	lsrs	r3, r4, #1
10007200:	4cc2      	ldr	r4, [pc, #776]	; (1000750c <__aeabi_dadd+0x3b4>)
10007202:	07f6      	lsls	r6, r6, #31
10007204:	4014      	ands	r4, r2
10007206:	431c      	orrs	r4, r3
10007208:	0064      	lsls	r4, r4, #1
1000720a:	0864      	lsrs	r4, r4, #1
1000720c:	4334      	orrs	r4, r6
1000720e:	1c28      	adds	r0, r5, #0
10007210:	1c21      	adds	r1, r4, #0
10007212:	bc1c      	pop	{r2, r3, r4}
10007214:	4690      	mov	r8, r2
10007216:	4699      	mov	r9, r3
10007218:	46a2      	mov	sl, r4
1000721a:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000721c:	4bb9      	ldr	r3, [pc, #740]	; (10007504 <__aeabi_dadd+0x3ac>)
1000721e:	429c      	cmp	r4, r3
10007220:	d0c2      	beq.n	100071a8 <__aeabi_dadd+0x50>
10007222:	2380      	movs	r3, #128	; 0x80
10007224:	041b      	lsls	r3, r3, #16
10007226:	4319      	orrs	r1, r3
10007228:	2838      	cmp	r0, #56	; 0x38
1000722a:	dd00      	ble.n	1000722e <__aeabi_dadd+0xd6>
1000722c:	e0ec      	b.n	10007408 <__aeabi_dadd+0x2b0>
1000722e:	281f      	cmp	r0, #31
10007230:	dd00      	ble.n	10007234 <__aeabi_dadd+0xdc>
10007232:	e121      	b.n	10007478 <__aeabi_dadd+0x320>
10007234:	2220      	movs	r2, #32
10007236:	1c0e      	adds	r6, r1, #0
10007238:	4663      	mov	r3, ip
1000723a:	1a12      	subs	r2, r2, r0
1000723c:	4096      	lsls	r6, r2
1000723e:	40c3      	lsrs	r3, r0
10007240:	4333      	orrs	r3, r6
10007242:	4666      	mov	r6, ip
10007244:	4096      	lsls	r6, r2
10007246:	1c32      	adds	r2, r6, #0
10007248:	1e56      	subs	r6, r2, #1
1000724a:	41b2      	sbcs	r2, r6
1000724c:	4313      	orrs	r3, r2
1000724e:	1c0a      	adds	r2, r1, #0
10007250:	40c2      	lsrs	r2, r0
10007252:	1aeb      	subs	r3, r5, r3
10007254:	429d      	cmp	r5, r3
10007256:	41b6      	sbcs	r6, r6
10007258:	1c1d      	adds	r5, r3, #0
1000725a:	1aba      	subs	r2, r7, r2
1000725c:	4276      	negs	r6, r6
1000725e:	1b97      	subs	r7, r2, r6
10007260:	023b      	lsls	r3, r7, #8
10007262:	d400      	bmi.n	10007266 <__aeabi_dadd+0x10e>
10007264:	e097      	b.n	10007396 <__aeabi_dadd+0x23e>
10007266:	027a      	lsls	r2, r7, #9
10007268:	0a56      	lsrs	r6, r2, #9
1000726a:	2e00      	cmp	r6, #0
1000726c:	d100      	bne.n	10007270 <__aeabi_dadd+0x118>
1000726e:	e0b6      	b.n	100073de <__aeabi_dadd+0x286>
10007270:	1c30      	adds	r0, r6, #0
10007272:	f000 fe89 	bl	10007f88 <__clzsi2>
10007276:	1c03      	adds	r3, r0, #0
10007278:	3b08      	subs	r3, #8
1000727a:	2b1f      	cmp	r3, #31
1000727c:	dd00      	ble.n	10007280 <__aeabi_dadd+0x128>
1000727e:	e0b7      	b.n	100073f0 <__aeabi_dadd+0x298>
10007280:	409e      	lsls	r6, r3
10007282:	1c37      	adds	r7, r6, #0
10007284:	2628      	movs	r6, #40	; 0x28
10007286:	1c2a      	adds	r2, r5, #0
10007288:	1a36      	subs	r6, r6, r0
1000728a:	40f2      	lsrs	r2, r6
1000728c:	1c16      	adds	r6, r2, #0
1000728e:	409d      	lsls	r5, r3
10007290:	433e      	orrs	r6, r7
10007292:	429c      	cmp	r4, r3
10007294:	dd00      	ble.n	10007298 <__aeabi_dadd+0x140>
10007296:	e0b2      	b.n	100073fe <__aeabi_dadd+0x2a6>
10007298:	1b1c      	subs	r4, r3, r4
1000729a:	1c62      	adds	r2, r4, #1
1000729c:	2a1f      	cmp	r2, #31
1000729e:	dd00      	ble.n	100072a2 <__aeabi_dadd+0x14a>
100072a0:	e0d8      	b.n	10007454 <__aeabi_dadd+0x2fc>
100072a2:	231f      	movs	r3, #31
100072a4:	1c29      	adds	r1, r5, #0
100072a6:	1b1c      	subs	r4, r3, r4
100072a8:	1c33      	adds	r3, r6, #0
100072aa:	40a5      	lsls	r5, r4
100072ac:	40a3      	lsls	r3, r4
100072ae:	40d1      	lsrs	r1, r2
100072b0:	1e6c      	subs	r4, r5, #1
100072b2:	41a5      	sbcs	r5, r4
100072b4:	40d6      	lsrs	r6, r2
100072b6:	4319      	orrs	r1, r3
100072b8:	430d      	orrs	r5, r1
100072ba:	1c37      	adds	r7, r6, #0
100072bc:	2400      	movs	r4, #0
100072be:	e773      	b.n	100071a8 <__aeabi_dadd+0x50>
100072c0:	2380      	movs	r3, #128	; 0x80
100072c2:	041b      	lsls	r3, r3, #16
100072c4:	403b      	ands	r3, r7
100072c6:	4646      	mov	r6, r8
100072c8:	d000      	beq.n	100072cc <__aeabi_dadd+0x174>
100072ca:	e782      	b.n	100071d2 <__aeabi_dadd+0x7a>
100072cc:	4b8d      	ldr	r3, [pc, #564]	; (10007504 <__aeabi_dadd+0x3ac>)
100072ce:	08ed      	lsrs	r5, r5, #3
100072d0:	0778      	lsls	r0, r7, #29
100072d2:	4305      	orrs	r5, r0
100072d4:	08fa      	lsrs	r2, r7, #3
100072d6:	429c      	cmp	r4, r3
100072d8:	d032      	beq.n	10007340 <__aeabi_dadd+0x1e8>
100072da:	0312      	lsls	r2, r2, #12
100072dc:	0564      	lsls	r4, r4, #21
100072de:	0b12      	lsrs	r2, r2, #12
100072e0:	0d64      	lsrs	r4, r4, #21
100072e2:	e785      	b.n	100071f0 <__aeabi_dadd+0x98>
100072e4:	1aa3      	subs	r3, r4, r2
100072e6:	2b00      	cmp	r3, #0
100072e8:	dc00      	bgt.n	100072ec <__aeabi_dadd+0x194>
100072ea:	e094      	b.n	10007416 <__aeabi_dadd+0x2be>
100072ec:	2a00      	cmp	r2, #0
100072ee:	d03c      	beq.n	1000736a <__aeabi_dadd+0x212>
100072f0:	4a84      	ldr	r2, [pc, #528]	; (10007504 <__aeabi_dadd+0x3ac>)
100072f2:	4294      	cmp	r4, r2
100072f4:	d100      	bne.n	100072f8 <__aeabi_dadd+0x1a0>
100072f6:	e757      	b.n	100071a8 <__aeabi_dadd+0x50>
100072f8:	2280      	movs	r2, #128	; 0x80
100072fa:	0412      	lsls	r2, r2, #16
100072fc:	4311      	orrs	r1, r2
100072fe:	2b38      	cmp	r3, #56	; 0x38
10007300:	dc00      	bgt.n	10007304 <__aeabi_dadd+0x1ac>
10007302:	e105      	b.n	10007510 <__aeabi_dadd+0x3b8>
10007304:	4663      	mov	r3, ip
10007306:	4319      	orrs	r1, r3
10007308:	1e48      	subs	r0, r1, #1
1000730a:	4181      	sbcs	r1, r0
1000730c:	2200      	movs	r2, #0
1000730e:	b2c8      	uxtb	r0, r1
10007310:	1940      	adds	r0, r0, r5
10007312:	42a8      	cmp	r0, r5
10007314:	419b      	sbcs	r3, r3
10007316:	1c05      	adds	r5, r0, #0
10007318:	19d2      	adds	r2, r2, r7
1000731a:	425b      	negs	r3, r3
1000731c:	18d7      	adds	r7, r2, r3
1000731e:	023b      	lsls	r3, r7, #8
10007320:	d539      	bpl.n	10007396 <__aeabi_dadd+0x23e>
10007322:	4b78      	ldr	r3, [pc, #480]	; (10007504 <__aeabi_dadd+0x3ac>)
10007324:	3401      	adds	r4, #1
10007326:	429c      	cmp	r4, r3
10007328:	d100      	bne.n	1000732c <__aeabi_dadd+0x1d4>
1000732a:	e14c      	b.n	100075c6 <__aeabi_dadd+0x46e>
1000732c:	2001      	movs	r0, #1
1000732e:	4a76      	ldr	r2, [pc, #472]	; (10007508 <__aeabi_dadd+0x3b0>)
10007330:	086b      	lsrs	r3, r5, #1
10007332:	403a      	ands	r2, r7
10007334:	4028      	ands	r0, r5
10007336:	4318      	orrs	r0, r3
10007338:	07d5      	lsls	r5, r2, #31
1000733a:	4305      	orrs	r5, r0
1000733c:	0857      	lsrs	r7, r2, #1
1000733e:	e733      	b.n	100071a8 <__aeabi_dadd+0x50>
10007340:	1c2b      	adds	r3, r5, #0
10007342:	4313      	orrs	r3, r2
10007344:	d048      	beq.n	100073d8 <__aeabi_dadd+0x280>
10007346:	2380      	movs	r3, #128	; 0x80
10007348:	031b      	lsls	r3, r3, #12
1000734a:	431a      	orrs	r2, r3
1000734c:	0312      	lsls	r2, r2, #12
1000734e:	0b12      	lsrs	r2, r2, #12
10007350:	e74e      	b.n	100071f0 <__aeabi_dadd+0x98>
10007352:	3801      	subs	r0, #1
10007354:	2800      	cmp	r0, #0
10007356:	d178      	bne.n	1000744a <__aeabi_dadd+0x2f2>
10007358:	4663      	mov	r3, ip
1000735a:	1aee      	subs	r6, r5, r3
1000735c:	42b5      	cmp	r5, r6
1000735e:	419b      	sbcs	r3, r3
10007360:	1a7a      	subs	r2, r7, r1
10007362:	425b      	negs	r3, r3
10007364:	1ad7      	subs	r7, r2, r3
10007366:	1c35      	adds	r5, r6, #0
10007368:	e77a      	b.n	10007260 <__aeabi_dadd+0x108>
1000736a:	1c02      	adds	r2, r0, #0
1000736c:	430a      	orrs	r2, r1
1000736e:	d100      	bne.n	10007372 <__aeabi_dadd+0x21a>
10007370:	e71a      	b.n	100071a8 <__aeabi_dadd+0x50>
10007372:	3b01      	subs	r3, #1
10007374:	2b00      	cmp	r3, #0
10007376:	d000      	beq.n	1000737a <__aeabi_dadd+0x222>
10007378:	e0f2      	b.n	10007560 <__aeabi_dadd+0x408>
1000737a:	1940      	adds	r0, r0, r5
1000737c:	42a8      	cmp	r0, r5
1000737e:	419b      	sbcs	r3, r3
10007380:	19ca      	adds	r2, r1, r7
10007382:	425b      	negs	r3, r3
10007384:	18d7      	adds	r7, r2, r3
10007386:	1c05      	adds	r5, r0, #0
10007388:	e7c9      	b.n	1000731e <__aeabi_dadd+0x1c6>
1000738a:	1c13      	adds	r3, r2, #0
1000738c:	4333      	orrs	r3, r6
1000738e:	d100      	bne.n	10007392 <__aeabi_dadd+0x23a>
10007390:	e118      	b.n	100075c4 <__aeabi_dadd+0x46c>
10007392:	1c17      	adds	r7, r2, #0
10007394:	1c35      	adds	r5, r6, #0
10007396:	4646      	mov	r6, r8
10007398:	076b      	lsls	r3, r5, #29
1000739a:	d000      	beq.n	1000739e <__aeabi_dadd+0x246>
1000739c:	e707      	b.n	100071ae <__aeabi_dadd+0x56>
1000739e:	e795      	b.n	100072cc <__aeabi_dadd+0x174>
100073a0:	2800      	cmp	r0, #0
100073a2:	d17a      	bne.n	1000749a <__aeabi_dadd+0x342>
100073a4:	1c62      	adds	r2, r4, #1
100073a6:	0552      	lsls	r2, r2, #21
100073a8:	0d52      	lsrs	r2, r2, #21
100073aa:	2a01      	cmp	r2, #1
100073ac:	dc00      	bgt.n	100073b0 <__aeabi_dadd+0x258>
100073ae:	e0fb      	b.n	100075a8 <__aeabi_dadd+0x450>
100073b0:	4662      	mov	r2, ip
100073b2:	1aaa      	subs	r2, r5, r2
100073b4:	4295      	cmp	r5, r2
100073b6:	41b6      	sbcs	r6, r6
100073b8:	4691      	mov	r9, r2
100073ba:	1a78      	subs	r0, r7, r1
100073bc:	4272      	negs	r2, r6
100073be:	1a86      	subs	r6, r0, r2
100073c0:	0232      	lsls	r2, r6, #8
100073c2:	d400      	bmi.n	100073c6 <__aeabi_dadd+0x26e>
100073c4:	e093      	b.n	100074ee <__aeabi_dadd+0x396>
100073c6:	4662      	mov	r2, ip
100073c8:	1b55      	subs	r5, r2, r5
100073ca:	45ac      	cmp	ip, r5
100073cc:	4180      	sbcs	r0, r0
100073ce:	1bcf      	subs	r7, r1, r7
100073d0:	4240      	negs	r0, r0
100073d2:	1a3e      	subs	r6, r7, r0
100073d4:	4698      	mov	r8, r3
100073d6:	e748      	b.n	1000726a <__aeabi_dadd+0x112>
100073d8:	2200      	movs	r2, #0
100073da:	2500      	movs	r5, #0
100073dc:	e708      	b.n	100071f0 <__aeabi_dadd+0x98>
100073de:	1c28      	adds	r0, r5, #0
100073e0:	f000 fdd2 	bl	10007f88 <__clzsi2>
100073e4:	3020      	adds	r0, #32
100073e6:	1c03      	adds	r3, r0, #0
100073e8:	3b08      	subs	r3, #8
100073ea:	2b1f      	cmp	r3, #31
100073ec:	dc00      	bgt.n	100073f0 <__aeabi_dadd+0x298>
100073ee:	e747      	b.n	10007280 <__aeabi_dadd+0x128>
100073f0:	3828      	subs	r0, #40	; 0x28
100073f2:	4085      	lsls	r5, r0
100073f4:	1c2e      	adds	r6, r5, #0
100073f6:	2500      	movs	r5, #0
100073f8:	429c      	cmp	r4, r3
100073fa:	dc00      	bgt.n	100073fe <__aeabi_dadd+0x2a6>
100073fc:	e74c      	b.n	10007298 <__aeabi_dadd+0x140>
100073fe:	4a42      	ldr	r2, [pc, #264]	; (10007508 <__aeabi_dadd+0x3b0>)
10007400:	1ae4      	subs	r4, r4, r3
10007402:	4016      	ands	r6, r2
10007404:	1c37      	adds	r7, r6, #0
10007406:	e6cf      	b.n	100071a8 <__aeabi_dadd+0x50>
10007408:	4663      	mov	r3, ip
1000740a:	4319      	orrs	r1, r3
1000740c:	1e4b      	subs	r3, r1, #1
1000740e:	4199      	sbcs	r1, r3
10007410:	2200      	movs	r2, #0
10007412:	b2cb      	uxtb	r3, r1
10007414:	e71d      	b.n	10007252 <__aeabi_dadd+0xfa>
10007416:	2b00      	cmp	r3, #0
10007418:	d000      	beq.n	1000741c <__aeabi_dadd+0x2c4>
1000741a:	e0f2      	b.n	10007602 <__aeabi_dadd+0x4aa>
1000741c:	1c60      	adds	r0, r4, #1
1000741e:	0543      	lsls	r3, r0, #21
10007420:	0d5b      	lsrs	r3, r3, #21
10007422:	2b01      	cmp	r3, #1
10007424:	dc00      	bgt.n	10007428 <__aeabi_dadd+0x2d0>
10007426:	e0a4      	b.n	10007572 <__aeabi_dadd+0x41a>
10007428:	4b36      	ldr	r3, [pc, #216]	; (10007504 <__aeabi_dadd+0x3ac>)
1000742a:	4298      	cmp	r0, r3
1000742c:	d100      	bne.n	10007430 <__aeabi_dadd+0x2d8>
1000742e:	e121      	b.n	10007674 <__aeabi_dadd+0x51c>
10007430:	4663      	mov	r3, ip
10007432:	195c      	adds	r4, r3, r5
10007434:	42ac      	cmp	r4, r5
10007436:	419b      	sbcs	r3, r3
10007438:	19cf      	adds	r7, r1, r7
1000743a:	425b      	negs	r3, r3
1000743c:	18fa      	adds	r2, r7, r3
1000743e:	0864      	lsrs	r4, r4, #1
10007440:	07d5      	lsls	r5, r2, #31
10007442:	4325      	orrs	r5, r4
10007444:	0857      	lsrs	r7, r2, #1
10007446:	1c04      	adds	r4, r0, #0
10007448:	e6ae      	b.n	100071a8 <__aeabi_dadd+0x50>
1000744a:	4b2e      	ldr	r3, [pc, #184]	; (10007504 <__aeabi_dadd+0x3ac>)
1000744c:	429c      	cmp	r4, r3
1000744e:	d000      	beq.n	10007452 <__aeabi_dadd+0x2fa>
10007450:	e6ea      	b.n	10007228 <__aeabi_dadd+0xd0>
10007452:	e6a9      	b.n	100071a8 <__aeabi_dadd+0x50>
10007454:	1c21      	adds	r1, r4, #0
10007456:	1c33      	adds	r3, r6, #0
10007458:	391f      	subs	r1, #31
1000745a:	40cb      	lsrs	r3, r1
1000745c:	1c19      	adds	r1, r3, #0
1000745e:	2a20      	cmp	r2, #32
10007460:	d100      	bne.n	10007464 <__aeabi_dadd+0x30c>
10007462:	e082      	b.n	1000756a <__aeabi_dadd+0x412>
10007464:	233f      	movs	r3, #63	; 0x3f
10007466:	1b1c      	subs	r4, r3, r4
10007468:	40a6      	lsls	r6, r4
1000746a:	4335      	orrs	r5, r6
1000746c:	1e6e      	subs	r6, r5, #1
1000746e:	41b5      	sbcs	r5, r6
10007470:	2700      	movs	r7, #0
10007472:	430d      	orrs	r5, r1
10007474:	2400      	movs	r4, #0
10007476:	e78e      	b.n	10007396 <__aeabi_dadd+0x23e>
10007478:	1c03      	adds	r3, r0, #0
1000747a:	1c0e      	adds	r6, r1, #0
1000747c:	3b20      	subs	r3, #32
1000747e:	40de      	lsrs	r6, r3
10007480:	2820      	cmp	r0, #32
10007482:	d074      	beq.n	1000756e <__aeabi_dadd+0x416>
10007484:	2340      	movs	r3, #64	; 0x40
10007486:	1a1b      	subs	r3, r3, r0
10007488:	4099      	lsls	r1, r3
1000748a:	1c0b      	adds	r3, r1, #0
1000748c:	4662      	mov	r2, ip
1000748e:	4313      	orrs	r3, r2
10007490:	1e59      	subs	r1, r3, #1
10007492:	418b      	sbcs	r3, r1
10007494:	2200      	movs	r2, #0
10007496:	4333      	orrs	r3, r6
10007498:	e6db      	b.n	10007252 <__aeabi_dadd+0xfa>
1000749a:	2c00      	cmp	r4, #0
1000749c:	d050      	beq.n	10007540 <__aeabi_dadd+0x3e8>
1000749e:	4c19      	ldr	r4, [pc, #100]	; (10007504 <__aeabi_dadd+0x3ac>)
100074a0:	42a2      	cmp	r2, r4
100074a2:	d100      	bne.n	100074a6 <__aeabi_dadd+0x34e>
100074a4:	e0a8      	b.n	100075f8 <__aeabi_dadd+0x4a0>
100074a6:	2480      	movs	r4, #128	; 0x80
100074a8:	0424      	lsls	r4, r4, #16
100074aa:	4240      	negs	r0, r0
100074ac:	4327      	orrs	r7, r4
100074ae:	2838      	cmp	r0, #56	; 0x38
100074b0:	dd00      	ble.n	100074b4 <__aeabi_dadd+0x35c>
100074b2:	e0d9      	b.n	10007668 <__aeabi_dadd+0x510>
100074b4:	281f      	cmp	r0, #31
100074b6:	dd00      	ble.n	100074ba <__aeabi_dadd+0x362>
100074b8:	e139      	b.n	1000772e <__aeabi_dadd+0x5d6>
100074ba:	2420      	movs	r4, #32
100074bc:	1c3e      	adds	r6, r7, #0
100074be:	1a24      	subs	r4, r4, r0
100074c0:	40a6      	lsls	r6, r4
100074c2:	46b0      	mov	r8, r6
100074c4:	1c2e      	adds	r6, r5, #0
100074c6:	46a1      	mov	r9, r4
100074c8:	40c6      	lsrs	r6, r0
100074ca:	4644      	mov	r4, r8
100074cc:	4326      	orrs	r6, r4
100074ce:	464c      	mov	r4, r9
100074d0:	40a5      	lsls	r5, r4
100074d2:	1e6c      	subs	r4, r5, #1
100074d4:	41a5      	sbcs	r5, r4
100074d6:	40c7      	lsrs	r7, r0
100074d8:	4335      	orrs	r5, r6
100074da:	4660      	mov	r0, ip
100074dc:	1b45      	subs	r5, r0, r5
100074de:	1bcf      	subs	r7, r1, r7
100074e0:	45ac      	cmp	ip, r5
100074e2:	4189      	sbcs	r1, r1
100074e4:	4249      	negs	r1, r1
100074e6:	1a7f      	subs	r7, r7, r1
100074e8:	1c14      	adds	r4, r2, #0
100074ea:	4698      	mov	r8, r3
100074ec:	e6b8      	b.n	10007260 <__aeabi_dadd+0x108>
100074ee:	464b      	mov	r3, r9
100074f0:	464d      	mov	r5, r9
100074f2:	4333      	orrs	r3, r6
100074f4:	d000      	beq.n	100074f8 <__aeabi_dadd+0x3a0>
100074f6:	e6b8      	b.n	1000726a <__aeabi_dadd+0x112>
100074f8:	2600      	movs	r6, #0
100074fa:	2700      	movs	r7, #0
100074fc:	2400      	movs	r4, #0
100074fe:	2500      	movs	r5, #0
10007500:	e6e4      	b.n	100072cc <__aeabi_dadd+0x174>
10007502:	46c0      	nop			; (mov r8, r8)
10007504:	000007ff 	.word	0x000007ff
10007508:	ff7fffff 	.word	0xff7fffff
1000750c:	800fffff 	.word	0x800fffff
10007510:	2b1f      	cmp	r3, #31
10007512:	dc5b      	bgt.n	100075cc <__aeabi_dadd+0x474>
10007514:	2220      	movs	r2, #32
10007516:	1c08      	adds	r0, r1, #0
10007518:	1ad2      	subs	r2, r2, r3
1000751a:	4090      	lsls	r0, r2
1000751c:	4681      	mov	r9, r0
1000751e:	4660      	mov	r0, ip
10007520:	4692      	mov	sl, r2
10007522:	40d8      	lsrs	r0, r3
10007524:	464a      	mov	r2, r9
10007526:	4310      	orrs	r0, r2
10007528:	4681      	mov	r9, r0
1000752a:	4652      	mov	r2, sl
1000752c:	4660      	mov	r0, ip
1000752e:	4090      	lsls	r0, r2
10007530:	1c02      	adds	r2, r0, #0
10007532:	1e50      	subs	r0, r2, #1
10007534:	4182      	sbcs	r2, r0
10007536:	4648      	mov	r0, r9
10007538:	4310      	orrs	r0, r2
1000753a:	1c0a      	adds	r2, r1, #0
1000753c:	40da      	lsrs	r2, r3
1000753e:	e6e7      	b.n	10007310 <__aeabi_dadd+0x1b8>
10007540:	1c3c      	adds	r4, r7, #0
10007542:	432c      	orrs	r4, r5
10007544:	d058      	beq.n	100075f8 <__aeabi_dadd+0x4a0>
10007546:	43c0      	mvns	r0, r0
10007548:	2800      	cmp	r0, #0
1000754a:	d151      	bne.n	100075f0 <__aeabi_dadd+0x498>
1000754c:	4660      	mov	r0, ip
1000754e:	1b45      	subs	r5, r0, r5
10007550:	45ac      	cmp	ip, r5
10007552:	4180      	sbcs	r0, r0
10007554:	1bcf      	subs	r7, r1, r7
10007556:	4240      	negs	r0, r0
10007558:	1a3f      	subs	r7, r7, r0
1000755a:	1c14      	adds	r4, r2, #0
1000755c:	4698      	mov	r8, r3
1000755e:	e67f      	b.n	10007260 <__aeabi_dadd+0x108>
10007560:	4a8f      	ldr	r2, [pc, #572]	; (100077a0 <__aeabi_dadd+0x648>)
10007562:	4294      	cmp	r4, r2
10007564:	d000      	beq.n	10007568 <__aeabi_dadd+0x410>
10007566:	e6ca      	b.n	100072fe <__aeabi_dadd+0x1a6>
10007568:	e61e      	b.n	100071a8 <__aeabi_dadd+0x50>
1000756a:	2600      	movs	r6, #0
1000756c:	e77d      	b.n	1000746a <__aeabi_dadd+0x312>
1000756e:	2300      	movs	r3, #0
10007570:	e78c      	b.n	1000748c <__aeabi_dadd+0x334>
10007572:	1c3b      	adds	r3, r7, #0
10007574:	432b      	orrs	r3, r5
10007576:	2c00      	cmp	r4, #0
10007578:	d000      	beq.n	1000757c <__aeabi_dadd+0x424>
1000757a:	e0bd      	b.n	100076f8 <__aeabi_dadd+0x5a0>
1000757c:	2b00      	cmp	r3, #0
1000757e:	d100      	bne.n	10007582 <__aeabi_dadd+0x42a>
10007580:	e0f5      	b.n	1000776e <__aeabi_dadd+0x616>
10007582:	4663      	mov	r3, ip
10007584:	430b      	orrs	r3, r1
10007586:	d100      	bne.n	1000758a <__aeabi_dadd+0x432>
10007588:	e60e      	b.n	100071a8 <__aeabi_dadd+0x50>
1000758a:	4663      	mov	r3, ip
1000758c:	195b      	adds	r3, r3, r5
1000758e:	42ab      	cmp	r3, r5
10007590:	4180      	sbcs	r0, r0
10007592:	19ca      	adds	r2, r1, r7
10007594:	4240      	negs	r0, r0
10007596:	1817      	adds	r7, r2, r0
10007598:	023a      	lsls	r2, r7, #8
1000759a:	d400      	bmi.n	1000759e <__aeabi_dadd+0x446>
1000759c:	e0fc      	b.n	10007798 <__aeabi_dadd+0x640>
1000759e:	4a81      	ldr	r2, [pc, #516]	; (100077a4 <__aeabi_dadd+0x64c>)
100075a0:	1c1d      	adds	r5, r3, #0
100075a2:	4017      	ands	r7, r2
100075a4:	3401      	adds	r4, #1
100075a6:	e5ff      	b.n	100071a8 <__aeabi_dadd+0x50>
100075a8:	1c3a      	adds	r2, r7, #0
100075aa:	432a      	orrs	r2, r5
100075ac:	2c00      	cmp	r4, #0
100075ae:	d151      	bne.n	10007654 <__aeabi_dadd+0x4fc>
100075b0:	2a00      	cmp	r2, #0
100075b2:	d000      	beq.n	100075b6 <__aeabi_dadd+0x45e>
100075b4:	e085      	b.n	100076c2 <__aeabi_dadd+0x56a>
100075b6:	4662      	mov	r2, ip
100075b8:	430a      	orrs	r2, r1
100075ba:	d003      	beq.n	100075c4 <__aeabi_dadd+0x46c>
100075bc:	1c0f      	adds	r7, r1, #0
100075be:	4665      	mov	r5, ip
100075c0:	4698      	mov	r8, r3
100075c2:	e5f1      	b.n	100071a8 <__aeabi_dadd+0x50>
100075c4:	2600      	movs	r6, #0
100075c6:	2700      	movs	r7, #0
100075c8:	2500      	movs	r5, #0
100075ca:	e67f      	b.n	100072cc <__aeabi_dadd+0x174>
100075cc:	1c18      	adds	r0, r3, #0
100075ce:	1c0a      	adds	r2, r1, #0
100075d0:	3820      	subs	r0, #32
100075d2:	40c2      	lsrs	r2, r0
100075d4:	2b20      	cmp	r3, #32
100075d6:	d100      	bne.n	100075da <__aeabi_dadd+0x482>
100075d8:	e0a7      	b.n	1000772a <__aeabi_dadd+0x5d2>
100075da:	2040      	movs	r0, #64	; 0x40
100075dc:	1ac0      	subs	r0, r0, r3
100075de:	4081      	lsls	r1, r0
100075e0:	1c08      	adds	r0, r1, #0
100075e2:	4663      	mov	r3, ip
100075e4:	4318      	orrs	r0, r3
100075e6:	1e41      	subs	r1, r0, #1
100075e8:	4188      	sbcs	r0, r1
100075ea:	4310      	orrs	r0, r2
100075ec:	2200      	movs	r2, #0
100075ee:	e68f      	b.n	10007310 <__aeabi_dadd+0x1b8>
100075f0:	4c6b      	ldr	r4, [pc, #428]	; (100077a0 <__aeabi_dadd+0x648>)
100075f2:	42a2      	cmp	r2, r4
100075f4:	d000      	beq.n	100075f8 <__aeabi_dadd+0x4a0>
100075f6:	e75a      	b.n	100074ae <__aeabi_dadd+0x356>
100075f8:	1c0f      	adds	r7, r1, #0
100075fa:	4665      	mov	r5, ip
100075fc:	1c14      	adds	r4, r2, #0
100075fe:	4698      	mov	r8, r3
10007600:	e5d2      	b.n	100071a8 <__aeabi_dadd+0x50>
10007602:	2c00      	cmp	r4, #0
10007604:	d13a      	bne.n	1000767c <__aeabi_dadd+0x524>
10007606:	1c38      	adds	r0, r7, #0
10007608:	4328      	orrs	r0, r5
1000760a:	d071      	beq.n	100076f0 <__aeabi_dadd+0x598>
1000760c:	43db      	mvns	r3, r3
1000760e:	2b00      	cmp	r3, #0
10007610:	d018      	beq.n	10007644 <__aeabi_dadd+0x4ec>
10007612:	4863      	ldr	r0, [pc, #396]	; (100077a0 <__aeabi_dadd+0x648>)
10007614:	4282      	cmp	r2, r0
10007616:	d06b      	beq.n	100076f0 <__aeabi_dadd+0x598>
10007618:	2b38      	cmp	r3, #56	; 0x38
1000761a:	dd00      	ble.n	1000761e <__aeabi_dadd+0x4c6>
1000761c:	e09d      	b.n	1000775a <__aeabi_dadd+0x602>
1000761e:	2b1f      	cmp	r3, #31
10007620:	dd00      	ble.n	10007624 <__aeabi_dadd+0x4cc>
10007622:	e0a7      	b.n	10007774 <__aeabi_dadd+0x61c>
10007624:	2020      	movs	r0, #32
10007626:	1c3c      	adds	r4, r7, #0
10007628:	1ac0      	subs	r0, r0, r3
1000762a:	4084      	lsls	r4, r0
1000762c:	46a1      	mov	r9, r4
1000762e:	1c2c      	adds	r4, r5, #0
10007630:	4682      	mov	sl, r0
10007632:	40dc      	lsrs	r4, r3
10007634:	4648      	mov	r0, r9
10007636:	4304      	orrs	r4, r0
10007638:	4650      	mov	r0, sl
1000763a:	4085      	lsls	r5, r0
1000763c:	1e68      	subs	r0, r5, #1
1000763e:	4185      	sbcs	r5, r0
10007640:	40df      	lsrs	r7, r3
10007642:	4325      	orrs	r5, r4
10007644:	4465      	add	r5, ip
10007646:	4565      	cmp	r5, ip
10007648:	419b      	sbcs	r3, r3
1000764a:	187f      	adds	r7, r7, r1
1000764c:	425b      	negs	r3, r3
1000764e:	18ff      	adds	r7, r7, r3
10007650:	1c14      	adds	r4, r2, #0
10007652:	e664      	b.n	1000731e <__aeabi_dadd+0x1c6>
10007654:	2a00      	cmp	r2, #0
10007656:	d119      	bne.n	1000768c <__aeabi_dadd+0x534>
10007658:	4662      	mov	r2, ip
1000765a:	430a      	orrs	r2, r1
1000765c:	d077      	beq.n	1000774e <__aeabi_dadd+0x5f6>
1000765e:	1c0f      	adds	r7, r1, #0
10007660:	4665      	mov	r5, ip
10007662:	4698      	mov	r8, r3
10007664:	4c4e      	ldr	r4, [pc, #312]	; (100077a0 <__aeabi_dadd+0x648>)
10007666:	e59f      	b.n	100071a8 <__aeabi_dadd+0x50>
10007668:	433d      	orrs	r5, r7
1000766a:	1e6f      	subs	r7, r5, #1
1000766c:	41bd      	sbcs	r5, r7
1000766e:	2700      	movs	r7, #0
10007670:	b2ed      	uxtb	r5, r5
10007672:	e732      	b.n	100074da <__aeabi_dadd+0x382>
10007674:	1c04      	adds	r4, r0, #0
10007676:	2700      	movs	r7, #0
10007678:	2500      	movs	r5, #0
1000767a:	e627      	b.n	100072cc <__aeabi_dadd+0x174>
1000767c:	4848      	ldr	r0, [pc, #288]	; (100077a0 <__aeabi_dadd+0x648>)
1000767e:	4282      	cmp	r2, r0
10007680:	d036      	beq.n	100076f0 <__aeabi_dadd+0x598>
10007682:	2080      	movs	r0, #128	; 0x80
10007684:	0400      	lsls	r0, r0, #16
10007686:	425b      	negs	r3, r3
10007688:	4307      	orrs	r7, r0
1000768a:	e7c5      	b.n	10007618 <__aeabi_dadd+0x4c0>
1000768c:	4662      	mov	r2, ip
1000768e:	430a      	orrs	r2, r1
10007690:	d049      	beq.n	10007726 <__aeabi_dadd+0x5ce>
10007692:	2480      	movs	r4, #128	; 0x80
10007694:	08ed      	lsrs	r5, r5, #3
10007696:	0778      	lsls	r0, r7, #29
10007698:	08fa      	lsrs	r2, r7, #3
1000769a:	0324      	lsls	r4, r4, #12
1000769c:	4328      	orrs	r0, r5
1000769e:	4222      	tst	r2, r4
100076a0:	d009      	beq.n	100076b6 <__aeabi_dadd+0x55e>
100076a2:	08ce      	lsrs	r6, r1, #3
100076a4:	4226      	tst	r6, r4
100076a6:	d106      	bne.n	100076b6 <__aeabi_dadd+0x55e>
100076a8:	4662      	mov	r2, ip
100076aa:	074f      	lsls	r7, r1, #29
100076ac:	1c38      	adds	r0, r7, #0
100076ae:	08d2      	lsrs	r2, r2, #3
100076b0:	4310      	orrs	r0, r2
100076b2:	4698      	mov	r8, r3
100076b4:	1c32      	adds	r2, r6, #0
100076b6:	00d2      	lsls	r2, r2, #3
100076b8:	0f47      	lsrs	r7, r0, #29
100076ba:	4317      	orrs	r7, r2
100076bc:	00c5      	lsls	r5, r0, #3
100076be:	4c38      	ldr	r4, [pc, #224]	; (100077a0 <__aeabi_dadd+0x648>)
100076c0:	e572      	b.n	100071a8 <__aeabi_dadd+0x50>
100076c2:	4662      	mov	r2, ip
100076c4:	430a      	orrs	r2, r1
100076c6:	d100      	bne.n	100076ca <__aeabi_dadd+0x572>
100076c8:	e56e      	b.n	100071a8 <__aeabi_dadd+0x50>
100076ca:	4662      	mov	r2, ip
100076cc:	1aae      	subs	r6, r5, r2
100076ce:	42b5      	cmp	r5, r6
100076d0:	4192      	sbcs	r2, r2
100076d2:	1a78      	subs	r0, r7, r1
100076d4:	4252      	negs	r2, r2
100076d6:	1a82      	subs	r2, r0, r2
100076d8:	0210      	lsls	r0, r2, #8
100076da:	d400      	bmi.n	100076de <__aeabi_dadd+0x586>
100076dc:	e655      	b.n	1000738a <__aeabi_dadd+0x232>
100076de:	4662      	mov	r2, ip
100076e0:	1b55      	subs	r5, r2, r5
100076e2:	45ac      	cmp	ip, r5
100076e4:	4180      	sbcs	r0, r0
100076e6:	1bca      	subs	r2, r1, r7
100076e8:	4240      	negs	r0, r0
100076ea:	1a17      	subs	r7, r2, r0
100076ec:	4698      	mov	r8, r3
100076ee:	e55b      	b.n	100071a8 <__aeabi_dadd+0x50>
100076f0:	1c0f      	adds	r7, r1, #0
100076f2:	4665      	mov	r5, ip
100076f4:	1c14      	adds	r4, r2, #0
100076f6:	e557      	b.n	100071a8 <__aeabi_dadd+0x50>
100076f8:	2b00      	cmp	r3, #0
100076fa:	d034      	beq.n	10007766 <__aeabi_dadd+0x60e>
100076fc:	4663      	mov	r3, ip
100076fe:	430b      	orrs	r3, r1
10007700:	d011      	beq.n	10007726 <__aeabi_dadd+0x5ce>
10007702:	2480      	movs	r4, #128	; 0x80
10007704:	08ed      	lsrs	r5, r5, #3
10007706:	0778      	lsls	r0, r7, #29
10007708:	08fa      	lsrs	r2, r7, #3
1000770a:	0324      	lsls	r4, r4, #12
1000770c:	4328      	orrs	r0, r5
1000770e:	4222      	tst	r2, r4
10007710:	d0d1      	beq.n	100076b6 <__aeabi_dadd+0x55e>
10007712:	08cb      	lsrs	r3, r1, #3
10007714:	4223      	tst	r3, r4
10007716:	d1ce      	bne.n	100076b6 <__aeabi_dadd+0x55e>
10007718:	4662      	mov	r2, ip
1000771a:	074f      	lsls	r7, r1, #29
1000771c:	1c38      	adds	r0, r7, #0
1000771e:	08d2      	lsrs	r2, r2, #3
10007720:	4310      	orrs	r0, r2
10007722:	1c1a      	adds	r2, r3, #0
10007724:	e7c7      	b.n	100076b6 <__aeabi_dadd+0x55e>
10007726:	4c1e      	ldr	r4, [pc, #120]	; (100077a0 <__aeabi_dadd+0x648>)
10007728:	e53e      	b.n	100071a8 <__aeabi_dadd+0x50>
1000772a:	2000      	movs	r0, #0
1000772c:	e759      	b.n	100075e2 <__aeabi_dadd+0x48a>
1000772e:	1c04      	adds	r4, r0, #0
10007730:	1c3e      	adds	r6, r7, #0
10007732:	3c20      	subs	r4, #32
10007734:	40e6      	lsrs	r6, r4
10007736:	1c34      	adds	r4, r6, #0
10007738:	2820      	cmp	r0, #32
1000773a:	d02b      	beq.n	10007794 <__aeabi_dadd+0x63c>
1000773c:	2640      	movs	r6, #64	; 0x40
1000773e:	1a30      	subs	r0, r6, r0
10007740:	4087      	lsls	r7, r0
10007742:	433d      	orrs	r5, r7
10007744:	1e6f      	subs	r7, r5, #1
10007746:	41bd      	sbcs	r5, r7
10007748:	2700      	movs	r7, #0
1000774a:	4325      	orrs	r5, r4
1000774c:	e6c5      	b.n	100074da <__aeabi_dadd+0x382>
1000774e:	2780      	movs	r7, #128	; 0x80
10007750:	2600      	movs	r6, #0
10007752:	03ff      	lsls	r7, r7, #15
10007754:	4c12      	ldr	r4, [pc, #72]	; (100077a0 <__aeabi_dadd+0x648>)
10007756:	2500      	movs	r5, #0
10007758:	e5b8      	b.n	100072cc <__aeabi_dadd+0x174>
1000775a:	433d      	orrs	r5, r7
1000775c:	1e6f      	subs	r7, r5, #1
1000775e:	41bd      	sbcs	r5, r7
10007760:	2700      	movs	r7, #0
10007762:	b2ed      	uxtb	r5, r5
10007764:	e76e      	b.n	10007644 <__aeabi_dadd+0x4ec>
10007766:	1c0f      	adds	r7, r1, #0
10007768:	4665      	mov	r5, ip
1000776a:	4c0d      	ldr	r4, [pc, #52]	; (100077a0 <__aeabi_dadd+0x648>)
1000776c:	e51c      	b.n	100071a8 <__aeabi_dadd+0x50>
1000776e:	1c0f      	adds	r7, r1, #0
10007770:	4665      	mov	r5, ip
10007772:	e519      	b.n	100071a8 <__aeabi_dadd+0x50>
10007774:	1c1c      	adds	r4, r3, #0
10007776:	1c38      	adds	r0, r7, #0
10007778:	3c20      	subs	r4, #32
1000777a:	40e0      	lsrs	r0, r4
1000777c:	1c04      	adds	r4, r0, #0
1000777e:	2b20      	cmp	r3, #32
10007780:	d00c      	beq.n	1000779c <__aeabi_dadd+0x644>
10007782:	2040      	movs	r0, #64	; 0x40
10007784:	1ac3      	subs	r3, r0, r3
10007786:	409f      	lsls	r7, r3
10007788:	433d      	orrs	r5, r7
1000778a:	1e6f      	subs	r7, r5, #1
1000778c:	41bd      	sbcs	r5, r7
1000778e:	2700      	movs	r7, #0
10007790:	4325      	orrs	r5, r4
10007792:	e757      	b.n	10007644 <__aeabi_dadd+0x4ec>
10007794:	2700      	movs	r7, #0
10007796:	e7d4      	b.n	10007742 <__aeabi_dadd+0x5ea>
10007798:	1c1d      	adds	r5, r3, #0
1000779a:	e5fc      	b.n	10007396 <__aeabi_dadd+0x23e>
1000779c:	2700      	movs	r7, #0
1000779e:	e7f3      	b.n	10007788 <__aeabi_dadd+0x630>
100077a0:	000007ff 	.word	0x000007ff
100077a4:	ff7fffff 	.word	0xff7fffff

100077a8 <__aeabi_dmul>:
100077a8:	b5f0      	push	{r4, r5, r6, r7, lr}
100077aa:	465f      	mov	r7, fp
100077ac:	4656      	mov	r6, sl
100077ae:	464d      	mov	r5, r9
100077b0:	4644      	mov	r4, r8
100077b2:	b4f0      	push	{r4, r5, r6, r7}
100077b4:	1c05      	adds	r5, r0, #0
100077b6:	1c06      	adds	r6, r0, #0
100077b8:	0308      	lsls	r0, r1, #12
100077ba:	b087      	sub	sp, #28
100077bc:	4699      	mov	r9, r3
100077be:	004f      	lsls	r7, r1, #1
100077c0:	0b03      	lsrs	r3, r0, #12
100077c2:	0fcc      	lsrs	r4, r1, #31
100077c4:	4692      	mov	sl, r2
100077c6:	469b      	mov	fp, r3
100077c8:	0d7f      	lsrs	r7, r7, #21
100077ca:	9401      	str	r4, [sp, #4]
100077cc:	d067      	beq.n	1000789e <__aeabi_dmul+0xf6>
100077ce:	4b6c      	ldr	r3, [pc, #432]	; (10007980 <__aeabi_dmul+0x1d8>)
100077d0:	429f      	cmp	r7, r3
100077d2:	d036      	beq.n	10007842 <__aeabi_dmul+0x9a>
100077d4:	2080      	movs	r0, #128	; 0x80
100077d6:	465b      	mov	r3, fp
100077d8:	0340      	lsls	r0, r0, #13
100077da:	4318      	orrs	r0, r3
100077dc:	00c0      	lsls	r0, r0, #3
100077de:	0f6b      	lsrs	r3, r5, #29
100077e0:	4318      	orrs	r0, r3
100077e2:	4b68      	ldr	r3, [pc, #416]	; (10007984 <__aeabi_dmul+0x1dc>)
100077e4:	4683      	mov	fp, r0
100077e6:	469c      	mov	ip, r3
100077e8:	2300      	movs	r3, #0
100077ea:	4698      	mov	r8, r3
100077ec:	00ee      	lsls	r6, r5, #3
100077ee:	4467      	add	r7, ip
100077f0:	9300      	str	r3, [sp, #0]
100077f2:	464b      	mov	r3, r9
100077f4:	4649      	mov	r1, r9
100077f6:	031d      	lsls	r5, r3, #12
100077f8:	0fc9      	lsrs	r1, r1, #31
100077fa:	005b      	lsls	r3, r3, #1
100077fc:	4652      	mov	r2, sl
100077fe:	0b2d      	lsrs	r5, r5, #12
10007800:	0d5b      	lsrs	r3, r3, #21
10007802:	4689      	mov	r9, r1
10007804:	d100      	bne.n	10007808 <__aeabi_dmul+0x60>
10007806:	e06e      	b.n	100078e6 <__aeabi_dmul+0x13e>
10007808:	495d      	ldr	r1, [pc, #372]	; (10007980 <__aeabi_dmul+0x1d8>)
1000780a:	428b      	cmp	r3, r1
1000780c:	d064      	beq.n	100078d8 <__aeabi_dmul+0x130>
1000780e:	2080      	movs	r0, #128	; 0x80
10007810:	495c      	ldr	r1, [pc, #368]	; (10007984 <__aeabi_dmul+0x1dc>)
10007812:	0340      	lsls	r0, r0, #13
10007814:	468c      	mov	ip, r1
10007816:	2100      	movs	r1, #0
10007818:	4305      	orrs	r5, r0
1000781a:	00ed      	lsls	r5, r5, #3
1000781c:	0f50      	lsrs	r0, r2, #29
1000781e:	4305      	orrs	r5, r0
10007820:	00d2      	lsls	r2, r2, #3
10007822:	4463      	add	r3, ip
10007824:	4648      	mov	r0, r9
10007826:	18ff      	adds	r7, r7, r3
10007828:	1c7b      	adds	r3, r7, #1
1000782a:	469a      	mov	sl, r3
1000782c:	9b00      	ldr	r3, [sp, #0]
1000782e:	4060      	eors	r0, r4
10007830:	9002      	str	r0, [sp, #8]
10007832:	430b      	orrs	r3, r1
10007834:	2b0f      	cmp	r3, #15
10007836:	d900      	bls.n	1000783a <__aeabi_dmul+0x92>
10007838:	e0ac      	b.n	10007994 <__aeabi_dmul+0x1ec>
1000783a:	4853      	ldr	r0, [pc, #332]	; (10007988 <__aeabi_dmul+0x1e0>)
1000783c:	009b      	lsls	r3, r3, #2
1000783e:	58c3      	ldr	r3, [r0, r3]
10007840:	469f      	mov	pc, r3
10007842:	465b      	mov	r3, fp
10007844:	431d      	orrs	r5, r3
10007846:	d000      	beq.n	1000784a <__aeabi_dmul+0xa2>
10007848:	e082      	b.n	10007950 <__aeabi_dmul+0x1a8>
1000784a:	2308      	movs	r3, #8
1000784c:	9300      	str	r3, [sp, #0]
1000784e:	2300      	movs	r3, #0
10007850:	469b      	mov	fp, r3
10007852:	3302      	adds	r3, #2
10007854:	2600      	movs	r6, #0
10007856:	4698      	mov	r8, r3
10007858:	e7cb      	b.n	100077f2 <__aeabi_dmul+0x4a>
1000785a:	9b02      	ldr	r3, [sp, #8]
1000785c:	9301      	str	r3, [sp, #4]
1000785e:	4643      	mov	r3, r8
10007860:	2b02      	cmp	r3, #2
10007862:	d159      	bne.n	10007918 <__aeabi_dmul+0x170>
10007864:	2401      	movs	r4, #1
10007866:	2500      	movs	r5, #0
10007868:	2600      	movs	r6, #0
1000786a:	9b01      	ldr	r3, [sp, #4]
1000786c:	401c      	ands	r4, r3
1000786e:	4b44      	ldr	r3, [pc, #272]	; (10007980 <__aeabi_dmul+0x1d8>)
10007870:	2100      	movs	r1, #0
10007872:	032d      	lsls	r5, r5, #12
10007874:	0d0a      	lsrs	r2, r1, #20
10007876:	0512      	lsls	r2, r2, #20
10007878:	0b2d      	lsrs	r5, r5, #12
1000787a:	4315      	orrs	r5, r2
1000787c:	4a43      	ldr	r2, [pc, #268]	; (1000798c <__aeabi_dmul+0x1e4>)
1000787e:	051b      	lsls	r3, r3, #20
10007880:	4015      	ands	r5, r2
10007882:	431d      	orrs	r5, r3
10007884:	006d      	lsls	r5, r5, #1
10007886:	07e4      	lsls	r4, r4, #31
10007888:	086d      	lsrs	r5, r5, #1
1000788a:	4325      	orrs	r5, r4
1000788c:	1c30      	adds	r0, r6, #0
1000788e:	1c29      	adds	r1, r5, #0
10007890:	b007      	add	sp, #28
10007892:	bc3c      	pop	{r2, r3, r4, r5}
10007894:	4690      	mov	r8, r2
10007896:	4699      	mov	r9, r3
10007898:	46a2      	mov	sl, r4
1000789a:	46ab      	mov	fp, r5
1000789c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000789e:	432b      	orrs	r3, r5
100078a0:	d04e      	beq.n	10007940 <__aeabi_dmul+0x198>
100078a2:	465b      	mov	r3, fp
100078a4:	2b00      	cmp	r3, #0
100078a6:	d100      	bne.n	100078aa <__aeabi_dmul+0x102>
100078a8:	e185      	b.n	10007bb6 <__aeabi_dmul+0x40e>
100078aa:	4658      	mov	r0, fp
100078ac:	f000 fb6c 	bl	10007f88 <__clzsi2>
100078b0:	1c02      	adds	r2, r0, #0
100078b2:	2328      	movs	r3, #40	; 0x28
100078b4:	1c29      	adds	r1, r5, #0
100078b6:	1a9b      	subs	r3, r3, r2
100078b8:	1c16      	adds	r6, r2, #0
100078ba:	4658      	mov	r0, fp
100078bc:	40d9      	lsrs	r1, r3
100078be:	3e08      	subs	r6, #8
100078c0:	40b0      	lsls	r0, r6
100078c2:	1c0b      	adds	r3, r1, #0
100078c4:	40b5      	lsls	r5, r6
100078c6:	4303      	orrs	r3, r0
100078c8:	469b      	mov	fp, r3
100078ca:	1c2e      	adds	r6, r5, #0
100078cc:	2300      	movs	r3, #0
100078ce:	4f30      	ldr	r7, [pc, #192]	; (10007990 <__aeabi_dmul+0x1e8>)
100078d0:	9300      	str	r3, [sp, #0]
100078d2:	1abf      	subs	r7, r7, r2
100078d4:	4698      	mov	r8, r3
100078d6:	e78c      	b.n	100077f2 <__aeabi_dmul+0x4a>
100078d8:	4651      	mov	r1, sl
100078da:	4329      	orrs	r1, r5
100078dc:	d12e      	bne.n	1000793c <__aeabi_dmul+0x194>
100078de:	2500      	movs	r5, #0
100078e0:	2200      	movs	r2, #0
100078e2:	2102      	movs	r1, #2
100078e4:	e79e      	b.n	10007824 <__aeabi_dmul+0x7c>
100078e6:	4651      	mov	r1, sl
100078e8:	4329      	orrs	r1, r5
100078ea:	d023      	beq.n	10007934 <__aeabi_dmul+0x18c>
100078ec:	2d00      	cmp	r5, #0
100078ee:	d100      	bne.n	100078f2 <__aeabi_dmul+0x14a>
100078f0:	e154      	b.n	10007b9c <__aeabi_dmul+0x3f4>
100078f2:	1c28      	adds	r0, r5, #0
100078f4:	f000 fb48 	bl	10007f88 <__clzsi2>
100078f8:	1c03      	adds	r3, r0, #0
100078fa:	2128      	movs	r1, #40	; 0x28
100078fc:	4650      	mov	r0, sl
100078fe:	1ac9      	subs	r1, r1, r3
10007900:	1c1a      	adds	r2, r3, #0
10007902:	40c8      	lsrs	r0, r1
10007904:	4651      	mov	r1, sl
10007906:	3a08      	subs	r2, #8
10007908:	4091      	lsls	r1, r2
1000790a:	4095      	lsls	r5, r2
1000790c:	1c0a      	adds	r2, r1, #0
1000790e:	4305      	orrs	r5, r0
10007910:	481f      	ldr	r0, [pc, #124]	; (10007990 <__aeabi_dmul+0x1e8>)
10007912:	2100      	movs	r1, #0
10007914:	1ac3      	subs	r3, r0, r3
10007916:	e785      	b.n	10007824 <__aeabi_dmul+0x7c>
10007918:	2b03      	cmp	r3, #3
1000791a:	d100      	bne.n	1000791e <__aeabi_dmul+0x176>
1000791c:	e1c2      	b.n	10007ca4 <__aeabi_dmul+0x4fc>
1000791e:	2b01      	cmp	r3, #1
10007920:	d000      	beq.n	10007924 <__aeabi_dmul+0x17c>
10007922:	e16d      	b.n	10007c00 <__aeabi_dmul+0x458>
10007924:	4644      	mov	r4, r8
10007926:	9b01      	ldr	r3, [sp, #4]
10007928:	2500      	movs	r5, #0
1000792a:	401c      	ands	r4, r3
1000792c:	b2e4      	uxtb	r4, r4
1000792e:	2300      	movs	r3, #0
10007930:	2600      	movs	r6, #0
10007932:	e79d      	b.n	10007870 <__aeabi_dmul+0xc8>
10007934:	2500      	movs	r5, #0
10007936:	2200      	movs	r2, #0
10007938:	2101      	movs	r1, #1
1000793a:	e773      	b.n	10007824 <__aeabi_dmul+0x7c>
1000793c:	2103      	movs	r1, #3
1000793e:	e771      	b.n	10007824 <__aeabi_dmul+0x7c>
10007940:	2304      	movs	r3, #4
10007942:	9300      	str	r3, [sp, #0]
10007944:	2300      	movs	r3, #0
10007946:	469b      	mov	fp, r3
10007948:	3301      	adds	r3, #1
1000794a:	2600      	movs	r6, #0
1000794c:	4698      	mov	r8, r3
1000794e:	e750      	b.n	100077f2 <__aeabi_dmul+0x4a>
10007950:	230c      	movs	r3, #12
10007952:	9300      	str	r3, [sp, #0]
10007954:	3b09      	subs	r3, #9
10007956:	4698      	mov	r8, r3
10007958:	e74b      	b.n	100077f2 <__aeabi_dmul+0x4a>
1000795a:	2580      	movs	r5, #128	; 0x80
1000795c:	2400      	movs	r4, #0
1000795e:	032d      	lsls	r5, r5, #12
10007960:	2600      	movs	r6, #0
10007962:	4b07      	ldr	r3, [pc, #28]	; (10007980 <__aeabi_dmul+0x1d8>)
10007964:	e784      	b.n	10007870 <__aeabi_dmul+0xc8>
10007966:	464b      	mov	r3, r9
10007968:	46ab      	mov	fp, r5
1000796a:	1c16      	adds	r6, r2, #0
1000796c:	9301      	str	r3, [sp, #4]
1000796e:	4688      	mov	r8, r1
10007970:	e775      	b.n	1000785e <__aeabi_dmul+0xb6>
10007972:	9b02      	ldr	r3, [sp, #8]
10007974:	46ab      	mov	fp, r5
10007976:	1c16      	adds	r6, r2, #0
10007978:	9301      	str	r3, [sp, #4]
1000797a:	4688      	mov	r8, r1
1000797c:	e76f      	b.n	1000785e <__aeabi_dmul+0xb6>
1000797e:	46c0      	nop			; (mov r8, r8)
10007980:	000007ff 	.word	0x000007ff
10007984:	fffffc01 	.word	0xfffffc01
10007988:	1000b7e0 	.word	0x1000b7e0
1000798c:	800fffff 	.word	0x800fffff
10007990:	fffffc0d 	.word	0xfffffc0d
10007994:	0c33      	lsrs	r3, r6, #16
10007996:	0436      	lsls	r6, r6, #16
10007998:	0c36      	lsrs	r6, r6, #16
1000799a:	469c      	mov	ip, r3
1000799c:	1c33      	adds	r3, r6, #0
1000799e:	0c14      	lsrs	r4, r2, #16
100079a0:	0412      	lsls	r2, r2, #16
100079a2:	0c12      	lsrs	r2, r2, #16
100079a4:	4353      	muls	r3, r2
100079a6:	4698      	mov	r8, r3
100079a8:	4663      	mov	r3, ip
100079aa:	4353      	muls	r3, r2
100079ac:	4699      	mov	r9, r3
100079ae:	4663      	mov	r3, ip
100079b0:	4363      	muls	r3, r4
100079b2:	9301      	str	r3, [sp, #4]
100079b4:	1c33      	adds	r3, r6, #0
100079b6:	4641      	mov	r1, r8
100079b8:	4363      	muls	r3, r4
100079ba:	0c09      	lsrs	r1, r1, #16
100079bc:	444b      	add	r3, r9
100079be:	185b      	adds	r3, r3, r1
100079c0:	4599      	cmp	r9, r3
100079c2:	d905      	bls.n	100079d0 <__aeabi_dmul+0x228>
100079c4:	2080      	movs	r0, #128	; 0x80
100079c6:	0240      	lsls	r0, r0, #9
100079c8:	4681      	mov	r9, r0
100079ca:	9901      	ldr	r1, [sp, #4]
100079cc:	4449      	add	r1, r9
100079ce:	9101      	str	r1, [sp, #4]
100079d0:	0c19      	lsrs	r1, r3, #16
100079d2:	9103      	str	r1, [sp, #12]
100079d4:	4641      	mov	r1, r8
100079d6:	0409      	lsls	r1, r1, #16
100079d8:	0c09      	lsrs	r1, r1, #16
100079da:	041b      	lsls	r3, r3, #16
100079dc:	185b      	adds	r3, r3, r1
100079de:	9304      	str	r3, [sp, #16]
100079e0:	0c2b      	lsrs	r3, r5, #16
100079e2:	4698      	mov	r8, r3
100079e4:	1c33      	adds	r3, r6, #0
100079e6:	042d      	lsls	r5, r5, #16
100079e8:	0c29      	lsrs	r1, r5, #16
100079ea:	434b      	muls	r3, r1
100079ec:	4660      	mov	r0, ip
100079ee:	9300      	str	r3, [sp, #0]
100079f0:	4643      	mov	r3, r8
100079f2:	4665      	mov	r5, ip
100079f4:	4358      	muls	r0, r3
100079f6:	435e      	muls	r6, r3
100079f8:	9b00      	ldr	r3, [sp, #0]
100079fa:	434d      	muls	r5, r1
100079fc:	0c1b      	lsrs	r3, r3, #16
100079fe:	4699      	mov	r9, r3
10007a00:	19ae      	adds	r6, r5, r6
10007a02:	444e      	add	r6, r9
10007a04:	4684      	mov	ip, r0
10007a06:	42b5      	cmp	r5, r6
10007a08:	d903      	bls.n	10007a12 <__aeabi_dmul+0x26a>
10007a0a:	2380      	movs	r3, #128	; 0x80
10007a0c:	025b      	lsls	r3, r3, #9
10007a0e:	4699      	mov	r9, r3
10007a10:	44cc      	add	ip, r9
10007a12:	0c35      	lsrs	r5, r6, #16
10007a14:	1c2b      	adds	r3, r5, #0
10007a16:	9803      	ldr	r0, [sp, #12]
10007a18:	4463      	add	r3, ip
10007a1a:	4684      	mov	ip, r0
10007a1c:	9305      	str	r3, [sp, #20]
10007a1e:	9b00      	ldr	r3, [sp, #0]
10007a20:	0436      	lsls	r6, r6, #16
10007a22:	041b      	lsls	r3, r3, #16
10007a24:	0c1b      	lsrs	r3, r3, #16
10007a26:	18f3      	adds	r3, r6, r3
10007a28:	449c      	add	ip, r3
10007a2a:	4660      	mov	r0, ip
10007a2c:	9003      	str	r0, [sp, #12]
10007a2e:	4658      	mov	r0, fp
10007a30:	0405      	lsls	r5, r0, #16
10007a32:	0c06      	lsrs	r6, r0, #16
10007a34:	0c28      	lsrs	r0, r5, #16
10007a36:	4684      	mov	ip, r0
10007a38:	4350      	muls	r0, r2
10007a3a:	1c35      	adds	r5, r6, #0
10007a3c:	4681      	mov	r9, r0
10007a3e:	4660      	mov	r0, ip
10007a40:	4365      	muls	r5, r4
10007a42:	4344      	muls	r4, r0
10007a44:	4648      	mov	r0, r9
10007a46:	0c00      	lsrs	r0, r0, #16
10007a48:	4683      	mov	fp, r0
10007a4a:	4372      	muls	r2, r6
10007a4c:	1914      	adds	r4, r2, r4
10007a4e:	445c      	add	r4, fp
10007a50:	42a2      	cmp	r2, r4
10007a52:	d903      	bls.n	10007a5c <__aeabi_dmul+0x2b4>
10007a54:	2280      	movs	r2, #128	; 0x80
10007a56:	0252      	lsls	r2, r2, #9
10007a58:	4693      	mov	fp, r2
10007a5a:	445d      	add	r5, fp
10007a5c:	0c22      	lsrs	r2, r4, #16
10007a5e:	18ad      	adds	r5, r5, r2
10007a60:	464a      	mov	r2, r9
10007a62:	0412      	lsls	r2, r2, #16
10007a64:	0c12      	lsrs	r2, r2, #16
10007a66:	0424      	lsls	r4, r4, #16
10007a68:	4640      	mov	r0, r8
10007a6a:	18a4      	adds	r4, r4, r2
10007a6c:	4662      	mov	r2, ip
10007a6e:	434a      	muls	r2, r1
10007a70:	4371      	muls	r1, r6
10007a72:	4346      	muls	r6, r0
10007a74:	4660      	mov	r0, ip
10007a76:	9600      	str	r6, [sp, #0]
10007a78:	4646      	mov	r6, r8
10007a7a:	4370      	muls	r0, r6
10007a7c:	4680      	mov	r8, r0
10007a7e:	0c10      	lsrs	r0, r2, #16
10007a80:	4684      	mov	ip, r0
10007a82:	4488      	add	r8, r1
10007a84:	44e0      	add	r8, ip
10007a86:	4541      	cmp	r1, r8
10007a88:	d905      	bls.n	10007a96 <__aeabi_dmul+0x2ee>
10007a8a:	2180      	movs	r1, #128	; 0x80
10007a8c:	0249      	lsls	r1, r1, #9
10007a8e:	468c      	mov	ip, r1
10007a90:	9900      	ldr	r1, [sp, #0]
10007a92:	4461      	add	r1, ip
10007a94:	9100      	str	r1, [sp, #0]
10007a96:	9801      	ldr	r0, [sp, #4]
10007a98:	9903      	ldr	r1, [sp, #12]
10007a9a:	4684      	mov	ip, r0
10007a9c:	4461      	add	r1, ip
10007a9e:	4299      	cmp	r1, r3
10007aa0:	419b      	sbcs	r3, r3
10007aa2:	425b      	negs	r3, r3
10007aa4:	4699      	mov	r9, r3
10007aa6:	9805      	ldr	r0, [sp, #20]
10007aa8:	4643      	mov	r3, r8
10007aaa:	4684      	mov	ip, r0
10007aac:	0412      	lsls	r2, r2, #16
10007aae:	0c12      	lsrs	r2, r2, #16
10007ab0:	041b      	lsls	r3, r3, #16
10007ab2:	189b      	adds	r3, r3, r2
10007ab4:	4463      	add	r3, ip
10007ab6:	469c      	mov	ip, r3
10007ab8:	46ab      	mov	fp, r5
10007aba:	4283      	cmp	r3, r0
10007abc:	419b      	sbcs	r3, r3
10007abe:	4640      	mov	r0, r8
10007ac0:	190a      	adds	r2, r1, r4
10007ac2:	44cc      	add	ip, r9
10007ac4:	42a2      	cmp	r2, r4
10007ac6:	4189      	sbcs	r1, r1
10007ac8:	44e3      	add	fp, ip
10007aca:	45cc      	cmp	ip, r9
10007acc:	41b6      	sbcs	r6, r6
10007ace:	465c      	mov	r4, fp
10007ad0:	0c00      	lsrs	r0, r0, #16
10007ad2:	4680      	mov	r8, r0
10007ad4:	4249      	negs	r1, r1
10007ad6:	4276      	negs	r6, r6
10007ad8:	425b      	negs	r3, r3
10007ada:	1864      	adds	r4, r4, r1
10007adc:	4333      	orrs	r3, r6
10007ade:	4498      	add	r8, r3
10007ae0:	428c      	cmp	r4, r1
10007ae2:	4189      	sbcs	r1, r1
10007ae4:	45ab      	cmp	fp, r5
10007ae6:	419b      	sbcs	r3, r3
10007ae8:	4249      	negs	r1, r1
10007aea:	425b      	negs	r3, r3
10007aec:	4319      	orrs	r1, r3
10007aee:	1c0d      	adds	r5, r1, #0
10007af0:	9b00      	ldr	r3, [sp, #0]
10007af2:	4445      	add	r5, r8
10007af4:	18ee      	adds	r6, r5, r3
10007af6:	0276      	lsls	r6, r6, #9
10007af8:	0de5      	lsrs	r5, r4, #23
10007afa:	432e      	orrs	r6, r5
10007afc:	46b3      	mov	fp, r6
10007afe:	9b04      	ldr	r3, [sp, #16]
10007b00:	0256      	lsls	r6, r2, #9
10007b02:	431e      	orrs	r6, r3
10007b04:	1e73      	subs	r3, r6, #1
10007b06:	419e      	sbcs	r6, r3
10007b08:	465b      	mov	r3, fp
10007b0a:	0dd2      	lsrs	r2, r2, #23
10007b0c:	4332      	orrs	r2, r6
10007b0e:	0266      	lsls	r6, r4, #9
10007b10:	4316      	orrs	r6, r2
10007b12:	01db      	lsls	r3, r3, #7
10007b14:	d50a      	bpl.n	10007b2c <__aeabi_dmul+0x384>
10007b16:	2301      	movs	r3, #1
10007b18:	4033      	ands	r3, r6
10007b1a:	0876      	lsrs	r6, r6, #1
10007b1c:	431e      	orrs	r6, r3
10007b1e:	465b      	mov	r3, fp
10007b20:	07db      	lsls	r3, r3, #31
10007b22:	431e      	orrs	r6, r3
10007b24:	465b      	mov	r3, fp
10007b26:	085b      	lsrs	r3, r3, #1
10007b28:	469b      	mov	fp, r3
10007b2a:	4657      	mov	r7, sl
10007b2c:	4b63      	ldr	r3, [pc, #396]	; (10007cbc <__aeabi_dmul+0x514>)
10007b2e:	18fb      	adds	r3, r7, r3
10007b30:	2b00      	cmp	r3, #0
10007b32:	dd5a      	ble.n	10007bea <__aeabi_dmul+0x442>
10007b34:	0772      	lsls	r2, r6, #29
10007b36:	d009      	beq.n	10007b4c <__aeabi_dmul+0x3a4>
10007b38:	220f      	movs	r2, #15
10007b3a:	4032      	ands	r2, r6
10007b3c:	2a04      	cmp	r2, #4
10007b3e:	d005      	beq.n	10007b4c <__aeabi_dmul+0x3a4>
10007b40:	1d32      	adds	r2, r6, #4
10007b42:	42b2      	cmp	r2, r6
10007b44:	41b6      	sbcs	r6, r6
10007b46:	4276      	negs	r6, r6
10007b48:	44b3      	add	fp, r6
10007b4a:	1c16      	adds	r6, r2, #0
10007b4c:	465a      	mov	r2, fp
10007b4e:	01d2      	lsls	r2, r2, #7
10007b50:	d506      	bpl.n	10007b60 <__aeabi_dmul+0x3b8>
10007b52:	465a      	mov	r2, fp
10007b54:	4b5a      	ldr	r3, [pc, #360]	; (10007cc0 <__aeabi_dmul+0x518>)
10007b56:	401a      	ands	r2, r3
10007b58:	2380      	movs	r3, #128	; 0x80
10007b5a:	4693      	mov	fp, r2
10007b5c:	00db      	lsls	r3, r3, #3
10007b5e:	18fb      	adds	r3, r7, r3
10007b60:	4a58      	ldr	r2, [pc, #352]	; (10007cc4 <__aeabi_dmul+0x51c>)
10007b62:	4293      	cmp	r3, r2
10007b64:	dd34      	ble.n	10007bd0 <__aeabi_dmul+0x428>
10007b66:	2401      	movs	r4, #1
10007b68:	9b02      	ldr	r3, [sp, #8]
10007b6a:	2500      	movs	r5, #0
10007b6c:	401c      	ands	r4, r3
10007b6e:	2600      	movs	r6, #0
10007b70:	4b55      	ldr	r3, [pc, #340]	; (10007cc8 <__aeabi_dmul+0x520>)
10007b72:	e67d      	b.n	10007870 <__aeabi_dmul+0xc8>
10007b74:	2080      	movs	r0, #128	; 0x80
10007b76:	465b      	mov	r3, fp
10007b78:	0300      	lsls	r0, r0, #12
10007b7a:	4203      	tst	r3, r0
10007b7c:	d008      	beq.n	10007b90 <__aeabi_dmul+0x3e8>
10007b7e:	4205      	tst	r5, r0
10007b80:	d106      	bne.n	10007b90 <__aeabi_dmul+0x3e8>
10007b82:	4305      	orrs	r5, r0
10007b84:	032d      	lsls	r5, r5, #12
10007b86:	0b2d      	lsrs	r5, r5, #12
10007b88:	464c      	mov	r4, r9
10007b8a:	1c16      	adds	r6, r2, #0
10007b8c:	4b4e      	ldr	r3, [pc, #312]	; (10007cc8 <__aeabi_dmul+0x520>)
10007b8e:	e66f      	b.n	10007870 <__aeabi_dmul+0xc8>
10007b90:	465d      	mov	r5, fp
10007b92:	4305      	orrs	r5, r0
10007b94:	032d      	lsls	r5, r5, #12
10007b96:	0b2d      	lsrs	r5, r5, #12
10007b98:	4b4b      	ldr	r3, [pc, #300]	; (10007cc8 <__aeabi_dmul+0x520>)
10007b9a:	e669      	b.n	10007870 <__aeabi_dmul+0xc8>
10007b9c:	4650      	mov	r0, sl
10007b9e:	f000 f9f3 	bl	10007f88 <__clzsi2>
10007ba2:	1c03      	adds	r3, r0, #0
10007ba4:	3320      	adds	r3, #32
10007ba6:	2b27      	cmp	r3, #39	; 0x27
10007ba8:	dc00      	bgt.n	10007bac <__aeabi_dmul+0x404>
10007baa:	e6a6      	b.n	100078fa <__aeabi_dmul+0x152>
10007bac:	4655      	mov	r5, sl
10007bae:	3808      	subs	r0, #8
10007bb0:	4085      	lsls	r5, r0
10007bb2:	2200      	movs	r2, #0
10007bb4:	e6ac      	b.n	10007910 <__aeabi_dmul+0x168>
10007bb6:	1c28      	adds	r0, r5, #0
10007bb8:	f000 f9e6 	bl	10007f88 <__clzsi2>
10007bbc:	1c02      	adds	r2, r0, #0
10007bbe:	3220      	adds	r2, #32
10007bc0:	2a27      	cmp	r2, #39	; 0x27
10007bc2:	dc00      	bgt.n	10007bc6 <__aeabi_dmul+0x41e>
10007bc4:	e675      	b.n	100078b2 <__aeabi_dmul+0x10a>
10007bc6:	3808      	subs	r0, #8
10007bc8:	4085      	lsls	r5, r0
10007bca:	2600      	movs	r6, #0
10007bcc:	46ab      	mov	fp, r5
10007bce:	e67d      	b.n	100078cc <__aeabi_dmul+0x124>
10007bd0:	465a      	mov	r2, fp
10007bd2:	08f6      	lsrs	r6, r6, #3
10007bd4:	0752      	lsls	r2, r2, #29
10007bd6:	4316      	orrs	r6, r2
10007bd8:	465a      	mov	r2, fp
10007bda:	2401      	movs	r4, #1
10007bdc:	0255      	lsls	r5, r2, #9
10007bde:	9a02      	ldr	r2, [sp, #8]
10007be0:	055b      	lsls	r3, r3, #21
10007be2:	0b2d      	lsrs	r5, r5, #12
10007be4:	0d5b      	lsrs	r3, r3, #21
10007be6:	4014      	ands	r4, r2
10007be8:	e642      	b.n	10007870 <__aeabi_dmul+0xc8>
10007bea:	4d38      	ldr	r5, [pc, #224]	; (10007ccc <__aeabi_dmul+0x524>)
10007bec:	1bed      	subs	r5, r5, r7
10007bee:	2d38      	cmp	r5, #56	; 0x38
10007bf0:	dd0a      	ble.n	10007c08 <__aeabi_dmul+0x460>
10007bf2:	2401      	movs	r4, #1
10007bf4:	9b02      	ldr	r3, [sp, #8]
10007bf6:	2500      	movs	r5, #0
10007bf8:	401c      	ands	r4, r3
10007bfa:	2600      	movs	r6, #0
10007bfc:	2300      	movs	r3, #0
10007bfe:	e637      	b.n	10007870 <__aeabi_dmul+0xc8>
10007c00:	9b01      	ldr	r3, [sp, #4]
10007c02:	4657      	mov	r7, sl
10007c04:	9302      	str	r3, [sp, #8]
10007c06:	e791      	b.n	10007b2c <__aeabi_dmul+0x384>
10007c08:	2d1f      	cmp	r5, #31
10007c0a:	dc25      	bgt.n	10007c58 <__aeabi_dmul+0x4b0>
10007c0c:	4b30      	ldr	r3, [pc, #192]	; (10007cd0 <__aeabi_dmul+0x528>)
10007c0e:	1c32      	adds	r2, r6, #0
10007c10:	469c      	mov	ip, r3
10007c12:	4467      	add	r7, ip
10007c14:	40be      	lsls	r6, r7
10007c16:	465b      	mov	r3, fp
10007c18:	40bb      	lsls	r3, r7
10007c1a:	1c37      	adds	r7, r6, #0
10007c1c:	40ea      	lsrs	r2, r5
10007c1e:	1e7e      	subs	r6, r7, #1
10007c20:	41b7      	sbcs	r7, r6
10007c22:	4313      	orrs	r3, r2
10007c24:	433b      	orrs	r3, r7
10007c26:	1c1e      	adds	r6, r3, #0
10007c28:	465b      	mov	r3, fp
10007c2a:	40eb      	lsrs	r3, r5
10007c2c:	1c1d      	adds	r5, r3, #0
10007c2e:	0773      	lsls	r3, r6, #29
10007c30:	d009      	beq.n	10007c46 <__aeabi_dmul+0x49e>
10007c32:	230f      	movs	r3, #15
10007c34:	4033      	ands	r3, r6
10007c36:	2b04      	cmp	r3, #4
10007c38:	d005      	beq.n	10007c46 <__aeabi_dmul+0x49e>
10007c3a:	1d33      	adds	r3, r6, #4
10007c3c:	42b3      	cmp	r3, r6
10007c3e:	41b6      	sbcs	r6, r6
10007c40:	4276      	negs	r6, r6
10007c42:	19ad      	adds	r5, r5, r6
10007c44:	1c1e      	adds	r6, r3, #0
10007c46:	022b      	lsls	r3, r5, #8
10007c48:	d520      	bpl.n	10007c8c <__aeabi_dmul+0x4e4>
10007c4a:	2401      	movs	r4, #1
10007c4c:	9b02      	ldr	r3, [sp, #8]
10007c4e:	2500      	movs	r5, #0
10007c50:	401c      	ands	r4, r3
10007c52:	2600      	movs	r6, #0
10007c54:	2301      	movs	r3, #1
10007c56:	e60b      	b.n	10007870 <__aeabi_dmul+0xc8>
10007c58:	465a      	mov	r2, fp
10007c5a:	4b1e      	ldr	r3, [pc, #120]	; (10007cd4 <__aeabi_dmul+0x52c>)
10007c5c:	1bdb      	subs	r3, r3, r7
10007c5e:	40da      	lsrs	r2, r3
10007c60:	1c13      	adds	r3, r2, #0
10007c62:	2d20      	cmp	r5, #32
10007c64:	d01c      	beq.n	10007ca0 <__aeabi_dmul+0x4f8>
10007c66:	4a1c      	ldr	r2, [pc, #112]	; (10007cd8 <__aeabi_dmul+0x530>)
10007c68:	4694      	mov	ip, r2
10007c6a:	465a      	mov	r2, fp
10007c6c:	4467      	add	r7, ip
10007c6e:	40ba      	lsls	r2, r7
10007c70:	1c17      	adds	r7, r2, #0
10007c72:	433e      	orrs	r6, r7
10007c74:	1e72      	subs	r2, r6, #1
10007c76:	4196      	sbcs	r6, r2
10007c78:	431e      	orrs	r6, r3
10007c7a:	2307      	movs	r3, #7
10007c7c:	2500      	movs	r5, #0
10007c7e:	4033      	ands	r3, r6
10007c80:	d007      	beq.n	10007c92 <__aeabi_dmul+0x4ea>
10007c82:	230f      	movs	r3, #15
10007c84:	2500      	movs	r5, #0
10007c86:	4033      	ands	r3, r6
10007c88:	2b04      	cmp	r3, #4
10007c8a:	d1d6      	bne.n	10007c3a <__aeabi_dmul+0x492>
10007c8c:	076b      	lsls	r3, r5, #29
10007c8e:	026d      	lsls	r5, r5, #9
10007c90:	0b2d      	lsrs	r5, r5, #12
10007c92:	2401      	movs	r4, #1
10007c94:	08f6      	lsrs	r6, r6, #3
10007c96:	431e      	orrs	r6, r3
10007c98:	9b02      	ldr	r3, [sp, #8]
10007c9a:	401c      	ands	r4, r3
10007c9c:	2300      	movs	r3, #0
10007c9e:	e5e7      	b.n	10007870 <__aeabi_dmul+0xc8>
10007ca0:	2700      	movs	r7, #0
10007ca2:	e7e6      	b.n	10007c72 <__aeabi_dmul+0x4ca>
10007ca4:	2580      	movs	r5, #128	; 0x80
10007ca6:	465b      	mov	r3, fp
10007ca8:	2401      	movs	r4, #1
10007caa:	032d      	lsls	r5, r5, #12
10007cac:	431d      	orrs	r5, r3
10007cae:	9b01      	ldr	r3, [sp, #4]
10007cb0:	032d      	lsls	r5, r5, #12
10007cb2:	4023      	ands	r3, r4
10007cb4:	1c1c      	adds	r4, r3, #0
10007cb6:	0b2d      	lsrs	r5, r5, #12
10007cb8:	4b03      	ldr	r3, [pc, #12]	; (10007cc8 <__aeabi_dmul+0x520>)
10007cba:	e5d9      	b.n	10007870 <__aeabi_dmul+0xc8>
10007cbc:	000003ff 	.word	0x000003ff
10007cc0:	feffffff 	.word	0xfeffffff
10007cc4:	000007fe 	.word	0x000007fe
10007cc8:	000007ff 	.word	0x000007ff
10007ccc:	fffffc02 	.word	0xfffffc02
10007cd0:	0000041e 	.word	0x0000041e
10007cd4:	fffffbe2 	.word	0xfffffbe2
10007cd8:	0000043e 	.word	0x0000043e

10007cdc <__aeabi_d2iz>:
10007cdc:	030b      	lsls	r3, r1, #12
10007cde:	b530      	push	{r4, r5, lr}
10007ce0:	4c13      	ldr	r4, [pc, #76]	; (10007d30 <__aeabi_d2iz+0x54>)
10007ce2:	0b1a      	lsrs	r2, r3, #12
10007ce4:	004b      	lsls	r3, r1, #1
10007ce6:	1c05      	adds	r5, r0, #0
10007ce8:	0d5b      	lsrs	r3, r3, #21
10007cea:	0fc9      	lsrs	r1, r1, #31
10007cec:	2000      	movs	r0, #0
10007cee:	42a3      	cmp	r3, r4
10007cf0:	dd10      	ble.n	10007d14 <__aeabi_d2iz+0x38>
10007cf2:	4810      	ldr	r0, [pc, #64]	; (10007d34 <__aeabi_d2iz+0x58>)
10007cf4:	4283      	cmp	r3, r0
10007cf6:	dc0e      	bgt.n	10007d16 <__aeabi_d2iz+0x3a>
10007cf8:	2080      	movs	r0, #128	; 0x80
10007cfa:	4c0f      	ldr	r4, [pc, #60]	; (10007d38 <__aeabi_d2iz+0x5c>)
10007cfc:	0340      	lsls	r0, r0, #13
10007cfe:	4302      	orrs	r2, r0
10007d00:	1ae4      	subs	r4, r4, r3
10007d02:	2c1f      	cmp	r4, #31
10007d04:	dd0a      	ble.n	10007d1c <__aeabi_d2iz+0x40>
10007d06:	480d      	ldr	r0, [pc, #52]	; (10007d3c <__aeabi_d2iz+0x60>)
10007d08:	1ac3      	subs	r3, r0, r3
10007d0a:	40da      	lsrs	r2, r3
10007d0c:	1c13      	adds	r3, r2, #0
10007d0e:	4248      	negs	r0, r1
10007d10:	4043      	eors	r3, r0
10007d12:	1858      	adds	r0, r3, r1
10007d14:	bd30      	pop	{r4, r5, pc}
10007d16:	4b0a      	ldr	r3, [pc, #40]	; (10007d40 <__aeabi_d2iz+0x64>)
10007d18:	18c8      	adds	r0, r1, r3
10007d1a:	e7fb      	b.n	10007d14 <__aeabi_d2iz+0x38>
10007d1c:	1c28      	adds	r0, r5, #0
10007d1e:	40e0      	lsrs	r0, r4
10007d20:	4c08      	ldr	r4, [pc, #32]	; (10007d44 <__aeabi_d2iz+0x68>)
10007d22:	46a4      	mov	ip, r4
10007d24:	4463      	add	r3, ip
10007d26:	409a      	lsls	r2, r3
10007d28:	1c13      	adds	r3, r2, #0
10007d2a:	4303      	orrs	r3, r0
10007d2c:	e7ef      	b.n	10007d0e <__aeabi_d2iz+0x32>
10007d2e:	46c0      	nop			; (mov r8, r8)
10007d30:	000003fe 	.word	0x000003fe
10007d34:	0000041d 	.word	0x0000041d
10007d38:	00000433 	.word	0x00000433
10007d3c:	00000413 	.word	0x00000413
10007d40:	7fffffff 	.word	0x7fffffff
10007d44:	fffffbed 	.word	0xfffffbed

10007d48 <__aeabi_i2d>:
10007d48:	b538      	push	{r3, r4, r5, lr}
10007d4a:	1e04      	subs	r4, r0, #0
10007d4c:	d016      	beq.n	10007d7c <__aeabi_i2d+0x34>
10007d4e:	0fc5      	lsrs	r5, r0, #31
10007d50:	d000      	beq.n	10007d54 <__aeabi_i2d+0xc>
10007d52:	4244      	negs	r4, r0
10007d54:	1c20      	adds	r0, r4, #0
10007d56:	f000 f917 	bl	10007f88 <__clzsi2>
10007d5a:	4b17      	ldr	r3, [pc, #92]	; (10007db8 <__aeabi_i2d+0x70>)
10007d5c:	1a1b      	subs	r3, r3, r0
10007d5e:	280a      	cmp	r0, #10
10007d60:	dc21      	bgt.n	10007da6 <__aeabi_i2d+0x5e>
10007d62:	1c02      	adds	r2, r0, #0
10007d64:	1c21      	adds	r1, r4, #0
10007d66:	3215      	adds	r2, #21
10007d68:	4091      	lsls	r1, r2
10007d6a:	1c0a      	adds	r2, r1, #0
10007d6c:	210b      	movs	r1, #11
10007d6e:	1a08      	subs	r0, r1, r0
10007d70:	40c4      	lsrs	r4, r0
10007d72:	055b      	lsls	r3, r3, #21
10007d74:	0324      	lsls	r4, r4, #12
10007d76:	0b24      	lsrs	r4, r4, #12
10007d78:	0d5b      	lsrs	r3, r3, #21
10007d7a:	e003      	b.n	10007d84 <__aeabi_i2d+0x3c>
10007d7c:	2500      	movs	r5, #0
10007d7e:	2300      	movs	r3, #0
10007d80:	2400      	movs	r4, #0
10007d82:	2200      	movs	r2, #0
10007d84:	2100      	movs	r1, #0
10007d86:	1c10      	adds	r0, r2, #0
10007d88:	0324      	lsls	r4, r4, #12
10007d8a:	0d0a      	lsrs	r2, r1, #20
10007d8c:	0512      	lsls	r2, r2, #20
10007d8e:	0b24      	lsrs	r4, r4, #12
10007d90:	4314      	orrs	r4, r2
10007d92:	4a0a      	ldr	r2, [pc, #40]	; (10007dbc <__aeabi_i2d+0x74>)
10007d94:	051b      	lsls	r3, r3, #20
10007d96:	4014      	ands	r4, r2
10007d98:	431c      	orrs	r4, r3
10007d9a:	0064      	lsls	r4, r4, #1
10007d9c:	07ed      	lsls	r5, r5, #31
10007d9e:	0864      	lsrs	r4, r4, #1
10007da0:	432c      	orrs	r4, r5
10007da2:	1c21      	adds	r1, r4, #0
10007da4:	bd38      	pop	{r3, r4, r5, pc}
10007da6:	380b      	subs	r0, #11
10007da8:	4084      	lsls	r4, r0
10007daa:	055b      	lsls	r3, r3, #21
10007dac:	0324      	lsls	r4, r4, #12
10007dae:	0b24      	lsrs	r4, r4, #12
10007db0:	0d5b      	lsrs	r3, r3, #21
10007db2:	2200      	movs	r2, #0
10007db4:	e7e6      	b.n	10007d84 <__aeabi_i2d+0x3c>
10007db6:	46c0      	nop			; (mov r8, r8)
10007db8:	0000041e 	.word	0x0000041e
10007dbc:	800fffff 	.word	0x800fffff

10007dc0 <__aeabi_f2d>:
10007dc0:	0042      	lsls	r2, r0, #1
10007dc2:	0e12      	lsrs	r2, r2, #24
10007dc4:	1c51      	adds	r1, r2, #1
10007dc6:	b538      	push	{r3, r4, r5, lr}
10007dc8:	b2c9      	uxtb	r1, r1
10007dca:	0243      	lsls	r3, r0, #9
10007dcc:	0a5d      	lsrs	r5, r3, #9
10007dce:	0fc4      	lsrs	r4, r0, #31
10007dd0:	2901      	cmp	r1, #1
10007dd2:	dd15      	ble.n	10007e00 <__aeabi_f2d+0x40>
10007dd4:	21e0      	movs	r1, #224	; 0xe0
10007dd6:	0089      	lsls	r1, r1, #2
10007dd8:	468c      	mov	ip, r1
10007dda:	076d      	lsls	r5, r5, #29
10007ddc:	0b1b      	lsrs	r3, r3, #12
10007dde:	4462      	add	r2, ip
10007de0:	2100      	movs	r1, #0
10007de2:	1c28      	adds	r0, r5, #0
10007de4:	0d0d      	lsrs	r5, r1, #20
10007de6:	052d      	lsls	r5, r5, #20
10007de8:	432b      	orrs	r3, r5
10007dea:	4d1c      	ldr	r5, [pc, #112]	; (10007e5c <__aeabi_f2d+0x9c>)
10007dec:	0552      	lsls	r2, r2, #21
10007dee:	402b      	ands	r3, r5
10007df0:	0852      	lsrs	r2, r2, #1
10007df2:	4313      	orrs	r3, r2
10007df4:	005b      	lsls	r3, r3, #1
10007df6:	07e4      	lsls	r4, r4, #31
10007df8:	085b      	lsrs	r3, r3, #1
10007dfa:	4323      	orrs	r3, r4
10007dfc:	1c19      	adds	r1, r3, #0
10007dfe:	bd38      	pop	{r3, r4, r5, pc}
10007e00:	2a00      	cmp	r2, #0
10007e02:	d115      	bne.n	10007e30 <__aeabi_f2d+0x70>
10007e04:	2d00      	cmp	r5, #0
10007e06:	d01f      	beq.n	10007e48 <__aeabi_f2d+0x88>
10007e08:	1c28      	adds	r0, r5, #0
10007e0a:	f000 f8bd 	bl	10007f88 <__clzsi2>
10007e0e:	280a      	cmp	r0, #10
10007e10:	dc1d      	bgt.n	10007e4e <__aeabi_f2d+0x8e>
10007e12:	230b      	movs	r3, #11
10007e14:	1c2a      	adds	r2, r5, #0
10007e16:	1a1b      	subs	r3, r3, r0
10007e18:	40da      	lsrs	r2, r3
10007e1a:	1c13      	adds	r3, r2, #0
10007e1c:	1c02      	adds	r2, r0, #0
10007e1e:	3215      	adds	r2, #21
10007e20:	4095      	lsls	r5, r2
10007e22:	4a0f      	ldr	r2, [pc, #60]	; (10007e60 <__aeabi_f2d+0xa0>)
10007e24:	031b      	lsls	r3, r3, #12
10007e26:	1a12      	subs	r2, r2, r0
10007e28:	0552      	lsls	r2, r2, #21
10007e2a:	0b1b      	lsrs	r3, r3, #12
10007e2c:	0d52      	lsrs	r2, r2, #21
10007e2e:	e7d7      	b.n	10007de0 <__aeabi_f2d+0x20>
10007e30:	2d00      	cmp	r5, #0
10007e32:	d006      	beq.n	10007e42 <__aeabi_f2d+0x82>
10007e34:	2280      	movs	r2, #128	; 0x80
10007e36:	0b1b      	lsrs	r3, r3, #12
10007e38:	0312      	lsls	r2, r2, #12
10007e3a:	4313      	orrs	r3, r2
10007e3c:	076d      	lsls	r5, r5, #29
10007e3e:	4a09      	ldr	r2, [pc, #36]	; (10007e64 <__aeabi_f2d+0xa4>)
10007e40:	e7ce      	b.n	10007de0 <__aeabi_f2d+0x20>
10007e42:	4a08      	ldr	r2, [pc, #32]	; (10007e64 <__aeabi_f2d+0xa4>)
10007e44:	2300      	movs	r3, #0
10007e46:	e7cb      	b.n	10007de0 <__aeabi_f2d+0x20>
10007e48:	2200      	movs	r2, #0
10007e4a:	2300      	movs	r3, #0
10007e4c:	e7c8      	b.n	10007de0 <__aeabi_f2d+0x20>
10007e4e:	1c03      	adds	r3, r0, #0
10007e50:	3b0b      	subs	r3, #11
10007e52:	409d      	lsls	r5, r3
10007e54:	1c2b      	adds	r3, r5, #0
10007e56:	2500      	movs	r5, #0
10007e58:	e7e3      	b.n	10007e22 <__aeabi_f2d+0x62>
10007e5a:	46c0      	nop			; (mov r8, r8)
10007e5c:	800fffff 	.word	0x800fffff
10007e60:	00000389 	.word	0x00000389
10007e64:	000007ff 	.word	0x000007ff

10007e68 <__aeabi_d2f>:
10007e68:	b570      	push	{r4, r5, r6, lr}
10007e6a:	030b      	lsls	r3, r1, #12
10007e6c:	004d      	lsls	r5, r1, #1
10007e6e:	0f44      	lsrs	r4, r0, #29
10007e70:	0d6d      	lsrs	r5, r5, #21
10007e72:	0a5b      	lsrs	r3, r3, #9
10007e74:	4323      	orrs	r3, r4
10007e76:	1c6c      	adds	r4, r5, #1
10007e78:	0564      	lsls	r4, r4, #21
10007e7a:	0fc9      	lsrs	r1, r1, #31
10007e7c:	00c2      	lsls	r2, r0, #3
10007e7e:	0d64      	lsrs	r4, r4, #21
10007e80:	2c01      	cmp	r4, #1
10007e82:	dd2a      	ble.n	10007eda <__aeabi_d2f+0x72>
10007e84:	4c3b      	ldr	r4, [pc, #236]	; (10007f74 <__aeabi_d2f+0x10c>)
10007e86:	192c      	adds	r4, r5, r4
10007e88:	2cfe      	cmp	r4, #254	; 0xfe
10007e8a:	dc1a      	bgt.n	10007ec2 <__aeabi_d2f+0x5a>
10007e8c:	2c00      	cmp	r4, #0
10007e8e:	dd35      	ble.n	10007efc <__aeabi_d2f+0x94>
10007e90:	0180      	lsls	r0, r0, #6
10007e92:	1e45      	subs	r5, r0, #1
10007e94:	41a8      	sbcs	r0, r5
10007e96:	00db      	lsls	r3, r3, #3
10007e98:	4303      	orrs	r3, r0
10007e9a:	0f52      	lsrs	r2, r2, #29
10007e9c:	4313      	orrs	r3, r2
10007e9e:	075a      	lsls	r2, r3, #29
10007ea0:	d004      	beq.n	10007eac <__aeabi_d2f+0x44>
10007ea2:	220f      	movs	r2, #15
10007ea4:	401a      	ands	r2, r3
10007ea6:	2a04      	cmp	r2, #4
10007ea8:	d000      	beq.n	10007eac <__aeabi_d2f+0x44>
10007eaa:	3304      	adds	r3, #4
10007eac:	2280      	movs	r2, #128	; 0x80
10007eae:	04d2      	lsls	r2, r2, #19
10007eb0:	401a      	ands	r2, r3
10007eb2:	d027      	beq.n	10007f04 <__aeabi_d2f+0x9c>
10007eb4:	3401      	adds	r4, #1
10007eb6:	2cff      	cmp	r4, #255	; 0xff
10007eb8:	d003      	beq.n	10007ec2 <__aeabi_d2f+0x5a>
10007eba:	019b      	lsls	r3, r3, #6
10007ebc:	0a5b      	lsrs	r3, r3, #9
10007ebe:	b2e4      	uxtb	r4, r4
10007ec0:	e001      	b.n	10007ec6 <__aeabi_d2f+0x5e>
10007ec2:	24ff      	movs	r4, #255	; 0xff
10007ec4:	2300      	movs	r3, #0
10007ec6:	025b      	lsls	r3, r3, #9
10007ec8:	05e4      	lsls	r4, r4, #23
10007eca:	0a5b      	lsrs	r3, r3, #9
10007ecc:	4323      	orrs	r3, r4
10007ece:	005b      	lsls	r3, r3, #1
10007ed0:	07c9      	lsls	r1, r1, #31
10007ed2:	085b      	lsrs	r3, r3, #1
10007ed4:	430b      	orrs	r3, r1
10007ed6:	1c18      	adds	r0, r3, #0
10007ed8:	bd70      	pop	{r4, r5, r6, pc}
10007eda:	2d00      	cmp	r5, #0
10007edc:	d106      	bne.n	10007eec <__aeabi_d2f+0x84>
10007ede:	4313      	orrs	r3, r2
10007ee0:	d10e      	bne.n	10007f00 <__aeabi_d2f+0x98>
10007ee2:	2400      	movs	r4, #0
10007ee4:	025b      	lsls	r3, r3, #9
10007ee6:	0a5b      	lsrs	r3, r3, #9
10007ee8:	b2e4      	uxtb	r4, r4
10007eea:	e7ec      	b.n	10007ec6 <__aeabi_d2f+0x5e>
10007eec:	431a      	orrs	r2, r3
10007eee:	d0e8      	beq.n	10007ec2 <__aeabi_d2f+0x5a>
10007ef0:	2080      	movs	r0, #128	; 0x80
10007ef2:	00db      	lsls	r3, r3, #3
10007ef4:	0480      	lsls	r0, r0, #18
10007ef6:	4303      	orrs	r3, r0
10007ef8:	24ff      	movs	r4, #255	; 0xff
10007efa:	e7d0      	b.n	10007e9e <__aeabi_d2f+0x36>
10007efc:	3417      	adds	r4, #23
10007efe:	da0c      	bge.n	10007f1a <__aeabi_d2f+0xb2>
10007f00:	2305      	movs	r3, #5
10007f02:	2400      	movs	r4, #0
10007f04:	08db      	lsrs	r3, r3, #3
10007f06:	2cff      	cmp	r4, #255	; 0xff
10007f08:	d1ec      	bne.n	10007ee4 <__aeabi_d2f+0x7c>
10007f0a:	2b00      	cmp	r3, #0
10007f0c:	d02d      	beq.n	10007f6a <__aeabi_d2f+0x102>
10007f0e:	2280      	movs	r2, #128	; 0x80
10007f10:	03d2      	lsls	r2, r2, #15
10007f12:	4313      	orrs	r3, r2
10007f14:	025b      	lsls	r3, r3, #9
10007f16:	0a5b      	lsrs	r3, r3, #9
10007f18:	e7d5      	b.n	10007ec6 <__aeabi_d2f+0x5e>
10007f1a:	2480      	movs	r4, #128	; 0x80
10007f1c:	4816      	ldr	r0, [pc, #88]	; (10007f78 <__aeabi_d2f+0x110>)
10007f1e:	0424      	lsls	r4, r4, #16
10007f20:	4323      	orrs	r3, r4
10007f22:	1b40      	subs	r0, r0, r5
10007f24:	281f      	cmp	r0, #31
10007f26:	dc0d      	bgt.n	10007f44 <__aeabi_d2f+0xdc>
10007f28:	4c14      	ldr	r4, [pc, #80]	; (10007f7c <__aeabi_d2f+0x114>)
10007f2a:	46a4      	mov	ip, r4
10007f2c:	4465      	add	r5, ip
10007f2e:	40ab      	lsls	r3, r5
10007f30:	1c1c      	adds	r4, r3, #0
10007f32:	1c13      	adds	r3, r2, #0
10007f34:	40ab      	lsls	r3, r5
10007f36:	1e5d      	subs	r5, r3, #1
10007f38:	41ab      	sbcs	r3, r5
10007f3a:	40c2      	lsrs	r2, r0
10007f3c:	4323      	orrs	r3, r4
10007f3e:	4313      	orrs	r3, r2
10007f40:	2400      	movs	r4, #0
10007f42:	e7ac      	b.n	10007e9e <__aeabi_d2f+0x36>
10007f44:	1c1e      	adds	r6, r3, #0
10007f46:	4c0e      	ldr	r4, [pc, #56]	; (10007f80 <__aeabi_d2f+0x118>)
10007f48:	1b64      	subs	r4, r4, r5
10007f4a:	40e6      	lsrs	r6, r4
10007f4c:	1c34      	adds	r4, r6, #0
10007f4e:	2820      	cmp	r0, #32
10007f50:	d00d      	beq.n	10007f6e <__aeabi_d2f+0x106>
10007f52:	480c      	ldr	r0, [pc, #48]	; (10007f84 <__aeabi_d2f+0x11c>)
10007f54:	4684      	mov	ip, r0
10007f56:	4465      	add	r5, ip
10007f58:	40ab      	lsls	r3, r5
10007f5a:	1c1d      	adds	r5, r3, #0
10007f5c:	432a      	orrs	r2, r5
10007f5e:	1e53      	subs	r3, r2, #1
10007f60:	419a      	sbcs	r2, r3
10007f62:	1c13      	adds	r3, r2, #0
10007f64:	4323      	orrs	r3, r4
10007f66:	2400      	movs	r4, #0
10007f68:	e799      	b.n	10007e9e <__aeabi_d2f+0x36>
10007f6a:	2300      	movs	r3, #0
10007f6c:	e7ab      	b.n	10007ec6 <__aeabi_d2f+0x5e>
10007f6e:	2500      	movs	r5, #0
10007f70:	e7f4      	b.n	10007f5c <__aeabi_d2f+0xf4>
10007f72:	46c0      	nop			; (mov r8, r8)
10007f74:	fffffc80 	.word	0xfffffc80
10007f78:	0000039e 	.word	0x0000039e
10007f7c:	fffffc82 	.word	0xfffffc82
10007f80:	0000037e 	.word	0x0000037e
10007f84:	fffffca2 	.word	0xfffffca2

10007f88 <__clzsi2>:
10007f88:	211c      	movs	r1, #28
10007f8a:	2301      	movs	r3, #1
10007f8c:	041b      	lsls	r3, r3, #16
10007f8e:	4298      	cmp	r0, r3
10007f90:	d301      	bcc.n	10007f96 <__clzsi2+0xe>
10007f92:	0c00      	lsrs	r0, r0, #16
10007f94:	3910      	subs	r1, #16
10007f96:	0a1b      	lsrs	r3, r3, #8
10007f98:	4298      	cmp	r0, r3
10007f9a:	d301      	bcc.n	10007fa0 <__clzsi2+0x18>
10007f9c:	0a00      	lsrs	r0, r0, #8
10007f9e:	3908      	subs	r1, #8
10007fa0:	091b      	lsrs	r3, r3, #4
10007fa2:	4298      	cmp	r0, r3
10007fa4:	d301      	bcc.n	10007faa <__clzsi2+0x22>
10007fa6:	0900      	lsrs	r0, r0, #4
10007fa8:	3904      	subs	r1, #4
10007faa:	a202      	add	r2, pc, #8	; (adr r2, 10007fb4 <__clzsi2+0x2c>)
10007fac:	5c10      	ldrb	r0, [r2, r0]
10007fae:	1840      	adds	r0, r0, r1
10007fb0:	4770      	bx	lr
10007fb2:	46c0      	nop			; (mov r8, r8)
10007fb4:	02020304 	.word	0x02020304
10007fb8:	01010101 	.word	0x01010101
	...

10007fc4 <__errno>:
10007fc4:	4b01      	ldr	r3, [pc, #4]	; (10007fcc <__errno+0x8>)
10007fc6:	6818      	ldr	r0, [r3, #0]
10007fc8:	4770      	bx	lr
10007fca:	46c0      	nop			; (mov r8, r8)
10007fcc:	200012d0 	.word	0x200012d0

10007fd0 <__libc_init_array>:
10007fd0:	4b0e      	ldr	r3, [pc, #56]	; (1000800c <__libc_init_array+0x3c>)
10007fd2:	b570      	push	{r4, r5, r6, lr}
10007fd4:	2500      	movs	r5, #0
10007fd6:	1c1e      	adds	r6, r3, #0
10007fd8:	4c0d      	ldr	r4, [pc, #52]	; (10008010 <__libc_init_array+0x40>)
10007fda:	1ae4      	subs	r4, r4, r3
10007fdc:	10a4      	asrs	r4, r4, #2
10007fde:	42a5      	cmp	r5, r4
10007fe0:	d004      	beq.n	10007fec <__libc_init_array+0x1c>
10007fe2:	00ab      	lsls	r3, r5, #2
10007fe4:	58f3      	ldr	r3, [r6, r3]
10007fe6:	4798      	blx	r3
10007fe8:	3501      	adds	r5, #1
10007fea:	e7f8      	b.n	10007fde <__libc_init_array+0xe>
10007fec:	f7fb f84c 	bl	10003088 <_init>
10007ff0:	4b08      	ldr	r3, [pc, #32]	; (10008014 <__libc_init_array+0x44>)
10007ff2:	2500      	movs	r5, #0
10007ff4:	1c1e      	adds	r6, r3, #0
10007ff6:	4c08      	ldr	r4, [pc, #32]	; (10008018 <__libc_init_array+0x48>)
10007ff8:	1ae4      	subs	r4, r4, r3
10007ffa:	10a4      	asrs	r4, r4, #2
10007ffc:	42a5      	cmp	r5, r4
10007ffe:	d004      	beq.n	1000800a <__libc_init_array+0x3a>
10008000:	00ab      	lsls	r3, r5, #2
10008002:	58f3      	ldr	r3, [r6, r3]
10008004:	4798      	blx	r3
10008006:	3501      	adds	r5, #1
10008008:	e7f8      	b.n	10007ffc <__libc_init_array+0x2c>
1000800a:	bd70      	pop	{r4, r5, r6, pc}
1000800c:	2000130c 	.word	0x2000130c
10008010:	2000130c 	.word	0x2000130c
10008014:	2000130c 	.word	0x2000130c
10008018:	2000130c 	.word	0x2000130c

1000801c <__cvt>:
1000801c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000801e:	b08b      	sub	sp, #44	; 0x2c
10008020:	1c14      	adds	r4, r2, #0
10008022:	1e1d      	subs	r5, r3, #0
10008024:	9912      	ldr	r1, [sp, #72]	; 0x48
10008026:	da06      	bge.n	10008036 <__cvt+0x1a>
10008028:	2480      	movs	r4, #128	; 0x80
1000802a:	0624      	lsls	r4, r4, #24
1000802c:	192b      	adds	r3, r5, r4
1000802e:	1c1d      	adds	r5, r3, #0
10008030:	1c14      	adds	r4, r2, #0
10008032:	232d      	movs	r3, #45	; 0x2d
10008034:	e000      	b.n	10008038 <__cvt+0x1c>
10008036:	2300      	movs	r3, #0
10008038:	700b      	strb	r3, [r1, #0]
1000803a:	2320      	movs	r3, #32
1000803c:	9e14      	ldr	r6, [sp, #80]	; 0x50
1000803e:	2203      	movs	r2, #3
10008040:	439e      	bics	r6, r3
10008042:	2e46      	cmp	r6, #70	; 0x46
10008044:	d007      	beq.n	10008056 <__cvt+0x3a>
10008046:	1c33      	adds	r3, r6, #0
10008048:	3b45      	subs	r3, #69	; 0x45
1000804a:	4259      	negs	r1, r3
1000804c:	414b      	adcs	r3, r1
1000804e:	9910      	ldr	r1, [sp, #64]	; 0x40
10008050:	3a01      	subs	r2, #1
10008052:	18cb      	adds	r3, r1, r3
10008054:	9310      	str	r3, [sp, #64]	; 0x40
10008056:	9b10      	ldr	r3, [sp, #64]	; 0x40
10008058:	9200      	str	r2, [sp, #0]
1000805a:	9301      	str	r3, [sp, #4]
1000805c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
1000805e:	1c22      	adds	r2, r4, #0
10008060:	9302      	str	r3, [sp, #8]
10008062:	ab08      	add	r3, sp, #32
10008064:	9303      	str	r3, [sp, #12]
10008066:	ab09      	add	r3, sp, #36	; 0x24
10008068:	9304      	str	r3, [sp, #16]
1000806a:	1c2b      	adds	r3, r5, #0
1000806c:	f000 fd02 	bl	10008a74 <_dtoa_r>
10008070:	1c07      	adds	r7, r0, #0
10008072:	2e47      	cmp	r6, #71	; 0x47
10008074:	d102      	bne.n	1000807c <__cvt+0x60>
10008076:	9b11      	ldr	r3, [sp, #68]	; 0x44
10008078:	07db      	lsls	r3, r3, #31
1000807a:	d52c      	bpl.n	100080d6 <__cvt+0xba>
1000807c:	9b10      	ldr	r3, [sp, #64]	; 0x40
1000807e:	18fb      	adds	r3, r7, r3
10008080:	9307      	str	r3, [sp, #28]
10008082:	2e46      	cmp	r6, #70	; 0x46
10008084:	d114      	bne.n	100080b0 <__cvt+0x94>
10008086:	783b      	ldrb	r3, [r7, #0]
10008088:	2b30      	cmp	r3, #48	; 0x30
1000808a:	d10c      	bne.n	100080a6 <__cvt+0x8a>
1000808c:	1c20      	adds	r0, r4, #0
1000808e:	1c29      	adds	r1, r5, #0
10008090:	2200      	movs	r2, #0
10008092:	2300      	movs	r3, #0
10008094:	f002 f878 	bl	1000a188 <__aeabi_dcmpeq>
10008098:	2800      	cmp	r0, #0
1000809a:	d104      	bne.n	100080a6 <__cvt+0x8a>
1000809c:	2301      	movs	r3, #1
1000809e:	9a10      	ldr	r2, [sp, #64]	; 0x40
100080a0:	1a9b      	subs	r3, r3, r2
100080a2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
100080a4:	6013      	str	r3, [r2, #0]
100080a6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
100080a8:	9a07      	ldr	r2, [sp, #28]
100080aa:	681b      	ldr	r3, [r3, #0]
100080ac:	18d3      	adds	r3, r2, r3
100080ae:	9307      	str	r3, [sp, #28]
100080b0:	1c20      	adds	r0, r4, #0
100080b2:	1c29      	adds	r1, r5, #0
100080b4:	2200      	movs	r2, #0
100080b6:	2300      	movs	r3, #0
100080b8:	f002 f866 	bl	1000a188 <__aeabi_dcmpeq>
100080bc:	2800      	cmp	r0, #0
100080be:	d001      	beq.n	100080c4 <__cvt+0xa8>
100080c0:	9b07      	ldr	r3, [sp, #28]
100080c2:	9309      	str	r3, [sp, #36]	; 0x24
100080c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
100080c6:	9a07      	ldr	r2, [sp, #28]
100080c8:	4293      	cmp	r3, r2
100080ca:	d204      	bcs.n	100080d6 <__cvt+0xba>
100080cc:	1c5a      	adds	r2, r3, #1
100080ce:	9209      	str	r2, [sp, #36]	; 0x24
100080d0:	2230      	movs	r2, #48	; 0x30
100080d2:	701a      	strb	r2, [r3, #0]
100080d4:	e7f6      	b.n	100080c4 <__cvt+0xa8>
100080d6:	1c38      	adds	r0, r7, #0
100080d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
100080da:	9a15      	ldr	r2, [sp, #84]	; 0x54
100080dc:	1bdb      	subs	r3, r3, r7
100080de:	6013      	str	r3, [r2, #0]
100080e0:	b00b      	add	sp, #44	; 0x2c
100080e2:	bdf0      	pop	{r4, r5, r6, r7, pc}

100080e4 <__exponent>:
100080e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
100080e6:	232b      	movs	r3, #43	; 0x2b
100080e8:	1c07      	adds	r7, r0, #0
100080ea:	1c0c      	adds	r4, r1, #0
100080ec:	7002      	strb	r2, [r0, #0]
100080ee:	1c86      	adds	r6, r0, #2
100080f0:	2900      	cmp	r1, #0
100080f2:	da01      	bge.n	100080f8 <__exponent+0x14>
100080f4:	232d      	movs	r3, #45	; 0x2d
100080f6:	424c      	negs	r4, r1
100080f8:	707b      	strb	r3, [r7, #1]
100080fa:	2c09      	cmp	r4, #9
100080fc:	dd1c      	ble.n	10008138 <__exponent+0x54>
100080fe:	466b      	mov	r3, sp
10008100:	1ddd      	adds	r5, r3, #7
10008102:	1c20      	adds	r0, r4, #0
10008104:	210a      	movs	r1, #10
10008106:	f7fa f99f 	bl	10002448 <__aeabi_idivmod>
1000810a:	3d01      	subs	r5, #1
1000810c:	3130      	adds	r1, #48	; 0x30
1000810e:	7029      	strb	r1, [r5, #0]
10008110:	1c20      	adds	r0, r4, #0
10008112:	210a      	movs	r1, #10
10008114:	f7fa f956 	bl	100023c4 <__aeabi_idiv>
10008118:	1e04      	subs	r4, r0, #0
1000811a:	2c09      	cmp	r4, #9
1000811c:	dcf1      	bgt.n	10008102 <__exponent+0x1e>
1000811e:	3d01      	subs	r5, #1
10008120:	3430      	adds	r4, #48	; 0x30
10008122:	702c      	strb	r4, [r5, #0]
10008124:	466b      	mov	r3, sp
10008126:	3307      	adds	r3, #7
10008128:	1c30      	adds	r0, r6, #0
1000812a:	42ab      	cmp	r3, r5
1000812c:	d909      	bls.n	10008142 <__exponent+0x5e>
1000812e:	782b      	ldrb	r3, [r5, #0]
10008130:	3501      	adds	r5, #1
10008132:	7033      	strb	r3, [r6, #0]
10008134:	3601      	adds	r6, #1
10008136:	e7f5      	b.n	10008124 <__exponent+0x40>
10008138:	2330      	movs	r3, #48	; 0x30
1000813a:	18e4      	adds	r4, r4, r3
1000813c:	7033      	strb	r3, [r6, #0]
1000813e:	1cb0      	adds	r0, r6, #2
10008140:	7074      	strb	r4, [r6, #1]
10008142:	1bc0      	subs	r0, r0, r7
10008144:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	...

10008148 <_printf_float>:
10008148:	b5f0      	push	{r4, r5, r6, r7, lr}
1000814a:	b093      	sub	sp, #76	; 0x4c
1000814c:	1c0c      	adds	r4, r1, #0
1000814e:	9208      	str	r2, [sp, #32]
10008150:	9e18      	ldr	r6, [sp, #96]	; 0x60
10008152:	9309      	str	r3, [sp, #36]	; 0x24
10008154:	1c05      	adds	r5, r0, #0
10008156:	f001 fa8d 	bl	10009674 <_localeconv_r>
1000815a:	6803      	ldr	r3, [r0, #0]
1000815c:	1c18      	adds	r0, r3, #0
1000815e:	930b      	str	r3, [sp, #44]	; 0x2c
10008160:	f000 fbfa 	bl	10008958 <strlen>
10008164:	2300      	movs	r3, #0
10008166:	2207      	movs	r2, #7
10008168:	9310      	str	r3, [sp, #64]	; 0x40
1000816a:	6833      	ldr	r3, [r6, #0]
1000816c:	900c      	str	r0, [sp, #48]	; 0x30
1000816e:	3307      	adds	r3, #7
10008170:	4393      	bics	r3, r2
10008172:	1c1a      	adds	r2, r3, #0
10008174:	6818      	ldr	r0, [r3, #0]
10008176:	6859      	ldr	r1, [r3, #4]
10008178:	3208      	adds	r2, #8
1000817a:	7e27      	ldrb	r7, [r4, #24]
1000817c:	6032      	str	r2, [r6, #0]
1000817e:	64a0      	str	r0, [r4, #72]	; 0x48
10008180:	64e1      	str	r1, [r4, #76]	; 0x4c
10008182:	f000 fb9f 	bl	100088c4 <__fpclassifyd>
10008186:	2801      	cmp	r0, #1
10008188:	d118      	bne.n	100081bc <_printf_float+0x74>
1000818a:	6ca0      	ldr	r0, [r4, #72]	; 0x48
1000818c:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
1000818e:	2200      	movs	r2, #0
10008190:	2300      	movs	r3, #0
10008192:	f001 ffff 	bl	1000a194 <__aeabi_dcmplt>
10008196:	2800      	cmp	r0, #0
10008198:	d003      	beq.n	100081a2 <_printf_float+0x5a>
1000819a:	1c23      	adds	r3, r4, #0
1000819c:	222d      	movs	r2, #45	; 0x2d
1000819e:	3343      	adds	r3, #67	; 0x43
100081a0:	701a      	strb	r2, [r3, #0]
100081a2:	4bb7      	ldr	r3, [pc, #732]	; (10008480 <_printf_float+0x338>)
100081a4:	930a      	str	r3, [sp, #40]	; 0x28
100081a6:	2f47      	cmp	r7, #71	; 0x47
100081a8:	d901      	bls.n	100081ae <_printf_float+0x66>
100081aa:	4bb6      	ldr	r3, [pc, #728]	; (10008484 <_printf_float+0x33c>)
100081ac:	930a      	str	r3, [sp, #40]	; 0x28
100081ae:	2303      	movs	r3, #3
100081b0:	6822      	ldr	r2, [r4, #0]
100081b2:	6123      	str	r3, [r4, #16]
100081b4:	3301      	adds	r3, #1
100081b6:	439a      	bics	r2, r3
100081b8:	6022      	str	r2, [r4, #0]
100081ba:	e012      	b.n	100081e2 <_printf_float+0x9a>
100081bc:	6ca0      	ldr	r0, [r4, #72]	; 0x48
100081be:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
100081c0:	f000 fb80 	bl	100088c4 <__fpclassifyd>
100081c4:	6826      	ldr	r6, [r4, #0]
100081c6:	2800      	cmp	r0, #0
100081c8:	d10d      	bne.n	100081e6 <_printf_float+0x9e>
100081ca:	4baf      	ldr	r3, [pc, #700]	; (10008488 <_printf_float+0x340>)
100081cc:	930a      	str	r3, [sp, #40]	; 0x28
100081ce:	2f47      	cmp	r7, #71	; 0x47
100081d0:	d901      	bls.n	100081d6 <_printf_float+0x8e>
100081d2:	4bae      	ldr	r3, [pc, #696]	; (1000848c <_printf_float+0x344>)
100081d4:	930a      	str	r3, [sp, #40]	; 0x28
100081d6:	2303      	movs	r3, #3
100081d8:	1c31      	adds	r1, r6, #0
100081da:	6123      	str	r3, [r4, #16]
100081dc:	3301      	adds	r3, #1
100081de:	4399      	bics	r1, r3
100081e0:	6021      	str	r1, [r4, #0]
100081e2:	2600      	movs	r6, #0
100081e4:	e080      	b.n	100082e8 <_printf_float+0x1a0>
100081e6:	2180      	movs	r1, #128	; 0x80
100081e8:	6860      	ldr	r0, [r4, #4]
100081ea:	00c9      	lsls	r1, r1, #3
100081ec:	1c43      	adds	r3, r0, #1
100081ee:	d101      	bne.n	100081f4 <_printf_float+0xac>
100081f0:	2306      	movs	r3, #6
100081f2:	e009      	b.n	10008208 <_printf_float+0xc0>
100081f4:	6ca2      	ldr	r2, [r4, #72]	; 0x48
100081f6:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
100081f8:	2f67      	cmp	r7, #103	; 0x67
100081fa:	d001      	beq.n	10008200 <_printf_float+0xb8>
100081fc:	2f47      	cmp	r7, #71	; 0x47
100081fe:	d104      	bne.n	1000820a <_printf_float+0xc2>
10008200:	2800      	cmp	r0, #0
10008202:	d000      	beq.n	10008206 <_printf_float+0xbe>
10008204:	e1c1      	b.n	1000858a <_printf_float+0x442>
10008206:	2301      	movs	r3, #1
10008208:	6063      	str	r3, [r4, #4]
1000820a:	6863      	ldr	r3, [r4, #4]
1000820c:	4331      	orrs	r1, r6
1000820e:	9300      	str	r3, [sp, #0]
10008210:	2323      	movs	r3, #35	; 0x23
10008212:	6021      	str	r1, [r4, #0]
10008214:	9101      	str	r1, [sp, #4]
10008216:	2100      	movs	r1, #0
10008218:	aa06      	add	r2, sp, #24
1000821a:	189b      	adds	r3, r3, r2
1000821c:	9302      	str	r3, [sp, #8]
1000821e:	ab0f      	add	r3, sp, #60	; 0x3c
10008220:	9303      	str	r3, [sp, #12]
10008222:	ab10      	add	r3, sp, #64	; 0x40
10008224:	9305      	str	r3, [sp, #20]
10008226:	9704      	str	r7, [sp, #16]
10008228:	6ca2      	ldr	r2, [r4, #72]	; 0x48
1000822a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
1000822c:	9106      	str	r1, [sp, #24]
1000822e:	1c28      	adds	r0, r5, #0
10008230:	f7ff fef4 	bl	1000801c <__cvt>
10008234:	2320      	movs	r3, #32
10008236:	1c3a      	adds	r2, r7, #0
10008238:	900a      	str	r0, [sp, #40]	; 0x28
1000823a:	439a      	bics	r2, r3
1000823c:	2a47      	cmp	r2, #71	; 0x47
1000823e:	d107      	bne.n	10008250 <_printf_float+0x108>
10008240:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
10008242:	1cda      	adds	r2, r3, #3
10008244:	db02      	blt.n	1000824c <_printf_float+0x104>
10008246:	6862      	ldr	r2, [r4, #4]
10008248:	4293      	cmp	r3, r2
1000824a:	dd2d      	ble.n	100082a8 <_printf_float+0x160>
1000824c:	3f02      	subs	r7, #2
1000824e:	b2ff      	uxtb	r7, r7
10008250:	990f      	ldr	r1, [sp, #60]	; 0x3c
10008252:	2f65      	cmp	r7, #101	; 0x65
10008254:	d812      	bhi.n	1000827c <_printf_float+0x134>
10008256:	1c20      	adds	r0, r4, #0
10008258:	3901      	subs	r1, #1
1000825a:	1c3a      	adds	r2, r7, #0
1000825c:	3050      	adds	r0, #80	; 0x50
1000825e:	910f      	str	r1, [sp, #60]	; 0x3c
10008260:	f7ff ff40 	bl	100080e4 <__exponent>
10008264:	9a10      	ldr	r2, [sp, #64]	; 0x40
10008266:	1c06      	adds	r6, r0, #0
10008268:	1883      	adds	r3, r0, r2
1000826a:	6123      	str	r3, [r4, #16]
1000826c:	2a01      	cmp	r2, #1
1000826e:	dc02      	bgt.n	10008276 <_printf_float+0x12e>
10008270:	6822      	ldr	r2, [r4, #0]
10008272:	07d2      	lsls	r2, r2, #31
10008274:	d52e      	bpl.n	100082d4 <_printf_float+0x18c>
10008276:	3301      	adds	r3, #1
10008278:	6123      	str	r3, [r4, #16]
1000827a:	e02b      	b.n	100082d4 <_printf_float+0x18c>
1000827c:	2f66      	cmp	r7, #102	; 0x66
1000827e:	d114      	bne.n	100082aa <_printf_float+0x162>
10008280:	6863      	ldr	r3, [r4, #4]
10008282:	2900      	cmp	r1, #0
10008284:	dd08      	ble.n	10008298 <_printf_float+0x150>
10008286:	6121      	str	r1, [r4, #16]
10008288:	2b00      	cmp	r3, #0
1000828a:	d102      	bne.n	10008292 <_printf_float+0x14a>
1000828c:	6822      	ldr	r2, [r4, #0]
1000828e:	07d2      	lsls	r2, r2, #31
10008290:	d51d      	bpl.n	100082ce <_printf_float+0x186>
10008292:	3301      	adds	r3, #1
10008294:	18cb      	adds	r3, r1, r3
10008296:	e011      	b.n	100082bc <_printf_float+0x174>
10008298:	2b00      	cmp	r3, #0
1000829a:	d103      	bne.n	100082a4 <_printf_float+0x15c>
1000829c:	2201      	movs	r2, #1
1000829e:	6821      	ldr	r1, [r4, #0]
100082a0:	4211      	tst	r1, r2
100082a2:	d013      	beq.n	100082cc <_printf_float+0x184>
100082a4:	1c9a      	adds	r2, r3, #2
100082a6:	e011      	b.n	100082cc <_printf_float+0x184>
100082a8:	2767      	movs	r7, #103	; 0x67
100082aa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
100082ac:	9810      	ldr	r0, [sp, #64]	; 0x40
100082ae:	4283      	cmp	r3, r0
100082b0:	db06      	blt.n	100082c0 <_printf_float+0x178>
100082b2:	6822      	ldr	r2, [r4, #0]
100082b4:	6123      	str	r3, [r4, #16]
100082b6:	07d2      	lsls	r2, r2, #31
100082b8:	d509      	bpl.n	100082ce <_printf_float+0x186>
100082ba:	3301      	adds	r3, #1
100082bc:	6123      	str	r3, [r4, #16]
100082be:	e006      	b.n	100082ce <_printf_float+0x186>
100082c0:	2201      	movs	r2, #1
100082c2:	2b00      	cmp	r3, #0
100082c4:	dc01      	bgt.n	100082ca <_printf_float+0x182>
100082c6:	2102      	movs	r1, #2
100082c8:	1aca      	subs	r2, r1, r3
100082ca:	1882      	adds	r2, r0, r2
100082cc:	6122      	str	r2, [r4, #16]
100082ce:	2600      	movs	r6, #0
100082d0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
100082d2:	65a3      	str	r3, [r4, #88]	; 0x58
100082d4:	2323      	movs	r3, #35	; 0x23
100082d6:	aa06      	add	r2, sp, #24
100082d8:	189b      	adds	r3, r3, r2
100082da:	781b      	ldrb	r3, [r3, #0]
100082dc:	2b00      	cmp	r3, #0
100082de:	d003      	beq.n	100082e8 <_printf_float+0x1a0>
100082e0:	1c23      	adds	r3, r4, #0
100082e2:	222d      	movs	r2, #45	; 0x2d
100082e4:	3343      	adds	r3, #67	; 0x43
100082e6:	701a      	strb	r2, [r3, #0]
100082e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
100082ea:	1c28      	adds	r0, r5, #0
100082ec:	9300      	str	r3, [sp, #0]
100082ee:	1c21      	adds	r1, r4, #0
100082f0:	9b08      	ldr	r3, [sp, #32]
100082f2:	aa11      	add	r2, sp, #68	; 0x44
100082f4:	f000 f960 	bl	100085b8 <_printf_common>
100082f8:	1c43      	adds	r3, r0, #1
100082fa:	d102      	bne.n	10008302 <_printf_float+0x1ba>
100082fc:	2001      	movs	r0, #1
100082fe:	4240      	negs	r0, r0
10008300:	e157      	b.n	100085b2 <_printf_float+0x46a>
10008302:	6822      	ldr	r2, [r4, #0]
10008304:	0553      	lsls	r3, r2, #21
10008306:	d404      	bmi.n	10008312 <_printf_float+0x1ca>
10008308:	1c28      	adds	r0, r5, #0
1000830a:	9908      	ldr	r1, [sp, #32]
1000830c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
1000830e:	6923      	ldr	r3, [r4, #16]
10008310:	e117      	b.n	10008542 <_printf_float+0x3fa>
10008312:	2f65      	cmp	r7, #101	; 0x65
10008314:	d800      	bhi.n	10008318 <_printf_float+0x1d0>
10008316:	e0d5      	b.n	100084c4 <_printf_float+0x37c>
10008318:	6ca0      	ldr	r0, [r4, #72]	; 0x48
1000831a:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
1000831c:	2200      	movs	r2, #0
1000831e:	2300      	movs	r3, #0
10008320:	f001 ff32 	bl	1000a188 <__aeabi_dcmpeq>
10008324:	2800      	cmp	r0, #0
10008326:	d02b      	beq.n	10008380 <_printf_float+0x238>
10008328:	2301      	movs	r3, #1
1000832a:	1c28      	adds	r0, r5, #0
1000832c:	9908      	ldr	r1, [sp, #32]
1000832e:	4a58      	ldr	r2, [pc, #352]	; (10008490 <_printf_float+0x348>)
10008330:	9e09      	ldr	r6, [sp, #36]	; 0x24
10008332:	47b0      	blx	r6
10008334:	1c43      	adds	r3, r0, #1
10008336:	d0e1      	beq.n	100082fc <_printf_float+0x1b4>
10008338:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
1000833a:	9a10      	ldr	r2, [sp, #64]	; 0x40
1000833c:	4293      	cmp	r3, r2
1000833e:	db07      	blt.n	10008350 <_printf_float+0x208>
10008340:	6823      	ldr	r3, [r4, #0]
10008342:	07db      	lsls	r3, r3, #31
10008344:	d404      	bmi.n	10008350 <_printf_float+0x208>
10008346:	6823      	ldr	r3, [r4, #0]
10008348:	079b      	lsls	r3, r3, #30
1000834a:	d500      	bpl.n	1000834e <_printf_float+0x206>
1000834c:	e11b      	b.n	10008586 <_printf_float+0x43e>
1000834e:	e114      	b.n	1000857a <_printf_float+0x432>
10008350:	9e09      	ldr	r6, [sp, #36]	; 0x24
10008352:	1c28      	adds	r0, r5, #0
10008354:	9908      	ldr	r1, [sp, #32]
10008356:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
10008358:	9b0c      	ldr	r3, [sp, #48]	; 0x30
1000835a:	47b0      	blx	r6
1000835c:	2600      	movs	r6, #0
1000835e:	1c43      	adds	r3, r0, #1
10008360:	d0cc      	beq.n	100082fc <_printf_float+0x1b4>
10008362:	9b10      	ldr	r3, [sp, #64]	; 0x40
10008364:	3b01      	subs	r3, #1
10008366:	429e      	cmp	r6, r3
10008368:	daed      	bge.n	10008346 <_printf_float+0x1fe>
1000836a:	1c22      	adds	r2, r4, #0
1000836c:	2301      	movs	r3, #1
1000836e:	1c28      	adds	r0, r5, #0
10008370:	9908      	ldr	r1, [sp, #32]
10008372:	321a      	adds	r2, #26
10008374:	9f09      	ldr	r7, [sp, #36]	; 0x24
10008376:	47b8      	blx	r7
10008378:	1c43      	adds	r3, r0, #1
1000837a:	d0bf      	beq.n	100082fc <_printf_float+0x1b4>
1000837c:	3601      	adds	r6, #1
1000837e:	e7f0      	b.n	10008362 <_printf_float+0x21a>
10008380:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
10008382:	2b00      	cmp	r3, #0
10008384:	dc2b      	bgt.n	100083de <_printf_float+0x296>
10008386:	2301      	movs	r3, #1
10008388:	1c28      	adds	r0, r5, #0
1000838a:	9908      	ldr	r1, [sp, #32]
1000838c:	4a40      	ldr	r2, [pc, #256]	; (10008490 <_printf_float+0x348>)
1000838e:	9e09      	ldr	r6, [sp, #36]	; 0x24
10008390:	47b0      	blx	r6
10008392:	1c43      	adds	r3, r0, #1
10008394:	d0b2      	beq.n	100082fc <_printf_float+0x1b4>
10008396:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
10008398:	2b00      	cmp	r3, #0
1000839a:	d105      	bne.n	100083a8 <_printf_float+0x260>
1000839c:	9b10      	ldr	r3, [sp, #64]	; 0x40
1000839e:	2b00      	cmp	r3, #0
100083a0:	d102      	bne.n	100083a8 <_printf_float+0x260>
100083a2:	6823      	ldr	r3, [r4, #0]
100083a4:	07db      	lsls	r3, r3, #31
100083a6:	d5ce      	bpl.n	10008346 <_printf_float+0x1fe>
100083a8:	9e09      	ldr	r6, [sp, #36]	; 0x24
100083aa:	1c28      	adds	r0, r5, #0
100083ac:	9908      	ldr	r1, [sp, #32]
100083ae:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
100083b0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
100083b2:	47b0      	blx	r6
100083b4:	2600      	movs	r6, #0
100083b6:	1c43      	adds	r3, r0, #1
100083b8:	d0a0      	beq.n	100082fc <_printf_float+0x1b4>
100083ba:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
100083bc:	1c28      	adds	r0, r5, #0
100083be:	425b      	negs	r3, r3
100083c0:	9908      	ldr	r1, [sp, #32]
100083c2:	429e      	cmp	r6, r3
100083c4:	da08      	bge.n	100083d8 <_printf_float+0x290>
100083c6:	1c22      	adds	r2, r4, #0
100083c8:	2301      	movs	r3, #1
100083ca:	321a      	adds	r2, #26
100083cc:	9f09      	ldr	r7, [sp, #36]	; 0x24
100083ce:	47b8      	blx	r7
100083d0:	1c43      	adds	r3, r0, #1
100083d2:	d093      	beq.n	100082fc <_printf_float+0x1b4>
100083d4:	3601      	adds	r6, #1
100083d6:	e7f0      	b.n	100083ba <_printf_float+0x272>
100083d8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
100083da:	9b10      	ldr	r3, [sp, #64]	; 0x40
100083dc:	e0b1      	b.n	10008542 <_printf_float+0x3fa>
100083de:	9b10      	ldr	r3, [sp, #64]	; 0x40
100083e0:	6da6      	ldr	r6, [r4, #88]	; 0x58
100083e2:	429e      	cmp	r6, r3
100083e4:	dd00      	ble.n	100083e8 <_printf_float+0x2a0>
100083e6:	1c1e      	adds	r6, r3, #0
100083e8:	2e00      	cmp	r6, #0
100083ea:	dc01      	bgt.n	100083f0 <_printf_float+0x2a8>
100083ec:	2300      	movs	r3, #0
100083ee:	e014      	b.n	1000841a <_printf_float+0x2d2>
100083f0:	1c33      	adds	r3, r6, #0
100083f2:	1c28      	adds	r0, r5, #0
100083f4:	9908      	ldr	r1, [sp, #32]
100083f6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
100083f8:	9f09      	ldr	r7, [sp, #36]	; 0x24
100083fa:	47b8      	blx	r7
100083fc:	1c43      	adds	r3, r0, #1
100083fe:	d1f5      	bne.n	100083ec <_printf_float+0x2a4>
10008400:	e77c      	b.n	100082fc <_printf_float+0x1b4>
10008402:	1c22      	adds	r2, r4, #0
10008404:	2301      	movs	r3, #1
10008406:	1c28      	adds	r0, r5, #0
10008408:	9908      	ldr	r1, [sp, #32]
1000840a:	321a      	adds	r2, #26
1000840c:	9f09      	ldr	r7, [sp, #36]	; 0x24
1000840e:	47b8      	blx	r7
10008410:	1c43      	adds	r3, r0, #1
10008412:	d100      	bne.n	10008416 <_printf_float+0x2ce>
10008414:	e772      	b.n	100082fc <_printf_float+0x1b4>
10008416:	9b0d      	ldr	r3, [sp, #52]	; 0x34
10008418:	3301      	adds	r3, #1
1000841a:	930d      	str	r3, [sp, #52]	; 0x34
1000841c:	43f3      	mvns	r3, r6
1000841e:	6da2      	ldr	r2, [r4, #88]	; 0x58
10008420:	17db      	asrs	r3, r3, #31
10008422:	990d      	ldr	r1, [sp, #52]	; 0x34
10008424:	4033      	ands	r3, r6
10008426:	1ad3      	subs	r3, r2, r3
10008428:	4299      	cmp	r1, r3
1000842a:	dbea      	blt.n	10008402 <_printf_float+0x2ba>
1000842c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1000842e:	189e      	adds	r6, r3, r2
10008430:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
10008432:	9a10      	ldr	r2, [sp, #64]	; 0x40
10008434:	4293      	cmp	r3, r2
10008436:	db0e      	blt.n	10008456 <_printf_float+0x30e>
10008438:	6823      	ldr	r3, [r4, #0]
1000843a:	07db      	lsls	r3, r3, #31
1000843c:	d40b      	bmi.n	10008456 <_printf_float+0x30e>
1000843e:	9b10      	ldr	r3, [sp, #64]	; 0x40
10008440:	9a0a      	ldr	r2, [sp, #40]	; 0x28
10008442:	18d7      	adds	r7, r2, r3
10008444:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
10008446:	1bbf      	subs	r7, r7, r6
10008448:	1a9b      	subs	r3, r3, r2
1000844a:	429f      	cmp	r7, r3
1000844c:	dd00      	ble.n	10008450 <_printf_float+0x308>
1000844e:	1c1f      	adds	r7, r3, #0
10008450:	2f00      	cmp	r7, #0
10008452:	dc09      	bgt.n	10008468 <_printf_float+0x320>
10008454:	e011      	b.n	1000847a <_printf_float+0x332>
10008456:	9b0c      	ldr	r3, [sp, #48]	; 0x30
10008458:	1c28      	adds	r0, r5, #0
1000845a:	9908      	ldr	r1, [sp, #32]
1000845c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
1000845e:	9f09      	ldr	r7, [sp, #36]	; 0x24
10008460:	47b8      	blx	r7
10008462:	1c43      	adds	r3, r0, #1
10008464:	d1eb      	bne.n	1000843e <_printf_float+0x2f6>
10008466:	e749      	b.n	100082fc <_printf_float+0x1b4>
10008468:	1c32      	adds	r2, r6, #0
1000846a:	1c3b      	adds	r3, r7, #0
1000846c:	1c28      	adds	r0, r5, #0
1000846e:	9908      	ldr	r1, [sp, #32]
10008470:	9e09      	ldr	r6, [sp, #36]	; 0x24
10008472:	47b0      	blx	r6
10008474:	1c43      	adds	r3, r0, #1
10008476:	d100      	bne.n	1000847a <_printf_float+0x332>
10008478:	e740      	b.n	100082fc <_printf_float+0x1b4>
1000847a:	2300      	movs	r3, #0
1000847c:	e016      	b.n	100084ac <_printf_float+0x364>
1000847e:	46c0      	nop			; (mov r8, r8)
10008480:	1000b822 	.word	0x1000b822
10008484:	1000b826 	.word	0x1000b826
10008488:	1000b82a 	.word	0x1000b82a
1000848c:	1000b82e 	.word	0x1000b82e
10008490:	1000b832 	.word	0x1000b832
10008494:	1c22      	adds	r2, r4, #0
10008496:	2301      	movs	r3, #1
10008498:	1c28      	adds	r0, r5, #0
1000849a:	9908      	ldr	r1, [sp, #32]
1000849c:	321a      	adds	r2, #26
1000849e:	9e09      	ldr	r6, [sp, #36]	; 0x24
100084a0:	47b0      	blx	r6
100084a2:	1c43      	adds	r3, r0, #1
100084a4:	d100      	bne.n	100084a8 <_printf_float+0x360>
100084a6:	e729      	b.n	100082fc <_printf_float+0x1b4>
100084a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
100084aa:	3301      	adds	r3, #1
100084ac:	930a      	str	r3, [sp, #40]	; 0x28
100084ae:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
100084b0:	9b10      	ldr	r3, [sp, #64]	; 0x40
100084b2:	1a9a      	subs	r2, r3, r2
100084b4:	43fb      	mvns	r3, r7
100084b6:	17db      	asrs	r3, r3, #31
100084b8:	403b      	ands	r3, r7
100084ba:	1ad3      	subs	r3, r2, r3
100084bc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
100084be:	429a      	cmp	r2, r3
100084c0:	dbe8      	blt.n	10008494 <_printf_float+0x34c>
100084c2:	e740      	b.n	10008346 <_printf_float+0x1fe>
100084c4:	9b10      	ldr	r3, [sp, #64]	; 0x40
100084c6:	1c28      	adds	r0, r5, #0
100084c8:	9908      	ldr	r1, [sp, #32]
100084ca:	2b01      	cmp	r3, #1
100084cc:	dc02      	bgt.n	100084d4 <_printf_float+0x38c>
100084ce:	2301      	movs	r3, #1
100084d0:	421a      	tst	r2, r3
100084d2:	d03c      	beq.n	1000854e <_printf_float+0x406>
100084d4:	2301      	movs	r3, #1
100084d6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
100084d8:	9f09      	ldr	r7, [sp, #36]	; 0x24
100084da:	47b8      	blx	r7
100084dc:	1c43      	adds	r3, r0, #1
100084de:	d100      	bne.n	100084e2 <_printf_float+0x39a>
100084e0:	e70c      	b.n	100082fc <_printf_float+0x1b4>
100084e2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
100084e4:	1c28      	adds	r0, r5, #0
100084e6:	9908      	ldr	r1, [sp, #32]
100084e8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
100084ea:	9f09      	ldr	r7, [sp, #36]	; 0x24
100084ec:	47b8      	blx	r7
100084ee:	1c43      	adds	r3, r0, #1
100084f0:	d100      	bne.n	100084f4 <_printf_float+0x3ac>
100084f2:	e703      	b.n	100082fc <_printf_float+0x1b4>
100084f4:	6ca0      	ldr	r0, [r4, #72]	; 0x48
100084f6:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
100084f8:	2300      	movs	r3, #0
100084fa:	2200      	movs	r2, #0
100084fc:	f001 fe44 	bl	1000a188 <__aeabi_dcmpeq>
10008500:	2300      	movs	r3, #0
10008502:	2800      	cmp	r0, #0
10008504:	d112      	bne.n	1000852c <_printf_float+0x3e4>
10008506:	9a0a      	ldr	r2, [sp, #40]	; 0x28
10008508:	9b10      	ldr	r3, [sp, #64]	; 0x40
1000850a:	3201      	adds	r2, #1
1000850c:	3b01      	subs	r3, #1
1000850e:	1c28      	adds	r0, r5, #0
10008510:	9908      	ldr	r1, [sp, #32]
10008512:	e01d      	b.n	10008550 <_printf_float+0x408>
10008514:	1c22      	adds	r2, r4, #0
10008516:	2301      	movs	r3, #1
10008518:	1c28      	adds	r0, r5, #0
1000851a:	9908      	ldr	r1, [sp, #32]
1000851c:	321a      	adds	r2, #26
1000851e:	9f09      	ldr	r7, [sp, #36]	; 0x24
10008520:	47b8      	blx	r7
10008522:	1c43      	adds	r3, r0, #1
10008524:	d100      	bne.n	10008528 <_printf_float+0x3e0>
10008526:	e6e9      	b.n	100082fc <_printf_float+0x1b4>
10008528:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1000852a:	3301      	adds	r3, #1
1000852c:	930a      	str	r3, [sp, #40]	; 0x28
1000852e:	9b10      	ldr	r3, [sp, #64]	; 0x40
10008530:	9a0a      	ldr	r2, [sp, #40]	; 0x28
10008532:	3b01      	subs	r3, #1
10008534:	429a      	cmp	r2, r3
10008536:	dbed      	blt.n	10008514 <_printf_float+0x3cc>
10008538:	1c22      	adds	r2, r4, #0
1000853a:	1c28      	adds	r0, r5, #0
1000853c:	1c33      	adds	r3, r6, #0
1000853e:	9908      	ldr	r1, [sp, #32]
10008540:	3250      	adds	r2, #80	; 0x50
10008542:	9e09      	ldr	r6, [sp, #36]	; 0x24
10008544:	47b0      	blx	r6
10008546:	1c43      	adds	r3, r0, #1
10008548:	d000      	beq.n	1000854c <_printf_float+0x404>
1000854a:	e6fc      	b.n	10008346 <_printf_float+0x1fe>
1000854c:	e6d6      	b.n	100082fc <_printf_float+0x1b4>
1000854e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
10008550:	9f09      	ldr	r7, [sp, #36]	; 0x24
10008552:	47b8      	blx	r7
10008554:	1c43      	adds	r3, r0, #1
10008556:	d1ef      	bne.n	10008538 <_printf_float+0x3f0>
10008558:	e6d0      	b.n	100082fc <_printf_float+0x1b4>
1000855a:	1c22      	adds	r2, r4, #0
1000855c:	2301      	movs	r3, #1
1000855e:	1c28      	adds	r0, r5, #0
10008560:	9908      	ldr	r1, [sp, #32]
10008562:	3219      	adds	r2, #25
10008564:	9f09      	ldr	r7, [sp, #36]	; 0x24
10008566:	47b8      	blx	r7
10008568:	1c43      	adds	r3, r0, #1
1000856a:	d100      	bne.n	1000856e <_printf_float+0x426>
1000856c:	e6c6      	b.n	100082fc <_printf_float+0x1b4>
1000856e:	3601      	adds	r6, #1
10008570:	68e3      	ldr	r3, [r4, #12]
10008572:	9a11      	ldr	r2, [sp, #68]	; 0x44
10008574:	1a9b      	subs	r3, r3, r2
10008576:	429e      	cmp	r6, r3
10008578:	dbef      	blt.n	1000855a <_printf_float+0x412>
1000857a:	9b11      	ldr	r3, [sp, #68]	; 0x44
1000857c:	68e0      	ldr	r0, [r4, #12]
1000857e:	4298      	cmp	r0, r3
10008580:	da17      	bge.n	100085b2 <_printf_float+0x46a>
10008582:	1c18      	adds	r0, r3, #0
10008584:	e015      	b.n	100085b2 <_printf_float+0x46a>
10008586:	2600      	movs	r6, #0
10008588:	e7f2      	b.n	10008570 <_printf_float+0x428>
1000858a:	4331      	orrs	r1, r6
1000858c:	6021      	str	r1, [r4, #0]
1000858e:	9101      	str	r1, [sp, #4]
10008590:	2123      	movs	r1, #35	; 0x23
10008592:	9000      	str	r0, [sp, #0]
10008594:	a806      	add	r0, sp, #24
10008596:	1809      	adds	r1, r1, r0
10008598:	9102      	str	r1, [sp, #8]
1000859a:	a90f      	add	r1, sp, #60	; 0x3c
1000859c:	9103      	str	r1, [sp, #12]
1000859e:	a910      	add	r1, sp, #64	; 0x40
100085a0:	9105      	str	r1, [sp, #20]
100085a2:	2100      	movs	r1, #0
100085a4:	9704      	str	r7, [sp, #16]
100085a6:	9106      	str	r1, [sp, #24]
100085a8:	1c28      	adds	r0, r5, #0
100085aa:	f7ff fd37 	bl	1000801c <__cvt>
100085ae:	900a      	str	r0, [sp, #40]	; 0x28
100085b0:	e646      	b.n	10008240 <_printf_float+0xf8>
100085b2:	b013      	add	sp, #76	; 0x4c
100085b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
100085b6:	46c0      	nop			; (mov r8, r8)

100085b8 <_printf_common>:
100085b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
100085ba:	1c17      	adds	r7, r2, #0
100085bc:	9301      	str	r3, [sp, #4]
100085be:	690a      	ldr	r2, [r1, #16]
100085c0:	688b      	ldr	r3, [r1, #8]
100085c2:	9000      	str	r0, [sp, #0]
100085c4:	1c0c      	adds	r4, r1, #0
100085c6:	4293      	cmp	r3, r2
100085c8:	da00      	bge.n	100085cc <_printf_common+0x14>
100085ca:	1c13      	adds	r3, r2, #0
100085cc:	1c22      	adds	r2, r4, #0
100085ce:	603b      	str	r3, [r7, #0]
100085d0:	3243      	adds	r2, #67	; 0x43
100085d2:	7812      	ldrb	r2, [r2, #0]
100085d4:	2a00      	cmp	r2, #0
100085d6:	d001      	beq.n	100085dc <_printf_common+0x24>
100085d8:	3301      	adds	r3, #1
100085da:	603b      	str	r3, [r7, #0]
100085dc:	6823      	ldr	r3, [r4, #0]
100085de:	069b      	lsls	r3, r3, #26
100085e0:	d502      	bpl.n	100085e8 <_printf_common+0x30>
100085e2:	683b      	ldr	r3, [r7, #0]
100085e4:	3302      	adds	r3, #2
100085e6:	603b      	str	r3, [r7, #0]
100085e8:	2506      	movs	r5, #6
100085ea:	6823      	ldr	r3, [r4, #0]
100085ec:	401d      	ands	r5, r3
100085ee:	d01e      	beq.n	1000862e <_printf_common+0x76>
100085f0:	1c23      	adds	r3, r4, #0
100085f2:	3343      	adds	r3, #67	; 0x43
100085f4:	781b      	ldrb	r3, [r3, #0]
100085f6:	1e5a      	subs	r2, r3, #1
100085f8:	4193      	sbcs	r3, r2
100085fa:	6822      	ldr	r2, [r4, #0]
100085fc:	0692      	lsls	r2, r2, #26
100085fe:	d51c      	bpl.n	1000863a <_printf_common+0x82>
10008600:	2030      	movs	r0, #48	; 0x30
10008602:	18e1      	adds	r1, r4, r3
10008604:	3140      	adds	r1, #64	; 0x40
10008606:	70c8      	strb	r0, [r1, #3]
10008608:	1c21      	adds	r1, r4, #0
1000860a:	1c5a      	adds	r2, r3, #1
1000860c:	3145      	adds	r1, #69	; 0x45
1000860e:	7809      	ldrb	r1, [r1, #0]
10008610:	18a2      	adds	r2, r4, r2
10008612:	3240      	adds	r2, #64	; 0x40
10008614:	3302      	adds	r3, #2
10008616:	70d1      	strb	r1, [r2, #3]
10008618:	e00f      	b.n	1000863a <_printf_common+0x82>
1000861a:	1c22      	adds	r2, r4, #0
1000861c:	2301      	movs	r3, #1
1000861e:	9800      	ldr	r0, [sp, #0]
10008620:	9901      	ldr	r1, [sp, #4]
10008622:	3219      	adds	r2, #25
10008624:	9e08      	ldr	r6, [sp, #32]
10008626:	47b0      	blx	r6
10008628:	1c43      	adds	r3, r0, #1
1000862a:	d00e      	beq.n	1000864a <_printf_common+0x92>
1000862c:	3501      	adds	r5, #1
1000862e:	68e3      	ldr	r3, [r4, #12]
10008630:	683a      	ldr	r2, [r7, #0]
10008632:	1a9b      	subs	r3, r3, r2
10008634:	429d      	cmp	r5, r3
10008636:	dbf0      	blt.n	1000861a <_printf_common+0x62>
10008638:	e7da      	b.n	100085f0 <_printf_common+0x38>
1000863a:	1c22      	adds	r2, r4, #0
1000863c:	9800      	ldr	r0, [sp, #0]
1000863e:	9901      	ldr	r1, [sp, #4]
10008640:	3243      	adds	r2, #67	; 0x43
10008642:	9d08      	ldr	r5, [sp, #32]
10008644:	47a8      	blx	r5
10008646:	1c43      	adds	r3, r0, #1
10008648:	d102      	bne.n	10008650 <_printf_common+0x98>
1000864a:	2001      	movs	r0, #1
1000864c:	4240      	negs	r0, r0
1000864e:	e020      	b.n	10008692 <_printf_common+0xda>
10008650:	2306      	movs	r3, #6
10008652:	6820      	ldr	r0, [r4, #0]
10008654:	68e1      	ldr	r1, [r4, #12]
10008656:	683a      	ldr	r2, [r7, #0]
10008658:	4003      	ands	r3, r0
1000865a:	2500      	movs	r5, #0
1000865c:	2b04      	cmp	r3, #4
1000865e:	d103      	bne.n	10008668 <_printf_common+0xb0>
10008660:	1a8d      	subs	r5, r1, r2
10008662:	43eb      	mvns	r3, r5
10008664:	17db      	asrs	r3, r3, #31
10008666:	401d      	ands	r5, r3
10008668:	68a3      	ldr	r3, [r4, #8]
1000866a:	6922      	ldr	r2, [r4, #16]
1000866c:	4293      	cmp	r3, r2
1000866e:	dd01      	ble.n	10008674 <_printf_common+0xbc>
10008670:	1a9b      	subs	r3, r3, r2
10008672:	18ed      	adds	r5, r5, r3
10008674:	2700      	movs	r7, #0
10008676:	42af      	cmp	r7, r5
10008678:	da0a      	bge.n	10008690 <_printf_common+0xd8>
1000867a:	1c22      	adds	r2, r4, #0
1000867c:	2301      	movs	r3, #1
1000867e:	9800      	ldr	r0, [sp, #0]
10008680:	9901      	ldr	r1, [sp, #4]
10008682:	321a      	adds	r2, #26
10008684:	9e08      	ldr	r6, [sp, #32]
10008686:	47b0      	blx	r6
10008688:	1c43      	adds	r3, r0, #1
1000868a:	d0de      	beq.n	1000864a <_printf_common+0x92>
1000868c:	3701      	adds	r7, #1
1000868e:	e7f2      	b.n	10008676 <_printf_common+0xbe>
10008690:	2000      	movs	r0, #0
10008692:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

10008694 <_printf_i>:
10008694:	b5f0      	push	{r4, r5, r6, r7, lr}
10008696:	b08b      	sub	sp, #44	; 0x2c
10008698:	9206      	str	r2, [sp, #24]
1000869a:	1c0a      	adds	r2, r1, #0
1000869c:	3243      	adds	r2, #67	; 0x43
1000869e:	9307      	str	r3, [sp, #28]
100086a0:	9005      	str	r0, [sp, #20]
100086a2:	9204      	str	r2, [sp, #16]
100086a4:	7e0a      	ldrb	r2, [r1, #24]
100086a6:	1c0c      	adds	r4, r1, #0
100086a8:	9b10      	ldr	r3, [sp, #64]	; 0x40
100086aa:	2a6e      	cmp	r2, #110	; 0x6e
100086ac:	d100      	bne.n	100086b0 <_printf_i+0x1c>
100086ae:	e0a8      	b.n	10008802 <_printf_i+0x16e>
100086b0:	d811      	bhi.n	100086d6 <_printf_i+0x42>
100086b2:	2a63      	cmp	r2, #99	; 0x63
100086b4:	d022      	beq.n	100086fc <_printf_i+0x68>
100086b6:	d809      	bhi.n	100086cc <_printf_i+0x38>
100086b8:	2a00      	cmp	r2, #0
100086ba:	d100      	bne.n	100086be <_printf_i+0x2a>
100086bc:	e0b2      	b.n	10008824 <_printf_i+0x190>
100086be:	2a58      	cmp	r2, #88	; 0x58
100086c0:	d000      	beq.n	100086c4 <_printf_i+0x30>
100086c2:	e0c2      	b.n	1000884a <_printf_i+0x1b6>
100086c4:	3145      	adds	r1, #69	; 0x45
100086c6:	700a      	strb	r2, [r1, #0]
100086c8:	4a7c      	ldr	r2, [pc, #496]	; (100088bc <_printf_i+0x228>)
100086ca:	e04f      	b.n	1000876c <_printf_i+0xd8>
100086cc:	2a64      	cmp	r2, #100	; 0x64
100086ce:	d01d      	beq.n	1000870c <_printf_i+0x78>
100086d0:	2a69      	cmp	r2, #105	; 0x69
100086d2:	d01b      	beq.n	1000870c <_printf_i+0x78>
100086d4:	e0b9      	b.n	1000884a <_printf_i+0x1b6>
100086d6:	2a73      	cmp	r2, #115	; 0x73
100086d8:	d100      	bne.n	100086dc <_printf_i+0x48>
100086da:	e0a7      	b.n	1000882c <_printf_i+0x198>
100086dc:	d809      	bhi.n	100086f2 <_printf_i+0x5e>
100086de:	2a6f      	cmp	r2, #111	; 0x6f
100086e0:	d029      	beq.n	10008736 <_printf_i+0xa2>
100086e2:	2a70      	cmp	r2, #112	; 0x70
100086e4:	d000      	beq.n	100086e8 <_printf_i+0x54>
100086e6:	e0b0      	b.n	1000884a <_printf_i+0x1b6>
100086e8:	2220      	movs	r2, #32
100086ea:	6809      	ldr	r1, [r1, #0]
100086ec:	430a      	orrs	r2, r1
100086ee:	6022      	str	r2, [r4, #0]
100086f0:	e037      	b.n	10008762 <_printf_i+0xce>
100086f2:	2a75      	cmp	r2, #117	; 0x75
100086f4:	d01f      	beq.n	10008736 <_printf_i+0xa2>
100086f6:	2a78      	cmp	r2, #120	; 0x78
100086f8:	d033      	beq.n	10008762 <_printf_i+0xce>
100086fa:	e0a6      	b.n	1000884a <_printf_i+0x1b6>
100086fc:	1c0d      	adds	r5, r1, #0
100086fe:	681a      	ldr	r2, [r3, #0]
10008700:	3542      	adds	r5, #66	; 0x42
10008702:	1d11      	adds	r1, r2, #4
10008704:	6019      	str	r1, [r3, #0]
10008706:	6813      	ldr	r3, [r2, #0]
10008708:	702b      	strb	r3, [r5, #0]
1000870a:	e0a1      	b.n	10008850 <_printf_i+0x1bc>
1000870c:	6821      	ldr	r1, [r4, #0]
1000870e:	681a      	ldr	r2, [r3, #0]
10008710:	0608      	lsls	r0, r1, #24
10008712:	d503      	bpl.n	1000871c <_printf_i+0x88>
10008714:	1d11      	adds	r1, r2, #4
10008716:	6019      	str	r1, [r3, #0]
10008718:	6816      	ldr	r6, [r2, #0]
1000871a:	e005      	b.n	10008728 <_printf_i+0x94>
1000871c:	0649      	lsls	r1, r1, #25
1000871e:	d5f9      	bpl.n	10008714 <_printf_i+0x80>
10008720:	1d11      	adds	r1, r2, #4
10008722:	6019      	str	r1, [r3, #0]
10008724:	2300      	movs	r3, #0
10008726:	5ed6      	ldrsh	r6, [r2, r3]
10008728:	2e00      	cmp	r6, #0
1000872a:	da3b      	bge.n	100087a4 <_printf_i+0x110>
1000872c:	232d      	movs	r3, #45	; 0x2d
1000872e:	9a04      	ldr	r2, [sp, #16]
10008730:	4276      	negs	r6, r6
10008732:	7013      	strb	r3, [r2, #0]
10008734:	e036      	b.n	100087a4 <_printf_i+0x110>
10008736:	6821      	ldr	r1, [r4, #0]
10008738:	681a      	ldr	r2, [r3, #0]
1000873a:	0608      	lsls	r0, r1, #24
1000873c:	d503      	bpl.n	10008746 <_printf_i+0xb2>
1000873e:	1d11      	adds	r1, r2, #4
10008740:	6019      	str	r1, [r3, #0]
10008742:	6816      	ldr	r6, [r2, #0]
10008744:	e005      	b.n	10008752 <_printf_i+0xbe>
10008746:	0649      	lsls	r1, r1, #25
10008748:	d5f9      	bpl.n	1000873e <_printf_i+0xaa>
1000874a:	1d11      	adds	r1, r2, #4
1000874c:	6019      	str	r1, [r3, #0]
1000874e:	6816      	ldr	r6, [r2, #0]
10008750:	b2b6      	uxth	r6, r6
10008752:	4b5a      	ldr	r3, [pc, #360]	; (100088bc <_printf_i+0x228>)
10008754:	7e22      	ldrb	r2, [r4, #24]
10008756:	9303      	str	r3, [sp, #12]
10008758:	270a      	movs	r7, #10
1000875a:	2a6f      	cmp	r2, #111	; 0x6f
1000875c:	d11d      	bne.n	1000879a <_printf_i+0x106>
1000875e:	2708      	movs	r7, #8
10008760:	e01b      	b.n	1000879a <_printf_i+0x106>
10008762:	1c22      	adds	r2, r4, #0
10008764:	2178      	movs	r1, #120	; 0x78
10008766:	3245      	adds	r2, #69	; 0x45
10008768:	7011      	strb	r1, [r2, #0]
1000876a:	4a55      	ldr	r2, [pc, #340]	; (100088c0 <_printf_i+0x22c>)
1000876c:	6819      	ldr	r1, [r3, #0]
1000876e:	9203      	str	r2, [sp, #12]
10008770:	1d08      	adds	r0, r1, #4
10008772:	6822      	ldr	r2, [r4, #0]
10008774:	6018      	str	r0, [r3, #0]
10008776:	680e      	ldr	r6, [r1, #0]
10008778:	0610      	lsls	r0, r2, #24
1000877a:	d402      	bmi.n	10008782 <_printf_i+0xee>
1000877c:	0650      	lsls	r0, r2, #25
1000877e:	d500      	bpl.n	10008782 <_printf_i+0xee>
10008780:	b2b6      	uxth	r6, r6
10008782:	07d3      	lsls	r3, r2, #31
10008784:	d502      	bpl.n	1000878c <_printf_i+0xf8>
10008786:	2320      	movs	r3, #32
10008788:	431a      	orrs	r2, r3
1000878a:	6022      	str	r2, [r4, #0]
1000878c:	2710      	movs	r7, #16
1000878e:	2e00      	cmp	r6, #0
10008790:	d103      	bne.n	1000879a <_printf_i+0x106>
10008792:	2320      	movs	r3, #32
10008794:	6822      	ldr	r2, [r4, #0]
10008796:	439a      	bics	r2, r3
10008798:	6022      	str	r2, [r4, #0]
1000879a:	1c23      	adds	r3, r4, #0
1000879c:	2200      	movs	r2, #0
1000879e:	3343      	adds	r3, #67	; 0x43
100087a0:	701a      	strb	r2, [r3, #0]
100087a2:	e002      	b.n	100087aa <_printf_i+0x116>
100087a4:	270a      	movs	r7, #10
100087a6:	4b45      	ldr	r3, [pc, #276]	; (100088bc <_printf_i+0x228>)
100087a8:	9303      	str	r3, [sp, #12]
100087aa:	6863      	ldr	r3, [r4, #4]
100087ac:	60a3      	str	r3, [r4, #8]
100087ae:	2b00      	cmp	r3, #0
100087b0:	db03      	blt.n	100087ba <_printf_i+0x126>
100087b2:	2204      	movs	r2, #4
100087b4:	6821      	ldr	r1, [r4, #0]
100087b6:	4391      	bics	r1, r2
100087b8:	6021      	str	r1, [r4, #0]
100087ba:	2e00      	cmp	r6, #0
100087bc:	d102      	bne.n	100087c4 <_printf_i+0x130>
100087be:	9d04      	ldr	r5, [sp, #16]
100087c0:	2b00      	cmp	r3, #0
100087c2:	d00e      	beq.n	100087e2 <_printf_i+0x14e>
100087c4:	9d04      	ldr	r5, [sp, #16]
100087c6:	1c30      	adds	r0, r6, #0
100087c8:	1c39      	adds	r1, r7, #0
100087ca:	f7f9 fe11 	bl	100023f0 <__aeabi_uidivmod>
100087ce:	9b03      	ldr	r3, [sp, #12]
100087d0:	3d01      	subs	r5, #1
100087d2:	5c5b      	ldrb	r3, [r3, r1]
100087d4:	1c30      	adds	r0, r6, #0
100087d6:	702b      	strb	r3, [r5, #0]
100087d8:	1c39      	adds	r1, r7, #0
100087da:	f7f9 fddd 	bl	10002398 <__aeabi_uidiv>
100087de:	1e06      	subs	r6, r0, #0
100087e0:	d1f1      	bne.n	100087c6 <_printf_i+0x132>
100087e2:	2f08      	cmp	r7, #8
100087e4:	d109      	bne.n	100087fa <_printf_i+0x166>
100087e6:	6823      	ldr	r3, [r4, #0]
100087e8:	07db      	lsls	r3, r3, #31
100087ea:	d506      	bpl.n	100087fa <_printf_i+0x166>
100087ec:	6863      	ldr	r3, [r4, #4]
100087ee:	6922      	ldr	r2, [r4, #16]
100087f0:	4293      	cmp	r3, r2
100087f2:	dc02      	bgt.n	100087fa <_printf_i+0x166>
100087f4:	2330      	movs	r3, #48	; 0x30
100087f6:	3d01      	subs	r5, #1
100087f8:	702b      	strb	r3, [r5, #0]
100087fa:	9b04      	ldr	r3, [sp, #16]
100087fc:	1b5b      	subs	r3, r3, r5
100087fe:	6123      	str	r3, [r4, #16]
10008800:	e02b      	b.n	1000885a <_printf_i+0x1c6>
10008802:	6809      	ldr	r1, [r1, #0]
10008804:	681a      	ldr	r2, [r3, #0]
10008806:	0608      	lsls	r0, r1, #24
10008808:	d407      	bmi.n	1000881a <_printf_i+0x186>
1000880a:	0649      	lsls	r1, r1, #25
1000880c:	d505      	bpl.n	1000881a <_printf_i+0x186>
1000880e:	1d11      	adds	r1, r2, #4
10008810:	6019      	str	r1, [r3, #0]
10008812:	6813      	ldr	r3, [r2, #0]
10008814:	8aa2      	ldrh	r2, [r4, #20]
10008816:	801a      	strh	r2, [r3, #0]
10008818:	e004      	b.n	10008824 <_printf_i+0x190>
1000881a:	1d11      	adds	r1, r2, #4
1000881c:	6019      	str	r1, [r3, #0]
1000881e:	6813      	ldr	r3, [r2, #0]
10008820:	6962      	ldr	r2, [r4, #20]
10008822:	601a      	str	r2, [r3, #0]
10008824:	2300      	movs	r3, #0
10008826:	9d04      	ldr	r5, [sp, #16]
10008828:	6123      	str	r3, [r4, #16]
1000882a:	e016      	b.n	1000885a <_printf_i+0x1c6>
1000882c:	681a      	ldr	r2, [r3, #0]
1000882e:	1d11      	adds	r1, r2, #4
10008830:	6019      	str	r1, [r3, #0]
10008832:	6815      	ldr	r5, [r2, #0]
10008834:	2100      	movs	r1, #0
10008836:	1c28      	adds	r0, r5, #0
10008838:	6862      	ldr	r2, [r4, #4]
1000883a:	f000 ff29 	bl	10009690 <memchr>
1000883e:	2800      	cmp	r0, #0
10008840:	d001      	beq.n	10008846 <_printf_i+0x1b2>
10008842:	1b40      	subs	r0, r0, r5
10008844:	6060      	str	r0, [r4, #4]
10008846:	6863      	ldr	r3, [r4, #4]
10008848:	e003      	b.n	10008852 <_printf_i+0x1be>
1000884a:	1c25      	adds	r5, r4, #0
1000884c:	3542      	adds	r5, #66	; 0x42
1000884e:	702a      	strb	r2, [r5, #0]
10008850:	2301      	movs	r3, #1
10008852:	6123      	str	r3, [r4, #16]
10008854:	2300      	movs	r3, #0
10008856:	9a04      	ldr	r2, [sp, #16]
10008858:	7013      	strb	r3, [r2, #0]
1000885a:	9b07      	ldr	r3, [sp, #28]
1000885c:	9805      	ldr	r0, [sp, #20]
1000885e:	9300      	str	r3, [sp, #0]
10008860:	1c21      	adds	r1, r4, #0
10008862:	9b06      	ldr	r3, [sp, #24]
10008864:	aa09      	add	r2, sp, #36	; 0x24
10008866:	f7ff fea7 	bl	100085b8 <_printf_common>
1000886a:	1c43      	adds	r3, r0, #1
1000886c:	d102      	bne.n	10008874 <_printf_i+0x1e0>
1000886e:	2001      	movs	r0, #1
10008870:	4240      	negs	r0, r0
10008872:	e021      	b.n	100088b8 <_printf_i+0x224>
10008874:	1c2a      	adds	r2, r5, #0
10008876:	6923      	ldr	r3, [r4, #16]
10008878:	9805      	ldr	r0, [sp, #20]
1000887a:	9906      	ldr	r1, [sp, #24]
1000887c:	9d07      	ldr	r5, [sp, #28]
1000887e:	47a8      	blx	r5
10008880:	1c43      	adds	r3, r0, #1
10008882:	d0f4      	beq.n	1000886e <_printf_i+0x1da>
10008884:	6823      	ldr	r3, [r4, #0]
10008886:	079b      	lsls	r3, r3, #30
10008888:	d405      	bmi.n	10008896 <_printf_i+0x202>
1000888a:	9b09      	ldr	r3, [sp, #36]	; 0x24
1000888c:	68e0      	ldr	r0, [r4, #12]
1000888e:	4298      	cmp	r0, r3
10008890:	da12      	bge.n	100088b8 <_printf_i+0x224>
10008892:	1c18      	adds	r0, r3, #0
10008894:	e010      	b.n	100088b8 <_printf_i+0x224>
10008896:	2500      	movs	r5, #0
10008898:	68e3      	ldr	r3, [r4, #12]
1000889a:	9a09      	ldr	r2, [sp, #36]	; 0x24
1000889c:	1a9b      	subs	r3, r3, r2
1000889e:	429d      	cmp	r5, r3
100088a0:	daf3      	bge.n	1000888a <_printf_i+0x1f6>
100088a2:	1c22      	adds	r2, r4, #0
100088a4:	2301      	movs	r3, #1
100088a6:	9805      	ldr	r0, [sp, #20]
100088a8:	9906      	ldr	r1, [sp, #24]
100088aa:	3219      	adds	r2, #25
100088ac:	9e07      	ldr	r6, [sp, #28]
100088ae:	47b0      	blx	r6
100088b0:	1c43      	adds	r3, r0, #1
100088b2:	d0dc      	beq.n	1000886e <_printf_i+0x1da>
100088b4:	3501      	adds	r5, #1
100088b6:	e7ef      	b.n	10008898 <_printf_i+0x204>
100088b8:	b00b      	add	sp, #44	; 0x2c
100088ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
100088bc:	1000b834 	.word	0x1000b834
100088c0:	1000b845 	.word	0x1000b845

100088c4 <__fpclassifyd>:
100088c4:	b530      	push	{r4, r5, lr}
100088c6:	1c0c      	adds	r4, r1, #0
100088c8:	2302      	movs	r3, #2
100088ca:	4304      	orrs	r4, r0
100088cc:	d017      	beq.n	100088fe <__fpclassifyd+0x3a>
100088ce:	2480      	movs	r4, #128	; 0x80
100088d0:	0624      	lsls	r4, r4, #24
100088d2:	42a1      	cmp	r1, r4
100088d4:	d101      	bne.n	100088da <__fpclassifyd+0x16>
100088d6:	2800      	cmp	r0, #0
100088d8:	d011      	beq.n	100088fe <__fpclassifyd+0x3a>
100088da:	4b0a      	ldr	r3, [pc, #40]	; (10008904 <__fpclassifyd+0x40>)
100088dc:	0049      	lsls	r1, r1, #1
100088de:	0849      	lsrs	r1, r1, #1
100088e0:	4a09      	ldr	r2, [pc, #36]	; (10008908 <__fpclassifyd+0x44>)
100088e2:	18cc      	adds	r4, r1, r3
100088e4:	2304      	movs	r3, #4
100088e6:	4294      	cmp	r4, r2
100088e8:	d909      	bls.n	100088fe <__fpclassifyd+0x3a>
100088ea:	4a08      	ldr	r2, [pc, #32]	; (1000890c <__fpclassifyd+0x48>)
100088ec:	3b01      	subs	r3, #1
100088ee:	4291      	cmp	r1, r2
100088f0:	d905      	bls.n	100088fe <__fpclassifyd+0x3a>
100088f2:	4a07      	ldr	r2, [pc, #28]	; (10008910 <__fpclassifyd+0x4c>)
100088f4:	2300      	movs	r3, #0
100088f6:	4291      	cmp	r1, r2
100088f8:	d101      	bne.n	100088fe <__fpclassifyd+0x3a>
100088fa:	4243      	negs	r3, r0
100088fc:	4143      	adcs	r3, r0
100088fe:	1c18      	adds	r0, r3, #0
10008900:	bd30      	pop	{r4, r5, pc}
10008902:	46c0      	nop			; (mov r8, r8)
10008904:	fff00000 	.word	0xfff00000
10008908:	7fdfffff 	.word	0x7fdfffff
1000890c:	000fffff 	.word	0x000fffff
10008910:	7ff00000 	.word	0x7ff00000

10008914 <siprintf>:
10008914:	b40e      	push	{r1, r2, r3}
10008916:	b510      	push	{r4, lr}
10008918:	b09d      	sub	sp, #116	; 0x74
1000891a:	a902      	add	r1, sp, #8
1000891c:	9002      	str	r0, [sp, #8]
1000891e:	6108      	str	r0, [r1, #16]
10008920:	480b      	ldr	r0, [pc, #44]	; (10008950 <siprintf+0x3c>)
10008922:	2482      	movs	r4, #130	; 0x82
10008924:	6088      	str	r0, [r1, #8]
10008926:	6148      	str	r0, [r1, #20]
10008928:	2001      	movs	r0, #1
1000892a:	4240      	negs	r0, r0
1000892c:	ab1f      	add	r3, sp, #124	; 0x7c
1000892e:	81c8      	strh	r0, [r1, #14]
10008930:	4808      	ldr	r0, [pc, #32]	; (10008954 <siprintf+0x40>)
10008932:	cb04      	ldmia	r3!, {r2}
10008934:	00a4      	lsls	r4, r4, #2
10008936:	6800      	ldr	r0, [r0, #0]
10008938:	9301      	str	r3, [sp, #4]
1000893a:	818c      	strh	r4, [r1, #12]
1000893c:	f001 fab4 	bl	10009ea8 <_svfiprintf_r>
10008940:	2300      	movs	r3, #0
10008942:	9a02      	ldr	r2, [sp, #8]
10008944:	7013      	strb	r3, [r2, #0]
10008946:	b01d      	add	sp, #116	; 0x74
10008948:	bc10      	pop	{r4}
1000894a:	bc08      	pop	{r3}
1000894c:	b003      	add	sp, #12
1000894e:	4718      	bx	r3
10008950:	7fffffff 	.word	0x7fffffff
10008954:	200012d0 	.word	0x200012d0

10008958 <strlen>:
10008958:	2300      	movs	r3, #0
1000895a:	5cc2      	ldrb	r2, [r0, r3]
1000895c:	3301      	adds	r3, #1
1000895e:	2a00      	cmp	r2, #0
10008960:	d1fb      	bne.n	1000895a <strlen+0x2>
10008962:	1e58      	subs	r0, r3, #1
10008964:	4770      	bx	lr

10008966 <quorem>:
10008966:	b5f0      	push	{r4, r5, r6, r7, lr}
10008968:	6903      	ldr	r3, [r0, #16]
1000896a:	690c      	ldr	r4, [r1, #16]
1000896c:	b089      	sub	sp, #36	; 0x24
1000896e:	2600      	movs	r6, #0
10008970:	42a3      	cmp	r3, r4
10008972:	db7c      	blt.n	10008a6e <quorem+0x108>
10008974:	1c0b      	adds	r3, r1, #0
10008976:	3c01      	subs	r4, #1
10008978:	3314      	adds	r3, #20
1000897a:	00a5      	lsls	r5, r4, #2
1000897c:	9303      	str	r3, [sp, #12]
1000897e:	195b      	adds	r3, r3, r5
10008980:	9304      	str	r3, [sp, #16]
10008982:	1c03      	adds	r3, r0, #0
10008984:	3314      	adds	r3, #20
10008986:	9301      	str	r3, [sp, #4]
10008988:	195d      	adds	r5, r3, r5
1000898a:	9b04      	ldr	r3, [sp, #16]
1000898c:	9107      	str	r1, [sp, #28]
1000898e:	681b      	ldr	r3, [r3, #0]
10008990:	9002      	str	r0, [sp, #8]
10008992:	1c59      	adds	r1, r3, #1
10008994:	6828      	ldr	r0, [r5, #0]
10008996:	9305      	str	r3, [sp, #20]
10008998:	f7f9 fcfe 	bl	10002398 <__aeabi_uidiv>
1000899c:	1e07      	subs	r7, r0, #0
1000899e:	42b7      	cmp	r7, r6
100089a0:	d035      	beq.n	10008a0e <quorem+0xa8>
100089a2:	9b03      	ldr	r3, [sp, #12]
100089a4:	9801      	ldr	r0, [sp, #4]
100089a6:	469c      	mov	ip, r3
100089a8:	9605      	str	r6, [sp, #20]
100089aa:	4663      	mov	r3, ip
100089ac:	cb04      	ldmia	r3!, {r2}
100089ae:	b291      	uxth	r1, r2
100089b0:	4379      	muls	r1, r7
100089b2:	0c12      	lsrs	r2, r2, #16
100089b4:	437a      	muls	r2, r7
100089b6:	1871      	adds	r1, r6, r1
100089b8:	0c0e      	lsrs	r6, r1, #16
100089ba:	469c      	mov	ip, r3
100089bc:	18b3      	adds	r3, r6, r2
100089be:	9306      	str	r3, [sp, #24]
100089c0:	8802      	ldrh	r2, [r0, #0]
100089c2:	0c1e      	lsrs	r6, r3, #16
100089c4:	9b05      	ldr	r3, [sp, #20]
100089c6:	b289      	uxth	r1, r1
100089c8:	18d2      	adds	r2, r2, r3
100089ca:	6803      	ldr	r3, [r0, #0]
100089cc:	1a52      	subs	r2, r2, r1
100089ce:	0c19      	lsrs	r1, r3, #16
100089d0:	466b      	mov	r3, sp
100089d2:	8b1b      	ldrh	r3, [r3, #24]
100089d4:	1acb      	subs	r3, r1, r3
100089d6:	1411      	asrs	r1, r2, #16
100089d8:	185b      	adds	r3, r3, r1
100089da:	1419      	asrs	r1, r3, #16
100089dc:	b292      	uxth	r2, r2
100089de:	041b      	lsls	r3, r3, #16
100089e0:	431a      	orrs	r2, r3
100089e2:	9b04      	ldr	r3, [sp, #16]
100089e4:	9105      	str	r1, [sp, #20]
100089e6:	c004      	stmia	r0!, {r2}
100089e8:	4563      	cmp	r3, ip
100089ea:	d2de      	bcs.n	100089aa <quorem+0x44>
100089ec:	682b      	ldr	r3, [r5, #0]
100089ee:	2b00      	cmp	r3, #0
100089f0:	d10d      	bne.n	10008a0e <quorem+0xa8>
100089f2:	1c23      	adds	r3, r4, #0
100089f4:	9a01      	ldr	r2, [sp, #4]
100089f6:	3d04      	subs	r5, #4
100089f8:	4295      	cmp	r5, r2
100089fa:	d803      	bhi.n	10008a04 <quorem+0x9e>
100089fc:	9a02      	ldr	r2, [sp, #8]
100089fe:	1c1c      	adds	r4, r3, #0
10008a00:	6113      	str	r3, [r2, #16]
10008a02:	e004      	b.n	10008a0e <quorem+0xa8>
10008a04:	682a      	ldr	r2, [r5, #0]
10008a06:	2a00      	cmp	r2, #0
10008a08:	d1f8      	bne.n	100089fc <quorem+0x96>
10008a0a:	3b01      	subs	r3, #1
10008a0c:	e7f2      	b.n	100089f4 <quorem+0x8e>
10008a0e:	9802      	ldr	r0, [sp, #8]
10008a10:	9907      	ldr	r1, [sp, #28]
10008a12:	f001 f863 	bl	10009adc <__mcmp>
10008a16:	2800      	cmp	r0, #0
10008a18:	db28      	blt.n	10008a6c <quorem+0x106>
10008a1a:	2000      	movs	r0, #0
10008a1c:	9901      	ldr	r1, [sp, #4]
10008a1e:	9a03      	ldr	r2, [sp, #12]
10008a20:	3701      	adds	r7, #1
10008a22:	ca20      	ldmia	r2!, {r5}
10008a24:	880b      	ldrh	r3, [r1, #0]
10008a26:	1818      	adds	r0, r3, r0
10008a28:	b2ab      	uxth	r3, r5
10008a2a:	1ac3      	subs	r3, r0, r3
10008a2c:	6808      	ldr	r0, [r1, #0]
10008a2e:	0c2d      	lsrs	r5, r5, #16
10008a30:	0c00      	lsrs	r0, r0, #16
10008a32:	1b45      	subs	r5, r0, r5
10008a34:	141e      	asrs	r6, r3, #16
10008a36:	19ad      	adds	r5, r5, r6
10008a38:	1428      	asrs	r0, r5, #16
10008a3a:	b29b      	uxth	r3, r3
10008a3c:	042d      	lsls	r5, r5, #16
10008a3e:	432b      	orrs	r3, r5
10008a40:	c108      	stmia	r1!, {r3}
10008a42:	9b04      	ldr	r3, [sp, #16]
10008a44:	4293      	cmp	r3, r2
10008a46:	d2ec      	bcs.n	10008a22 <quorem+0xbc>
10008a48:	9a01      	ldr	r2, [sp, #4]
10008a4a:	00a3      	lsls	r3, r4, #2
10008a4c:	18d3      	adds	r3, r2, r3
10008a4e:	681a      	ldr	r2, [r3, #0]
10008a50:	2a00      	cmp	r2, #0
10008a52:	d10b      	bne.n	10008a6c <quorem+0x106>
10008a54:	9a01      	ldr	r2, [sp, #4]
10008a56:	3b04      	subs	r3, #4
10008a58:	4293      	cmp	r3, r2
10008a5a:	d802      	bhi.n	10008a62 <quorem+0xfc>
10008a5c:	9b02      	ldr	r3, [sp, #8]
10008a5e:	611c      	str	r4, [r3, #16]
10008a60:	e004      	b.n	10008a6c <quorem+0x106>
10008a62:	681a      	ldr	r2, [r3, #0]
10008a64:	2a00      	cmp	r2, #0
10008a66:	d1f9      	bne.n	10008a5c <quorem+0xf6>
10008a68:	3c01      	subs	r4, #1
10008a6a:	e7f3      	b.n	10008a54 <quorem+0xee>
10008a6c:	1c3e      	adds	r6, r7, #0
10008a6e:	1c30      	adds	r0, r6, #0
10008a70:	b009      	add	sp, #36	; 0x24
10008a72:	bdf0      	pop	{r4, r5, r6, r7, pc}

10008a74 <_dtoa_r>:
10008a74:	b5f0      	push	{r4, r5, r6, r7, lr}
10008a76:	1c16      	adds	r6, r2, #0
10008a78:	1c1f      	adds	r7, r3, #0
10008a7a:	6a44      	ldr	r4, [r0, #36]	; 0x24
10008a7c:	b09b      	sub	sp, #108	; 0x6c
10008a7e:	9008      	str	r0, [sp, #32]
10008a80:	9d23      	ldr	r5, [sp, #140]	; 0x8c
10008a82:	9606      	str	r6, [sp, #24]
10008a84:	9707      	str	r7, [sp, #28]
10008a86:	2c00      	cmp	r4, #0
10008a88:	d108      	bne.n	10008a9c <_dtoa_r+0x28>
10008a8a:	2010      	movs	r0, #16
10008a8c:	f000 fdf6 	bl	1000967c <malloc>
10008a90:	9b08      	ldr	r3, [sp, #32]
10008a92:	6258      	str	r0, [r3, #36]	; 0x24
10008a94:	6044      	str	r4, [r0, #4]
10008a96:	6084      	str	r4, [r0, #8]
10008a98:	6004      	str	r4, [r0, #0]
10008a9a:	60c4      	str	r4, [r0, #12]
10008a9c:	9b08      	ldr	r3, [sp, #32]
10008a9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10008aa0:	6819      	ldr	r1, [r3, #0]
10008aa2:	2900      	cmp	r1, #0
10008aa4:	d00b      	beq.n	10008abe <_dtoa_r+0x4a>
10008aa6:	685a      	ldr	r2, [r3, #4]
10008aa8:	2301      	movs	r3, #1
10008aaa:	4093      	lsls	r3, r2
10008aac:	604a      	str	r2, [r1, #4]
10008aae:	608b      	str	r3, [r1, #8]
10008ab0:	9808      	ldr	r0, [sp, #32]
10008ab2:	f000 fe39 	bl	10009728 <_Bfree>
10008ab6:	2200      	movs	r2, #0
10008ab8:	9b08      	ldr	r3, [sp, #32]
10008aba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10008abc:	601a      	str	r2, [r3, #0]
10008abe:	9b07      	ldr	r3, [sp, #28]
10008ac0:	2b00      	cmp	r3, #0
10008ac2:	da05      	bge.n	10008ad0 <_dtoa_r+0x5c>
10008ac4:	2301      	movs	r3, #1
10008ac6:	602b      	str	r3, [r5, #0]
10008ac8:	007b      	lsls	r3, r7, #1
10008aca:	085b      	lsrs	r3, r3, #1
10008acc:	9307      	str	r3, [sp, #28]
10008ace:	e001      	b.n	10008ad4 <_dtoa_r+0x60>
10008ad0:	2300      	movs	r3, #0
10008ad2:	602b      	str	r3, [r5, #0]
10008ad4:	9c07      	ldr	r4, [sp, #28]
10008ad6:	4bc6      	ldr	r3, [pc, #792]	; (10008df0 <_dtoa_r+0x37c>)
10008ad8:	1c22      	adds	r2, r4, #0
10008ada:	9317      	str	r3, [sp, #92]	; 0x5c
10008adc:	401a      	ands	r2, r3
10008ade:	429a      	cmp	r2, r3
10008ae0:	d119      	bne.n	10008b16 <_dtoa_r+0xa2>
10008ae2:	4bc4      	ldr	r3, [pc, #784]	; (10008df4 <_dtoa_r+0x380>)
10008ae4:	9a22      	ldr	r2, [sp, #136]	; 0x88
10008ae6:	6013      	str	r3, [r2, #0]
10008ae8:	9a06      	ldr	r2, [sp, #24]
10008aea:	4bc3      	ldr	r3, [pc, #780]	; (10008df8 <_dtoa_r+0x384>)
10008aec:	2a00      	cmp	r2, #0
10008aee:	d102      	bne.n	10008af6 <_dtoa_r+0x82>
10008af0:	0324      	lsls	r4, r4, #12
10008af2:	d100      	bne.n	10008af6 <_dtoa_r+0x82>
10008af4:	4bc1      	ldr	r3, [pc, #772]	; (10008dfc <_dtoa_r+0x388>)
10008af6:	9a24      	ldr	r2, [sp, #144]	; 0x90
10008af8:	1c18      	adds	r0, r3, #0
10008afa:	2a00      	cmp	r2, #0
10008afc:	d101      	bne.n	10008b02 <_dtoa_r+0x8e>
10008afe:	f000 fdb6 	bl	1000966e <_dtoa_r+0xbfa>
10008b02:	78d9      	ldrb	r1, [r3, #3]
10008b04:	1cda      	adds	r2, r3, #3
10008b06:	2900      	cmp	r1, #0
10008b08:	d000      	beq.n	10008b0c <_dtoa_r+0x98>
10008b0a:	3205      	adds	r2, #5
10008b0c:	9924      	ldr	r1, [sp, #144]	; 0x90
10008b0e:	1c18      	adds	r0, r3, #0
10008b10:	600a      	str	r2, [r1, #0]
10008b12:	f000 fdac 	bl	1000966e <_dtoa_r+0xbfa>
10008b16:	9e06      	ldr	r6, [sp, #24]
10008b18:	9f07      	ldr	r7, [sp, #28]
10008b1a:	2200      	movs	r2, #0
10008b1c:	1c30      	adds	r0, r6, #0
10008b1e:	1c39      	adds	r1, r7, #0
10008b20:	2300      	movs	r3, #0
10008b22:	f001 fb31 	bl	1000a188 <__aeabi_dcmpeq>
10008b26:	1e05      	subs	r5, r0, #0
10008b28:	d00e      	beq.n	10008b48 <_dtoa_r+0xd4>
10008b2a:	2301      	movs	r3, #1
10008b2c:	9a22      	ldr	r2, [sp, #136]	; 0x88
10008b2e:	6013      	str	r3, [r2, #0]
10008b30:	4bb3      	ldr	r3, [pc, #716]	; (10008e00 <_dtoa_r+0x38c>)
10008b32:	9a24      	ldr	r2, [sp, #144]	; 0x90
10008b34:	1c18      	adds	r0, r3, #0
10008b36:	2a00      	cmp	r2, #0
10008b38:	d101      	bne.n	10008b3e <_dtoa_r+0xca>
10008b3a:	f000 fd98 	bl	1000966e <_dtoa_r+0xbfa>
10008b3e:	4ab1      	ldr	r2, [pc, #708]	; (10008e04 <_dtoa_r+0x390>)
10008b40:	9924      	ldr	r1, [sp, #144]	; 0x90
10008b42:	600a      	str	r2, [r1, #0]
10008b44:	f000 fd93 	bl	1000966e <_dtoa_r+0xbfa>
10008b48:	ab19      	add	r3, sp, #100	; 0x64
10008b4a:	9300      	str	r3, [sp, #0]
10008b4c:	ab18      	add	r3, sp, #96	; 0x60
10008b4e:	9301      	str	r3, [sp, #4]
10008b50:	9808      	ldr	r0, [sp, #32]
10008b52:	1c32      	adds	r2, r6, #0
10008b54:	1c3b      	adds	r3, r7, #0
10008b56:	f001 f847 	bl	10009be8 <__d2b>
10008b5a:	0061      	lsls	r1, r4, #1
10008b5c:	900a      	str	r0, [sp, #40]	; 0x28
10008b5e:	0d49      	lsrs	r1, r1, #21
10008b60:	d009      	beq.n	10008b76 <_dtoa_r+0x102>
10008b62:	0338      	lsls	r0, r7, #12
10008b64:	4ca8      	ldr	r4, [pc, #672]	; (10008e08 <_dtoa_r+0x394>)
10008b66:	0b00      	lsrs	r0, r0, #12
10008b68:	4304      	orrs	r4, r0
10008b6a:	48a8      	ldr	r0, [pc, #672]	; (10008e0c <_dtoa_r+0x398>)
10008b6c:	1c32      	adds	r2, r6, #0
10008b6e:	1c23      	adds	r3, r4, #0
10008b70:	180e      	adds	r6, r1, r0
10008b72:	9516      	str	r5, [sp, #88]	; 0x58
10008b74:	e01c      	b.n	10008bb0 <_dtoa_r+0x13c>
10008b76:	9b18      	ldr	r3, [sp, #96]	; 0x60
10008b78:	9a19      	ldr	r2, [sp, #100]	; 0x64
10008b7a:	189e      	adds	r6, r3, r2
10008b7c:	4ba4      	ldr	r3, [pc, #656]	; (10008e10 <_dtoa_r+0x39c>)
10008b7e:	429e      	cmp	r6, r3
10008b80:	db09      	blt.n	10008b96 <_dtoa_r+0x122>
10008b82:	4ba4      	ldr	r3, [pc, #656]	; (10008e14 <_dtoa_r+0x3a0>)
10008b84:	18f0      	adds	r0, r6, r3
10008b86:	9b06      	ldr	r3, [sp, #24]
10008b88:	40c3      	lsrs	r3, r0
10008b8a:	1c18      	adds	r0, r3, #0
10008b8c:	4ba2      	ldr	r3, [pc, #648]	; (10008e18 <_dtoa_r+0x3a4>)
10008b8e:	1b9b      	subs	r3, r3, r6
10008b90:	409c      	lsls	r4, r3
10008b92:	4320      	orrs	r0, r4
10008b94:	e004      	b.n	10008ba0 <_dtoa_r+0x12c>
10008b96:	48a1      	ldr	r0, [pc, #644]	; (10008e1c <_dtoa_r+0x3a8>)
10008b98:	9b06      	ldr	r3, [sp, #24]
10008b9a:	1b80      	subs	r0, r0, r6
10008b9c:	4083      	lsls	r3, r0
10008b9e:	1c18      	adds	r0, r3, #0
10008ba0:	f002 fad8 	bl	1000b154 <__aeabi_ui2d>
10008ba4:	4c9e      	ldr	r4, [pc, #632]	; (10008e20 <_dtoa_r+0x3ac>)
10008ba6:	1c02      	adds	r2, r0, #0
10008ba8:	190b      	adds	r3, r1, r4
10008baa:	2101      	movs	r1, #1
10008bac:	3e01      	subs	r6, #1
10008bae:	9116      	str	r1, [sp, #88]	; 0x58
10008bb0:	1c10      	adds	r0, r2, #0
10008bb2:	1c19      	adds	r1, r3, #0
10008bb4:	2200      	movs	r2, #0
10008bb6:	4b9b      	ldr	r3, [pc, #620]	; (10008e24 <_dtoa_r+0x3b0>)
10008bb8:	f001 ff52 	bl	1000aa60 <__aeabi_dsub>
10008bbc:	4a9a      	ldr	r2, [pc, #616]	; (10008e28 <_dtoa_r+0x3b4>)
10008bbe:	4b9b      	ldr	r3, [pc, #620]	; (10008e2c <_dtoa_r+0x3b8>)
10008bc0:	f7fe fdf2 	bl	100077a8 <__aeabi_dmul>
10008bc4:	4a9a      	ldr	r2, [pc, #616]	; (10008e30 <_dtoa_r+0x3bc>)
10008bc6:	4b9b      	ldr	r3, [pc, #620]	; (10008e34 <_dtoa_r+0x3c0>)
10008bc8:	f7fe fac6 	bl	10007158 <__aeabi_dadd>
10008bcc:	1c04      	adds	r4, r0, #0
10008bce:	1c30      	adds	r0, r6, #0
10008bd0:	1c0d      	adds	r5, r1, #0
10008bd2:	f7ff f8b9 	bl	10007d48 <__aeabi_i2d>
10008bd6:	4a98      	ldr	r2, [pc, #608]	; (10008e38 <_dtoa_r+0x3c4>)
10008bd8:	4b98      	ldr	r3, [pc, #608]	; (10008e3c <_dtoa_r+0x3c8>)
10008bda:	f7fe fde5 	bl	100077a8 <__aeabi_dmul>
10008bde:	1c02      	adds	r2, r0, #0
10008be0:	1c0b      	adds	r3, r1, #0
10008be2:	1c20      	adds	r0, r4, #0
10008be4:	1c29      	adds	r1, r5, #0
10008be6:	f7fe fab7 	bl	10007158 <__aeabi_dadd>
10008bea:	1c04      	adds	r4, r0, #0
10008bec:	1c0d      	adds	r5, r1, #0
10008bee:	f7ff f875 	bl	10007cdc <__aeabi_d2iz>
10008bf2:	1c29      	adds	r1, r5, #0
10008bf4:	9003      	str	r0, [sp, #12]
10008bf6:	2200      	movs	r2, #0
10008bf8:	1c20      	adds	r0, r4, #0
10008bfa:	2300      	movs	r3, #0
10008bfc:	f001 faca 	bl	1000a194 <__aeabi_dcmplt>
10008c00:	2800      	cmp	r0, #0
10008c02:	d00d      	beq.n	10008c20 <_dtoa_r+0x1ac>
10008c04:	9803      	ldr	r0, [sp, #12]
10008c06:	f7ff f89f 	bl	10007d48 <__aeabi_i2d>
10008c0a:	1c02      	adds	r2, r0, #0
10008c0c:	1c0b      	adds	r3, r1, #0
10008c0e:	1c20      	adds	r0, r4, #0
10008c10:	1c29      	adds	r1, r5, #0
10008c12:	f001 fab9 	bl	1000a188 <__aeabi_dcmpeq>
10008c16:	4243      	negs	r3, r0
10008c18:	4143      	adcs	r3, r0
10008c1a:	9a03      	ldr	r2, [sp, #12]
10008c1c:	1ad3      	subs	r3, r2, r3
10008c1e:	9303      	str	r3, [sp, #12]
10008c20:	2301      	movs	r3, #1
10008c22:	9313      	str	r3, [sp, #76]	; 0x4c
10008c24:	9b03      	ldr	r3, [sp, #12]
10008c26:	2b16      	cmp	r3, #22
10008c28:	d811      	bhi.n	10008c4e <_dtoa_r+0x1da>
10008c2a:	4a85      	ldr	r2, [pc, #532]	; (10008e40 <_dtoa_r+0x3cc>)
10008c2c:	00db      	lsls	r3, r3, #3
10008c2e:	18d3      	adds	r3, r2, r3
10008c30:	6818      	ldr	r0, [r3, #0]
10008c32:	6859      	ldr	r1, [r3, #4]
10008c34:	9a06      	ldr	r2, [sp, #24]
10008c36:	9b07      	ldr	r3, [sp, #28]
10008c38:	f001 fac0 	bl	1000a1bc <__aeabi_dcmpgt>
10008c3c:	2800      	cmp	r0, #0
10008c3e:	d005      	beq.n	10008c4c <_dtoa_r+0x1d8>
10008c40:	9b03      	ldr	r3, [sp, #12]
10008c42:	3b01      	subs	r3, #1
10008c44:	9303      	str	r3, [sp, #12]
10008c46:	2300      	movs	r3, #0
10008c48:	9313      	str	r3, [sp, #76]	; 0x4c
10008c4a:	e000      	b.n	10008c4e <_dtoa_r+0x1da>
10008c4c:	9013      	str	r0, [sp, #76]	; 0x4c
10008c4e:	9b18      	ldr	r3, [sp, #96]	; 0x60
10008c50:	1b9e      	subs	r6, r3, r6
10008c52:	2300      	movs	r3, #0
10008c54:	930d      	str	r3, [sp, #52]	; 0x34
10008c56:	3e01      	subs	r6, #1
10008c58:	960e      	str	r6, [sp, #56]	; 0x38
10008c5a:	d504      	bpl.n	10008c66 <_dtoa_r+0x1f2>
10008c5c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
10008c5e:	425b      	negs	r3, r3
10008c60:	930d      	str	r3, [sp, #52]	; 0x34
10008c62:	2300      	movs	r3, #0
10008c64:	930e      	str	r3, [sp, #56]	; 0x38
10008c66:	9b03      	ldr	r3, [sp, #12]
10008c68:	2b00      	cmp	r3, #0
10008c6a:	db08      	blt.n	10008c7e <_dtoa_r+0x20a>
10008c6c:	9a03      	ldr	r2, [sp, #12]
10008c6e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
10008c70:	4694      	mov	ip, r2
10008c72:	4463      	add	r3, ip
10008c74:	930e      	str	r3, [sp, #56]	; 0x38
10008c76:	2300      	movs	r3, #0
10008c78:	9212      	str	r2, [sp, #72]	; 0x48
10008c7a:	930f      	str	r3, [sp, #60]	; 0x3c
10008c7c:	e007      	b.n	10008c8e <_dtoa_r+0x21a>
10008c7e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
10008c80:	9a03      	ldr	r2, [sp, #12]
10008c82:	1a9b      	subs	r3, r3, r2
10008c84:	930d      	str	r3, [sp, #52]	; 0x34
10008c86:	4253      	negs	r3, r2
10008c88:	930f      	str	r3, [sp, #60]	; 0x3c
10008c8a:	2300      	movs	r3, #0
10008c8c:	9312      	str	r3, [sp, #72]	; 0x48
10008c8e:	9b20      	ldr	r3, [sp, #128]	; 0x80
10008c90:	2501      	movs	r5, #1
10008c92:	2b09      	cmp	r3, #9
10008c94:	d827      	bhi.n	10008ce6 <_dtoa_r+0x272>
10008c96:	2b05      	cmp	r3, #5
10008c98:	dd02      	ble.n	10008ca0 <_dtoa_r+0x22c>
10008c9a:	2500      	movs	r5, #0
10008c9c:	3b04      	subs	r3, #4
10008c9e:	9320      	str	r3, [sp, #128]	; 0x80
10008ca0:	9b20      	ldr	r3, [sp, #128]	; 0x80
10008ca2:	1e98      	subs	r0, r3, #2
10008ca4:	2803      	cmp	r0, #3
10008ca6:	d823      	bhi.n	10008cf0 <_dtoa_r+0x27c>
10008ca8:	f001 fa54 	bl	1000a154 <__gnu_thumb1_case_uqi>
10008cac:	10040e02 	.word	0x10040e02
10008cb0:	2300      	movs	r3, #0
10008cb2:	e000      	b.n	10008cb6 <_dtoa_r+0x242>
10008cb4:	2301      	movs	r3, #1
10008cb6:	9310      	str	r3, [sp, #64]	; 0x40
10008cb8:	9b21      	ldr	r3, [sp, #132]	; 0x84
10008cba:	2b00      	cmp	r3, #0
10008cbc:	dc21      	bgt.n	10008d02 <_dtoa_r+0x28e>
10008cbe:	2301      	movs	r3, #1
10008cc0:	930b      	str	r3, [sp, #44]	; 0x2c
10008cc2:	9309      	str	r3, [sp, #36]	; 0x24
10008cc4:	1c1a      	adds	r2, r3, #0
10008cc6:	e01a      	b.n	10008cfe <_dtoa_r+0x28a>
10008cc8:	2300      	movs	r3, #0
10008cca:	e000      	b.n	10008cce <_dtoa_r+0x25a>
10008ccc:	2301      	movs	r3, #1
10008cce:	9a03      	ldr	r2, [sp, #12]
10008cd0:	9310      	str	r3, [sp, #64]	; 0x40
10008cd2:	4694      	mov	ip, r2
10008cd4:	9b21      	ldr	r3, [sp, #132]	; 0x84
10008cd6:	4463      	add	r3, ip
10008cd8:	930b      	str	r3, [sp, #44]	; 0x2c
10008cda:	3301      	adds	r3, #1
10008cdc:	9309      	str	r3, [sp, #36]	; 0x24
10008cde:	2b00      	cmp	r3, #0
10008ce0:	dc12      	bgt.n	10008d08 <_dtoa_r+0x294>
10008ce2:	2301      	movs	r3, #1
10008ce4:	e010      	b.n	10008d08 <_dtoa_r+0x294>
10008ce6:	2300      	movs	r3, #0
10008ce8:	9510      	str	r5, [sp, #64]	; 0x40
10008cea:	9320      	str	r3, [sp, #128]	; 0x80
10008cec:	3b01      	subs	r3, #1
10008cee:	e002      	b.n	10008cf6 <_dtoa_r+0x282>
10008cf0:	2301      	movs	r3, #1
10008cf2:	9310      	str	r3, [sp, #64]	; 0x40
10008cf4:	3b02      	subs	r3, #2
10008cf6:	2200      	movs	r2, #0
10008cf8:	930b      	str	r3, [sp, #44]	; 0x2c
10008cfa:	9309      	str	r3, [sp, #36]	; 0x24
10008cfc:	3313      	adds	r3, #19
10008cfe:	9221      	str	r2, [sp, #132]	; 0x84
10008d00:	e002      	b.n	10008d08 <_dtoa_r+0x294>
10008d02:	9b21      	ldr	r3, [sp, #132]	; 0x84
10008d04:	930b      	str	r3, [sp, #44]	; 0x2c
10008d06:	9309      	str	r3, [sp, #36]	; 0x24
10008d08:	9a08      	ldr	r2, [sp, #32]
10008d0a:	6a54      	ldr	r4, [r2, #36]	; 0x24
10008d0c:	2200      	movs	r2, #0
10008d0e:	6062      	str	r2, [r4, #4]
10008d10:	3204      	adds	r2, #4
10008d12:	1c11      	adds	r1, r2, #0
10008d14:	3114      	adds	r1, #20
10008d16:	4299      	cmp	r1, r3
10008d18:	d804      	bhi.n	10008d24 <_dtoa_r+0x2b0>
10008d1a:	6861      	ldr	r1, [r4, #4]
10008d1c:	0052      	lsls	r2, r2, #1
10008d1e:	3101      	adds	r1, #1
10008d20:	6061      	str	r1, [r4, #4]
10008d22:	e7f6      	b.n	10008d12 <_dtoa_r+0x29e>
10008d24:	9808      	ldr	r0, [sp, #32]
10008d26:	6861      	ldr	r1, [r4, #4]
10008d28:	f000 fcc6 	bl	100096b8 <_Balloc>
10008d2c:	9b08      	ldr	r3, [sp, #32]
10008d2e:	6020      	str	r0, [r4, #0]
10008d30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10008d32:	681b      	ldr	r3, [r3, #0]
10008d34:	930c      	str	r3, [sp, #48]	; 0x30
10008d36:	9b09      	ldr	r3, [sp, #36]	; 0x24
10008d38:	2b0e      	cmp	r3, #14
10008d3a:	d900      	bls.n	10008d3e <_dtoa_r+0x2ca>
10008d3c:	e188      	b.n	10009050 <_dtoa_r+0x5dc>
10008d3e:	2d00      	cmp	r5, #0
10008d40:	d100      	bne.n	10008d44 <_dtoa_r+0x2d0>
10008d42:	e185      	b.n	10009050 <_dtoa_r+0x5dc>
10008d44:	9b06      	ldr	r3, [sp, #24]
10008d46:	9c07      	ldr	r4, [sp, #28]
10008d48:	9314      	str	r3, [sp, #80]	; 0x50
10008d4a:	9415      	str	r4, [sp, #84]	; 0x54
10008d4c:	9b03      	ldr	r3, [sp, #12]
10008d4e:	2b00      	cmp	r3, #0
10008d50:	dd30      	ble.n	10008db4 <_dtoa_r+0x340>
10008d52:	220f      	movs	r2, #15
10008d54:	493a      	ldr	r1, [pc, #232]	; (10008e40 <_dtoa_r+0x3cc>)
10008d56:	4013      	ands	r3, r2
10008d58:	00db      	lsls	r3, r3, #3
10008d5a:	18cb      	adds	r3, r1, r3
10008d5c:	685c      	ldr	r4, [r3, #4]
10008d5e:	681b      	ldr	r3, [r3, #0]
10008d60:	9304      	str	r3, [sp, #16]
10008d62:	9405      	str	r4, [sp, #20]
10008d64:	9b03      	ldr	r3, [sp, #12]
10008d66:	2702      	movs	r7, #2
10008d68:	111d      	asrs	r5, r3, #4
10008d6a:	06eb      	lsls	r3, r5, #27
10008d6c:	d50a      	bpl.n	10008d84 <_dtoa_r+0x310>
10008d6e:	9814      	ldr	r0, [sp, #80]	; 0x50
10008d70:	9915      	ldr	r1, [sp, #84]	; 0x54
10008d72:	4b34      	ldr	r3, [pc, #208]	; (10008e44 <_dtoa_r+0x3d0>)
10008d74:	4015      	ands	r5, r2
10008d76:	6a1a      	ldr	r2, [r3, #32]
10008d78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10008d7a:	f001 fa33 	bl	1000a1e4 <__aeabi_ddiv>
10008d7e:	9006      	str	r0, [sp, #24]
10008d80:	9107      	str	r1, [sp, #28]
10008d82:	3701      	adds	r7, #1
10008d84:	4c2f      	ldr	r4, [pc, #188]	; (10008e44 <_dtoa_r+0x3d0>)
10008d86:	2d00      	cmp	r5, #0
10008d88:	d00d      	beq.n	10008da6 <_dtoa_r+0x332>
10008d8a:	07eb      	lsls	r3, r5, #31
10008d8c:	d508      	bpl.n	10008da0 <_dtoa_r+0x32c>
10008d8e:	9804      	ldr	r0, [sp, #16]
10008d90:	9905      	ldr	r1, [sp, #20]
10008d92:	6822      	ldr	r2, [r4, #0]
10008d94:	6863      	ldr	r3, [r4, #4]
10008d96:	f7fe fd07 	bl	100077a8 <__aeabi_dmul>
10008d9a:	9004      	str	r0, [sp, #16]
10008d9c:	9105      	str	r1, [sp, #20]
10008d9e:	3701      	adds	r7, #1
10008da0:	106d      	asrs	r5, r5, #1
10008da2:	3408      	adds	r4, #8
10008da4:	e7ef      	b.n	10008d86 <_dtoa_r+0x312>
10008da6:	9806      	ldr	r0, [sp, #24]
10008da8:	9907      	ldr	r1, [sp, #28]
10008daa:	9a04      	ldr	r2, [sp, #16]
10008dac:	9b05      	ldr	r3, [sp, #20]
10008dae:	f001 fa19 	bl	1000a1e4 <__aeabi_ddiv>
10008db2:	e049      	b.n	10008e48 <_dtoa_r+0x3d4>
10008db4:	9b03      	ldr	r3, [sp, #12]
10008db6:	2702      	movs	r7, #2
10008db8:	425d      	negs	r5, r3
10008dba:	2d00      	cmp	r5, #0
10008dbc:	d046      	beq.n	10008e4c <_dtoa_r+0x3d8>
10008dbe:	9814      	ldr	r0, [sp, #80]	; 0x50
10008dc0:	9915      	ldr	r1, [sp, #84]	; 0x54
10008dc2:	230f      	movs	r3, #15
10008dc4:	4a1e      	ldr	r2, [pc, #120]	; (10008e40 <_dtoa_r+0x3cc>)
10008dc6:	402b      	ands	r3, r5
10008dc8:	00db      	lsls	r3, r3, #3
10008dca:	18d3      	adds	r3, r2, r3
10008dcc:	681a      	ldr	r2, [r3, #0]
10008dce:	685b      	ldr	r3, [r3, #4]
10008dd0:	f7fe fcea 	bl	100077a8 <__aeabi_dmul>
10008dd4:	4c1b      	ldr	r4, [pc, #108]	; (10008e44 <_dtoa_r+0x3d0>)
10008dd6:	112d      	asrs	r5, r5, #4
10008dd8:	2d00      	cmp	r5, #0
10008dda:	d035      	beq.n	10008e48 <_dtoa_r+0x3d4>
10008ddc:	07eb      	lsls	r3, r5, #31
10008dde:	d504      	bpl.n	10008dea <_dtoa_r+0x376>
10008de0:	6822      	ldr	r2, [r4, #0]
10008de2:	6863      	ldr	r3, [r4, #4]
10008de4:	3701      	adds	r7, #1
10008de6:	f7fe fcdf 	bl	100077a8 <__aeabi_dmul>
10008dea:	106d      	asrs	r5, r5, #1
10008dec:	3408      	adds	r4, #8
10008dee:	e7f3      	b.n	10008dd8 <_dtoa_r+0x364>
10008df0:	7ff00000 	.word	0x7ff00000
10008df4:	0000270f 	.word	0x0000270f
10008df8:	1000b85f 	.word	0x1000b85f
10008dfc:	1000b856 	.word	0x1000b856
10008e00:	1000b832 	.word	0x1000b832
10008e04:	1000b833 	.word	0x1000b833
10008e08:	3ff00000 	.word	0x3ff00000
10008e0c:	fffffc01 	.word	0xfffffc01
10008e10:	fffffbef 	.word	0xfffffbef
10008e14:	00000412 	.word	0x00000412
10008e18:	fffffc0e 	.word	0xfffffc0e
10008e1c:	fffffbee 	.word	0xfffffbee
10008e20:	fe100000 	.word	0xfe100000
10008e24:	3ff80000 	.word	0x3ff80000
10008e28:	636f4361 	.word	0x636f4361
10008e2c:	3fd287a7 	.word	0x3fd287a7
10008e30:	8b60c8b3 	.word	0x8b60c8b3
10008e34:	3fc68a28 	.word	0x3fc68a28
10008e38:	509f79fb 	.word	0x509f79fb
10008e3c:	3fd34413 	.word	0x3fd34413
10008e40:	1000b870 	.word	0x1000b870
10008e44:	1000b938 	.word	0x1000b938
10008e48:	9006      	str	r0, [sp, #24]
10008e4a:	9107      	str	r1, [sp, #28]
10008e4c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
10008e4e:	2b00      	cmp	r3, #0
10008e50:	d01e      	beq.n	10008e90 <_dtoa_r+0x41c>
10008e52:	9c06      	ldr	r4, [sp, #24]
10008e54:	9d07      	ldr	r5, [sp, #28]
10008e56:	2200      	movs	r2, #0
10008e58:	1c20      	adds	r0, r4, #0
10008e5a:	1c29      	adds	r1, r5, #0
10008e5c:	4bce      	ldr	r3, [pc, #824]	; (10009198 <_dtoa_r+0x724>)
10008e5e:	f001 f999 	bl	1000a194 <__aeabi_dcmplt>
10008e62:	2800      	cmp	r0, #0
10008e64:	d014      	beq.n	10008e90 <_dtoa_r+0x41c>
10008e66:	9b09      	ldr	r3, [sp, #36]	; 0x24
10008e68:	2b00      	cmp	r3, #0
10008e6a:	d011      	beq.n	10008e90 <_dtoa_r+0x41c>
10008e6c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
10008e6e:	2b00      	cmp	r3, #0
10008e70:	dc00      	bgt.n	10008e74 <_dtoa_r+0x400>
10008e72:	e0e9      	b.n	10009048 <_dtoa_r+0x5d4>
10008e74:	9b03      	ldr	r3, [sp, #12]
10008e76:	1c29      	adds	r1, r5, #0
10008e78:	3b01      	subs	r3, #1
10008e7a:	9311      	str	r3, [sp, #68]	; 0x44
10008e7c:	1c20      	adds	r0, r4, #0
10008e7e:	2200      	movs	r2, #0
10008e80:	4bc6      	ldr	r3, [pc, #792]	; (1000919c <_dtoa_r+0x728>)
10008e82:	f7fe fc91 	bl	100077a8 <__aeabi_dmul>
10008e86:	3701      	adds	r7, #1
10008e88:	9006      	str	r0, [sp, #24]
10008e8a:	9107      	str	r1, [sp, #28]
10008e8c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
10008e8e:	e002      	b.n	10008e96 <_dtoa_r+0x422>
10008e90:	9b03      	ldr	r3, [sp, #12]
10008e92:	9d09      	ldr	r5, [sp, #36]	; 0x24
10008e94:	9311      	str	r3, [sp, #68]	; 0x44
10008e96:	1c38      	adds	r0, r7, #0
10008e98:	9b06      	ldr	r3, [sp, #24]
10008e9a:	9c07      	ldr	r4, [sp, #28]
10008e9c:	9304      	str	r3, [sp, #16]
10008e9e:	9405      	str	r4, [sp, #20]
10008ea0:	f7fe ff52 	bl	10007d48 <__aeabi_i2d>
10008ea4:	9a04      	ldr	r2, [sp, #16]
10008ea6:	9b05      	ldr	r3, [sp, #20]
10008ea8:	f7fe fc7e 	bl	100077a8 <__aeabi_dmul>
10008eac:	2200      	movs	r2, #0
10008eae:	4bbc      	ldr	r3, [pc, #752]	; (100091a0 <_dtoa_r+0x72c>)
10008eb0:	f7fe f952 	bl	10007158 <__aeabi_dadd>
10008eb4:	9006      	str	r0, [sp, #24]
10008eb6:	9107      	str	r1, [sp, #28]
10008eb8:	9e06      	ldr	r6, [sp, #24]
10008eba:	9f07      	ldr	r7, [sp, #28]
10008ebc:	9b07      	ldr	r3, [sp, #28]
10008ebe:	4ab9      	ldr	r2, [pc, #740]	; (100091a4 <_dtoa_r+0x730>)
10008ec0:	189c      	adds	r4, r3, r2
10008ec2:	2d00      	cmp	r5, #0
10008ec4:	d11c      	bne.n	10008f00 <_dtoa_r+0x48c>
10008ec6:	9804      	ldr	r0, [sp, #16]
10008ec8:	9905      	ldr	r1, [sp, #20]
10008eca:	2200      	movs	r2, #0
10008ecc:	4bb6      	ldr	r3, [pc, #728]	; (100091a8 <_dtoa_r+0x734>)
10008ece:	f001 fdc7 	bl	1000aa60 <__aeabi_dsub>
10008ed2:	1c32      	adds	r2, r6, #0
10008ed4:	1c23      	adds	r3, r4, #0
10008ed6:	9004      	str	r0, [sp, #16]
10008ed8:	9105      	str	r1, [sp, #20]
10008eda:	f001 f96f 	bl	1000a1bc <__aeabi_dcmpgt>
10008ede:	2800      	cmp	r0, #0
10008ee0:	d000      	beq.n	10008ee4 <_dtoa_r+0x470>
10008ee2:	e263      	b.n	100093ac <_dtoa_r+0x938>
10008ee4:	9804      	ldr	r0, [sp, #16]
10008ee6:	9905      	ldr	r1, [sp, #20]
10008ee8:	1c32      	adds	r2, r6, #0
10008eea:	4eb0      	ldr	r6, [pc, #704]	; (100091ac <_dtoa_r+0x738>)
10008eec:	9c07      	ldr	r4, [sp, #28]
10008eee:	46b4      	mov	ip, r6
10008ef0:	4464      	add	r4, ip
10008ef2:	1c23      	adds	r3, r4, #0
10008ef4:	f001 f94e 	bl	1000a194 <__aeabi_dcmplt>
10008ef8:	2800      	cmp	r0, #0
10008efa:	d000      	beq.n	10008efe <_dtoa_r+0x48a>
10008efc:	e24c      	b.n	10009398 <_dtoa_r+0x924>
10008efe:	e0a3      	b.n	10009048 <_dtoa_r+0x5d4>
10008f00:	4aab      	ldr	r2, [pc, #684]	; (100091b0 <_dtoa_r+0x73c>)
10008f02:	1e6b      	subs	r3, r5, #1
10008f04:	9910      	ldr	r1, [sp, #64]	; 0x40
10008f06:	00db      	lsls	r3, r3, #3
10008f08:	18d3      	adds	r3, r2, r3
10008f0a:	2900      	cmp	r1, #0
10008f0c:	d04e      	beq.n	10008fac <_dtoa_r+0x538>
10008f0e:	681a      	ldr	r2, [r3, #0]
10008f10:	685b      	ldr	r3, [r3, #4]
10008f12:	2000      	movs	r0, #0
10008f14:	49a7      	ldr	r1, [pc, #668]	; (100091b4 <_dtoa_r+0x740>)
10008f16:	f001 f965 	bl	1000a1e4 <__aeabi_ddiv>
10008f1a:	1c32      	adds	r2, r6, #0
10008f1c:	1c23      	adds	r3, r4, #0
10008f1e:	f001 fd9f 	bl	1000aa60 <__aeabi_dsub>
10008f22:	9e04      	ldr	r6, [sp, #16]
10008f24:	9f05      	ldr	r7, [sp, #20]
10008f26:	9b0c      	ldr	r3, [sp, #48]	; 0x30
10008f28:	9006      	str	r0, [sp, #24]
10008f2a:	9107      	str	r1, [sp, #28]
10008f2c:	9304      	str	r3, [sp, #16]
10008f2e:	1c39      	adds	r1, r7, #0
10008f30:	1c30      	adds	r0, r6, #0
10008f32:	f7fe fed3 	bl	10007cdc <__aeabi_d2iz>
10008f36:	1c04      	adds	r4, r0, #0
10008f38:	f7fe ff06 	bl	10007d48 <__aeabi_i2d>
10008f3c:	1c02      	adds	r2, r0, #0
10008f3e:	1c0b      	adds	r3, r1, #0
10008f40:	1c30      	adds	r0, r6, #0
10008f42:	1c39      	adds	r1, r7, #0
10008f44:	f001 fd8c 	bl	1000aa60 <__aeabi_dsub>
10008f48:	9b04      	ldr	r3, [sp, #16]
10008f4a:	3430      	adds	r4, #48	; 0x30
10008f4c:	3301      	adds	r3, #1
10008f4e:	9304      	str	r3, [sp, #16]
10008f50:	3b01      	subs	r3, #1
10008f52:	701c      	strb	r4, [r3, #0]
10008f54:	9a06      	ldr	r2, [sp, #24]
10008f56:	9b07      	ldr	r3, [sp, #28]
10008f58:	1c06      	adds	r6, r0, #0
10008f5a:	1c0f      	adds	r7, r1, #0
10008f5c:	f001 f91a 	bl	1000a194 <__aeabi_dcmplt>
10008f60:	2800      	cmp	r0, #0
10008f62:	d000      	beq.n	10008f66 <_dtoa_r+0x4f2>
10008f64:	e361      	b.n	1000962a <_dtoa_r+0xbb6>
10008f66:	1c32      	adds	r2, r6, #0
10008f68:	1c3b      	adds	r3, r7, #0
10008f6a:	2000      	movs	r0, #0
10008f6c:	498a      	ldr	r1, [pc, #552]	; (10009198 <_dtoa_r+0x724>)
10008f6e:	f001 fd77 	bl	1000aa60 <__aeabi_dsub>
10008f72:	9a06      	ldr	r2, [sp, #24]
10008f74:	9b07      	ldr	r3, [sp, #28]
10008f76:	f001 f90d 	bl	1000a194 <__aeabi_dcmplt>
10008f7a:	2800      	cmp	r0, #0
10008f7c:	d000      	beq.n	10008f80 <_dtoa_r+0x50c>
10008f7e:	e0cd      	b.n	1000911c <_dtoa_r+0x6a8>
10008f80:	9b04      	ldr	r3, [sp, #16]
10008f82:	9a0c      	ldr	r2, [sp, #48]	; 0x30
10008f84:	1a9b      	subs	r3, r3, r2
10008f86:	42ab      	cmp	r3, r5
10008f88:	da5e      	bge.n	10009048 <_dtoa_r+0x5d4>
10008f8a:	9806      	ldr	r0, [sp, #24]
10008f8c:	9907      	ldr	r1, [sp, #28]
10008f8e:	2200      	movs	r2, #0
10008f90:	4b82      	ldr	r3, [pc, #520]	; (1000919c <_dtoa_r+0x728>)
10008f92:	f7fe fc09 	bl	100077a8 <__aeabi_dmul>
10008f96:	2200      	movs	r2, #0
10008f98:	9006      	str	r0, [sp, #24]
10008f9a:	9107      	str	r1, [sp, #28]
10008f9c:	4b7f      	ldr	r3, [pc, #508]	; (1000919c <_dtoa_r+0x728>)
10008f9e:	1c30      	adds	r0, r6, #0
10008fa0:	1c39      	adds	r1, r7, #0
10008fa2:	f7fe fc01 	bl	100077a8 <__aeabi_dmul>
10008fa6:	1c06      	adds	r6, r0, #0
10008fa8:	1c0f      	adds	r7, r1, #0
10008faa:	e7c0      	b.n	10008f2e <_dtoa_r+0x4ba>
10008fac:	6818      	ldr	r0, [r3, #0]
10008fae:	6859      	ldr	r1, [r3, #4]
10008fb0:	1c32      	adds	r2, r6, #0
10008fb2:	1c23      	adds	r3, r4, #0
10008fb4:	f7fe fbf8 	bl	100077a8 <__aeabi_dmul>
10008fb8:	9e04      	ldr	r6, [sp, #16]
10008fba:	9f05      	ldr	r7, [sp, #20]
10008fbc:	9c0c      	ldr	r4, [sp, #48]	; 0x30
10008fbe:	9006      	str	r0, [sp, #24]
10008fc0:	9107      	str	r1, [sp, #28]
10008fc2:	1963      	adds	r3, r4, r5
10008fc4:	9304      	str	r3, [sp, #16]
10008fc6:	1c39      	adds	r1, r7, #0
10008fc8:	1c30      	adds	r0, r6, #0
10008fca:	f7fe fe87 	bl	10007cdc <__aeabi_d2iz>
10008fce:	1c05      	adds	r5, r0, #0
10008fd0:	f7fe feba 	bl	10007d48 <__aeabi_i2d>
10008fd4:	1c0b      	adds	r3, r1, #0
10008fd6:	1c02      	adds	r2, r0, #0
10008fd8:	1c39      	adds	r1, r7, #0
10008fda:	1c30      	adds	r0, r6, #0
10008fdc:	f001 fd40 	bl	1000aa60 <__aeabi_dsub>
10008fe0:	3530      	adds	r5, #48	; 0x30
10008fe2:	9b04      	ldr	r3, [sp, #16]
10008fe4:	7025      	strb	r5, [r4, #0]
10008fe6:	3401      	adds	r4, #1
10008fe8:	1c06      	adds	r6, r0, #0
10008fea:	1c0f      	adds	r7, r1, #0
10008fec:	42a3      	cmp	r3, r4
10008fee:	d124      	bne.n	1000903a <_dtoa_r+0x5c6>
10008ff0:	2200      	movs	r2, #0
10008ff2:	9806      	ldr	r0, [sp, #24]
10008ff4:	9907      	ldr	r1, [sp, #28]
10008ff6:	4b6f      	ldr	r3, [pc, #444]	; (100091b4 <_dtoa_r+0x740>)
10008ff8:	f7fe f8ae 	bl	10007158 <__aeabi_dadd>
10008ffc:	1c02      	adds	r2, r0, #0
10008ffe:	1c0b      	adds	r3, r1, #0
10009000:	1c30      	adds	r0, r6, #0
10009002:	1c39      	adds	r1, r7, #0
10009004:	f001 f8da 	bl	1000a1bc <__aeabi_dcmpgt>
10009008:	2800      	cmp	r0, #0
1000900a:	d000      	beq.n	1000900e <_dtoa_r+0x59a>
1000900c:	e086      	b.n	1000911c <_dtoa_r+0x6a8>
1000900e:	9a06      	ldr	r2, [sp, #24]
10009010:	9b07      	ldr	r3, [sp, #28]
10009012:	2000      	movs	r0, #0
10009014:	4967      	ldr	r1, [pc, #412]	; (100091b4 <_dtoa_r+0x740>)
10009016:	f001 fd23 	bl	1000aa60 <__aeabi_dsub>
1000901a:	1c02      	adds	r2, r0, #0
1000901c:	1c0b      	adds	r3, r1, #0
1000901e:	1c30      	adds	r0, r6, #0
10009020:	1c39      	adds	r1, r7, #0
10009022:	f001 f8b7 	bl	1000a194 <__aeabi_dcmplt>
10009026:	2800      	cmp	r0, #0
10009028:	d00e      	beq.n	10009048 <_dtoa_r+0x5d4>
1000902a:	9b04      	ldr	r3, [sp, #16]
1000902c:	3b01      	subs	r3, #1
1000902e:	781a      	ldrb	r2, [r3, #0]
10009030:	2a30      	cmp	r2, #48	; 0x30
10009032:	d000      	beq.n	10009036 <_dtoa_r+0x5c2>
10009034:	e2f9      	b.n	1000962a <_dtoa_r+0xbb6>
10009036:	9304      	str	r3, [sp, #16]
10009038:	e7f7      	b.n	1000902a <_dtoa_r+0x5b6>
1000903a:	2200      	movs	r2, #0
1000903c:	4b57      	ldr	r3, [pc, #348]	; (1000919c <_dtoa_r+0x728>)
1000903e:	f7fe fbb3 	bl	100077a8 <__aeabi_dmul>
10009042:	1c06      	adds	r6, r0, #0
10009044:	1c0f      	adds	r7, r1, #0
10009046:	e7be      	b.n	10008fc6 <_dtoa_r+0x552>
10009048:	9b14      	ldr	r3, [sp, #80]	; 0x50
1000904a:	9c15      	ldr	r4, [sp, #84]	; 0x54
1000904c:	9306      	str	r3, [sp, #24]
1000904e:	9407      	str	r4, [sp, #28]
10009050:	9b19      	ldr	r3, [sp, #100]	; 0x64
10009052:	2b00      	cmp	r3, #0
10009054:	da00      	bge.n	10009058 <_dtoa_r+0x5e4>
10009056:	e086      	b.n	10009166 <_dtoa_r+0x6f2>
10009058:	9a03      	ldr	r2, [sp, #12]
1000905a:	2a0e      	cmp	r2, #14
1000905c:	dd00      	ble.n	10009060 <_dtoa_r+0x5ec>
1000905e:	e082      	b.n	10009166 <_dtoa_r+0x6f2>
10009060:	00d3      	lsls	r3, r2, #3
10009062:	4a53      	ldr	r2, [pc, #332]	; (100091b0 <_dtoa_r+0x73c>)
10009064:	18d3      	adds	r3, r2, r3
10009066:	681e      	ldr	r6, [r3, #0]
10009068:	685f      	ldr	r7, [r3, #4]
1000906a:	9b21      	ldr	r3, [sp, #132]	; 0x84
1000906c:	2b00      	cmp	r3, #0
1000906e:	da14      	bge.n	1000909a <_dtoa_r+0x626>
10009070:	9b09      	ldr	r3, [sp, #36]	; 0x24
10009072:	2b00      	cmp	r3, #0
10009074:	dc11      	bgt.n	1000909a <_dtoa_r+0x626>
10009076:	d000      	beq.n	1000907a <_dtoa_r+0x606>
10009078:	e190      	b.n	1000939c <_dtoa_r+0x928>
1000907a:	1c30      	adds	r0, r6, #0
1000907c:	1c39      	adds	r1, r7, #0
1000907e:	2200      	movs	r2, #0
10009080:	4b49      	ldr	r3, [pc, #292]	; (100091a8 <_dtoa_r+0x734>)
10009082:	f7fe fb91 	bl	100077a8 <__aeabi_dmul>
10009086:	9a06      	ldr	r2, [sp, #24]
10009088:	9b07      	ldr	r3, [sp, #28]
1000908a:	f001 f8a1 	bl	1000a1d0 <__aeabi_dcmpge>
1000908e:	9f09      	ldr	r7, [sp, #36]	; 0x24
10009090:	1c3e      	adds	r6, r7, #0
10009092:	2800      	cmp	r0, #0
10009094:	d000      	beq.n	10009098 <_dtoa_r+0x624>
10009096:	e183      	b.n	100093a0 <_dtoa_r+0x92c>
10009098:	e18c      	b.n	100093b4 <_dtoa_r+0x940>
1000909a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
1000909c:	9c06      	ldr	r4, [sp, #24]
1000909e:	9d07      	ldr	r5, [sp, #28]
100090a0:	9304      	str	r3, [sp, #16]
100090a2:	1c32      	adds	r2, r6, #0
100090a4:	1c3b      	adds	r3, r7, #0
100090a6:	1c20      	adds	r0, r4, #0
100090a8:	1c29      	adds	r1, r5, #0
100090aa:	f001 f89b 	bl	1000a1e4 <__aeabi_ddiv>
100090ae:	f7fe fe15 	bl	10007cdc <__aeabi_d2iz>
100090b2:	9006      	str	r0, [sp, #24]
100090b4:	f7fe fe48 	bl	10007d48 <__aeabi_i2d>
100090b8:	1c32      	adds	r2, r6, #0
100090ba:	1c3b      	adds	r3, r7, #0
100090bc:	f7fe fb74 	bl	100077a8 <__aeabi_dmul>
100090c0:	1c02      	adds	r2, r0, #0
100090c2:	1c0b      	adds	r3, r1, #0
100090c4:	1c20      	adds	r0, r4, #0
100090c6:	1c29      	adds	r1, r5, #0
100090c8:	f001 fcca 	bl	1000aa60 <__aeabi_dsub>
100090cc:	1c0b      	adds	r3, r1, #0
100090ce:	9904      	ldr	r1, [sp, #16]
100090d0:	1c02      	adds	r2, r0, #0
100090d2:	9806      	ldr	r0, [sp, #24]
100090d4:	3101      	adds	r1, #1
100090d6:	9104      	str	r1, [sp, #16]
100090d8:	3030      	adds	r0, #48	; 0x30
100090da:	3901      	subs	r1, #1
100090dc:	7008      	strb	r0, [r1, #0]
100090de:	980c      	ldr	r0, [sp, #48]	; 0x30
100090e0:	9904      	ldr	r1, [sp, #16]
100090e2:	1a09      	subs	r1, r1, r0
100090e4:	9809      	ldr	r0, [sp, #36]	; 0x24
100090e6:	4281      	cmp	r1, r0
100090e8:	d12e      	bne.n	10009148 <_dtoa_r+0x6d4>
100090ea:	1c10      	adds	r0, r2, #0
100090ec:	1c19      	adds	r1, r3, #0
100090ee:	f7fe f833 	bl	10007158 <__aeabi_dadd>
100090f2:	1c32      	adds	r2, r6, #0
100090f4:	1c3b      	adds	r3, r7, #0
100090f6:	1c04      	adds	r4, r0, #0
100090f8:	1c0d      	adds	r5, r1, #0
100090fa:	f001 f85f 	bl	1000a1bc <__aeabi_dcmpgt>
100090fe:	2800      	cmp	r0, #0
10009100:	d110      	bne.n	10009124 <_dtoa_r+0x6b0>
10009102:	1c20      	adds	r0, r4, #0
10009104:	1c29      	adds	r1, r5, #0
10009106:	1c32      	adds	r2, r6, #0
10009108:	1c3b      	adds	r3, r7, #0
1000910a:	f001 f83d 	bl	1000a188 <__aeabi_dcmpeq>
1000910e:	2800      	cmp	r0, #0
10009110:	d100      	bne.n	10009114 <_dtoa_r+0x6a0>
10009112:	e28c      	b.n	1000962e <_dtoa_r+0xbba>
10009114:	9b06      	ldr	r3, [sp, #24]
10009116:	07db      	lsls	r3, r3, #31
10009118:	d404      	bmi.n	10009124 <_dtoa_r+0x6b0>
1000911a:	e288      	b.n	1000962e <_dtoa_r+0xbba>
1000911c:	9b11      	ldr	r3, [sp, #68]	; 0x44
1000911e:	9303      	str	r3, [sp, #12]
10009120:	e000      	b.n	10009124 <_dtoa_r+0x6b0>
10009122:	9304      	str	r3, [sp, #16]
10009124:	9b04      	ldr	r3, [sp, #16]
10009126:	3b01      	subs	r3, #1
10009128:	781a      	ldrb	r2, [r3, #0]
1000912a:	2a39      	cmp	r2, #57	; 0x39
1000912c:	d108      	bne.n	10009140 <_dtoa_r+0x6cc>
1000912e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
10009130:	4293      	cmp	r3, r2
10009132:	d1f6      	bne.n	10009122 <_dtoa_r+0x6ae>
10009134:	9b03      	ldr	r3, [sp, #12]
10009136:	3301      	adds	r3, #1
10009138:	9303      	str	r3, [sp, #12]
1000913a:	2330      	movs	r3, #48	; 0x30
1000913c:	7013      	strb	r3, [r2, #0]
1000913e:	1c13      	adds	r3, r2, #0
10009140:	781a      	ldrb	r2, [r3, #0]
10009142:	3201      	adds	r2, #1
10009144:	701a      	strb	r2, [r3, #0]
10009146:	e272      	b.n	1000962e <_dtoa_r+0xbba>
10009148:	1c10      	adds	r0, r2, #0
1000914a:	1c19      	adds	r1, r3, #0
1000914c:	2200      	movs	r2, #0
1000914e:	4b13      	ldr	r3, [pc, #76]	; (1000919c <_dtoa_r+0x728>)
10009150:	f7fe fb2a 	bl	100077a8 <__aeabi_dmul>
10009154:	2200      	movs	r2, #0
10009156:	2300      	movs	r3, #0
10009158:	1c04      	adds	r4, r0, #0
1000915a:	1c0d      	adds	r5, r1, #0
1000915c:	f001 f814 	bl	1000a188 <__aeabi_dcmpeq>
10009160:	2800      	cmp	r0, #0
10009162:	d09e      	beq.n	100090a2 <_dtoa_r+0x62e>
10009164:	e263      	b.n	1000962e <_dtoa_r+0xbba>
10009166:	9a10      	ldr	r2, [sp, #64]	; 0x40
10009168:	2a00      	cmp	r2, #0
1000916a:	d044      	beq.n	100091f6 <_dtoa_r+0x782>
1000916c:	9a20      	ldr	r2, [sp, #128]	; 0x80
1000916e:	2a01      	cmp	r2, #1
10009170:	dc0b      	bgt.n	1000918a <_dtoa_r+0x716>
10009172:	9a16      	ldr	r2, [sp, #88]	; 0x58
10009174:	2a00      	cmp	r2, #0
10009176:	d002      	beq.n	1000917e <_dtoa_r+0x70a>
10009178:	4a0f      	ldr	r2, [pc, #60]	; (100091b8 <_dtoa_r+0x744>)
1000917a:	189b      	adds	r3, r3, r2
1000917c:	e002      	b.n	10009184 <_dtoa_r+0x710>
1000917e:	2336      	movs	r3, #54	; 0x36
10009180:	9a18      	ldr	r2, [sp, #96]	; 0x60
10009182:	1a9b      	subs	r3, r3, r2
10009184:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
10009186:	9c0d      	ldr	r4, [sp, #52]	; 0x34
10009188:	e029      	b.n	100091de <_dtoa_r+0x76a>
1000918a:	9b09      	ldr	r3, [sp, #36]	; 0x24
1000918c:	1e5d      	subs	r5, r3, #1
1000918e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
10009190:	42ab      	cmp	r3, r5
10009192:	db13      	blt.n	100091bc <_dtoa_r+0x748>
10009194:	1b5d      	subs	r5, r3, r5
10009196:	e018      	b.n	100091ca <_dtoa_r+0x756>
10009198:	3ff00000 	.word	0x3ff00000
1000919c:	40240000 	.word	0x40240000
100091a0:	401c0000 	.word	0x401c0000
100091a4:	fcc00000 	.word	0xfcc00000
100091a8:	40140000 	.word	0x40140000
100091ac:	7cc00000 	.word	0x7cc00000
100091b0:	1000b870 	.word	0x1000b870
100091b4:	3fe00000 	.word	0x3fe00000
100091b8:	00000433 	.word	0x00000433
100091bc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
100091be:	950f      	str	r5, [sp, #60]	; 0x3c
100091c0:	1aea      	subs	r2, r5, r3
100091c2:	2500      	movs	r5, #0
100091c4:	9b12      	ldr	r3, [sp, #72]	; 0x48
100091c6:	189b      	adds	r3, r3, r2
100091c8:	9312      	str	r3, [sp, #72]	; 0x48
100091ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
100091cc:	2b00      	cmp	r3, #0
100091ce:	da04      	bge.n	100091da <_dtoa_r+0x766>
100091d0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
100091d2:	9a09      	ldr	r2, [sp, #36]	; 0x24
100091d4:	1a9c      	subs	r4, r3, r2
100091d6:	2300      	movs	r3, #0
100091d8:	e001      	b.n	100091de <_dtoa_r+0x76a>
100091da:	9c0d      	ldr	r4, [sp, #52]	; 0x34
100091dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
100091de:	9a0d      	ldr	r2, [sp, #52]	; 0x34
100091e0:	9808      	ldr	r0, [sp, #32]
100091e2:	18d2      	adds	r2, r2, r3
100091e4:	920d      	str	r2, [sp, #52]	; 0x34
100091e6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
100091e8:	2101      	movs	r1, #1
100091ea:	18d3      	adds	r3, r2, r3
100091ec:	930e      	str	r3, [sp, #56]	; 0x38
100091ee:	f000 fb3a 	bl	10009866 <__i2b>
100091f2:	1c06      	adds	r6, r0, #0
100091f4:	e002      	b.n	100091fc <_dtoa_r+0x788>
100091f6:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
100091f8:	9c0d      	ldr	r4, [sp, #52]	; 0x34
100091fa:	9e10      	ldr	r6, [sp, #64]	; 0x40
100091fc:	2c00      	cmp	r4, #0
100091fe:	d00c      	beq.n	1000921a <_dtoa_r+0x7a6>
10009200:	9b0e      	ldr	r3, [sp, #56]	; 0x38
10009202:	2b00      	cmp	r3, #0
10009204:	dd09      	ble.n	1000921a <_dtoa_r+0x7a6>
10009206:	42a3      	cmp	r3, r4
10009208:	dd00      	ble.n	1000920c <_dtoa_r+0x798>
1000920a:	1c23      	adds	r3, r4, #0
1000920c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
1000920e:	1ae4      	subs	r4, r4, r3
10009210:	1ad2      	subs	r2, r2, r3
10009212:	920d      	str	r2, [sp, #52]	; 0x34
10009214:	9a0e      	ldr	r2, [sp, #56]	; 0x38
10009216:	1ad3      	subs	r3, r2, r3
10009218:	930e      	str	r3, [sp, #56]	; 0x38
1000921a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
1000921c:	2b00      	cmp	r3, #0
1000921e:	dd21      	ble.n	10009264 <_dtoa_r+0x7f0>
10009220:	9b10      	ldr	r3, [sp, #64]	; 0x40
10009222:	2b00      	cmp	r3, #0
10009224:	d018      	beq.n	10009258 <_dtoa_r+0x7e4>
10009226:	2d00      	cmp	r5, #0
10009228:	dd10      	ble.n	1000924c <_dtoa_r+0x7d8>
1000922a:	1c31      	adds	r1, r6, #0
1000922c:	1c2a      	adds	r2, r5, #0
1000922e:	9808      	ldr	r0, [sp, #32]
10009230:	f000 fbb0 	bl	10009994 <__pow5mult>
10009234:	1c06      	adds	r6, r0, #0
10009236:	9a0a      	ldr	r2, [sp, #40]	; 0x28
10009238:	1c31      	adds	r1, r6, #0
1000923a:	9808      	ldr	r0, [sp, #32]
1000923c:	f000 fb1c 	bl	10009878 <__multiply>
10009240:	1c07      	adds	r7, r0, #0
10009242:	990a      	ldr	r1, [sp, #40]	; 0x28
10009244:	9808      	ldr	r0, [sp, #32]
10009246:	f000 fa6f 	bl	10009728 <_Bfree>
1000924a:	970a      	str	r7, [sp, #40]	; 0x28
1000924c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
1000924e:	1b5a      	subs	r2, r3, r5
10009250:	d008      	beq.n	10009264 <_dtoa_r+0x7f0>
10009252:	9808      	ldr	r0, [sp, #32]
10009254:	990a      	ldr	r1, [sp, #40]	; 0x28
10009256:	e002      	b.n	1000925e <_dtoa_r+0x7ea>
10009258:	9808      	ldr	r0, [sp, #32]
1000925a:	990a      	ldr	r1, [sp, #40]	; 0x28
1000925c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
1000925e:	f000 fb99 	bl	10009994 <__pow5mult>
10009262:	900a      	str	r0, [sp, #40]	; 0x28
10009264:	9808      	ldr	r0, [sp, #32]
10009266:	2101      	movs	r1, #1
10009268:	f000 fafd 	bl	10009866 <__i2b>
1000926c:	9b12      	ldr	r3, [sp, #72]	; 0x48
1000926e:	1c07      	adds	r7, r0, #0
10009270:	2b00      	cmp	r3, #0
10009272:	dd0a      	ble.n	1000928a <_dtoa_r+0x816>
10009274:	1c39      	adds	r1, r7, #0
10009276:	1c1a      	adds	r2, r3, #0
10009278:	9808      	ldr	r0, [sp, #32]
1000927a:	f000 fb8b 	bl	10009994 <__pow5mult>
1000927e:	9b20      	ldr	r3, [sp, #128]	; 0x80
10009280:	1c07      	adds	r7, r0, #0
10009282:	2500      	movs	r5, #0
10009284:	2b01      	cmp	r3, #1
10009286:	dc1b      	bgt.n	100092c0 <_dtoa_r+0x84c>
10009288:	e003      	b.n	10009292 <_dtoa_r+0x81e>
1000928a:	9b20      	ldr	r3, [sp, #128]	; 0x80
1000928c:	2500      	movs	r5, #0
1000928e:	2b01      	cmp	r3, #1
10009290:	dc12      	bgt.n	100092b8 <_dtoa_r+0x844>
10009292:	2500      	movs	r5, #0
10009294:	9b06      	ldr	r3, [sp, #24]
10009296:	42ab      	cmp	r3, r5
10009298:	d10e      	bne.n	100092b8 <_dtoa_r+0x844>
1000929a:	9b07      	ldr	r3, [sp, #28]
1000929c:	031b      	lsls	r3, r3, #12
1000929e:	42ab      	cmp	r3, r5
100092a0:	d10a      	bne.n	100092b8 <_dtoa_r+0x844>
100092a2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
100092a4:	9a07      	ldr	r2, [sp, #28]
100092a6:	4213      	tst	r3, r2
100092a8:	d006      	beq.n	100092b8 <_dtoa_r+0x844>
100092aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
100092ac:	3501      	adds	r5, #1
100092ae:	3301      	adds	r3, #1
100092b0:	930d      	str	r3, [sp, #52]	; 0x34
100092b2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
100092b4:	3301      	adds	r3, #1
100092b6:	930e      	str	r3, [sp, #56]	; 0x38
100092b8:	9b12      	ldr	r3, [sp, #72]	; 0x48
100092ba:	2001      	movs	r0, #1
100092bc:	2b00      	cmp	r3, #0
100092be:	d008      	beq.n	100092d2 <_dtoa_r+0x85e>
100092c0:	693b      	ldr	r3, [r7, #16]
100092c2:	3303      	adds	r3, #3
100092c4:	009b      	lsls	r3, r3, #2
100092c6:	18fb      	adds	r3, r7, r3
100092c8:	6858      	ldr	r0, [r3, #4]
100092ca:	f000 fa82 	bl	100097d2 <__hi0bits>
100092ce:	2320      	movs	r3, #32
100092d0:	1a18      	subs	r0, r3, r0
100092d2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
100092d4:	18c0      	adds	r0, r0, r3
100092d6:	231f      	movs	r3, #31
100092d8:	4018      	ands	r0, r3
100092da:	d009      	beq.n	100092f0 <_dtoa_r+0x87c>
100092dc:	3301      	adds	r3, #1
100092de:	1a1b      	subs	r3, r3, r0
100092e0:	2b04      	cmp	r3, #4
100092e2:	dd02      	ble.n	100092ea <_dtoa_r+0x876>
100092e4:	231c      	movs	r3, #28
100092e6:	1a18      	subs	r0, r3, r0
100092e8:	e003      	b.n	100092f2 <_dtoa_r+0x87e>
100092ea:	2b04      	cmp	r3, #4
100092ec:	d008      	beq.n	10009300 <_dtoa_r+0x88c>
100092ee:	1c18      	adds	r0, r3, #0
100092f0:	301c      	adds	r0, #28
100092f2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
100092f4:	1824      	adds	r4, r4, r0
100092f6:	181b      	adds	r3, r3, r0
100092f8:	930d      	str	r3, [sp, #52]	; 0x34
100092fa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
100092fc:	181b      	adds	r3, r3, r0
100092fe:	930e      	str	r3, [sp, #56]	; 0x38
10009300:	9b0d      	ldr	r3, [sp, #52]	; 0x34
10009302:	2b00      	cmp	r3, #0
10009304:	dd05      	ble.n	10009312 <_dtoa_r+0x89e>
10009306:	9808      	ldr	r0, [sp, #32]
10009308:	990a      	ldr	r1, [sp, #40]	; 0x28
1000930a:	1c1a      	adds	r2, r3, #0
1000930c:	f000 fb94 	bl	10009a38 <__lshift>
10009310:	900a      	str	r0, [sp, #40]	; 0x28
10009312:	9b0e      	ldr	r3, [sp, #56]	; 0x38
10009314:	2b00      	cmp	r3, #0
10009316:	dd05      	ble.n	10009324 <_dtoa_r+0x8b0>
10009318:	1c39      	adds	r1, r7, #0
1000931a:	9808      	ldr	r0, [sp, #32]
1000931c:	1c1a      	adds	r2, r3, #0
1000931e:	f000 fb8b 	bl	10009a38 <__lshift>
10009322:	1c07      	adds	r7, r0, #0
10009324:	9b13      	ldr	r3, [sp, #76]	; 0x4c
10009326:	2b00      	cmp	r3, #0
10009328:	d01e      	beq.n	10009368 <_dtoa_r+0x8f4>
1000932a:	980a      	ldr	r0, [sp, #40]	; 0x28
1000932c:	1c39      	adds	r1, r7, #0
1000932e:	f000 fbd5 	bl	10009adc <__mcmp>
10009332:	2800      	cmp	r0, #0
10009334:	da18      	bge.n	10009368 <_dtoa_r+0x8f4>
10009336:	9b03      	ldr	r3, [sp, #12]
10009338:	9808      	ldr	r0, [sp, #32]
1000933a:	3b01      	subs	r3, #1
1000933c:	9303      	str	r3, [sp, #12]
1000933e:	990a      	ldr	r1, [sp, #40]	; 0x28
10009340:	2300      	movs	r3, #0
10009342:	220a      	movs	r2, #10
10009344:	f000 fa09 	bl	1000975a <__multadd>
10009348:	9b10      	ldr	r3, [sp, #64]	; 0x40
1000934a:	900a      	str	r0, [sp, #40]	; 0x28
1000934c:	2b00      	cmp	r3, #0
1000934e:	d100      	bne.n	10009352 <_dtoa_r+0x8de>
10009350:	e17f      	b.n	10009652 <_dtoa_r+0xbde>
10009352:	1c31      	adds	r1, r6, #0
10009354:	2300      	movs	r3, #0
10009356:	9808      	ldr	r0, [sp, #32]
10009358:	220a      	movs	r2, #10
1000935a:	f000 f9fe 	bl	1000975a <__multadd>
1000935e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
10009360:	1c06      	adds	r6, r0, #0
10009362:	2b00      	cmp	r3, #0
10009364:	dc3c      	bgt.n	100093e0 <_dtoa_r+0x96c>
10009366:	e17d      	b.n	10009664 <_dtoa_r+0xbf0>
10009368:	9b09      	ldr	r3, [sp, #36]	; 0x24
1000936a:	2b00      	cmp	r3, #0
1000936c:	dc2e      	bgt.n	100093cc <_dtoa_r+0x958>
1000936e:	9b20      	ldr	r3, [sp, #128]	; 0x80
10009370:	2b02      	cmp	r3, #2
10009372:	dd2b      	ble.n	100093cc <_dtoa_r+0x958>
10009374:	9b09      	ldr	r3, [sp, #36]	; 0x24
10009376:	930b      	str	r3, [sp, #44]	; 0x2c
10009378:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
1000937a:	2b00      	cmp	r3, #0
1000937c:	d110      	bne.n	100093a0 <_dtoa_r+0x92c>
1000937e:	1c39      	adds	r1, r7, #0
10009380:	9808      	ldr	r0, [sp, #32]
10009382:	2205      	movs	r2, #5
10009384:	f000 f9e9 	bl	1000975a <__multadd>
10009388:	1c07      	adds	r7, r0, #0
1000938a:	980a      	ldr	r0, [sp, #40]	; 0x28
1000938c:	1c39      	adds	r1, r7, #0
1000938e:	f000 fba5 	bl	10009adc <__mcmp>
10009392:	2800      	cmp	r0, #0
10009394:	dc0e      	bgt.n	100093b4 <_dtoa_r+0x940>
10009396:	e003      	b.n	100093a0 <_dtoa_r+0x92c>
10009398:	1c2f      	adds	r7, r5, #0
1000939a:	e000      	b.n	1000939e <_dtoa_r+0x92a>
1000939c:	2700      	movs	r7, #0
1000939e:	1c3e      	adds	r6, r7, #0
100093a0:	9b21      	ldr	r3, [sp, #132]	; 0x84
100093a2:	43db      	mvns	r3, r3
100093a4:	9303      	str	r3, [sp, #12]
100093a6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
100093a8:	9304      	str	r3, [sp, #16]
100093aa:	e00c      	b.n	100093c6 <_dtoa_r+0x952>
100093ac:	1c2f      	adds	r7, r5, #0
100093ae:	1c2e      	adds	r6, r5, #0
100093b0:	9b11      	ldr	r3, [sp, #68]	; 0x44
100093b2:	9303      	str	r3, [sp, #12]
100093b4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
100093b6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
100093b8:	3301      	adds	r3, #1
100093ba:	9304      	str	r3, [sp, #16]
100093bc:	2331      	movs	r3, #49	; 0x31
100093be:	7013      	strb	r3, [r2, #0]
100093c0:	9b03      	ldr	r3, [sp, #12]
100093c2:	3301      	adds	r3, #1
100093c4:	9303      	str	r3, [sp, #12]
100093c6:	9609      	str	r6, [sp, #36]	; 0x24
100093c8:	2600      	movs	r6, #0
100093ca:	e11a      	b.n	10009602 <_dtoa_r+0xb8e>
100093cc:	9b10      	ldr	r3, [sp, #64]	; 0x40
100093ce:	2b00      	cmp	r3, #0
100093d0:	d104      	bne.n	100093dc <_dtoa_r+0x968>
100093d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
100093d4:	930b      	str	r3, [sp, #44]	; 0x2c
100093d6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
100093d8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
100093da:	e0d0      	b.n	1000957e <_dtoa_r+0xb0a>
100093dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
100093de:	930b      	str	r3, [sp, #44]	; 0x2c
100093e0:	2c00      	cmp	r4, #0
100093e2:	dd05      	ble.n	100093f0 <_dtoa_r+0x97c>
100093e4:	1c31      	adds	r1, r6, #0
100093e6:	9808      	ldr	r0, [sp, #32]
100093e8:	1c22      	adds	r2, r4, #0
100093ea:	f000 fb25 	bl	10009a38 <__lshift>
100093ee:	1c06      	adds	r6, r0, #0
100093f0:	9609      	str	r6, [sp, #36]	; 0x24
100093f2:	2d00      	cmp	r5, #0
100093f4:	d012      	beq.n	1000941c <_dtoa_r+0x9a8>
100093f6:	6871      	ldr	r1, [r6, #4]
100093f8:	9808      	ldr	r0, [sp, #32]
100093fa:	f000 f95d 	bl	100096b8 <_Balloc>
100093fe:	1c31      	adds	r1, r6, #0
10009400:	1c04      	adds	r4, r0, #0
10009402:	6933      	ldr	r3, [r6, #16]
10009404:	310c      	adds	r1, #12
10009406:	1c9a      	adds	r2, r3, #2
10009408:	0092      	lsls	r2, r2, #2
1000940a:	300c      	adds	r0, #12
1000940c:	f000 f94b 	bl	100096a6 <memcpy>
10009410:	9808      	ldr	r0, [sp, #32]
10009412:	1c21      	adds	r1, r4, #0
10009414:	2201      	movs	r2, #1
10009416:	f000 fb0f 	bl	10009a38 <__lshift>
1000941a:	9009      	str	r0, [sp, #36]	; 0x24
1000941c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
1000941e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
10009420:	930e      	str	r3, [sp, #56]	; 0x38
10009422:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
10009424:	9c0a      	ldr	r4, [sp, #40]	; 0x28
10009426:	3b01      	subs	r3, #1
10009428:	18d3      	adds	r3, r2, r3
1000942a:	9310      	str	r3, [sp, #64]	; 0x40
1000942c:	1c39      	adds	r1, r7, #0
1000942e:	1c20      	adds	r0, r4, #0
10009430:	f7ff fa99 	bl	10008966 <quorem>
10009434:	1c03      	adds	r3, r0, #0
10009436:	900f      	str	r0, [sp, #60]	; 0x3c
10009438:	3330      	adds	r3, #48	; 0x30
1000943a:	1c31      	adds	r1, r6, #0
1000943c:	1c20      	adds	r0, r4, #0
1000943e:	930d      	str	r3, [sp, #52]	; 0x34
10009440:	f000 fb4c 	bl	10009adc <__mcmp>
10009444:	1c39      	adds	r1, r7, #0
10009446:	900b      	str	r0, [sp, #44]	; 0x2c
10009448:	9a09      	ldr	r2, [sp, #36]	; 0x24
1000944a:	9808      	ldr	r0, [sp, #32]
1000944c:	f000 fb61 	bl	10009b12 <__mdiff>
10009450:	2301      	movs	r3, #1
10009452:	9304      	str	r3, [sp, #16]
10009454:	68c3      	ldr	r3, [r0, #12]
10009456:	1c05      	adds	r5, r0, #0
10009458:	2b00      	cmp	r3, #0
1000945a:	d104      	bne.n	10009466 <_dtoa_r+0x9f2>
1000945c:	1c20      	adds	r0, r4, #0
1000945e:	1c29      	adds	r1, r5, #0
10009460:	f000 fb3c 	bl	10009adc <__mcmp>
10009464:	9004      	str	r0, [sp, #16]
10009466:	9808      	ldr	r0, [sp, #32]
10009468:	1c29      	adds	r1, r5, #0
1000946a:	f000 f95d 	bl	10009728 <_Bfree>
1000946e:	9b04      	ldr	r3, [sp, #16]
10009470:	9a20      	ldr	r2, [sp, #128]	; 0x80
10009472:	4313      	orrs	r3, r2
10009474:	d110      	bne.n	10009498 <_dtoa_r+0xa24>
10009476:	9a06      	ldr	r2, [sp, #24]
10009478:	3301      	adds	r3, #1
1000947a:	4213      	tst	r3, r2
1000947c:	d10c      	bne.n	10009498 <_dtoa_r+0xa24>
1000947e:	980d      	ldr	r0, [sp, #52]	; 0x34
10009480:	940a      	str	r4, [sp, #40]	; 0x28
10009482:	2839      	cmp	r0, #57	; 0x39
10009484:	d03d      	beq.n	10009502 <_dtoa_r+0xa8e>
10009486:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
10009488:	2b00      	cmp	r3, #0
1000948a:	dd01      	ble.n	10009490 <_dtoa_r+0xa1c>
1000948c:	980f      	ldr	r0, [sp, #60]	; 0x3c
1000948e:	3031      	adds	r0, #49	; 0x31
10009490:	9b0e      	ldr	r3, [sp, #56]	; 0x38
10009492:	3301      	adds	r3, #1
10009494:	9304      	str	r3, [sp, #16]
10009496:	e03e      	b.n	10009516 <_dtoa_r+0xaa2>
10009498:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
1000949a:	2b00      	cmp	r3, #0
1000949c:	da05      	bge.n	100094aa <_dtoa_r+0xa36>
1000949e:	9b04      	ldr	r3, [sp, #16]
100094a0:	9d0d      	ldr	r5, [sp, #52]	; 0x34
100094a2:	940a      	str	r4, [sp, #40]	; 0x28
100094a4:	2b00      	cmp	r3, #0
100094a6:	dc09      	bgt.n	100094bc <_dtoa_r+0xa48>
100094a8:	e01c      	b.n	100094e4 <_dtoa_r+0xa70>
100094aa:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
100094ac:	9b20      	ldr	r3, [sp, #128]	; 0x80
100094ae:	431d      	orrs	r5, r3
100094b0:	d11e      	bne.n	100094f0 <_dtoa_r+0xa7c>
100094b2:	2301      	movs	r3, #1
100094b4:	9a06      	ldr	r2, [sp, #24]
100094b6:	4213      	tst	r3, r2
100094b8:	d11a      	bne.n	100094f0 <_dtoa_r+0xa7c>
100094ba:	e7f0      	b.n	1000949e <_dtoa_r+0xa2a>
100094bc:	1c21      	adds	r1, r4, #0
100094be:	9808      	ldr	r0, [sp, #32]
100094c0:	2201      	movs	r2, #1
100094c2:	f000 fab9 	bl	10009a38 <__lshift>
100094c6:	1c39      	adds	r1, r7, #0
100094c8:	900a      	str	r0, [sp, #40]	; 0x28
100094ca:	f000 fb07 	bl	10009adc <__mcmp>
100094ce:	2800      	cmp	r0, #0
100094d0:	dc03      	bgt.n	100094da <_dtoa_r+0xa66>
100094d2:	d107      	bne.n	100094e4 <_dtoa_r+0xa70>
100094d4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
100094d6:	07db      	lsls	r3, r3, #31
100094d8:	d504      	bpl.n	100094e4 <_dtoa_r+0xa70>
100094da:	9b0d      	ldr	r3, [sp, #52]	; 0x34
100094dc:	2b39      	cmp	r3, #57	; 0x39
100094de:	d010      	beq.n	10009502 <_dtoa_r+0xa8e>
100094e0:	1c1d      	adds	r5, r3, #0
100094e2:	3501      	adds	r5, #1
100094e4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
100094e6:	3301      	adds	r3, #1
100094e8:	9304      	str	r3, [sp, #16]
100094ea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
100094ec:	701d      	strb	r5, [r3, #0]
100094ee:	e088      	b.n	10009602 <_dtoa_r+0xb8e>
100094f0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
100094f2:	1c5d      	adds	r5, r3, #1
100094f4:	9b04      	ldr	r3, [sp, #16]
100094f6:	2b00      	cmp	r3, #0
100094f8:	dd10      	ble.n	1000951c <_dtoa_r+0xaa8>
100094fa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
100094fc:	940a      	str	r4, [sp, #40]	; 0x28
100094fe:	2b39      	cmp	r3, #57	; 0x39
10009500:	d106      	bne.n	10009510 <_dtoa_r+0xa9c>
10009502:	9b0e      	ldr	r3, [sp, #56]	; 0x38
10009504:	9a0e      	ldr	r2, [sp, #56]	; 0x38
10009506:	3301      	adds	r3, #1
10009508:	9304      	str	r3, [sp, #16]
1000950a:	2339      	movs	r3, #57	; 0x39
1000950c:	7013      	strb	r3, [r2, #0]
1000950e:	e060      	b.n	100095d2 <_dtoa_r+0xb5e>
10009510:	980d      	ldr	r0, [sp, #52]	; 0x34
10009512:	9504      	str	r5, [sp, #16]
10009514:	3001      	adds	r0, #1
10009516:	9b0e      	ldr	r3, [sp, #56]	; 0x38
10009518:	7018      	strb	r0, [r3, #0]
1000951a:	e072      	b.n	10009602 <_dtoa_r+0xb8e>
1000951c:	466a      	mov	r2, sp
1000951e:	2134      	movs	r1, #52	; 0x34
10009520:	1852      	adds	r2, r2, r1
10009522:	7812      	ldrb	r2, [r2, #0]
10009524:	9b0e      	ldr	r3, [sp, #56]	; 0x38
10009526:	9504      	str	r5, [sp, #16]
10009528:	701a      	strb	r2, [r3, #0]
1000952a:	9a10      	ldr	r2, [sp, #64]	; 0x40
1000952c:	4293      	cmp	r3, r2
1000952e:	d03f      	beq.n	100095b0 <_dtoa_r+0xb3c>
10009530:	1c21      	adds	r1, r4, #0
10009532:	220a      	movs	r2, #10
10009534:	2300      	movs	r3, #0
10009536:	9808      	ldr	r0, [sp, #32]
10009538:	f000 f90f 	bl	1000975a <__multadd>
1000953c:	9b09      	ldr	r3, [sp, #36]	; 0x24
1000953e:	1c04      	adds	r4, r0, #0
10009540:	1c31      	adds	r1, r6, #0
10009542:	9808      	ldr	r0, [sp, #32]
10009544:	220a      	movs	r2, #10
10009546:	429e      	cmp	r6, r3
10009548:	d105      	bne.n	10009556 <_dtoa_r+0xae2>
1000954a:	2300      	movs	r3, #0
1000954c:	f000 f905 	bl	1000975a <__multadd>
10009550:	1c06      	adds	r6, r0, #0
10009552:	9009      	str	r0, [sp, #36]	; 0x24
10009554:	e00a      	b.n	1000956c <_dtoa_r+0xaf8>
10009556:	2300      	movs	r3, #0
10009558:	f000 f8ff 	bl	1000975a <__multadd>
1000955c:	9909      	ldr	r1, [sp, #36]	; 0x24
1000955e:	1c06      	adds	r6, r0, #0
10009560:	220a      	movs	r2, #10
10009562:	9808      	ldr	r0, [sp, #32]
10009564:	2300      	movs	r3, #0
10009566:	f000 f8f8 	bl	1000975a <__multadd>
1000956a:	9009      	str	r0, [sp, #36]	; 0x24
1000956c:	950e      	str	r5, [sp, #56]	; 0x38
1000956e:	e75d      	b.n	1000942c <_dtoa_r+0x9b8>
10009570:	1c21      	adds	r1, r4, #0
10009572:	9808      	ldr	r0, [sp, #32]
10009574:	220a      	movs	r2, #10
10009576:	2300      	movs	r3, #0
10009578:	f000 f8ef 	bl	1000975a <__multadd>
1000957c:	1c04      	adds	r4, r0, #0
1000957e:	1c20      	adds	r0, r4, #0
10009580:	1c39      	adds	r1, r7, #0
10009582:	f7ff f9f0 	bl	10008966 <quorem>
10009586:	2234      	movs	r2, #52	; 0x34
10009588:	466b      	mov	r3, sp
1000958a:	3030      	adds	r0, #48	; 0x30
1000958c:	189b      	adds	r3, r3, r2
1000958e:	900d      	str	r0, [sp, #52]	; 0x34
10009590:	781b      	ldrb	r3, [r3, #0]
10009592:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
10009594:	702b      	strb	r3, [r5, #0]
10009596:	9b0c      	ldr	r3, [sp, #48]	; 0x30
10009598:	3501      	adds	r5, #1
1000959a:	1aeb      	subs	r3, r5, r3
1000959c:	4293      	cmp	r3, r2
1000959e:	dbe7      	blt.n	10009570 <_dtoa_r+0xafc>
100095a0:	1e13      	subs	r3, r2, #0
100095a2:	dc00      	bgt.n	100095a6 <_dtoa_r+0xb32>
100095a4:	2301      	movs	r3, #1
100095a6:	9609      	str	r6, [sp, #36]	; 0x24
100095a8:	2600      	movs	r6, #0
100095aa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
100095ac:	18d3      	adds	r3, r2, r3
100095ae:	9304      	str	r3, [sp, #16]
100095b0:	1c21      	adds	r1, r4, #0
100095b2:	9808      	ldr	r0, [sp, #32]
100095b4:	2201      	movs	r2, #1
100095b6:	f000 fa3f 	bl	10009a38 <__lshift>
100095ba:	1c39      	adds	r1, r7, #0
100095bc:	900a      	str	r0, [sp, #40]	; 0x28
100095be:	f000 fa8d 	bl	10009adc <__mcmp>
100095c2:	2800      	cmp	r0, #0
100095c4:	dc05      	bgt.n	100095d2 <_dtoa_r+0xb5e>
100095c6:	d115      	bne.n	100095f4 <_dtoa_r+0xb80>
100095c8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
100095ca:	07db      	lsls	r3, r3, #31
100095cc:	d401      	bmi.n	100095d2 <_dtoa_r+0xb5e>
100095ce:	e011      	b.n	100095f4 <_dtoa_r+0xb80>
100095d0:	9304      	str	r3, [sp, #16]
100095d2:	9b04      	ldr	r3, [sp, #16]
100095d4:	3b01      	subs	r3, #1
100095d6:	781a      	ldrb	r2, [r3, #0]
100095d8:	2a39      	cmp	r2, #57	; 0x39
100095da:	d108      	bne.n	100095ee <_dtoa_r+0xb7a>
100095dc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
100095de:	4293      	cmp	r3, r2
100095e0:	d1f6      	bne.n	100095d0 <_dtoa_r+0xb5c>
100095e2:	9b03      	ldr	r3, [sp, #12]
100095e4:	3301      	adds	r3, #1
100095e6:	9303      	str	r3, [sp, #12]
100095e8:	2331      	movs	r3, #49	; 0x31
100095ea:	7013      	strb	r3, [r2, #0]
100095ec:	e009      	b.n	10009602 <_dtoa_r+0xb8e>
100095ee:	3201      	adds	r2, #1
100095f0:	701a      	strb	r2, [r3, #0]
100095f2:	e006      	b.n	10009602 <_dtoa_r+0xb8e>
100095f4:	9b04      	ldr	r3, [sp, #16]
100095f6:	3b01      	subs	r3, #1
100095f8:	781a      	ldrb	r2, [r3, #0]
100095fa:	2a30      	cmp	r2, #48	; 0x30
100095fc:	d101      	bne.n	10009602 <_dtoa_r+0xb8e>
100095fe:	9304      	str	r3, [sp, #16]
10009600:	e7f8      	b.n	100095f4 <_dtoa_r+0xb80>
10009602:	9808      	ldr	r0, [sp, #32]
10009604:	1c39      	adds	r1, r7, #0
10009606:	f000 f88f 	bl	10009728 <_Bfree>
1000960a:	9b09      	ldr	r3, [sp, #36]	; 0x24
1000960c:	2b00      	cmp	r3, #0
1000960e:	d00e      	beq.n	1000962e <_dtoa_r+0xbba>
10009610:	2e00      	cmp	r6, #0
10009612:	d005      	beq.n	10009620 <_dtoa_r+0xbac>
10009614:	429e      	cmp	r6, r3
10009616:	d003      	beq.n	10009620 <_dtoa_r+0xbac>
10009618:	9808      	ldr	r0, [sp, #32]
1000961a:	1c31      	adds	r1, r6, #0
1000961c:	f000 f884 	bl	10009728 <_Bfree>
10009620:	9808      	ldr	r0, [sp, #32]
10009622:	9909      	ldr	r1, [sp, #36]	; 0x24
10009624:	f000 f880 	bl	10009728 <_Bfree>
10009628:	e001      	b.n	1000962e <_dtoa_r+0xbba>
1000962a:	9b11      	ldr	r3, [sp, #68]	; 0x44
1000962c:	9303      	str	r3, [sp, #12]
1000962e:	9808      	ldr	r0, [sp, #32]
10009630:	990a      	ldr	r1, [sp, #40]	; 0x28
10009632:	f000 f879 	bl	10009728 <_Bfree>
10009636:	2300      	movs	r3, #0
10009638:	9a04      	ldr	r2, [sp, #16]
1000963a:	980c      	ldr	r0, [sp, #48]	; 0x30
1000963c:	7013      	strb	r3, [r2, #0]
1000963e:	9b03      	ldr	r3, [sp, #12]
10009640:	9a22      	ldr	r2, [sp, #136]	; 0x88
10009642:	3301      	adds	r3, #1
10009644:	6013      	str	r3, [r2, #0]
10009646:	9b24      	ldr	r3, [sp, #144]	; 0x90
10009648:	2b00      	cmp	r3, #0
1000964a:	d010      	beq.n	1000966e <_dtoa_r+0xbfa>
1000964c:	9a04      	ldr	r2, [sp, #16]
1000964e:	601a      	str	r2, [r3, #0]
10009650:	e00d      	b.n	1000966e <_dtoa_r+0xbfa>
10009652:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
10009654:	2b00      	cmp	r3, #0
10009656:	dd00      	ble.n	1000965a <_dtoa_r+0xbe6>
10009658:	e6bd      	b.n	100093d6 <_dtoa_r+0x962>
1000965a:	9b20      	ldr	r3, [sp, #128]	; 0x80
1000965c:	2b02      	cmp	r3, #2
1000965e:	dd00      	ble.n	10009662 <_dtoa_r+0xbee>
10009660:	e68a      	b.n	10009378 <_dtoa_r+0x904>
10009662:	e6b8      	b.n	100093d6 <_dtoa_r+0x962>
10009664:	9b20      	ldr	r3, [sp, #128]	; 0x80
10009666:	2b02      	cmp	r3, #2
10009668:	dd00      	ble.n	1000966c <_dtoa_r+0xbf8>
1000966a:	e685      	b.n	10009378 <_dtoa_r+0x904>
1000966c:	e6b8      	b.n	100093e0 <_dtoa_r+0x96c>
1000966e:	b01b      	add	sp, #108	; 0x6c
10009670:	bdf0      	pop	{r4, r5, r6, r7, pc}
10009672:	46c0      	nop			; (mov r8, r8)

10009674 <_localeconv_r>:
10009674:	4800      	ldr	r0, [pc, #0]	; (10009678 <_localeconv_r+0x4>)
10009676:	4770      	bx	lr
10009678:	200012d4 	.word	0x200012d4

1000967c <malloc>:
1000967c:	b508      	push	{r3, lr}
1000967e:	4b03      	ldr	r3, [pc, #12]	; (1000968c <malloc+0x10>)
10009680:	1c01      	adds	r1, r0, #0
10009682:	6818      	ldr	r0, [r3, #0]
10009684:	f000 fb58 	bl	10009d38 <_malloc_r>
10009688:	bd08      	pop	{r3, pc}
1000968a:	46c0      	nop			; (mov r8, r8)
1000968c:	200012d0 	.word	0x200012d0

10009690 <memchr>:
10009690:	b2c9      	uxtb	r1, r1
10009692:	1882      	adds	r2, r0, r2
10009694:	4290      	cmp	r0, r2
10009696:	d004      	beq.n	100096a2 <memchr+0x12>
10009698:	7803      	ldrb	r3, [r0, #0]
1000969a:	428b      	cmp	r3, r1
1000969c:	d002      	beq.n	100096a4 <memchr+0x14>
1000969e:	3001      	adds	r0, #1
100096a0:	e7f8      	b.n	10009694 <memchr+0x4>
100096a2:	2000      	movs	r0, #0
100096a4:	4770      	bx	lr

100096a6 <memcpy>:
100096a6:	2300      	movs	r3, #0
100096a8:	b510      	push	{r4, lr}
100096aa:	4293      	cmp	r3, r2
100096ac:	d003      	beq.n	100096b6 <memcpy+0x10>
100096ae:	5ccc      	ldrb	r4, [r1, r3]
100096b0:	54c4      	strb	r4, [r0, r3]
100096b2:	3301      	adds	r3, #1
100096b4:	e7f9      	b.n	100096aa <memcpy+0x4>
100096b6:	bd10      	pop	{r4, pc}

100096b8 <_Balloc>:
100096b8:	b570      	push	{r4, r5, r6, lr}
100096ba:	6a46      	ldr	r6, [r0, #36]	; 0x24
100096bc:	1c04      	adds	r4, r0, #0
100096be:	1c0d      	adds	r5, r1, #0
100096c0:	2e00      	cmp	r6, #0
100096c2:	d107      	bne.n	100096d4 <_Balloc+0x1c>
100096c4:	2010      	movs	r0, #16
100096c6:	f7ff ffd9 	bl	1000967c <malloc>
100096ca:	6260      	str	r0, [r4, #36]	; 0x24
100096cc:	6046      	str	r6, [r0, #4]
100096ce:	6086      	str	r6, [r0, #8]
100096d0:	6006      	str	r6, [r0, #0]
100096d2:	60c6      	str	r6, [r0, #12]
100096d4:	6a66      	ldr	r6, [r4, #36]	; 0x24
100096d6:	68f3      	ldr	r3, [r6, #12]
100096d8:	2b00      	cmp	r3, #0
100096da:	d009      	beq.n	100096f0 <_Balloc+0x38>
100096dc:	6a62      	ldr	r2, [r4, #36]	; 0x24
100096de:	00ab      	lsls	r3, r5, #2
100096e0:	68d2      	ldr	r2, [r2, #12]
100096e2:	18d3      	adds	r3, r2, r3
100096e4:	6818      	ldr	r0, [r3, #0]
100096e6:	2800      	cmp	r0, #0
100096e8:	d00e      	beq.n	10009708 <_Balloc+0x50>
100096ea:	6802      	ldr	r2, [r0, #0]
100096ec:	601a      	str	r2, [r3, #0]
100096ee:	e017      	b.n	10009720 <_Balloc+0x68>
100096f0:	1c20      	adds	r0, r4, #0
100096f2:	2104      	movs	r1, #4
100096f4:	2221      	movs	r2, #33	; 0x21
100096f6:	f000 facb 	bl	10009c90 <_calloc_r>
100096fa:	6a63      	ldr	r3, [r4, #36]	; 0x24
100096fc:	60f0      	str	r0, [r6, #12]
100096fe:	68db      	ldr	r3, [r3, #12]
10009700:	2b00      	cmp	r3, #0
10009702:	d1eb      	bne.n	100096dc <_Balloc+0x24>
10009704:	2000      	movs	r0, #0
10009706:	e00e      	b.n	10009726 <_Balloc+0x6e>
10009708:	2101      	movs	r1, #1
1000970a:	1c0e      	adds	r6, r1, #0
1000970c:	40ae      	lsls	r6, r5
1000970e:	1d72      	adds	r2, r6, #5
10009710:	0092      	lsls	r2, r2, #2
10009712:	1c20      	adds	r0, r4, #0
10009714:	f000 fabc 	bl	10009c90 <_calloc_r>
10009718:	2800      	cmp	r0, #0
1000971a:	d0f3      	beq.n	10009704 <_Balloc+0x4c>
1000971c:	6045      	str	r5, [r0, #4]
1000971e:	6086      	str	r6, [r0, #8]
10009720:	2300      	movs	r3, #0
10009722:	6103      	str	r3, [r0, #16]
10009724:	60c3      	str	r3, [r0, #12]
10009726:	bd70      	pop	{r4, r5, r6, pc}

10009728 <_Bfree>:
10009728:	b570      	push	{r4, r5, r6, lr}
1000972a:	6a45      	ldr	r5, [r0, #36]	; 0x24
1000972c:	1c06      	adds	r6, r0, #0
1000972e:	1c0c      	adds	r4, r1, #0
10009730:	2d00      	cmp	r5, #0
10009732:	d107      	bne.n	10009744 <_Bfree+0x1c>
10009734:	2010      	movs	r0, #16
10009736:	f7ff ffa1 	bl	1000967c <malloc>
1000973a:	6270      	str	r0, [r6, #36]	; 0x24
1000973c:	6045      	str	r5, [r0, #4]
1000973e:	6085      	str	r5, [r0, #8]
10009740:	6005      	str	r5, [r0, #0]
10009742:	60c5      	str	r5, [r0, #12]
10009744:	2c00      	cmp	r4, #0
10009746:	d007      	beq.n	10009758 <_Bfree+0x30>
10009748:	6a72      	ldr	r2, [r6, #36]	; 0x24
1000974a:	6863      	ldr	r3, [r4, #4]
1000974c:	68d2      	ldr	r2, [r2, #12]
1000974e:	009b      	lsls	r3, r3, #2
10009750:	18d3      	adds	r3, r2, r3
10009752:	681a      	ldr	r2, [r3, #0]
10009754:	6022      	str	r2, [r4, #0]
10009756:	601c      	str	r4, [r3, #0]
10009758:	bd70      	pop	{r4, r5, r6, pc}

1000975a <__multadd>:
1000975a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000975c:	1c1e      	adds	r6, r3, #0
1000975e:	2314      	movs	r3, #20
10009760:	469c      	mov	ip, r3
10009762:	1c07      	adds	r7, r0, #0
10009764:	1c0c      	adds	r4, r1, #0
10009766:	2000      	movs	r0, #0
10009768:	690d      	ldr	r5, [r1, #16]
1000976a:	448c      	add	ip, r1
1000976c:	4663      	mov	r3, ip
1000976e:	8819      	ldrh	r1, [r3, #0]
10009770:	681b      	ldr	r3, [r3, #0]
10009772:	4351      	muls	r1, r2
10009774:	0c1b      	lsrs	r3, r3, #16
10009776:	4353      	muls	r3, r2
10009778:	1989      	adds	r1, r1, r6
1000977a:	0c0e      	lsrs	r6, r1, #16
1000977c:	18f3      	adds	r3, r6, r3
1000977e:	b289      	uxth	r1, r1
10009780:	0c1e      	lsrs	r6, r3, #16
10009782:	041b      	lsls	r3, r3, #16
10009784:	185b      	adds	r3, r3, r1
10009786:	4661      	mov	r1, ip
10009788:	3001      	adds	r0, #1
1000978a:	c108      	stmia	r1!, {r3}
1000978c:	468c      	mov	ip, r1
1000978e:	42a8      	cmp	r0, r5
10009790:	dbec      	blt.n	1000976c <__multadd+0x12>
10009792:	2e00      	cmp	r6, #0
10009794:	d01b      	beq.n	100097ce <__multadd+0x74>
10009796:	68a3      	ldr	r3, [r4, #8]
10009798:	429d      	cmp	r5, r3
1000979a:	db12      	blt.n	100097c2 <__multadd+0x68>
1000979c:	6863      	ldr	r3, [r4, #4]
1000979e:	1c38      	adds	r0, r7, #0
100097a0:	1c59      	adds	r1, r3, #1
100097a2:	f7ff ff89 	bl	100096b8 <_Balloc>
100097a6:	1c21      	adds	r1, r4, #0
100097a8:	6923      	ldr	r3, [r4, #16]
100097aa:	9001      	str	r0, [sp, #4]
100097ac:	1c9a      	adds	r2, r3, #2
100097ae:	310c      	adds	r1, #12
100097b0:	0092      	lsls	r2, r2, #2
100097b2:	300c      	adds	r0, #12
100097b4:	f7ff ff77 	bl	100096a6 <memcpy>
100097b8:	1c21      	adds	r1, r4, #0
100097ba:	1c38      	adds	r0, r7, #0
100097bc:	f7ff ffb4 	bl	10009728 <_Bfree>
100097c0:	9c01      	ldr	r4, [sp, #4]
100097c2:	1d2b      	adds	r3, r5, #4
100097c4:	009b      	lsls	r3, r3, #2
100097c6:	18e3      	adds	r3, r4, r3
100097c8:	3501      	adds	r5, #1
100097ca:	605e      	str	r6, [r3, #4]
100097cc:	6125      	str	r5, [r4, #16]
100097ce:	1c20      	adds	r0, r4, #0
100097d0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

100097d2 <__hi0bits>:
100097d2:	2200      	movs	r2, #0
100097d4:	1c03      	adds	r3, r0, #0
100097d6:	0c01      	lsrs	r1, r0, #16
100097d8:	4291      	cmp	r1, r2
100097da:	d101      	bne.n	100097e0 <__hi0bits+0xe>
100097dc:	0403      	lsls	r3, r0, #16
100097de:	3210      	adds	r2, #16
100097e0:	0e19      	lsrs	r1, r3, #24
100097e2:	d101      	bne.n	100097e8 <__hi0bits+0x16>
100097e4:	3208      	adds	r2, #8
100097e6:	021b      	lsls	r3, r3, #8
100097e8:	0f19      	lsrs	r1, r3, #28
100097ea:	d101      	bne.n	100097f0 <__hi0bits+0x1e>
100097ec:	3204      	adds	r2, #4
100097ee:	011b      	lsls	r3, r3, #4
100097f0:	0f99      	lsrs	r1, r3, #30
100097f2:	d101      	bne.n	100097f8 <__hi0bits+0x26>
100097f4:	3202      	adds	r2, #2
100097f6:	009b      	lsls	r3, r3, #2
100097f8:	1c10      	adds	r0, r2, #0
100097fa:	2b00      	cmp	r3, #0
100097fc:	db03      	blt.n	10009806 <__hi0bits+0x34>
100097fe:	2020      	movs	r0, #32
10009800:	005b      	lsls	r3, r3, #1
10009802:	d500      	bpl.n	10009806 <__hi0bits+0x34>
10009804:	1c50      	adds	r0, r2, #1
10009806:	4770      	bx	lr

10009808 <__lo0bits>:
10009808:	2207      	movs	r2, #7
1000980a:	6803      	ldr	r3, [r0, #0]
1000980c:	b510      	push	{r4, lr}
1000980e:	1c01      	adds	r1, r0, #0
10009810:	401a      	ands	r2, r3
10009812:	d00c      	beq.n	1000982e <__lo0bits+0x26>
10009814:	2401      	movs	r4, #1
10009816:	2000      	movs	r0, #0
10009818:	4223      	tst	r3, r4
1000981a:	d123      	bne.n	10009864 <__lo0bits+0x5c>
1000981c:	2202      	movs	r2, #2
1000981e:	4213      	tst	r3, r2
10009820:	d003      	beq.n	1000982a <__lo0bits+0x22>
10009822:	40e3      	lsrs	r3, r4
10009824:	1c20      	adds	r0, r4, #0
10009826:	600b      	str	r3, [r1, #0]
10009828:	e01c      	b.n	10009864 <__lo0bits+0x5c>
1000982a:	089b      	lsrs	r3, r3, #2
1000982c:	e018      	b.n	10009860 <__lo0bits+0x58>
1000982e:	b298      	uxth	r0, r3
10009830:	2800      	cmp	r0, #0
10009832:	d101      	bne.n	10009838 <__lo0bits+0x30>
10009834:	2210      	movs	r2, #16
10009836:	0c1b      	lsrs	r3, r3, #16
10009838:	b2d8      	uxtb	r0, r3
1000983a:	2800      	cmp	r0, #0
1000983c:	d101      	bne.n	10009842 <__lo0bits+0x3a>
1000983e:	3208      	adds	r2, #8
10009840:	0a1b      	lsrs	r3, r3, #8
10009842:	0718      	lsls	r0, r3, #28
10009844:	d101      	bne.n	1000984a <__lo0bits+0x42>
10009846:	3204      	adds	r2, #4
10009848:	091b      	lsrs	r3, r3, #4
1000984a:	0798      	lsls	r0, r3, #30
1000984c:	d101      	bne.n	10009852 <__lo0bits+0x4a>
1000984e:	3202      	adds	r2, #2
10009850:	089b      	lsrs	r3, r3, #2
10009852:	07d8      	lsls	r0, r3, #31
10009854:	d404      	bmi.n	10009860 <__lo0bits+0x58>
10009856:	085b      	lsrs	r3, r3, #1
10009858:	2020      	movs	r0, #32
1000985a:	2b00      	cmp	r3, #0
1000985c:	d002      	beq.n	10009864 <__lo0bits+0x5c>
1000985e:	3201      	adds	r2, #1
10009860:	1c10      	adds	r0, r2, #0
10009862:	600b      	str	r3, [r1, #0]
10009864:	bd10      	pop	{r4, pc}

10009866 <__i2b>:
10009866:	b510      	push	{r4, lr}
10009868:	1c0c      	adds	r4, r1, #0
1000986a:	2101      	movs	r1, #1
1000986c:	f7ff ff24 	bl	100096b8 <_Balloc>
10009870:	2301      	movs	r3, #1
10009872:	6144      	str	r4, [r0, #20]
10009874:	6103      	str	r3, [r0, #16]
10009876:	bd10      	pop	{r4, pc}

10009878 <__multiply>:
10009878:	b5f0      	push	{r4, r5, r6, r7, lr}
1000987a:	690b      	ldr	r3, [r1, #16]
1000987c:	1c14      	adds	r4, r2, #0
1000987e:	6912      	ldr	r2, [r2, #16]
10009880:	b089      	sub	sp, #36	; 0x24
10009882:	1c0d      	adds	r5, r1, #0
10009884:	4293      	cmp	r3, r2
10009886:	da01      	bge.n	1000988c <__multiply+0x14>
10009888:	1c25      	adds	r5, r4, #0
1000988a:	1c0c      	adds	r4, r1, #0
1000988c:	692f      	ldr	r7, [r5, #16]
1000988e:	6926      	ldr	r6, [r4, #16]
10009890:	68aa      	ldr	r2, [r5, #8]
10009892:	19bb      	adds	r3, r7, r6
10009894:	6869      	ldr	r1, [r5, #4]
10009896:	9300      	str	r3, [sp, #0]
10009898:	4293      	cmp	r3, r2
1000989a:	dd00      	ble.n	1000989e <__multiply+0x26>
1000989c:	3101      	adds	r1, #1
1000989e:	f7ff ff0b 	bl	100096b8 <_Balloc>
100098a2:	1c01      	adds	r1, r0, #0
100098a4:	9b00      	ldr	r3, [sp, #0]
100098a6:	3114      	adds	r1, #20
100098a8:	4684      	mov	ip, r0
100098aa:	0098      	lsls	r0, r3, #2
100098ac:	1c0b      	adds	r3, r1, #0
100098ae:	1808      	adds	r0, r1, r0
100098b0:	4283      	cmp	r3, r0
100098b2:	d202      	bcs.n	100098ba <__multiply+0x42>
100098b4:	2200      	movs	r2, #0
100098b6:	c304      	stmia	r3!, {r2}
100098b8:	e7fa      	b.n	100098b0 <__multiply+0x38>
100098ba:	3514      	adds	r5, #20
100098bc:	00bf      	lsls	r7, r7, #2
100098be:	19eb      	adds	r3, r5, r7
100098c0:	3414      	adds	r4, #20
100098c2:	00b6      	lsls	r6, r6, #2
100098c4:	9304      	str	r3, [sp, #16]
100098c6:	19a3      	adds	r3, r4, r6
100098c8:	9502      	str	r5, [sp, #8]
100098ca:	9306      	str	r3, [sp, #24]
100098cc:	9b06      	ldr	r3, [sp, #24]
100098ce:	429c      	cmp	r4, r3
100098d0:	d256      	bcs.n	10009980 <__multiply+0x108>
100098d2:	8823      	ldrh	r3, [r4, #0]
100098d4:	9303      	str	r3, [sp, #12]
100098d6:	2b00      	cmp	r3, #0
100098d8:	d022      	beq.n	10009920 <__multiply+0xa8>
100098da:	1c0e      	adds	r6, r1, #0
100098dc:	2700      	movs	r7, #0
100098de:	9b02      	ldr	r3, [sp, #8]
100098e0:	9301      	str	r3, [sp, #4]
100098e2:	9b01      	ldr	r3, [sp, #4]
100098e4:	9d03      	ldr	r5, [sp, #12]
100098e6:	cb04      	ldmia	r3!, {r2}
100098e8:	9605      	str	r6, [sp, #20]
100098ea:	9301      	str	r3, [sp, #4]
100098ec:	8833      	ldrh	r3, [r6, #0]
100098ee:	9307      	str	r3, [sp, #28]
100098f0:	b293      	uxth	r3, r2
100098f2:	436b      	muls	r3, r5
100098f4:	9d07      	ldr	r5, [sp, #28]
100098f6:	0c12      	lsrs	r2, r2, #16
100098f8:	18eb      	adds	r3, r5, r3
100098fa:	6835      	ldr	r5, [r6, #0]
100098fc:	19db      	adds	r3, r3, r7
100098fe:	0c2f      	lsrs	r7, r5, #16
10009900:	9d03      	ldr	r5, [sp, #12]
10009902:	436a      	muls	r2, r5
10009904:	18ba      	adds	r2, r7, r2
10009906:	0c1f      	lsrs	r7, r3, #16
10009908:	19d2      	adds	r2, r2, r7
1000990a:	0c17      	lsrs	r7, r2, #16
1000990c:	b29b      	uxth	r3, r3
1000990e:	0412      	lsls	r2, r2, #16
10009910:	4313      	orrs	r3, r2
10009912:	c608      	stmia	r6!, {r3}
10009914:	9a01      	ldr	r2, [sp, #4]
10009916:	9b04      	ldr	r3, [sp, #16]
10009918:	429a      	cmp	r2, r3
1000991a:	d3e2      	bcc.n	100098e2 <__multiply+0x6a>
1000991c:	9b05      	ldr	r3, [sp, #20]
1000991e:	605f      	str	r7, [r3, #4]
10009920:	6823      	ldr	r3, [r4, #0]
10009922:	0c1b      	lsrs	r3, r3, #16
10009924:	9301      	str	r3, [sp, #4]
10009926:	d021      	beq.n	1000996c <__multiply+0xf4>
10009928:	2200      	movs	r2, #0
1000992a:	1c0d      	adds	r5, r1, #0
1000992c:	680b      	ldr	r3, [r1, #0]
1000992e:	9f02      	ldr	r7, [sp, #8]
10009930:	9203      	str	r2, [sp, #12]
10009932:	883e      	ldrh	r6, [r7, #0]
10009934:	9a01      	ldr	r2, [sp, #4]
10009936:	b29b      	uxth	r3, r3
10009938:	4356      	muls	r6, r2
1000993a:	682a      	ldr	r2, [r5, #0]
1000993c:	9505      	str	r5, [sp, #20]
1000993e:	0c12      	lsrs	r2, r2, #16
10009940:	18b2      	adds	r2, r6, r2
10009942:	9e03      	ldr	r6, [sp, #12]
10009944:	1992      	adds	r2, r2, r6
10009946:	0416      	lsls	r6, r2, #16
10009948:	4333      	orrs	r3, r6
1000994a:	602b      	str	r3, [r5, #0]
1000994c:	cf08      	ldmia	r7!, {r3}
1000994e:	9e01      	ldr	r6, [sp, #4]
10009950:	0c1b      	lsrs	r3, r3, #16
10009952:	4373      	muls	r3, r6
10009954:	88ae      	ldrh	r6, [r5, #4]
10009956:	0c12      	lsrs	r2, r2, #16
10009958:	199b      	adds	r3, r3, r6
1000995a:	189b      	adds	r3, r3, r2
1000995c:	0c1a      	lsrs	r2, r3, #16
1000995e:	9203      	str	r2, [sp, #12]
10009960:	9a04      	ldr	r2, [sp, #16]
10009962:	3504      	adds	r5, #4
10009964:	42ba      	cmp	r2, r7
10009966:	d8e4      	bhi.n	10009932 <__multiply+0xba>
10009968:	9a05      	ldr	r2, [sp, #20]
1000996a:	6053      	str	r3, [r2, #4]
1000996c:	3404      	adds	r4, #4
1000996e:	3104      	adds	r1, #4
10009970:	e7ac      	b.n	100098cc <__multiply+0x54>
10009972:	3804      	subs	r0, #4
10009974:	6803      	ldr	r3, [r0, #0]
10009976:	2b00      	cmp	r3, #0
10009978:	d105      	bne.n	10009986 <__multiply+0x10e>
1000997a:	9b00      	ldr	r3, [sp, #0]
1000997c:	3b01      	subs	r3, #1
1000997e:	9300      	str	r3, [sp, #0]
10009980:	9b00      	ldr	r3, [sp, #0]
10009982:	2b00      	cmp	r3, #0
10009984:	dcf5      	bgt.n	10009972 <__multiply+0xfa>
10009986:	4663      	mov	r3, ip
10009988:	4660      	mov	r0, ip
1000998a:	9a00      	ldr	r2, [sp, #0]
1000998c:	611a      	str	r2, [r3, #16]
1000998e:	b009      	add	sp, #36	; 0x24
10009990:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

10009994 <__pow5mult>:
10009994:	2303      	movs	r3, #3
10009996:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10009998:	4013      	ands	r3, r2
1000999a:	1c05      	adds	r5, r0, #0
1000999c:	1c0e      	adds	r6, r1, #0
1000999e:	1c14      	adds	r4, r2, #0
100099a0:	2b00      	cmp	r3, #0
100099a2:	d007      	beq.n	100099b4 <__pow5mult+0x20>
100099a4:	4a22      	ldr	r2, [pc, #136]	; (10009a30 <__pow5mult+0x9c>)
100099a6:	3b01      	subs	r3, #1
100099a8:	009b      	lsls	r3, r3, #2
100099aa:	589a      	ldr	r2, [r3, r2]
100099ac:	2300      	movs	r3, #0
100099ae:	f7ff fed4 	bl	1000975a <__multadd>
100099b2:	1c06      	adds	r6, r0, #0
100099b4:	10a3      	asrs	r3, r4, #2
100099b6:	9301      	str	r3, [sp, #4]
100099b8:	d037      	beq.n	10009a2a <__pow5mult+0x96>
100099ba:	6a6c      	ldr	r4, [r5, #36]	; 0x24
100099bc:	2c00      	cmp	r4, #0
100099be:	d107      	bne.n	100099d0 <__pow5mult+0x3c>
100099c0:	2010      	movs	r0, #16
100099c2:	f7ff fe5b 	bl	1000967c <malloc>
100099c6:	6268      	str	r0, [r5, #36]	; 0x24
100099c8:	6044      	str	r4, [r0, #4]
100099ca:	6084      	str	r4, [r0, #8]
100099cc:	6004      	str	r4, [r0, #0]
100099ce:	60c4      	str	r4, [r0, #12]
100099d0:	6a6f      	ldr	r7, [r5, #36]	; 0x24
100099d2:	68bc      	ldr	r4, [r7, #8]
100099d4:	2c00      	cmp	r4, #0
100099d6:	d110      	bne.n	100099fa <__pow5mult+0x66>
100099d8:	1c28      	adds	r0, r5, #0
100099da:	4916      	ldr	r1, [pc, #88]	; (10009a34 <__pow5mult+0xa0>)
100099dc:	f7ff ff43 	bl	10009866 <__i2b>
100099e0:	2300      	movs	r3, #0
100099e2:	60b8      	str	r0, [r7, #8]
100099e4:	1c04      	adds	r4, r0, #0
100099e6:	6003      	str	r3, [r0, #0]
100099e8:	e007      	b.n	100099fa <__pow5mult+0x66>
100099ea:	9b01      	ldr	r3, [sp, #4]
100099ec:	105b      	asrs	r3, r3, #1
100099ee:	9301      	str	r3, [sp, #4]
100099f0:	d01b      	beq.n	10009a2a <__pow5mult+0x96>
100099f2:	6820      	ldr	r0, [r4, #0]
100099f4:	2800      	cmp	r0, #0
100099f6:	d00f      	beq.n	10009a18 <__pow5mult+0x84>
100099f8:	1c04      	adds	r4, r0, #0
100099fa:	9b01      	ldr	r3, [sp, #4]
100099fc:	07db      	lsls	r3, r3, #31
100099fe:	d5f4      	bpl.n	100099ea <__pow5mult+0x56>
10009a00:	1c31      	adds	r1, r6, #0
10009a02:	1c22      	adds	r2, r4, #0
10009a04:	1c28      	adds	r0, r5, #0
10009a06:	f7ff ff37 	bl	10009878 <__multiply>
10009a0a:	1c07      	adds	r7, r0, #0
10009a0c:	1c31      	adds	r1, r6, #0
10009a0e:	1c28      	adds	r0, r5, #0
10009a10:	f7ff fe8a 	bl	10009728 <_Bfree>
10009a14:	1c3e      	adds	r6, r7, #0
10009a16:	e7e8      	b.n	100099ea <__pow5mult+0x56>
10009a18:	1c28      	adds	r0, r5, #0
10009a1a:	1c21      	adds	r1, r4, #0
10009a1c:	1c22      	adds	r2, r4, #0
10009a1e:	f7ff ff2b 	bl	10009878 <__multiply>
10009a22:	2300      	movs	r3, #0
10009a24:	6020      	str	r0, [r4, #0]
10009a26:	6003      	str	r3, [r0, #0]
10009a28:	e7e6      	b.n	100099f8 <__pow5mult+0x64>
10009a2a:	1c30      	adds	r0, r6, #0
10009a2c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
10009a2e:	46c0      	nop			; (mov r8, r8)
10009a30:	1000b960 	.word	0x1000b960
10009a34:	00000271 	.word	0x00000271

10009a38 <__lshift>:
10009a38:	b5f0      	push	{r4, r5, r6, r7, lr}
10009a3a:	1c0c      	adds	r4, r1, #0
10009a3c:	1c17      	adds	r7, r2, #0
10009a3e:	6923      	ldr	r3, [r4, #16]
10009a40:	1155      	asrs	r5, r2, #5
10009a42:	b085      	sub	sp, #20
10009a44:	18eb      	adds	r3, r5, r3
10009a46:	9301      	str	r3, [sp, #4]
10009a48:	3301      	adds	r3, #1
10009a4a:	9300      	str	r3, [sp, #0]
10009a4c:	6849      	ldr	r1, [r1, #4]
10009a4e:	68a3      	ldr	r3, [r4, #8]
10009a50:	9002      	str	r0, [sp, #8]
10009a52:	9a00      	ldr	r2, [sp, #0]
10009a54:	429a      	cmp	r2, r3
10009a56:	dd02      	ble.n	10009a5e <__lshift+0x26>
10009a58:	3101      	adds	r1, #1
10009a5a:	005b      	lsls	r3, r3, #1
10009a5c:	e7f9      	b.n	10009a52 <__lshift+0x1a>
10009a5e:	9802      	ldr	r0, [sp, #8]
10009a60:	f7ff fe2a 	bl	100096b8 <_Balloc>
10009a64:	1c02      	adds	r2, r0, #0
10009a66:	1c06      	adds	r6, r0, #0
10009a68:	2300      	movs	r3, #0
10009a6a:	3214      	adds	r2, #20
10009a6c:	42ab      	cmp	r3, r5
10009a6e:	da04      	bge.n	10009a7a <__lshift+0x42>
10009a70:	2000      	movs	r0, #0
10009a72:	0099      	lsls	r1, r3, #2
10009a74:	5050      	str	r0, [r2, r1]
10009a76:	3301      	adds	r3, #1
10009a78:	e7f8      	b.n	10009a6c <__lshift+0x34>
10009a7a:	43eb      	mvns	r3, r5
10009a7c:	17db      	asrs	r3, r3, #31
10009a7e:	401d      	ands	r5, r3
10009a80:	1c23      	adds	r3, r4, #0
10009a82:	00ad      	lsls	r5, r5, #2
10009a84:	1955      	adds	r5, r2, r5
10009a86:	6922      	ldr	r2, [r4, #16]
10009a88:	3314      	adds	r3, #20
10009a8a:	0092      	lsls	r2, r2, #2
10009a8c:	189a      	adds	r2, r3, r2
10009a8e:	4694      	mov	ip, r2
10009a90:	221f      	movs	r2, #31
10009a92:	4017      	ands	r7, r2
10009a94:	d014      	beq.n	10009ac0 <__lshift+0x88>
10009a96:	3201      	adds	r2, #1
10009a98:	1bd2      	subs	r2, r2, r7
10009a9a:	9203      	str	r2, [sp, #12]
10009a9c:	2200      	movs	r2, #0
10009a9e:	6819      	ldr	r1, [r3, #0]
10009aa0:	1c28      	adds	r0, r5, #0
10009aa2:	40b9      	lsls	r1, r7
10009aa4:	430a      	orrs	r2, r1
10009aa6:	c504      	stmia	r5!, {r2}
10009aa8:	cb04      	ldmia	r3!, {r2}
10009aaa:	9903      	ldr	r1, [sp, #12]
10009aac:	40ca      	lsrs	r2, r1
10009aae:	459c      	cmp	ip, r3
10009ab0:	d8f5      	bhi.n	10009a9e <__lshift+0x66>
10009ab2:	6042      	str	r2, [r0, #4]
10009ab4:	2a00      	cmp	r2, #0
10009ab6:	d007      	beq.n	10009ac8 <__lshift+0x90>
10009ab8:	9b01      	ldr	r3, [sp, #4]
10009aba:	3302      	adds	r3, #2
10009abc:	9300      	str	r3, [sp, #0]
10009abe:	e003      	b.n	10009ac8 <__lshift+0x90>
10009ac0:	cb04      	ldmia	r3!, {r2}
10009ac2:	c504      	stmia	r5!, {r2}
10009ac4:	459c      	cmp	ip, r3
10009ac6:	d8fb      	bhi.n	10009ac0 <__lshift+0x88>
10009ac8:	9b00      	ldr	r3, [sp, #0]
10009aca:	9802      	ldr	r0, [sp, #8]
10009acc:	3b01      	subs	r3, #1
10009ace:	6133      	str	r3, [r6, #16]
10009ad0:	1c21      	adds	r1, r4, #0
10009ad2:	f7ff fe29 	bl	10009728 <_Bfree>
10009ad6:	1c30      	adds	r0, r6, #0
10009ad8:	b005      	add	sp, #20
10009ada:	bdf0      	pop	{r4, r5, r6, r7, pc}

10009adc <__mcmp>:
10009adc:	6903      	ldr	r3, [r0, #16]
10009ade:	690a      	ldr	r2, [r1, #16]
10009ae0:	b510      	push	{r4, lr}
10009ae2:	1a9b      	subs	r3, r3, r2
10009ae4:	1c04      	adds	r4, r0, #0
10009ae6:	1e18      	subs	r0, r3, #0
10009ae8:	d112      	bne.n	10009b10 <__mcmp+0x34>
10009aea:	0093      	lsls	r3, r2, #2
10009aec:	3414      	adds	r4, #20
10009aee:	3114      	adds	r1, #20
10009af0:	18e2      	adds	r2, r4, r3
10009af2:	18c9      	adds	r1, r1, r3
10009af4:	3a04      	subs	r2, #4
10009af6:	3904      	subs	r1, #4
10009af8:	6813      	ldr	r3, [r2, #0]
10009afa:	6808      	ldr	r0, [r1, #0]
10009afc:	4283      	cmp	r3, r0
10009afe:	d004      	beq.n	10009b0a <__mcmp+0x2e>
10009b00:	4283      	cmp	r3, r0
10009b02:	419b      	sbcs	r3, r3
10009b04:	2001      	movs	r0, #1
10009b06:	4318      	orrs	r0, r3
10009b08:	e002      	b.n	10009b10 <__mcmp+0x34>
10009b0a:	42a2      	cmp	r2, r4
10009b0c:	d8f2      	bhi.n	10009af4 <__mcmp+0x18>
10009b0e:	2000      	movs	r0, #0
10009b10:	bd10      	pop	{r4, pc}

10009b12 <__mdiff>:
10009b12:	b5f0      	push	{r4, r5, r6, r7, lr}
10009b14:	1c07      	adds	r7, r0, #0
10009b16:	b085      	sub	sp, #20
10009b18:	1c08      	adds	r0, r1, #0
10009b1a:	1c0c      	adds	r4, r1, #0
10009b1c:	1c11      	adds	r1, r2, #0
10009b1e:	1c15      	adds	r5, r2, #0
10009b20:	f7ff ffdc 	bl	10009adc <__mcmp>
10009b24:	1e06      	subs	r6, r0, #0
10009b26:	d107      	bne.n	10009b38 <__mdiff+0x26>
10009b28:	1c38      	adds	r0, r7, #0
10009b2a:	1c31      	adds	r1, r6, #0
10009b2c:	f7ff fdc4 	bl	100096b8 <_Balloc>
10009b30:	2301      	movs	r3, #1
10009b32:	6146      	str	r6, [r0, #20]
10009b34:	6103      	str	r3, [r0, #16]
10009b36:	e055      	b.n	10009be4 <__mdiff+0xd2>
10009b38:	2300      	movs	r3, #0
10009b3a:	9301      	str	r3, [sp, #4]
10009b3c:	4298      	cmp	r0, r3
10009b3e:	da04      	bge.n	10009b4a <__mdiff+0x38>
10009b40:	1c23      	adds	r3, r4, #0
10009b42:	1c2c      	adds	r4, r5, #0
10009b44:	1c1d      	adds	r5, r3, #0
10009b46:	2301      	movs	r3, #1
10009b48:	9301      	str	r3, [sp, #4]
10009b4a:	1c38      	adds	r0, r7, #0
10009b4c:	6861      	ldr	r1, [r4, #4]
10009b4e:	f7ff fdb3 	bl	100096b8 <_Balloc>
10009b52:	9b01      	ldr	r3, [sp, #4]
10009b54:	6926      	ldr	r6, [r4, #16]
10009b56:	1c2f      	adds	r7, r5, #0
10009b58:	60c3      	str	r3, [r0, #12]
10009b5a:	3414      	adds	r4, #20
10009b5c:	00b3      	lsls	r3, r6, #2
10009b5e:	18e3      	adds	r3, r4, r3
10009b60:	1c02      	adds	r2, r0, #0
10009b62:	9302      	str	r3, [sp, #8]
10009b64:	692b      	ldr	r3, [r5, #16]
10009b66:	2500      	movs	r5, #0
10009b68:	3714      	adds	r7, #20
10009b6a:	009b      	lsls	r3, r3, #2
10009b6c:	18fb      	adds	r3, r7, r3
10009b6e:	9303      	str	r3, [sp, #12]
10009b70:	3214      	adds	r2, #20
10009b72:	cc08      	ldmia	r4!, {r3}
10009b74:	4669      	mov	r1, sp
10009b76:	469c      	mov	ip, r3
10009b78:	cf08      	ldmia	r7!, {r3}
10009b7a:	3204      	adds	r2, #4
10009b7c:	9300      	str	r3, [sp, #0]
10009b7e:	4663      	mov	r3, ip
10009b80:	808b      	strh	r3, [r1, #4]
10009b82:	888b      	ldrh	r3, [r1, #4]
10009b84:	195d      	adds	r5, r3, r5
10009b86:	9b00      	ldr	r3, [sp, #0]
10009b88:	b29b      	uxth	r3, r3
10009b8a:	1aeb      	subs	r3, r5, r3
10009b8c:	4665      	mov	r5, ip
10009b8e:	9301      	str	r3, [sp, #4]
10009b90:	9b00      	ldr	r3, [sp, #0]
10009b92:	0c2d      	lsrs	r5, r5, #16
10009b94:	0c19      	lsrs	r1, r3, #16
10009b96:	9b01      	ldr	r3, [sp, #4]
10009b98:	1a69      	subs	r1, r5, r1
10009b9a:	141d      	asrs	r5, r3, #16
10009b9c:	1f13      	subs	r3, r2, #4
10009b9e:	469c      	mov	ip, r3
10009ba0:	466b      	mov	r3, sp
10009ba2:	1949      	adds	r1, r1, r5
10009ba4:	889b      	ldrh	r3, [r3, #4]
10009ba6:	140d      	asrs	r5, r1, #16
10009ba8:	0409      	lsls	r1, r1, #16
10009baa:	430b      	orrs	r3, r1
10009bac:	4661      	mov	r1, ip
10009bae:	600b      	str	r3, [r1, #0]
10009bb0:	9b03      	ldr	r3, [sp, #12]
10009bb2:	429f      	cmp	r7, r3
10009bb4:	d3dd      	bcc.n	10009b72 <__mdiff+0x60>
10009bb6:	9902      	ldr	r1, [sp, #8]
10009bb8:	1c13      	adds	r3, r2, #0
10009bba:	428c      	cmp	r4, r1
10009bbc:	d20b      	bcs.n	10009bd6 <__mdiff+0xc4>
10009bbe:	cc08      	ldmia	r4!, {r3}
10009bc0:	b299      	uxth	r1, r3
10009bc2:	1949      	adds	r1, r1, r5
10009bc4:	140d      	asrs	r5, r1, #16
10009bc6:	0c1b      	lsrs	r3, r3, #16
10009bc8:	18eb      	adds	r3, r5, r3
10009bca:	141d      	asrs	r5, r3, #16
10009bcc:	b289      	uxth	r1, r1
10009bce:	041b      	lsls	r3, r3, #16
10009bd0:	430b      	orrs	r3, r1
10009bd2:	c208      	stmia	r2!, {r3}
10009bd4:	e7ef      	b.n	10009bb6 <__mdiff+0xa4>
10009bd6:	3b04      	subs	r3, #4
10009bd8:	681a      	ldr	r2, [r3, #0]
10009bda:	2a00      	cmp	r2, #0
10009bdc:	d101      	bne.n	10009be2 <__mdiff+0xd0>
10009bde:	3e01      	subs	r6, #1
10009be0:	e7f9      	b.n	10009bd6 <__mdiff+0xc4>
10009be2:	6106      	str	r6, [r0, #16]
10009be4:	b005      	add	sp, #20
10009be6:	bdf0      	pop	{r4, r5, r6, r7, pc}

10009be8 <__d2b>:
10009be8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10009bea:	1c1d      	adds	r5, r3, #0
10009bec:	2101      	movs	r1, #1
10009bee:	9f08      	ldr	r7, [sp, #32]
10009bf0:	1c14      	adds	r4, r2, #0
10009bf2:	f7ff fd61 	bl	100096b8 <_Balloc>
10009bf6:	032b      	lsls	r3, r5, #12
10009bf8:	006d      	lsls	r5, r5, #1
10009bfa:	1c06      	adds	r6, r0, #0
10009bfc:	0b1b      	lsrs	r3, r3, #12
10009bfe:	0d6d      	lsrs	r5, r5, #21
10009c00:	d002      	beq.n	10009c08 <__d2b+0x20>
10009c02:	2280      	movs	r2, #128	; 0x80
10009c04:	0352      	lsls	r2, r2, #13
10009c06:	4313      	orrs	r3, r2
10009c08:	9301      	str	r3, [sp, #4]
10009c0a:	2c00      	cmp	r4, #0
10009c0c:	d018      	beq.n	10009c40 <__d2b+0x58>
10009c0e:	4668      	mov	r0, sp
10009c10:	9400      	str	r4, [sp, #0]
10009c12:	f7ff fdf9 	bl	10009808 <__lo0bits>
10009c16:	9c00      	ldr	r4, [sp, #0]
10009c18:	2800      	cmp	r0, #0
10009c1a:	d009      	beq.n	10009c30 <__d2b+0x48>
10009c1c:	2320      	movs	r3, #32
10009c1e:	9a01      	ldr	r2, [sp, #4]
10009c20:	1a19      	subs	r1, r3, r0
10009c22:	1c13      	adds	r3, r2, #0
10009c24:	408b      	lsls	r3, r1
10009c26:	40c2      	lsrs	r2, r0
10009c28:	4323      	orrs	r3, r4
10009c2a:	6173      	str	r3, [r6, #20]
10009c2c:	9201      	str	r2, [sp, #4]
10009c2e:	e000      	b.n	10009c32 <__d2b+0x4a>
10009c30:	6174      	str	r4, [r6, #20]
10009c32:	9c01      	ldr	r4, [sp, #4]
10009c34:	61b4      	str	r4, [r6, #24]
10009c36:	1e63      	subs	r3, r4, #1
10009c38:	419c      	sbcs	r4, r3
10009c3a:	3401      	adds	r4, #1
10009c3c:	6134      	str	r4, [r6, #16]
10009c3e:	e007      	b.n	10009c50 <__d2b+0x68>
10009c40:	a801      	add	r0, sp, #4
10009c42:	f7ff fde1 	bl	10009808 <__lo0bits>
10009c46:	2401      	movs	r4, #1
10009c48:	9b01      	ldr	r3, [sp, #4]
10009c4a:	6134      	str	r4, [r6, #16]
10009c4c:	6173      	str	r3, [r6, #20]
10009c4e:	3020      	adds	r0, #32
10009c50:	2d00      	cmp	r5, #0
10009c52:	d006      	beq.n	10009c62 <__d2b+0x7a>
10009c54:	4b0b      	ldr	r3, [pc, #44]	; (10009c84 <__d2b+0x9c>)
10009c56:	18ed      	adds	r5, r5, r3
10009c58:	2335      	movs	r3, #53	; 0x35
10009c5a:	182d      	adds	r5, r5, r0
10009c5c:	603d      	str	r5, [r7, #0]
10009c5e:	1a18      	subs	r0, r3, r0
10009c60:	e00b      	b.n	10009c7a <__d2b+0x92>
10009c62:	4b09      	ldr	r3, [pc, #36]	; (10009c88 <__d2b+0xa0>)
10009c64:	18c0      	adds	r0, r0, r3
10009c66:	4b09      	ldr	r3, [pc, #36]	; (10009c8c <__d2b+0xa4>)
10009c68:	6038      	str	r0, [r7, #0]
10009c6a:	18e3      	adds	r3, r4, r3
10009c6c:	009b      	lsls	r3, r3, #2
10009c6e:	18f3      	adds	r3, r6, r3
10009c70:	6958      	ldr	r0, [r3, #20]
10009c72:	f7ff fdae 	bl	100097d2 <__hi0bits>
10009c76:	0164      	lsls	r4, r4, #5
10009c78:	1a20      	subs	r0, r4, r0
10009c7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
10009c7c:	6018      	str	r0, [r3, #0]
10009c7e:	1c30      	adds	r0, r6, #0
10009c80:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
10009c82:	46c0      	nop			; (mov r8, r8)
10009c84:	fffffbcd 	.word	0xfffffbcd
10009c88:	fffffbce 	.word	0xfffffbce
10009c8c:	3fffffff 	.word	0x3fffffff

10009c90 <_calloc_r>:
10009c90:	434a      	muls	r2, r1
10009c92:	b538      	push	{r3, r4, r5, lr}
10009c94:	1c11      	adds	r1, r2, #0
10009c96:	1c14      	adds	r4, r2, #0
10009c98:	f000 f84e 	bl	10009d38 <_malloc_r>
10009c9c:	1e05      	subs	r5, r0, #0
10009c9e:	d003      	beq.n	10009ca8 <_calloc_r+0x18>
10009ca0:	2100      	movs	r1, #0
10009ca2:	1c22      	adds	r2, r4, #0
10009ca4:	f000 fa1c 	bl	1000a0e0 <memset>
10009ca8:	1c28      	adds	r0, r5, #0
10009caa:	bd38      	pop	{r3, r4, r5, pc}

10009cac <_free_r>:
10009cac:	b530      	push	{r4, r5, lr}
10009cae:	2900      	cmp	r1, #0
10009cb0:	d03e      	beq.n	10009d30 <_free_r+0x84>
10009cb2:	3904      	subs	r1, #4
10009cb4:	680b      	ldr	r3, [r1, #0]
10009cb6:	2b00      	cmp	r3, #0
10009cb8:	da00      	bge.n	10009cbc <_free_r+0x10>
10009cba:	18c9      	adds	r1, r1, r3
10009cbc:	4a1d      	ldr	r2, [pc, #116]	; (10009d34 <_free_r+0x88>)
10009cbe:	6813      	ldr	r3, [r2, #0]
10009cc0:	1c14      	adds	r4, r2, #0
10009cc2:	2b00      	cmp	r3, #0
10009cc4:	d102      	bne.n	10009ccc <_free_r+0x20>
10009cc6:	604b      	str	r3, [r1, #4]
10009cc8:	6011      	str	r1, [r2, #0]
10009cca:	e031      	b.n	10009d30 <_free_r+0x84>
10009ccc:	4299      	cmp	r1, r3
10009cce:	d20d      	bcs.n	10009cec <_free_r+0x40>
10009cd0:	6808      	ldr	r0, [r1, #0]
10009cd2:	180a      	adds	r2, r1, r0
10009cd4:	429a      	cmp	r2, r3
10009cd6:	d103      	bne.n	10009ce0 <_free_r+0x34>
10009cd8:	6813      	ldr	r3, [r2, #0]
10009cda:	18c3      	adds	r3, r0, r3
10009cdc:	600b      	str	r3, [r1, #0]
10009cde:	6853      	ldr	r3, [r2, #4]
10009ce0:	604b      	str	r3, [r1, #4]
10009ce2:	6021      	str	r1, [r4, #0]
10009ce4:	e024      	b.n	10009d30 <_free_r+0x84>
10009ce6:	428a      	cmp	r2, r1
10009ce8:	d803      	bhi.n	10009cf2 <_free_r+0x46>
10009cea:	1c13      	adds	r3, r2, #0
10009cec:	685a      	ldr	r2, [r3, #4]
10009cee:	2a00      	cmp	r2, #0
10009cf0:	d1f9      	bne.n	10009ce6 <_free_r+0x3a>
10009cf2:	681d      	ldr	r5, [r3, #0]
10009cf4:	195c      	adds	r4, r3, r5
10009cf6:	428c      	cmp	r4, r1
10009cf8:	d10b      	bne.n	10009d12 <_free_r+0x66>
10009cfa:	6809      	ldr	r1, [r1, #0]
10009cfc:	1869      	adds	r1, r5, r1
10009cfe:	1858      	adds	r0, r3, r1
10009d00:	6019      	str	r1, [r3, #0]
10009d02:	4290      	cmp	r0, r2
10009d04:	d114      	bne.n	10009d30 <_free_r+0x84>
10009d06:	6810      	ldr	r0, [r2, #0]
10009d08:	6852      	ldr	r2, [r2, #4]
10009d0a:	1809      	adds	r1, r1, r0
10009d0c:	6019      	str	r1, [r3, #0]
10009d0e:	605a      	str	r2, [r3, #4]
10009d10:	e00e      	b.n	10009d30 <_free_r+0x84>
10009d12:	428c      	cmp	r4, r1
10009d14:	d902      	bls.n	10009d1c <_free_r+0x70>
10009d16:	230c      	movs	r3, #12
10009d18:	6003      	str	r3, [r0, #0]
10009d1a:	e009      	b.n	10009d30 <_free_r+0x84>
10009d1c:	6808      	ldr	r0, [r1, #0]
10009d1e:	180c      	adds	r4, r1, r0
10009d20:	4294      	cmp	r4, r2
10009d22:	d103      	bne.n	10009d2c <_free_r+0x80>
10009d24:	6814      	ldr	r4, [r2, #0]
10009d26:	6852      	ldr	r2, [r2, #4]
10009d28:	1900      	adds	r0, r0, r4
10009d2a:	6008      	str	r0, [r1, #0]
10009d2c:	604a      	str	r2, [r1, #4]
10009d2e:	6059      	str	r1, [r3, #4]
10009d30:	bd30      	pop	{r4, r5, pc}
10009d32:	46c0      	nop			; (mov r8, r8)
10009d34:	200013b8 	.word	0x200013b8

10009d38 <_malloc_r>:
10009d38:	2303      	movs	r3, #3
10009d3a:	b570      	push	{r4, r5, r6, lr}
10009d3c:	1ccc      	adds	r4, r1, #3
10009d3e:	439c      	bics	r4, r3
10009d40:	3408      	adds	r4, #8
10009d42:	1c05      	adds	r5, r0, #0
10009d44:	2c0c      	cmp	r4, #12
10009d46:	d201      	bcs.n	10009d4c <_malloc_r+0x14>
10009d48:	240c      	movs	r4, #12
10009d4a:	e005      	b.n	10009d58 <_malloc_r+0x20>
10009d4c:	2c00      	cmp	r4, #0
10009d4e:	da03      	bge.n	10009d58 <_malloc_r+0x20>
10009d50:	230c      	movs	r3, #12
10009d52:	2000      	movs	r0, #0
10009d54:	602b      	str	r3, [r5, #0]
10009d56:	e042      	b.n	10009dde <_malloc_r+0xa6>
10009d58:	428c      	cmp	r4, r1
10009d5a:	d3f9      	bcc.n	10009d50 <_malloc_r+0x18>
10009d5c:	4a20      	ldr	r2, [pc, #128]	; (10009de0 <_malloc_r+0xa8>)
10009d5e:	6813      	ldr	r3, [r2, #0]
10009d60:	1c10      	adds	r0, r2, #0
10009d62:	1c19      	adds	r1, r3, #0
10009d64:	2900      	cmp	r1, #0
10009d66:	d013      	beq.n	10009d90 <_malloc_r+0x58>
10009d68:	680a      	ldr	r2, [r1, #0]
10009d6a:	1b12      	subs	r2, r2, r4
10009d6c:	d40d      	bmi.n	10009d8a <_malloc_r+0x52>
10009d6e:	2a0b      	cmp	r2, #11
10009d70:	d902      	bls.n	10009d78 <_malloc_r+0x40>
10009d72:	600a      	str	r2, [r1, #0]
10009d74:	188b      	adds	r3, r1, r2
10009d76:	e01f      	b.n	10009db8 <_malloc_r+0x80>
10009d78:	428b      	cmp	r3, r1
10009d7a:	d102      	bne.n	10009d82 <_malloc_r+0x4a>
10009d7c:	685a      	ldr	r2, [r3, #4]
10009d7e:	6002      	str	r2, [r0, #0]
10009d80:	e01b      	b.n	10009dba <_malloc_r+0x82>
10009d82:	684a      	ldr	r2, [r1, #4]
10009d84:	605a      	str	r2, [r3, #4]
10009d86:	1c0b      	adds	r3, r1, #0
10009d88:	e017      	b.n	10009dba <_malloc_r+0x82>
10009d8a:	1c0b      	adds	r3, r1, #0
10009d8c:	6849      	ldr	r1, [r1, #4]
10009d8e:	e7e9      	b.n	10009d64 <_malloc_r+0x2c>
10009d90:	4e14      	ldr	r6, [pc, #80]	; (10009de4 <_malloc_r+0xac>)
10009d92:	6833      	ldr	r3, [r6, #0]
10009d94:	2b00      	cmp	r3, #0
10009d96:	d103      	bne.n	10009da0 <_malloc_r+0x68>
10009d98:	1c28      	adds	r0, r5, #0
10009d9a:	f000 f97b 	bl	1000a094 <_sbrk_r>
10009d9e:	6030      	str	r0, [r6, #0]
10009da0:	1c28      	adds	r0, r5, #0
10009da2:	1c21      	adds	r1, r4, #0
10009da4:	f000 f976 	bl	1000a094 <_sbrk_r>
10009da8:	1c03      	adds	r3, r0, #0
10009daa:	1c42      	adds	r2, r0, #1
10009dac:	d0d0      	beq.n	10009d50 <_malloc_r+0x18>
10009dae:	2203      	movs	r2, #3
10009db0:	1cc6      	adds	r6, r0, #3
10009db2:	4396      	bics	r6, r2
10009db4:	4286      	cmp	r6, r0
10009db6:	d10a      	bne.n	10009dce <_malloc_r+0x96>
10009db8:	601c      	str	r4, [r3, #0]
10009dba:	1c18      	adds	r0, r3, #0
10009dbc:	2107      	movs	r1, #7
10009dbe:	300b      	adds	r0, #11
10009dc0:	1d1a      	adds	r2, r3, #4
10009dc2:	4388      	bics	r0, r1
10009dc4:	1a82      	subs	r2, r0, r2
10009dc6:	d00a      	beq.n	10009dde <_malloc_r+0xa6>
10009dc8:	4251      	negs	r1, r2
10009dca:	5099      	str	r1, [r3, r2]
10009dcc:	e007      	b.n	10009dde <_malloc_r+0xa6>
10009dce:	1a31      	subs	r1, r6, r0
10009dd0:	1c28      	adds	r0, r5, #0
10009dd2:	f000 f95f 	bl	1000a094 <_sbrk_r>
10009dd6:	1c43      	adds	r3, r0, #1
10009dd8:	d0ba      	beq.n	10009d50 <_malloc_r+0x18>
10009dda:	1c33      	adds	r3, r6, #0
10009ddc:	e7ec      	b.n	10009db8 <_malloc_r+0x80>
10009dde:	bd70      	pop	{r4, r5, r6, pc}
10009de0:	200013b8 	.word	0x200013b8
10009de4:	200013b4 	.word	0x200013b4

10009de8 <__ssputs_r>:
10009de8:	b5f0      	push	{r4, r5, r6, r7, lr}
10009dea:	688e      	ldr	r6, [r1, #8]
10009dec:	b085      	sub	sp, #20
10009dee:	1c07      	adds	r7, r0, #0
10009df0:	1c0c      	adds	r4, r1, #0
10009df2:	9203      	str	r2, [sp, #12]
10009df4:	9301      	str	r3, [sp, #4]
10009df6:	42b3      	cmp	r3, r6
10009df8:	d345      	bcc.n	10009e86 <__ssputs_r+0x9e>
10009dfa:	2390      	movs	r3, #144	; 0x90
10009dfc:	898a      	ldrh	r2, [r1, #12]
10009dfe:	00db      	lsls	r3, r3, #3
10009e00:	421a      	tst	r2, r3
10009e02:	d03d      	beq.n	10009e80 <__ssputs_r+0x98>
10009e04:	2503      	movs	r5, #3
10009e06:	6909      	ldr	r1, [r1, #16]
10009e08:	6823      	ldr	r3, [r4, #0]
10009e0a:	9801      	ldr	r0, [sp, #4]
10009e0c:	1a5b      	subs	r3, r3, r1
10009e0e:	9302      	str	r3, [sp, #8]
10009e10:	6963      	ldr	r3, [r4, #20]
10009e12:	435d      	muls	r5, r3
10009e14:	0feb      	lsrs	r3, r5, #31
10009e16:	195d      	adds	r5, r3, r5
10009e18:	9b02      	ldr	r3, [sp, #8]
10009e1a:	106d      	asrs	r5, r5, #1
10009e1c:	3301      	adds	r3, #1
10009e1e:	181b      	adds	r3, r3, r0
10009e20:	429d      	cmp	r5, r3
10009e22:	d200      	bcs.n	10009e26 <__ssputs_r+0x3e>
10009e24:	1c1d      	adds	r5, r3, #0
10009e26:	1c38      	adds	r0, r7, #0
10009e28:	0553      	lsls	r3, r2, #21
10009e2a:	d50f      	bpl.n	10009e4c <__ssputs_r+0x64>
10009e2c:	1c29      	adds	r1, r5, #0
10009e2e:	f7ff ff83 	bl	10009d38 <_malloc_r>
10009e32:	1e06      	subs	r6, r0, #0
10009e34:	d013      	beq.n	10009e5e <__ssputs_r+0x76>
10009e36:	9a02      	ldr	r2, [sp, #8]
10009e38:	6921      	ldr	r1, [r4, #16]
10009e3a:	f7ff fc34 	bl	100096a6 <memcpy>
10009e3e:	89a2      	ldrh	r2, [r4, #12]
10009e40:	4b18      	ldr	r3, [pc, #96]	; (10009ea4 <__ssputs_r+0xbc>)
10009e42:	4013      	ands	r3, r2
10009e44:	2280      	movs	r2, #128	; 0x80
10009e46:	4313      	orrs	r3, r2
10009e48:	81a3      	strh	r3, [r4, #12]
10009e4a:	e011      	b.n	10009e70 <__ssputs_r+0x88>
10009e4c:	1c2a      	adds	r2, r5, #0
10009e4e:	f000 f94f 	bl	1000a0f0 <_realloc_r>
10009e52:	1e06      	subs	r6, r0, #0
10009e54:	d10c      	bne.n	10009e70 <__ssputs_r+0x88>
10009e56:	1c38      	adds	r0, r7, #0
10009e58:	6921      	ldr	r1, [r4, #16]
10009e5a:	f7ff ff27 	bl	10009cac <_free_r>
10009e5e:	230c      	movs	r3, #12
10009e60:	2240      	movs	r2, #64	; 0x40
10009e62:	2001      	movs	r0, #1
10009e64:	603b      	str	r3, [r7, #0]
10009e66:	89a3      	ldrh	r3, [r4, #12]
10009e68:	4240      	negs	r0, r0
10009e6a:	4313      	orrs	r3, r2
10009e6c:	81a3      	strh	r3, [r4, #12]
10009e6e:	e017      	b.n	10009ea0 <__ssputs_r+0xb8>
10009e70:	9b02      	ldr	r3, [sp, #8]
10009e72:	6126      	str	r6, [r4, #16]
10009e74:	18f6      	adds	r6, r6, r3
10009e76:	6026      	str	r6, [r4, #0]
10009e78:	6165      	str	r5, [r4, #20]
10009e7a:	9e01      	ldr	r6, [sp, #4]
10009e7c:	1aed      	subs	r5, r5, r3
10009e7e:	60a5      	str	r5, [r4, #8]
10009e80:	9b01      	ldr	r3, [sp, #4]
10009e82:	42b3      	cmp	r3, r6
10009e84:	d200      	bcs.n	10009e88 <__ssputs_r+0xa0>
10009e86:	9e01      	ldr	r6, [sp, #4]
10009e88:	1c32      	adds	r2, r6, #0
10009e8a:	6820      	ldr	r0, [r4, #0]
10009e8c:	9903      	ldr	r1, [sp, #12]
10009e8e:	f000 f913 	bl	1000a0b8 <memmove>
10009e92:	2000      	movs	r0, #0
10009e94:	68a3      	ldr	r3, [r4, #8]
10009e96:	1b9b      	subs	r3, r3, r6
10009e98:	60a3      	str	r3, [r4, #8]
10009e9a:	6823      	ldr	r3, [r4, #0]
10009e9c:	199e      	adds	r6, r3, r6
10009e9e:	6026      	str	r6, [r4, #0]
10009ea0:	b005      	add	sp, #20
10009ea2:	bdf0      	pop	{r4, r5, r6, r7, pc}
10009ea4:	fffffb7f 	.word	0xfffffb7f

10009ea8 <_svfiprintf_r>:
10009ea8:	b5f0      	push	{r4, r5, r6, r7, lr}
10009eaa:	b09f      	sub	sp, #124	; 0x7c
10009eac:	9002      	str	r0, [sp, #8]
10009eae:	9305      	str	r3, [sp, #20]
10009eb0:	898b      	ldrh	r3, [r1, #12]
10009eb2:	1c0e      	adds	r6, r1, #0
10009eb4:	1c17      	adds	r7, r2, #0
10009eb6:	061b      	lsls	r3, r3, #24
10009eb8:	d510      	bpl.n	10009edc <_svfiprintf_r+0x34>
10009eba:	690b      	ldr	r3, [r1, #16]
10009ebc:	2b00      	cmp	r3, #0
10009ebe:	d10d      	bne.n	10009edc <_svfiprintf_r+0x34>
10009ec0:	2140      	movs	r1, #64	; 0x40
10009ec2:	f7ff ff39 	bl	10009d38 <_malloc_r>
10009ec6:	6030      	str	r0, [r6, #0]
10009ec8:	6130      	str	r0, [r6, #16]
10009eca:	2800      	cmp	r0, #0
10009ecc:	d104      	bne.n	10009ed8 <_svfiprintf_r+0x30>
10009ece:	230c      	movs	r3, #12
10009ed0:	9a02      	ldr	r2, [sp, #8]
10009ed2:	3801      	subs	r0, #1
10009ed4:	6013      	str	r3, [r2, #0]
10009ed6:	e0d0      	b.n	1000a07a <_svfiprintf_r+0x1d2>
10009ed8:	2340      	movs	r3, #64	; 0x40
10009eda:	6173      	str	r3, [r6, #20]
10009edc:	2300      	movs	r3, #0
10009ede:	ad06      	add	r5, sp, #24
10009ee0:	616b      	str	r3, [r5, #20]
10009ee2:	3320      	adds	r3, #32
10009ee4:	766b      	strb	r3, [r5, #25]
10009ee6:	3310      	adds	r3, #16
10009ee8:	76ab      	strb	r3, [r5, #26]
10009eea:	1c3c      	adds	r4, r7, #0
10009eec:	7823      	ldrb	r3, [r4, #0]
10009eee:	2b00      	cmp	r3, #0
10009ef0:	d103      	bne.n	10009efa <_svfiprintf_r+0x52>
10009ef2:	1be3      	subs	r3, r4, r7
10009ef4:	9304      	str	r3, [sp, #16]
10009ef6:	d012      	beq.n	10009f1e <_svfiprintf_r+0x76>
10009ef8:	e003      	b.n	10009f02 <_svfiprintf_r+0x5a>
10009efa:	2b25      	cmp	r3, #37	; 0x25
10009efc:	d0f9      	beq.n	10009ef2 <_svfiprintf_r+0x4a>
10009efe:	3401      	adds	r4, #1
10009f00:	e7f4      	b.n	10009eec <_svfiprintf_r+0x44>
10009f02:	9b04      	ldr	r3, [sp, #16]
10009f04:	9802      	ldr	r0, [sp, #8]
10009f06:	1c31      	adds	r1, r6, #0
10009f08:	1c3a      	adds	r2, r7, #0
10009f0a:	f7ff ff6d 	bl	10009de8 <__ssputs_r>
10009f0e:	1c43      	adds	r3, r0, #1
10009f10:	d100      	bne.n	10009f14 <_svfiprintf_r+0x6c>
10009f12:	e0ac      	b.n	1000a06e <_svfiprintf_r+0x1c6>
10009f14:	696a      	ldr	r2, [r5, #20]
10009f16:	9b04      	ldr	r3, [sp, #16]
10009f18:	4694      	mov	ip, r2
10009f1a:	4463      	add	r3, ip
10009f1c:	616b      	str	r3, [r5, #20]
10009f1e:	7823      	ldrb	r3, [r4, #0]
10009f20:	2b00      	cmp	r3, #0
10009f22:	d100      	bne.n	10009f26 <_svfiprintf_r+0x7e>
10009f24:	e0a3      	b.n	1000a06e <_svfiprintf_r+0x1c6>
10009f26:	2201      	movs	r2, #1
10009f28:	2300      	movs	r3, #0
10009f2a:	4252      	negs	r2, r2
10009f2c:	606a      	str	r2, [r5, #4]
10009f2e:	a902      	add	r1, sp, #8
10009f30:	3254      	adds	r2, #84	; 0x54
10009f32:	1852      	adds	r2, r2, r1
10009f34:	3401      	adds	r4, #1
10009f36:	602b      	str	r3, [r5, #0]
10009f38:	60eb      	str	r3, [r5, #12]
10009f3a:	60ab      	str	r3, [r5, #8]
10009f3c:	7013      	strb	r3, [r2, #0]
10009f3e:	65ab      	str	r3, [r5, #88]	; 0x58
10009f40:	4f4f      	ldr	r7, [pc, #316]	; (1000a080 <_svfiprintf_r+0x1d8>)
10009f42:	7821      	ldrb	r1, [r4, #0]
10009f44:	1c38      	adds	r0, r7, #0
10009f46:	2205      	movs	r2, #5
10009f48:	f7ff fba2 	bl	10009690 <memchr>
10009f4c:	2800      	cmp	r0, #0
10009f4e:	d008      	beq.n	10009f62 <_svfiprintf_r+0xba>
10009f50:	1bc0      	subs	r0, r0, r7
10009f52:	2701      	movs	r7, #1
10009f54:	4087      	lsls	r7, r0
10009f56:	1c38      	adds	r0, r7, #0
10009f58:	682b      	ldr	r3, [r5, #0]
10009f5a:	3401      	adds	r4, #1
10009f5c:	4318      	orrs	r0, r3
10009f5e:	6028      	str	r0, [r5, #0]
10009f60:	e7ee      	b.n	10009f40 <_svfiprintf_r+0x98>
10009f62:	682b      	ldr	r3, [r5, #0]
10009f64:	06da      	lsls	r2, r3, #27
10009f66:	d504      	bpl.n	10009f72 <_svfiprintf_r+0xca>
10009f68:	2253      	movs	r2, #83	; 0x53
10009f6a:	2120      	movs	r1, #32
10009f6c:	a802      	add	r0, sp, #8
10009f6e:	1812      	adds	r2, r2, r0
10009f70:	7011      	strb	r1, [r2, #0]
10009f72:	071a      	lsls	r2, r3, #28
10009f74:	d504      	bpl.n	10009f80 <_svfiprintf_r+0xd8>
10009f76:	2253      	movs	r2, #83	; 0x53
10009f78:	212b      	movs	r1, #43	; 0x2b
10009f7a:	a802      	add	r0, sp, #8
10009f7c:	1812      	adds	r2, r2, r0
10009f7e:	7011      	strb	r1, [r2, #0]
10009f80:	7822      	ldrb	r2, [r4, #0]
10009f82:	2a2a      	cmp	r2, #42	; 0x2a
10009f84:	d001      	beq.n	10009f8a <_svfiprintf_r+0xe2>
10009f86:	9b09      	ldr	r3, [sp, #36]	; 0x24
10009f88:	e00e      	b.n	10009fa8 <_svfiprintf_r+0x100>
10009f8a:	9a05      	ldr	r2, [sp, #20]
10009f8c:	1d11      	adds	r1, r2, #4
10009f8e:	6812      	ldr	r2, [r2, #0]
10009f90:	9105      	str	r1, [sp, #20]
10009f92:	2a00      	cmp	r2, #0
10009f94:	db01      	blt.n	10009f9a <_svfiprintf_r+0xf2>
10009f96:	9209      	str	r2, [sp, #36]	; 0x24
10009f98:	e004      	b.n	10009fa4 <_svfiprintf_r+0xfc>
10009f9a:	4252      	negs	r2, r2
10009f9c:	60ea      	str	r2, [r5, #12]
10009f9e:	2202      	movs	r2, #2
10009fa0:	4313      	orrs	r3, r2
10009fa2:	602b      	str	r3, [r5, #0]
10009fa4:	3401      	adds	r4, #1
10009fa6:	e009      	b.n	10009fbc <_svfiprintf_r+0x114>
10009fa8:	7822      	ldrb	r2, [r4, #0]
10009faa:	3a30      	subs	r2, #48	; 0x30
10009fac:	2a09      	cmp	r2, #9
10009fae:	d804      	bhi.n	10009fba <_svfiprintf_r+0x112>
10009fb0:	210a      	movs	r1, #10
10009fb2:	434b      	muls	r3, r1
10009fb4:	3401      	adds	r4, #1
10009fb6:	189b      	adds	r3, r3, r2
10009fb8:	e7f6      	b.n	10009fa8 <_svfiprintf_r+0x100>
10009fba:	9309      	str	r3, [sp, #36]	; 0x24
10009fbc:	7823      	ldrb	r3, [r4, #0]
10009fbe:	2b2e      	cmp	r3, #46	; 0x2e
10009fc0:	d118      	bne.n	10009ff4 <_svfiprintf_r+0x14c>
10009fc2:	7863      	ldrb	r3, [r4, #1]
10009fc4:	2b2a      	cmp	r3, #42	; 0x2a
10009fc6:	d109      	bne.n	10009fdc <_svfiprintf_r+0x134>
10009fc8:	9b05      	ldr	r3, [sp, #20]
10009fca:	3402      	adds	r4, #2
10009fcc:	1d1a      	adds	r2, r3, #4
10009fce:	681b      	ldr	r3, [r3, #0]
10009fd0:	9205      	str	r2, [sp, #20]
10009fd2:	2b00      	cmp	r3, #0
10009fd4:	da0d      	bge.n	10009ff2 <_svfiprintf_r+0x14a>
10009fd6:	2301      	movs	r3, #1
10009fd8:	425b      	negs	r3, r3
10009fda:	e00a      	b.n	10009ff2 <_svfiprintf_r+0x14a>
10009fdc:	2300      	movs	r3, #0
10009fde:	3401      	adds	r4, #1
10009fe0:	7822      	ldrb	r2, [r4, #0]
10009fe2:	3a30      	subs	r2, #48	; 0x30
10009fe4:	2a09      	cmp	r2, #9
10009fe6:	d804      	bhi.n	10009ff2 <_svfiprintf_r+0x14a>
10009fe8:	210a      	movs	r1, #10
10009fea:	434b      	muls	r3, r1
10009fec:	3401      	adds	r4, #1
10009fee:	189b      	adds	r3, r3, r2
10009ff0:	e7f6      	b.n	10009fe0 <_svfiprintf_r+0x138>
10009ff2:	9307      	str	r3, [sp, #28]
10009ff4:	4f23      	ldr	r7, [pc, #140]	; (1000a084 <_svfiprintf_r+0x1dc>)
10009ff6:	7821      	ldrb	r1, [r4, #0]
10009ff8:	1c38      	adds	r0, r7, #0
10009ffa:	2203      	movs	r2, #3
10009ffc:	f7ff fb48 	bl	10009690 <memchr>
1000a000:	2800      	cmp	r0, #0
1000a002:	d007      	beq.n	1000a014 <_svfiprintf_r+0x16c>
1000a004:	1bc0      	subs	r0, r0, r7
1000a006:	2740      	movs	r7, #64	; 0x40
1000a008:	4087      	lsls	r7, r0
1000a00a:	1c38      	adds	r0, r7, #0
1000a00c:	682b      	ldr	r3, [r5, #0]
1000a00e:	3401      	adds	r4, #1
1000a010:	4318      	orrs	r0, r3
1000a012:	6028      	str	r0, [r5, #0]
1000a014:	7821      	ldrb	r1, [r4, #0]
1000a016:	481c      	ldr	r0, [pc, #112]	; (1000a088 <_svfiprintf_r+0x1e0>)
1000a018:	2206      	movs	r2, #6
1000a01a:	1c67      	adds	r7, r4, #1
1000a01c:	7629      	strb	r1, [r5, #24]
1000a01e:	f7ff fb37 	bl	10009690 <memchr>
1000a022:	2800      	cmp	r0, #0
1000a024:	d012      	beq.n	1000a04c <_svfiprintf_r+0x1a4>
1000a026:	4b19      	ldr	r3, [pc, #100]	; (1000a08c <_svfiprintf_r+0x1e4>)
1000a028:	2b00      	cmp	r3, #0
1000a02a:	d106      	bne.n	1000a03a <_svfiprintf_r+0x192>
1000a02c:	2207      	movs	r2, #7
1000a02e:	9b05      	ldr	r3, [sp, #20]
1000a030:	3307      	adds	r3, #7
1000a032:	4393      	bics	r3, r2
1000a034:	3308      	adds	r3, #8
1000a036:	9305      	str	r3, [sp, #20]
1000a038:	e014      	b.n	1000a064 <_svfiprintf_r+0x1bc>
1000a03a:	ab05      	add	r3, sp, #20
1000a03c:	9300      	str	r3, [sp, #0]
1000a03e:	9802      	ldr	r0, [sp, #8]
1000a040:	1c29      	adds	r1, r5, #0
1000a042:	1c32      	adds	r2, r6, #0
1000a044:	4b12      	ldr	r3, [pc, #72]	; (1000a090 <_svfiprintf_r+0x1e8>)
1000a046:	f7fe f87f 	bl	10008148 <_printf_float>
1000a04a:	e007      	b.n	1000a05c <_svfiprintf_r+0x1b4>
1000a04c:	ab05      	add	r3, sp, #20
1000a04e:	9300      	str	r3, [sp, #0]
1000a050:	9802      	ldr	r0, [sp, #8]
1000a052:	1c29      	adds	r1, r5, #0
1000a054:	1c32      	adds	r2, r6, #0
1000a056:	4b0e      	ldr	r3, [pc, #56]	; (1000a090 <_svfiprintf_r+0x1e8>)
1000a058:	f7fe fb1c 	bl	10008694 <_printf_i>
1000a05c:	9003      	str	r0, [sp, #12]
1000a05e:	9b03      	ldr	r3, [sp, #12]
1000a060:	3301      	adds	r3, #1
1000a062:	d004      	beq.n	1000a06e <_svfiprintf_r+0x1c6>
1000a064:	696b      	ldr	r3, [r5, #20]
1000a066:	9a03      	ldr	r2, [sp, #12]
1000a068:	189b      	adds	r3, r3, r2
1000a06a:	616b      	str	r3, [r5, #20]
1000a06c:	e73d      	b.n	10009eea <_svfiprintf_r+0x42>
1000a06e:	89b3      	ldrh	r3, [r6, #12]
1000a070:	980b      	ldr	r0, [sp, #44]	; 0x2c
1000a072:	065b      	lsls	r3, r3, #25
1000a074:	d501      	bpl.n	1000a07a <_svfiprintf_r+0x1d2>
1000a076:	2001      	movs	r0, #1
1000a078:	4240      	negs	r0, r0
1000a07a:	b01f      	add	sp, #124	; 0x7c
1000a07c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000a07e:	46c0      	nop			; (mov r8, r8)
1000a080:	1000b96c 	.word	0x1000b96c
1000a084:	1000b972 	.word	0x1000b972
1000a088:	1000b976 	.word	0x1000b976
1000a08c:	10008149 	.word	0x10008149
1000a090:	10009de9 	.word	0x10009de9

1000a094 <_sbrk_r>:
1000a094:	b538      	push	{r3, r4, r5, lr}
1000a096:	2300      	movs	r3, #0
1000a098:	4c06      	ldr	r4, [pc, #24]	; (1000a0b4 <_sbrk_r+0x20>)
1000a09a:	1c05      	adds	r5, r0, #0
1000a09c:	1c08      	adds	r0, r1, #0
1000a09e:	6023      	str	r3, [r4, #0]
1000a0a0:	f7f8 ffbe 	bl	10003020 <_sbrk>
1000a0a4:	1c43      	adds	r3, r0, #1
1000a0a6:	d103      	bne.n	1000a0b0 <_sbrk_r+0x1c>
1000a0a8:	6823      	ldr	r3, [r4, #0]
1000a0aa:	2b00      	cmp	r3, #0
1000a0ac:	d000      	beq.n	1000a0b0 <_sbrk_r+0x1c>
1000a0ae:	602b      	str	r3, [r5, #0]
1000a0b0:	bd38      	pop	{r3, r4, r5, pc}
1000a0b2:	46c0      	nop			; (mov r8, r8)
1000a0b4:	200018bc 	.word	0x200018bc

1000a0b8 <memmove>:
1000a0b8:	b510      	push	{r4, lr}
1000a0ba:	4281      	cmp	r1, r0
1000a0bc:	d208      	bcs.n	1000a0d0 <memmove+0x18>
1000a0be:	188b      	adds	r3, r1, r2
1000a0c0:	4298      	cmp	r0, r3
1000a0c2:	d205      	bcs.n	1000a0d0 <memmove+0x18>
1000a0c4:	1a9b      	subs	r3, r3, r2
1000a0c6:	3a01      	subs	r2, #1
1000a0c8:	d309      	bcc.n	1000a0de <memmove+0x26>
1000a0ca:	5c99      	ldrb	r1, [r3, r2]
1000a0cc:	5481      	strb	r1, [r0, r2]
1000a0ce:	e7fa      	b.n	1000a0c6 <memmove+0xe>
1000a0d0:	2300      	movs	r3, #0
1000a0d2:	4293      	cmp	r3, r2
1000a0d4:	d003      	beq.n	1000a0de <memmove+0x26>
1000a0d6:	5ccc      	ldrb	r4, [r1, r3]
1000a0d8:	54c4      	strb	r4, [r0, r3]
1000a0da:	3301      	adds	r3, #1
1000a0dc:	e7f9      	b.n	1000a0d2 <memmove+0x1a>
1000a0de:	bd10      	pop	{r4, pc}

1000a0e0 <memset>:
1000a0e0:	1c03      	adds	r3, r0, #0
1000a0e2:	1882      	adds	r2, r0, r2
1000a0e4:	4293      	cmp	r3, r2
1000a0e6:	d002      	beq.n	1000a0ee <memset+0xe>
1000a0e8:	7019      	strb	r1, [r3, #0]
1000a0ea:	3301      	adds	r3, #1
1000a0ec:	e7fa      	b.n	1000a0e4 <memset+0x4>
1000a0ee:	4770      	bx	lr

1000a0f0 <_realloc_r>:
1000a0f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000a0f2:	1c06      	adds	r6, r0, #0
1000a0f4:	1c0c      	adds	r4, r1, #0
1000a0f6:	1c15      	adds	r5, r2, #0
1000a0f8:	2900      	cmp	r1, #0
1000a0fa:	d104      	bne.n	1000a106 <_realloc_r+0x16>
1000a0fc:	1c11      	adds	r1, r2, #0
1000a0fe:	f7ff fe1b 	bl	10009d38 <_malloc_r>
1000a102:	1c04      	adds	r4, r0, #0
1000a104:	e018      	b.n	1000a138 <_realloc_r+0x48>
1000a106:	2a00      	cmp	r2, #0
1000a108:	d103      	bne.n	1000a112 <_realloc_r+0x22>
1000a10a:	f7ff fdcf 	bl	10009cac <_free_r>
1000a10e:	1c2c      	adds	r4, r5, #0
1000a110:	e012      	b.n	1000a138 <_realloc_r+0x48>
1000a112:	f000 f813 	bl	1000a13c <_malloc_usable_size_r>
1000a116:	42a8      	cmp	r0, r5
1000a118:	d20e      	bcs.n	1000a138 <_realloc_r+0x48>
1000a11a:	1c30      	adds	r0, r6, #0
1000a11c:	1c29      	adds	r1, r5, #0
1000a11e:	f7ff fe0b 	bl	10009d38 <_malloc_r>
1000a122:	1e07      	subs	r7, r0, #0
1000a124:	d007      	beq.n	1000a136 <_realloc_r+0x46>
1000a126:	1c21      	adds	r1, r4, #0
1000a128:	1c2a      	adds	r2, r5, #0
1000a12a:	f7ff fabc 	bl	100096a6 <memcpy>
1000a12e:	1c30      	adds	r0, r6, #0
1000a130:	1c21      	adds	r1, r4, #0
1000a132:	f7ff fdbb 	bl	10009cac <_free_r>
1000a136:	1c3c      	adds	r4, r7, #0
1000a138:	1c20      	adds	r0, r4, #0
1000a13a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

1000a13c <_malloc_usable_size_r>:
1000a13c:	1f0b      	subs	r3, r1, #4
1000a13e:	681a      	ldr	r2, [r3, #0]
1000a140:	1f10      	subs	r0, r2, #4
1000a142:	2a00      	cmp	r2, #0
1000a144:	da04      	bge.n	1000a150 <_malloc_usable_size_r+0x14>
1000a146:	1889      	adds	r1, r1, r2
1000a148:	3904      	subs	r1, #4
1000a14a:	680b      	ldr	r3, [r1, #0]
1000a14c:	18d0      	adds	r0, r2, r3
1000a14e:	3804      	subs	r0, #4
1000a150:	4770      	bx	lr
	...

1000a154 <__gnu_thumb1_case_uqi>:
1000a154:	b402      	push	{r1}
1000a156:	4671      	mov	r1, lr
1000a158:	0849      	lsrs	r1, r1, #1
1000a15a:	0049      	lsls	r1, r1, #1
1000a15c:	5c09      	ldrb	r1, [r1, r0]
1000a15e:	0049      	lsls	r1, r1, #1
1000a160:	448e      	add	lr, r1
1000a162:	bc02      	pop	{r1}
1000a164:	4770      	bx	lr
1000a166:	46c0      	nop			; (mov r8, r8)

1000a168 <__aeabi_cdrcmple>:
1000a168:	4684      	mov	ip, r0
1000a16a:	1c10      	adds	r0, r2, #0
1000a16c:	4662      	mov	r2, ip
1000a16e:	468c      	mov	ip, r1
1000a170:	1c19      	adds	r1, r3, #0
1000a172:	4663      	mov	r3, ip
1000a174:	e000      	b.n	1000a178 <__aeabi_cdcmpeq>
1000a176:	46c0      	nop			; (mov r8, r8)

1000a178 <__aeabi_cdcmpeq>:
1000a178:	b51f      	push	{r0, r1, r2, r3, r4, lr}
1000a17a:	f000 fc0b 	bl	1000a994 <__ledf2>
1000a17e:	2800      	cmp	r0, #0
1000a180:	d401      	bmi.n	1000a186 <__aeabi_cdcmpeq+0xe>
1000a182:	2100      	movs	r1, #0
1000a184:	42c8      	cmn	r0, r1
1000a186:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

1000a188 <__aeabi_dcmpeq>:
1000a188:	b510      	push	{r4, lr}
1000a18a:	f000 fb4f 	bl	1000a82c <__eqdf2>
1000a18e:	4240      	negs	r0, r0
1000a190:	3001      	adds	r0, #1
1000a192:	bd10      	pop	{r4, pc}

1000a194 <__aeabi_dcmplt>:
1000a194:	b510      	push	{r4, lr}
1000a196:	f000 fbfd 	bl	1000a994 <__ledf2>
1000a19a:	2800      	cmp	r0, #0
1000a19c:	db01      	blt.n	1000a1a2 <__aeabi_dcmplt+0xe>
1000a19e:	2000      	movs	r0, #0
1000a1a0:	bd10      	pop	{r4, pc}
1000a1a2:	2001      	movs	r0, #1
1000a1a4:	bd10      	pop	{r4, pc}
1000a1a6:	46c0      	nop			; (mov r8, r8)

1000a1a8 <__aeabi_dcmple>:
1000a1a8:	b510      	push	{r4, lr}
1000a1aa:	f000 fbf3 	bl	1000a994 <__ledf2>
1000a1ae:	2800      	cmp	r0, #0
1000a1b0:	dd01      	ble.n	1000a1b6 <__aeabi_dcmple+0xe>
1000a1b2:	2000      	movs	r0, #0
1000a1b4:	bd10      	pop	{r4, pc}
1000a1b6:	2001      	movs	r0, #1
1000a1b8:	bd10      	pop	{r4, pc}
1000a1ba:	46c0      	nop			; (mov r8, r8)

1000a1bc <__aeabi_dcmpgt>:
1000a1bc:	b510      	push	{r4, lr}
1000a1be:	f000 fb79 	bl	1000a8b4 <__gedf2>
1000a1c2:	2800      	cmp	r0, #0
1000a1c4:	dc01      	bgt.n	1000a1ca <__aeabi_dcmpgt+0xe>
1000a1c6:	2000      	movs	r0, #0
1000a1c8:	bd10      	pop	{r4, pc}
1000a1ca:	2001      	movs	r0, #1
1000a1cc:	bd10      	pop	{r4, pc}
1000a1ce:	46c0      	nop			; (mov r8, r8)

1000a1d0 <__aeabi_dcmpge>:
1000a1d0:	b510      	push	{r4, lr}
1000a1d2:	f000 fb6f 	bl	1000a8b4 <__gedf2>
1000a1d6:	2800      	cmp	r0, #0
1000a1d8:	da01      	bge.n	1000a1de <__aeabi_dcmpge+0xe>
1000a1da:	2000      	movs	r0, #0
1000a1dc:	bd10      	pop	{r4, pc}
1000a1de:	2001      	movs	r0, #1
1000a1e0:	bd10      	pop	{r4, pc}
1000a1e2:	46c0      	nop			; (mov r8, r8)

1000a1e4 <__aeabi_ddiv>:
1000a1e4:	b5f0      	push	{r4, r5, r6, r7, lr}
1000a1e6:	465f      	mov	r7, fp
1000a1e8:	4656      	mov	r6, sl
1000a1ea:	464d      	mov	r5, r9
1000a1ec:	4644      	mov	r4, r8
1000a1ee:	b4f0      	push	{r4, r5, r6, r7}
1000a1f0:	030f      	lsls	r7, r1, #12
1000a1f2:	b087      	sub	sp, #28
1000a1f4:	4698      	mov	r8, r3
1000a1f6:	004d      	lsls	r5, r1, #1
1000a1f8:	0b3b      	lsrs	r3, r7, #12
1000a1fa:	0fcc      	lsrs	r4, r1, #31
1000a1fc:	1c06      	adds	r6, r0, #0
1000a1fe:	4692      	mov	sl, r2
1000a200:	4681      	mov	r9, r0
1000a202:	469b      	mov	fp, r3
1000a204:	0d6d      	lsrs	r5, r5, #21
1000a206:	9401      	str	r4, [sp, #4]
1000a208:	d06b      	beq.n	1000a2e2 <__aeabi_ddiv+0xfe>
1000a20a:	4b66      	ldr	r3, [pc, #408]	; (1000a3a4 <__aeabi_ddiv+0x1c0>)
1000a20c:	429d      	cmp	r5, r3
1000a20e:	d035      	beq.n	1000a27c <__aeabi_ddiv+0x98>
1000a210:	2780      	movs	r7, #128	; 0x80
1000a212:	465b      	mov	r3, fp
1000a214:	037f      	lsls	r7, r7, #13
1000a216:	431f      	orrs	r7, r3
1000a218:	00f3      	lsls	r3, r6, #3
1000a21a:	4699      	mov	r9, r3
1000a21c:	4b62      	ldr	r3, [pc, #392]	; (1000a3a8 <__aeabi_ddiv+0x1c4>)
1000a21e:	00ff      	lsls	r7, r7, #3
1000a220:	0f40      	lsrs	r0, r0, #29
1000a222:	469c      	mov	ip, r3
1000a224:	4307      	orrs	r7, r0
1000a226:	2300      	movs	r3, #0
1000a228:	46bb      	mov	fp, r7
1000a22a:	2600      	movs	r6, #0
1000a22c:	4465      	add	r5, ip
1000a22e:	9300      	str	r3, [sp, #0]
1000a230:	4642      	mov	r2, r8
1000a232:	0317      	lsls	r7, r2, #12
1000a234:	0050      	lsls	r0, r2, #1
1000a236:	0fd2      	lsrs	r2, r2, #31
1000a238:	4653      	mov	r3, sl
1000a23a:	0b3f      	lsrs	r7, r7, #12
1000a23c:	0d40      	lsrs	r0, r0, #21
1000a23e:	4690      	mov	r8, r2
1000a240:	d100      	bne.n	1000a244 <__aeabi_ddiv+0x60>
1000a242:	e072      	b.n	1000a32a <__aeabi_ddiv+0x146>
1000a244:	4a57      	ldr	r2, [pc, #348]	; (1000a3a4 <__aeabi_ddiv+0x1c0>)
1000a246:	4290      	cmp	r0, r2
1000a248:	d067      	beq.n	1000a31a <__aeabi_ddiv+0x136>
1000a24a:	2380      	movs	r3, #128	; 0x80
1000a24c:	035b      	lsls	r3, r3, #13
1000a24e:	431f      	orrs	r7, r3
1000a250:	4653      	mov	r3, sl
1000a252:	4a55      	ldr	r2, [pc, #340]	; (1000a3a8 <__aeabi_ddiv+0x1c4>)
1000a254:	0f5b      	lsrs	r3, r3, #29
1000a256:	00ff      	lsls	r7, r7, #3
1000a258:	431f      	orrs	r7, r3
1000a25a:	4694      	mov	ip, r2
1000a25c:	4653      	mov	r3, sl
1000a25e:	2100      	movs	r1, #0
1000a260:	00db      	lsls	r3, r3, #3
1000a262:	4460      	add	r0, ip
1000a264:	4642      	mov	r2, r8
1000a266:	4062      	eors	r2, r4
1000a268:	4692      	mov	sl, r2
1000a26a:	1a2d      	subs	r5, r5, r0
1000a26c:	430e      	orrs	r6, r1
1000a26e:	2e0f      	cmp	r6, #15
1000a270:	d900      	bls.n	1000a274 <__aeabi_ddiv+0x90>
1000a272:	e0a1      	b.n	1000a3b8 <__aeabi_ddiv+0x1d4>
1000a274:	484d      	ldr	r0, [pc, #308]	; (1000a3ac <__aeabi_ddiv+0x1c8>)
1000a276:	00b6      	lsls	r6, r6, #2
1000a278:	5980      	ldr	r0, [r0, r6]
1000a27a:	4687      	mov	pc, r0
1000a27c:	465b      	mov	r3, fp
1000a27e:	431e      	orrs	r6, r3
1000a280:	d000      	beq.n	1000a284 <__aeabi_ddiv+0xa0>
1000a282:	e076      	b.n	1000a372 <__aeabi_ddiv+0x18e>
1000a284:	2300      	movs	r3, #0
1000a286:	469b      	mov	fp, r3
1000a288:	4699      	mov	r9, r3
1000a28a:	3302      	adds	r3, #2
1000a28c:	2608      	movs	r6, #8
1000a28e:	9300      	str	r3, [sp, #0]
1000a290:	e7ce      	b.n	1000a230 <__aeabi_ddiv+0x4c>
1000a292:	4699      	mov	r9, r3
1000a294:	4643      	mov	r3, r8
1000a296:	46bb      	mov	fp, r7
1000a298:	9301      	str	r3, [sp, #4]
1000a29a:	9100      	str	r1, [sp, #0]
1000a29c:	9b00      	ldr	r3, [sp, #0]
1000a29e:	2b02      	cmp	r3, #2
1000a2a0:	d16b      	bne.n	1000a37a <__aeabi_ddiv+0x196>
1000a2a2:	9b01      	ldr	r3, [sp, #4]
1000a2a4:	469a      	mov	sl, r3
1000a2a6:	2100      	movs	r1, #0
1000a2a8:	4653      	mov	r3, sl
1000a2aa:	2201      	movs	r2, #1
1000a2ac:	2700      	movs	r7, #0
1000a2ae:	4689      	mov	r9, r1
1000a2b0:	401a      	ands	r2, r3
1000a2b2:	4b3c      	ldr	r3, [pc, #240]	; (1000a3a4 <__aeabi_ddiv+0x1c0>)
1000a2b4:	2100      	movs	r1, #0
1000a2b6:	033f      	lsls	r7, r7, #12
1000a2b8:	0d0c      	lsrs	r4, r1, #20
1000a2ba:	0524      	lsls	r4, r4, #20
1000a2bc:	0b3f      	lsrs	r7, r7, #12
1000a2be:	4327      	orrs	r7, r4
1000a2c0:	4c3b      	ldr	r4, [pc, #236]	; (1000a3b0 <__aeabi_ddiv+0x1cc>)
1000a2c2:	051b      	lsls	r3, r3, #20
1000a2c4:	4027      	ands	r7, r4
1000a2c6:	431f      	orrs	r7, r3
1000a2c8:	007f      	lsls	r7, r7, #1
1000a2ca:	07d2      	lsls	r2, r2, #31
1000a2cc:	087f      	lsrs	r7, r7, #1
1000a2ce:	4317      	orrs	r7, r2
1000a2d0:	4648      	mov	r0, r9
1000a2d2:	1c39      	adds	r1, r7, #0
1000a2d4:	b007      	add	sp, #28
1000a2d6:	bc3c      	pop	{r2, r3, r4, r5}
1000a2d8:	4690      	mov	r8, r2
1000a2da:	4699      	mov	r9, r3
1000a2dc:	46a2      	mov	sl, r4
1000a2de:	46ab      	mov	fp, r5
1000a2e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000a2e2:	4303      	orrs	r3, r0
1000a2e4:	d03e      	beq.n	1000a364 <__aeabi_ddiv+0x180>
1000a2e6:	465b      	mov	r3, fp
1000a2e8:	2b00      	cmp	r3, #0
1000a2ea:	d100      	bne.n	1000a2ee <__aeabi_ddiv+0x10a>
1000a2ec:	e19c      	b.n	1000a628 <__aeabi_ddiv+0x444>
1000a2ee:	4658      	mov	r0, fp
1000a2f0:	f7fd fe4a 	bl	10007f88 <__clzsi2>
1000a2f4:	2328      	movs	r3, #40	; 0x28
1000a2f6:	1c31      	adds	r1, r6, #0
1000a2f8:	1a1b      	subs	r3, r3, r0
1000a2fa:	1c02      	adds	r2, r0, #0
1000a2fc:	465f      	mov	r7, fp
1000a2fe:	40d9      	lsrs	r1, r3
1000a300:	3a08      	subs	r2, #8
1000a302:	4097      	lsls	r7, r2
1000a304:	1c0b      	adds	r3, r1, #0
1000a306:	4096      	lsls	r6, r2
1000a308:	433b      	orrs	r3, r7
1000a30a:	469b      	mov	fp, r3
1000a30c:	46b1      	mov	r9, r6
1000a30e:	2300      	movs	r3, #0
1000a310:	4d28      	ldr	r5, [pc, #160]	; (1000a3b4 <__aeabi_ddiv+0x1d0>)
1000a312:	2600      	movs	r6, #0
1000a314:	1a2d      	subs	r5, r5, r0
1000a316:	9300      	str	r3, [sp, #0]
1000a318:	e78a      	b.n	1000a230 <__aeabi_ddiv+0x4c>
1000a31a:	4652      	mov	r2, sl
1000a31c:	2103      	movs	r1, #3
1000a31e:	433a      	orrs	r2, r7
1000a320:	d1a0      	bne.n	1000a264 <__aeabi_ddiv+0x80>
1000a322:	2700      	movs	r7, #0
1000a324:	2300      	movs	r3, #0
1000a326:	2102      	movs	r1, #2
1000a328:	e79c      	b.n	1000a264 <__aeabi_ddiv+0x80>
1000a32a:	4652      	mov	r2, sl
1000a32c:	433a      	orrs	r2, r7
1000a32e:	d015      	beq.n	1000a35c <__aeabi_ddiv+0x178>
1000a330:	2f00      	cmp	r7, #0
1000a332:	d100      	bne.n	1000a336 <__aeabi_ddiv+0x152>
1000a334:	e185      	b.n	1000a642 <__aeabi_ddiv+0x45e>
1000a336:	1c38      	adds	r0, r7, #0
1000a338:	f7fd fe26 	bl	10007f88 <__clzsi2>
1000a33c:	1c02      	adds	r2, r0, #0
1000a33e:	2128      	movs	r1, #40	; 0x28
1000a340:	4650      	mov	r0, sl
1000a342:	1a89      	subs	r1, r1, r2
1000a344:	1c13      	adds	r3, r2, #0
1000a346:	40c8      	lsrs	r0, r1
1000a348:	4651      	mov	r1, sl
1000a34a:	3b08      	subs	r3, #8
1000a34c:	4099      	lsls	r1, r3
1000a34e:	409f      	lsls	r7, r3
1000a350:	1c0b      	adds	r3, r1, #0
1000a352:	4307      	orrs	r7, r0
1000a354:	4817      	ldr	r0, [pc, #92]	; (1000a3b4 <__aeabi_ddiv+0x1d0>)
1000a356:	2100      	movs	r1, #0
1000a358:	1a80      	subs	r0, r0, r2
1000a35a:	e783      	b.n	1000a264 <__aeabi_ddiv+0x80>
1000a35c:	2700      	movs	r7, #0
1000a35e:	2300      	movs	r3, #0
1000a360:	2101      	movs	r1, #1
1000a362:	e77f      	b.n	1000a264 <__aeabi_ddiv+0x80>
1000a364:	2300      	movs	r3, #0
1000a366:	469b      	mov	fp, r3
1000a368:	4699      	mov	r9, r3
1000a36a:	3301      	adds	r3, #1
1000a36c:	2604      	movs	r6, #4
1000a36e:	9300      	str	r3, [sp, #0]
1000a370:	e75e      	b.n	1000a230 <__aeabi_ddiv+0x4c>
1000a372:	2303      	movs	r3, #3
1000a374:	260c      	movs	r6, #12
1000a376:	9300      	str	r3, [sp, #0]
1000a378:	e75a      	b.n	1000a230 <__aeabi_ddiv+0x4c>
1000a37a:	2b03      	cmp	r3, #3
1000a37c:	d100      	bne.n	1000a380 <__aeabi_ddiv+0x19c>
1000a37e:	e23c      	b.n	1000a7fa <__aeabi_ddiv+0x616>
1000a380:	2b01      	cmp	r3, #1
1000a382:	d000      	beq.n	1000a386 <__aeabi_ddiv+0x1a2>
1000a384:	e1bf      	b.n	1000a706 <__aeabi_ddiv+0x522>
1000a386:	1c1a      	adds	r2, r3, #0
1000a388:	9b01      	ldr	r3, [sp, #4]
1000a38a:	401a      	ands	r2, r3
1000a38c:	2100      	movs	r1, #0
1000a38e:	2300      	movs	r3, #0
1000a390:	2700      	movs	r7, #0
1000a392:	4689      	mov	r9, r1
1000a394:	e78e      	b.n	1000a2b4 <__aeabi_ddiv+0xd0>
1000a396:	2300      	movs	r3, #0
1000a398:	2780      	movs	r7, #128	; 0x80
1000a39a:	4699      	mov	r9, r3
1000a39c:	2200      	movs	r2, #0
1000a39e:	033f      	lsls	r7, r7, #12
1000a3a0:	4b00      	ldr	r3, [pc, #0]	; (1000a3a4 <__aeabi_ddiv+0x1c0>)
1000a3a2:	e787      	b.n	1000a2b4 <__aeabi_ddiv+0xd0>
1000a3a4:	000007ff 	.word	0x000007ff
1000a3a8:	fffffc01 	.word	0xfffffc01
1000a3ac:	1000b980 	.word	0x1000b980
1000a3b0:	800fffff 	.word	0x800fffff
1000a3b4:	fffffc0d 	.word	0xfffffc0d
1000a3b8:	45bb      	cmp	fp, r7
1000a3ba:	d900      	bls.n	1000a3be <__aeabi_ddiv+0x1da>
1000a3bc:	e151      	b.n	1000a662 <__aeabi_ddiv+0x47e>
1000a3be:	d100      	bne.n	1000a3c2 <__aeabi_ddiv+0x1de>
1000a3c0:	e14c      	b.n	1000a65c <__aeabi_ddiv+0x478>
1000a3c2:	464a      	mov	r2, r9
1000a3c4:	9203      	str	r2, [sp, #12]
1000a3c6:	2200      	movs	r2, #0
1000a3c8:	465c      	mov	r4, fp
1000a3ca:	4690      	mov	r8, r2
1000a3cc:	3d01      	subs	r5, #1
1000a3ce:	0e18      	lsrs	r0, r3, #24
1000a3d0:	023f      	lsls	r7, r7, #8
1000a3d2:	4338      	orrs	r0, r7
1000a3d4:	021b      	lsls	r3, r3, #8
1000a3d6:	9301      	str	r3, [sp, #4]
1000a3d8:	0c03      	lsrs	r3, r0, #16
1000a3da:	4699      	mov	r9, r3
1000a3dc:	0403      	lsls	r3, r0, #16
1000a3de:	0c1b      	lsrs	r3, r3, #16
1000a3e0:	4649      	mov	r1, r9
1000a3e2:	1c06      	adds	r6, r0, #0
1000a3e4:	1c20      	adds	r0, r4, #0
1000a3e6:	1c1f      	adds	r7, r3, #0
1000a3e8:	9300      	str	r3, [sp, #0]
1000a3ea:	f7f7 ffd5 	bl	10002398 <__aeabi_uidiv>
1000a3ee:	1c02      	adds	r2, r0, #0
1000a3f0:	437a      	muls	r2, r7
1000a3f2:	9002      	str	r0, [sp, #8]
1000a3f4:	4649      	mov	r1, r9
1000a3f6:	1c20      	adds	r0, r4, #0
1000a3f8:	1c17      	adds	r7, r2, #0
1000a3fa:	f7f7 fff9 	bl	100023f0 <__aeabi_uidivmod>
1000a3fe:	9b03      	ldr	r3, [sp, #12]
1000a400:	0409      	lsls	r1, r1, #16
1000a402:	0c1b      	lsrs	r3, r3, #16
1000a404:	4319      	orrs	r1, r3
1000a406:	428f      	cmp	r7, r1
1000a408:	d90c      	bls.n	1000a424 <__aeabi_ddiv+0x240>
1000a40a:	9b02      	ldr	r3, [sp, #8]
1000a40c:	1989      	adds	r1, r1, r6
1000a40e:	3b01      	subs	r3, #1
1000a410:	428e      	cmp	r6, r1
1000a412:	d900      	bls.n	1000a416 <__aeabi_ddiv+0x232>
1000a414:	e152      	b.n	1000a6bc <__aeabi_ddiv+0x4d8>
1000a416:	428f      	cmp	r7, r1
1000a418:	d800      	bhi.n	1000a41c <__aeabi_ddiv+0x238>
1000a41a:	e14f      	b.n	1000a6bc <__aeabi_ddiv+0x4d8>
1000a41c:	9b02      	ldr	r3, [sp, #8]
1000a41e:	1989      	adds	r1, r1, r6
1000a420:	3b02      	subs	r3, #2
1000a422:	9302      	str	r3, [sp, #8]
1000a424:	1bcc      	subs	r4, r1, r7
1000a426:	1c20      	adds	r0, r4, #0
1000a428:	4649      	mov	r1, r9
1000a42a:	f7f7 ffb5 	bl	10002398 <__aeabi_uidiv>
1000a42e:	9f00      	ldr	r7, [sp, #0]
1000a430:	4683      	mov	fp, r0
1000a432:	4347      	muls	r7, r0
1000a434:	4649      	mov	r1, r9
1000a436:	1c20      	adds	r0, r4, #0
1000a438:	f7f7 ffda 	bl	100023f0 <__aeabi_uidivmod>
1000a43c:	9a03      	ldr	r2, [sp, #12]
1000a43e:	040b      	lsls	r3, r1, #16
1000a440:	0414      	lsls	r4, r2, #16
1000a442:	0c24      	lsrs	r4, r4, #16
1000a444:	4323      	orrs	r3, r4
1000a446:	429f      	cmp	r7, r3
1000a448:	d90d      	bls.n	1000a466 <__aeabi_ddiv+0x282>
1000a44a:	465a      	mov	r2, fp
1000a44c:	199b      	adds	r3, r3, r6
1000a44e:	3a01      	subs	r2, #1
1000a450:	429e      	cmp	r6, r3
1000a452:	d900      	bls.n	1000a456 <__aeabi_ddiv+0x272>
1000a454:	e130      	b.n	1000a6b8 <__aeabi_ddiv+0x4d4>
1000a456:	429f      	cmp	r7, r3
1000a458:	d800      	bhi.n	1000a45c <__aeabi_ddiv+0x278>
1000a45a:	e12d      	b.n	1000a6b8 <__aeabi_ddiv+0x4d4>
1000a45c:	2202      	movs	r2, #2
1000a45e:	4252      	negs	r2, r2
1000a460:	4694      	mov	ip, r2
1000a462:	199b      	adds	r3, r3, r6
1000a464:	44e3      	add	fp, ip
1000a466:	9a02      	ldr	r2, [sp, #8]
1000a468:	1bdb      	subs	r3, r3, r7
1000a46a:	0417      	lsls	r7, r2, #16
1000a46c:	465a      	mov	r2, fp
1000a46e:	433a      	orrs	r2, r7
1000a470:	4693      	mov	fp, r2
1000a472:	9c01      	ldr	r4, [sp, #4]
1000a474:	0c17      	lsrs	r7, r2, #16
1000a476:	0c22      	lsrs	r2, r4, #16
1000a478:	1c10      	adds	r0, r2, #0
1000a47a:	9204      	str	r2, [sp, #16]
1000a47c:	465a      	mov	r2, fp
1000a47e:	0411      	lsls	r1, r2, #16
1000a480:	0422      	lsls	r2, r4, #16
1000a482:	0c12      	lsrs	r2, r2, #16
1000a484:	1c14      	adds	r4, r2, #0
1000a486:	0c09      	lsrs	r1, r1, #16
1000a488:	437c      	muls	r4, r7
1000a48a:	9205      	str	r2, [sp, #20]
1000a48c:	434a      	muls	r2, r1
1000a48e:	4341      	muls	r1, r0
1000a490:	4347      	muls	r7, r0
1000a492:	1861      	adds	r1, r4, r1
1000a494:	0c10      	lsrs	r0, r2, #16
1000a496:	1809      	adds	r1, r1, r0
1000a498:	428c      	cmp	r4, r1
1000a49a:	d903      	bls.n	1000a4a4 <__aeabi_ddiv+0x2c0>
1000a49c:	2080      	movs	r0, #128	; 0x80
1000a49e:	0240      	lsls	r0, r0, #9
1000a4a0:	4684      	mov	ip, r0
1000a4a2:	4467      	add	r7, ip
1000a4a4:	0c0c      	lsrs	r4, r1, #16
1000a4a6:	0412      	lsls	r2, r2, #16
1000a4a8:	0408      	lsls	r0, r1, #16
1000a4aa:	0c12      	lsrs	r2, r2, #16
1000a4ac:	193c      	adds	r4, r7, r4
1000a4ae:	1881      	adds	r1, r0, r2
1000a4b0:	42a3      	cmp	r3, r4
1000a4b2:	d200      	bcs.n	1000a4b6 <__aeabi_ddiv+0x2d2>
1000a4b4:	e0e5      	b.n	1000a682 <__aeabi_ddiv+0x49e>
1000a4b6:	d100      	bne.n	1000a4ba <__aeabi_ddiv+0x2d6>
1000a4b8:	e0df      	b.n	1000a67a <__aeabi_ddiv+0x496>
1000a4ba:	1b1f      	subs	r7, r3, r4
1000a4bc:	4643      	mov	r3, r8
1000a4be:	1a5c      	subs	r4, r3, r1
1000a4c0:	45a0      	cmp	r8, r4
1000a4c2:	4192      	sbcs	r2, r2
1000a4c4:	4252      	negs	r2, r2
1000a4c6:	1abf      	subs	r7, r7, r2
1000a4c8:	42b7      	cmp	r7, r6
1000a4ca:	d100      	bne.n	1000a4ce <__aeabi_ddiv+0x2ea>
1000a4cc:	e10e      	b.n	1000a6ec <__aeabi_ddiv+0x508>
1000a4ce:	1c38      	adds	r0, r7, #0
1000a4d0:	4649      	mov	r1, r9
1000a4d2:	f7f7 ff61 	bl	10002398 <__aeabi_uidiv>
1000a4d6:	9b00      	ldr	r3, [sp, #0]
1000a4d8:	9002      	str	r0, [sp, #8]
1000a4da:	4343      	muls	r3, r0
1000a4dc:	4649      	mov	r1, r9
1000a4de:	1c38      	adds	r0, r7, #0
1000a4e0:	4698      	mov	r8, r3
1000a4e2:	f7f7 ff85 	bl	100023f0 <__aeabi_uidivmod>
1000a4e6:	0c23      	lsrs	r3, r4, #16
1000a4e8:	040f      	lsls	r7, r1, #16
1000a4ea:	431f      	orrs	r7, r3
1000a4ec:	45b8      	cmp	r8, r7
1000a4ee:	d90c      	bls.n	1000a50a <__aeabi_ddiv+0x326>
1000a4f0:	9b02      	ldr	r3, [sp, #8]
1000a4f2:	19bf      	adds	r7, r7, r6
1000a4f4:	3b01      	subs	r3, #1
1000a4f6:	42be      	cmp	r6, r7
1000a4f8:	d900      	bls.n	1000a4fc <__aeabi_ddiv+0x318>
1000a4fa:	e0fb      	b.n	1000a6f4 <__aeabi_ddiv+0x510>
1000a4fc:	45b8      	cmp	r8, r7
1000a4fe:	d800      	bhi.n	1000a502 <__aeabi_ddiv+0x31e>
1000a500:	e0f8      	b.n	1000a6f4 <__aeabi_ddiv+0x510>
1000a502:	9b02      	ldr	r3, [sp, #8]
1000a504:	19bf      	adds	r7, r7, r6
1000a506:	3b02      	subs	r3, #2
1000a508:	9302      	str	r3, [sp, #8]
1000a50a:	4643      	mov	r3, r8
1000a50c:	1aff      	subs	r7, r7, r3
1000a50e:	4649      	mov	r1, r9
1000a510:	1c38      	adds	r0, r7, #0
1000a512:	f7f7 ff41 	bl	10002398 <__aeabi_uidiv>
1000a516:	9b00      	ldr	r3, [sp, #0]
1000a518:	9003      	str	r0, [sp, #12]
1000a51a:	4343      	muls	r3, r0
1000a51c:	4649      	mov	r1, r9
1000a51e:	1c38      	adds	r0, r7, #0
1000a520:	4698      	mov	r8, r3
1000a522:	f7f7 ff65 	bl	100023f0 <__aeabi_uidivmod>
1000a526:	0424      	lsls	r4, r4, #16
1000a528:	0409      	lsls	r1, r1, #16
1000a52a:	0c24      	lsrs	r4, r4, #16
1000a52c:	4321      	orrs	r1, r4
1000a52e:	4588      	cmp	r8, r1
1000a530:	d90c      	bls.n	1000a54c <__aeabi_ddiv+0x368>
1000a532:	9b03      	ldr	r3, [sp, #12]
1000a534:	1989      	adds	r1, r1, r6
1000a536:	3b01      	subs	r3, #1
1000a538:	428e      	cmp	r6, r1
1000a53a:	d900      	bls.n	1000a53e <__aeabi_ddiv+0x35a>
1000a53c:	e0dc      	b.n	1000a6f8 <__aeabi_ddiv+0x514>
1000a53e:	4588      	cmp	r8, r1
1000a540:	d800      	bhi.n	1000a544 <__aeabi_ddiv+0x360>
1000a542:	e0d9      	b.n	1000a6f8 <__aeabi_ddiv+0x514>
1000a544:	9b03      	ldr	r3, [sp, #12]
1000a546:	1989      	adds	r1, r1, r6
1000a548:	3b02      	subs	r3, #2
1000a54a:	9303      	str	r3, [sp, #12]
1000a54c:	4643      	mov	r3, r8
1000a54e:	1ac9      	subs	r1, r1, r3
1000a550:	9b02      	ldr	r3, [sp, #8]
1000a552:	9a03      	ldr	r2, [sp, #12]
1000a554:	041b      	lsls	r3, r3, #16
1000a556:	9c05      	ldr	r4, [sp, #20]
1000a558:	431a      	orrs	r2, r3
1000a55a:	0c10      	lsrs	r0, r2, #16
1000a55c:	0413      	lsls	r3, r2, #16
1000a55e:	4691      	mov	r9, r2
1000a560:	1c22      	adds	r2, r4, #0
1000a562:	9f04      	ldr	r7, [sp, #16]
1000a564:	0c1b      	lsrs	r3, r3, #16
1000a566:	435a      	muls	r2, r3
1000a568:	4344      	muls	r4, r0
1000a56a:	437b      	muls	r3, r7
1000a56c:	4378      	muls	r0, r7
1000a56e:	18e3      	adds	r3, r4, r3
1000a570:	0c17      	lsrs	r7, r2, #16
1000a572:	19db      	adds	r3, r3, r7
1000a574:	429c      	cmp	r4, r3
1000a576:	d903      	bls.n	1000a580 <__aeabi_ddiv+0x39c>
1000a578:	2480      	movs	r4, #128	; 0x80
1000a57a:	0264      	lsls	r4, r4, #9
1000a57c:	46a4      	mov	ip, r4
1000a57e:	4460      	add	r0, ip
1000a580:	0c1c      	lsrs	r4, r3, #16
1000a582:	0412      	lsls	r2, r2, #16
1000a584:	041b      	lsls	r3, r3, #16
1000a586:	0c12      	lsrs	r2, r2, #16
1000a588:	1900      	adds	r0, r0, r4
1000a58a:	189b      	adds	r3, r3, r2
1000a58c:	4281      	cmp	r1, r0
1000a58e:	d200      	bcs.n	1000a592 <__aeabi_ddiv+0x3ae>
1000a590:	e096      	b.n	1000a6c0 <__aeabi_ddiv+0x4dc>
1000a592:	d100      	bne.n	1000a596 <__aeabi_ddiv+0x3b2>
1000a594:	e0fc      	b.n	1000a790 <__aeabi_ddiv+0x5ac>
1000a596:	464a      	mov	r2, r9
1000a598:	2301      	movs	r3, #1
1000a59a:	431a      	orrs	r2, r3
1000a59c:	4691      	mov	r9, r2
1000a59e:	4b9b      	ldr	r3, [pc, #620]	; (1000a80c <__aeabi_ddiv+0x628>)
1000a5a0:	18eb      	adds	r3, r5, r3
1000a5a2:	2b00      	cmp	r3, #0
1000a5a4:	dc00      	bgt.n	1000a5a8 <__aeabi_ddiv+0x3c4>
1000a5a6:	e099      	b.n	1000a6dc <__aeabi_ddiv+0x4f8>
1000a5a8:	464a      	mov	r2, r9
1000a5aa:	0752      	lsls	r2, r2, #29
1000a5ac:	d00a      	beq.n	1000a5c4 <__aeabi_ddiv+0x3e0>
1000a5ae:	220f      	movs	r2, #15
1000a5b0:	4649      	mov	r1, r9
1000a5b2:	400a      	ands	r2, r1
1000a5b4:	2a04      	cmp	r2, #4
1000a5b6:	d005      	beq.n	1000a5c4 <__aeabi_ddiv+0x3e0>
1000a5b8:	3104      	adds	r1, #4
1000a5ba:	4549      	cmp	r1, r9
1000a5bc:	4192      	sbcs	r2, r2
1000a5be:	4689      	mov	r9, r1
1000a5c0:	4252      	negs	r2, r2
1000a5c2:	4493      	add	fp, r2
1000a5c4:	465a      	mov	r2, fp
1000a5c6:	01d2      	lsls	r2, r2, #7
1000a5c8:	d506      	bpl.n	1000a5d8 <__aeabi_ddiv+0x3f4>
1000a5ca:	465a      	mov	r2, fp
1000a5cc:	4b90      	ldr	r3, [pc, #576]	; (1000a810 <__aeabi_ddiv+0x62c>)
1000a5ce:	401a      	ands	r2, r3
1000a5d0:	2380      	movs	r3, #128	; 0x80
1000a5d2:	4693      	mov	fp, r2
1000a5d4:	00db      	lsls	r3, r3, #3
1000a5d6:	18eb      	adds	r3, r5, r3
1000a5d8:	4a8e      	ldr	r2, [pc, #568]	; (1000a814 <__aeabi_ddiv+0x630>)
1000a5da:	4293      	cmp	r3, r2
1000a5dc:	dd00      	ble.n	1000a5e0 <__aeabi_ddiv+0x3fc>
1000a5de:	e662      	b.n	1000a2a6 <__aeabi_ddiv+0xc2>
1000a5e0:	464a      	mov	r2, r9
1000a5e2:	4659      	mov	r1, fp
1000a5e4:	08d2      	lsrs	r2, r2, #3
1000a5e6:	0749      	lsls	r1, r1, #29
1000a5e8:	4311      	orrs	r1, r2
1000a5ea:	465a      	mov	r2, fp
1000a5ec:	4689      	mov	r9, r1
1000a5ee:	0257      	lsls	r7, r2, #9
1000a5f0:	4651      	mov	r1, sl
1000a5f2:	2201      	movs	r2, #1
1000a5f4:	055b      	lsls	r3, r3, #21
1000a5f6:	0b3f      	lsrs	r7, r7, #12
1000a5f8:	0d5b      	lsrs	r3, r3, #21
1000a5fa:	400a      	ands	r2, r1
1000a5fc:	e65a      	b.n	1000a2b4 <__aeabi_ddiv+0xd0>
1000a5fe:	2080      	movs	r0, #128	; 0x80
1000a600:	465a      	mov	r2, fp
1000a602:	0300      	lsls	r0, r0, #12
1000a604:	4202      	tst	r2, r0
1000a606:	d008      	beq.n	1000a61a <__aeabi_ddiv+0x436>
1000a608:	4207      	tst	r7, r0
1000a60a:	d106      	bne.n	1000a61a <__aeabi_ddiv+0x436>
1000a60c:	4307      	orrs	r7, r0
1000a60e:	033f      	lsls	r7, r7, #12
1000a610:	4699      	mov	r9, r3
1000a612:	0b3f      	lsrs	r7, r7, #12
1000a614:	4642      	mov	r2, r8
1000a616:	4b80      	ldr	r3, [pc, #512]	; (1000a818 <__aeabi_ddiv+0x634>)
1000a618:	e64c      	b.n	1000a2b4 <__aeabi_ddiv+0xd0>
1000a61a:	465f      	mov	r7, fp
1000a61c:	4307      	orrs	r7, r0
1000a61e:	033f      	lsls	r7, r7, #12
1000a620:	0b3f      	lsrs	r7, r7, #12
1000a622:	1c22      	adds	r2, r4, #0
1000a624:	4b7c      	ldr	r3, [pc, #496]	; (1000a818 <__aeabi_ddiv+0x634>)
1000a626:	e645      	b.n	1000a2b4 <__aeabi_ddiv+0xd0>
1000a628:	f7fd fcae 	bl	10007f88 <__clzsi2>
1000a62c:	1c03      	adds	r3, r0, #0
1000a62e:	3020      	adds	r0, #32
1000a630:	2827      	cmp	r0, #39	; 0x27
1000a632:	dc00      	bgt.n	1000a636 <__aeabi_ddiv+0x452>
1000a634:	e65e      	b.n	1000a2f4 <__aeabi_ddiv+0x110>
1000a636:	3b08      	subs	r3, #8
1000a638:	409e      	lsls	r6, r3
1000a63a:	2300      	movs	r3, #0
1000a63c:	46b3      	mov	fp, r6
1000a63e:	4699      	mov	r9, r3
1000a640:	e665      	b.n	1000a30e <__aeabi_ddiv+0x12a>
1000a642:	4650      	mov	r0, sl
1000a644:	f7fd fca0 	bl	10007f88 <__clzsi2>
1000a648:	1c02      	adds	r2, r0, #0
1000a64a:	3220      	adds	r2, #32
1000a64c:	2a27      	cmp	r2, #39	; 0x27
1000a64e:	dc00      	bgt.n	1000a652 <__aeabi_ddiv+0x46e>
1000a650:	e675      	b.n	1000a33e <__aeabi_ddiv+0x15a>
1000a652:	4657      	mov	r7, sl
1000a654:	3808      	subs	r0, #8
1000a656:	4087      	lsls	r7, r0
1000a658:	2300      	movs	r3, #0
1000a65a:	e67b      	b.n	1000a354 <__aeabi_ddiv+0x170>
1000a65c:	4599      	cmp	r9, r3
1000a65e:	d200      	bcs.n	1000a662 <__aeabi_ddiv+0x47e>
1000a660:	e6af      	b.n	1000a3c2 <__aeabi_ddiv+0x1de>
1000a662:	465a      	mov	r2, fp
1000a664:	4659      	mov	r1, fp
1000a666:	0854      	lsrs	r4, r2, #1
1000a668:	464a      	mov	r2, r9
1000a66a:	07c8      	lsls	r0, r1, #31
1000a66c:	0852      	lsrs	r2, r2, #1
1000a66e:	4302      	orrs	r2, r0
1000a670:	9203      	str	r2, [sp, #12]
1000a672:	464a      	mov	r2, r9
1000a674:	07d2      	lsls	r2, r2, #31
1000a676:	4690      	mov	r8, r2
1000a678:	e6a9      	b.n	1000a3ce <__aeabi_ddiv+0x1ea>
1000a67a:	2700      	movs	r7, #0
1000a67c:	4588      	cmp	r8, r1
1000a67e:	d300      	bcc.n	1000a682 <__aeabi_ddiv+0x49e>
1000a680:	e71c      	b.n	1000a4bc <__aeabi_ddiv+0x2d8>
1000a682:	9f01      	ldr	r7, [sp, #4]
1000a684:	465a      	mov	r2, fp
1000a686:	46bc      	mov	ip, r7
1000a688:	44e0      	add	r8, ip
1000a68a:	45b8      	cmp	r8, r7
1000a68c:	41bf      	sbcs	r7, r7
1000a68e:	427f      	negs	r7, r7
1000a690:	19bf      	adds	r7, r7, r6
1000a692:	18ff      	adds	r7, r7, r3
1000a694:	3a01      	subs	r2, #1
1000a696:	42be      	cmp	r6, r7
1000a698:	d206      	bcs.n	1000a6a8 <__aeabi_ddiv+0x4c4>
1000a69a:	42bc      	cmp	r4, r7
1000a69c:	d85f      	bhi.n	1000a75e <__aeabi_ddiv+0x57a>
1000a69e:	d100      	bne.n	1000a6a2 <__aeabi_ddiv+0x4be>
1000a6a0:	e09f      	b.n	1000a7e2 <__aeabi_ddiv+0x5fe>
1000a6a2:	1b3f      	subs	r7, r7, r4
1000a6a4:	4693      	mov	fp, r2
1000a6a6:	e709      	b.n	1000a4bc <__aeabi_ddiv+0x2d8>
1000a6a8:	42b7      	cmp	r7, r6
1000a6aa:	d1fa      	bne.n	1000a6a2 <__aeabi_ddiv+0x4be>
1000a6ac:	9b01      	ldr	r3, [sp, #4]
1000a6ae:	4543      	cmp	r3, r8
1000a6b0:	d9f3      	bls.n	1000a69a <__aeabi_ddiv+0x4b6>
1000a6b2:	1b37      	subs	r7, r6, r4
1000a6b4:	4693      	mov	fp, r2
1000a6b6:	e701      	b.n	1000a4bc <__aeabi_ddiv+0x2d8>
1000a6b8:	4693      	mov	fp, r2
1000a6ba:	e6d4      	b.n	1000a466 <__aeabi_ddiv+0x282>
1000a6bc:	9302      	str	r3, [sp, #8]
1000a6be:	e6b1      	b.n	1000a424 <__aeabi_ddiv+0x240>
1000a6c0:	464a      	mov	r2, r9
1000a6c2:	1989      	adds	r1, r1, r6
1000a6c4:	3a01      	subs	r2, #1
1000a6c6:	428e      	cmp	r6, r1
1000a6c8:	d918      	bls.n	1000a6fc <__aeabi_ddiv+0x518>
1000a6ca:	4691      	mov	r9, r2
1000a6cc:	4281      	cmp	r1, r0
1000a6ce:	d000      	beq.n	1000a6d2 <__aeabi_ddiv+0x4ee>
1000a6d0:	e761      	b.n	1000a596 <__aeabi_ddiv+0x3b2>
1000a6d2:	9a01      	ldr	r2, [sp, #4]
1000a6d4:	429a      	cmp	r2, r3
1000a6d6:	d000      	beq.n	1000a6da <__aeabi_ddiv+0x4f6>
1000a6d8:	e75d      	b.n	1000a596 <__aeabi_ddiv+0x3b2>
1000a6da:	e760      	b.n	1000a59e <__aeabi_ddiv+0x3ba>
1000a6dc:	4f4f      	ldr	r7, [pc, #316]	; (1000a81c <__aeabi_ddiv+0x638>)
1000a6de:	1b7f      	subs	r7, r7, r5
1000a6e0:	2f38      	cmp	r7, #56	; 0x38
1000a6e2:	dd13      	ble.n	1000a70c <__aeabi_ddiv+0x528>
1000a6e4:	2201      	movs	r2, #1
1000a6e6:	4653      	mov	r3, sl
1000a6e8:	401a      	ands	r2, r3
1000a6ea:	e64f      	b.n	1000a38c <__aeabi_ddiv+0x1a8>
1000a6ec:	2301      	movs	r3, #1
1000a6ee:	425b      	negs	r3, r3
1000a6f0:	4699      	mov	r9, r3
1000a6f2:	e754      	b.n	1000a59e <__aeabi_ddiv+0x3ba>
1000a6f4:	9302      	str	r3, [sp, #8]
1000a6f6:	e708      	b.n	1000a50a <__aeabi_ddiv+0x326>
1000a6f8:	9303      	str	r3, [sp, #12]
1000a6fa:	e727      	b.n	1000a54c <__aeabi_ddiv+0x368>
1000a6fc:	4288      	cmp	r0, r1
1000a6fe:	d83c      	bhi.n	1000a77a <__aeabi_ddiv+0x596>
1000a700:	d074      	beq.n	1000a7ec <__aeabi_ddiv+0x608>
1000a702:	4691      	mov	r9, r2
1000a704:	e747      	b.n	1000a596 <__aeabi_ddiv+0x3b2>
1000a706:	9b01      	ldr	r3, [sp, #4]
1000a708:	469a      	mov	sl, r3
1000a70a:	e748      	b.n	1000a59e <__aeabi_ddiv+0x3ba>
1000a70c:	2f1f      	cmp	r7, #31
1000a70e:	dc44      	bgt.n	1000a79a <__aeabi_ddiv+0x5b6>
1000a710:	4b43      	ldr	r3, [pc, #268]	; (1000a820 <__aeabi_ddiv+0x63c>)
1000a712:	464a      	mov	r2, r9
1000a714:	469c      	mov	ip, r3
1000a716:	465b      	mov	r3, fp
1000a718:	4465      	add	r5, ip
1000a71a:	40fa      	lsrs	r2, r7
1000a71c:	40ab      	lsls	r3, r5
1000a71e:	4313      	orrs	r3, r2
1000a720:	464a      	mov	r2, r9
1000a722:	40aa      	lsls	r2, r5
1000a724:	1c15      	adds	r5, r2, #0
1000a726:	1e6a      	subs	r2, r5, #1
1000a728:	4195      	sbcs	r5, r2
1000a72a:	465a      	mov	r2, fp
1000a72c:	40fa      	lsrs	r2, r7
1000a72e:	432b      	orrs	r3, r5
1000a730:	1c17      	adds	r7, r2, #0
1000a732:	075a      	lsls	r2, r3, #29
1000a734:	d009      	beq.n	1000a74a <__aeabi_ddiv+0x566>
1000a736:	220f      	movs	r2, #15
1000a738:	401a      	ands	r2, r3
1000a73a:	2a04      	cmp	r2, #4
1000a73c:	d005      	beq.n	1000a74a <__aeabi_ddiv+0x566>
1000a73e:	1d1a      	adds	r2, r3, #4
1000a740:	429a      	cmp	r2, r3
1000a742:	419b      	sbcs	r3, r3
1000a744:	425b      	negs	r3, r3
1000a746:	18ff      	adds	r7, r7, r3
1000a748:	1c13      	adds	r3, r2, #0
1000a74a:	023a      	lsls	r2, r7, #8
1000a74c:	d53e      	bpl.n	1000a7cc <__aeabi_ddiv+0x5e8>
1000a74e:	4653      	mov	r3, sl
1000a750:	2201      	movs	r2, #1
1000a752:	2100      	movs	r1, #0
1000a754:	401a      	ands	r2, r3
1000a756:	2700      	movs	r7, #0
1000a758:	2301      	movs	r3, #1
1000a75a:	4689      	mov	r9, r1
1000a75c:	e5aa      	b.n	1000a2b4 <__aeabi_ddiv+0xd0>
1000a75e:	2302      	movs	r3, #2
1000a760:	425b      	negs	r3, r3
1000a762:	469c      	mov	ip, r3
1000a764:	9a01      	ldr	r2, [sp, #4]
1000a766:	44e3      	add	fp, ip
1000a768:	4694      	mov	ip, r2
1000a76a:	44e0      	add	r8, ip
1000a76c:	4590      	cmp	r8, r2
1000a76e:	419b      	sbcs	r3, r3
1000a770:	425b      	negs	r3, r3
1000a772:	199b      	adds	r3, r3, r6
1000a774:	19df      	adds	r7, r3, r7
1000a776:	1b3f      	subs	r7, r7, r4
1000a778:	e6a0      	b.n	1000a4bc <__aeabi_ddiv+0x2d8>
1000a77a:	9f01      	ldr	r7, [sp, #4]
1000a77c:	464a      	mov	r2, r9
1000a77e:	007c      	lsls	r4, r7, #1
1000a780:	42bc      	cmp	r4, r7
1000a782:	41bf      	sbcs	r7, r7
1000a784:	427f      	negs	r7, r7
1000a786:	19bf      	adds	r7, r7, r6
1000a788:	3a02      	subs	r2, #2
1000a78a:	19c9      	adds	r1, r1, r7
1000a78c:	9401      	str	r4, [sp, #4]
1000a78e:	e79c      	b.n	1000a6ca <__aeabi_ddiv+0x4e6>
1000a790:	2b00      	cmp	r3, #0
1000a792:	d195      	bne.n	1000a6c0 <__aeabi_ddiv+0x4dc>
1000a794:	2200      	movs	r2, #0
1000a796:	9201      	str	r2, [sp, #4]
1000a798:	e79b      	b.n	1000a6d2 <__aeabi_ddiv+0x4ee>
1000a79a:	465a      	mov	r2, fp
1000a79c:	4b21      	ldr	r3, [pc, #132]	; (1000a824 <__aeabi_ddiv+0x640>)
1000a79e:	1b5b      	subs	r3, r3, r5
1000a7a0:	40da      	lsrs	r2, r3
1000a7a2:	2f20      	cmp	r7, #32
1000a7a4:	d027      	beq.n	1000a7f6 <__aeabi_ddiv+0x612>
1000a7a6:	4b20      	ldr	r3, [pc, #128]	; (1000a828 <__aeabi_ddiv+0x644>)
1000a7a8:	469c      	mov	ip, r3
1000a7aa:	465b      	mov	r3, fp
1000a7ac:	4465      	add	r5, ip
1000a7ae:	40ab      	lsls	r3, r5
1000a7b0:	4649      	mov	r1, r9
1000a7b2:	430b      	orrs	r3, r1
1000a7b4:	1e59      	subs	r1, r3, #1
1000a7b6:	418b      	sbcs	r3, r1
1000a7b8:	4313      	orrs	r3, r2
1000a7ba:	2207      	movs	r2, #7
1000a7bc:	2700      	movs	r7, #0
1000a7be:	401a      	ands	r2, r3
1000a7c0:	d007      	beq.n	1000a7d2 <__aeabi_ddiv+0x5ee>
1000a7c2:	220f      	movs	r2, #15
1000a7c4:	2700      	movs	r7, #0
1000a7c6:	401a      	ands	r2, r3
1000a7c8:	2a04      	cmp	r2, #4
1000a7ca:	d1b8      	bne.n	1000a73e <__aeabi_ddiv+0x55a>
1000a7cc:	077a      	lsls	r2, r7, #29
1000a7ce:	027f      	lsls	r7, r7, #9
1000a7d0:	0b3f      	lsrs	r7, r7, #12
1000a7d2:	08db      	lsrs	r3, r3, #3
1000a7d4:	4313      	orrs	r3, r2
1000a7d6:	4699      	mov	r9, r3
1000a7d8:	2201      	movs	r2, #1
1000a7da:	4653      	mov	r3, sl
1000a7dc:	401a      	ands	r2, r3
1000a7de:	2300      	movs	r3, #0
1000a7e0:	e568      	b.n	1000a2b4 <__aeabi_ddiv+0xd0>
1000a7e2:	4541      	cmp	r1, r8
1000a7e4:	d8bb      	bhi.n	1000a75e <__aeabi_ddiv+0x57a>
1000a7e6:	4693      	mov	fp, r2
1000a7e8:	2700      	movs	r7, #0
1000a7ea:	e667      	b.n	1000a4bc <__aeabi_ddiv+0x2d8>
1000a7ec:	9c01      	ldr	r4, [sp, #4]
1000a7ee:	429c      	cmp	r4, r3
1000a7f0:	d3c3      	bcc.n	1000a77a <__aeabi_ddiv+0x596>
1000a7f2:	4691      	mov	r9, r2
1000a7f4:	e76d      	b.n	1000a6d2 <__aeabi_ddiv+0x4ee>
1000a7f6:	2300      	movs	r3, #0
1000a7f8:	e7da      	b.n	1000a7b0 <__aeabi_ddiv+0x5cc>
1000a7fa:	2780      	movs	r7, #128	; 0x80
1000a7fc:	465b      	mov	r3, fp
1000a7fe:	033f      	lsls	r7, r7, #12
1000a800:	431f      	orrs	r7, r3
1000a802:	033f      	lsls	r7, r7, #12
1000a804:	0b3f      	lsrs	r7, r7, #12
1000a806:	9a01      	ldr	r2, [sp, #4]
1000a808:	4b03      	ldr	r3, [pc, #12]	; (1000a818 <__aeabi_ddiv+0x634>)
1000a80a:	e553      	b.n	1000a2b4 <__aeabi_ddiv+0xd0>
1000a80c:	000003ff 	.word	0x000003ff
1000a810:	feffffff 	.word	0xfeffffff
1000a814:	000007fe 	.word	0x000007fe
1000a818:	000007ff 	.word	0x000007ff
1000a81c:	fffffc02 	.word	0xfffffc02
1000a820:	0000041e 	.word	0x0000041e
1000a824:	fffffbe2 	.word	0xfffffbe2
1000a828:	0000043e 	.word	0x0000043e

1000a82c <__eqdf2>:
1000a82c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000a82e:	465f      	mov	r7, fp
1000a830:	464d      	mov	r5, r9
1000a832:	4644      	mov	r4, r8
1000a834:	4656      	mov	r6, sl
1000a836:	b4f0      	push	{r4, r5, r6, r7}
1000a838:	031f      	lsls	r7, r3, #12
1000a83a:	005c      	lsls	r4, r3, #1
1000a83c:	0fdb      	lsrs	r3, r3, #31
1000a83e:	4699      	mov	r9, r3
1000a840:	4b1b      	ldr	r3, [pc, #108]	; (1000a8b0 <__eqdf2+0x84>)
1000a842:	030e      	lsls	r6, r1, #12
1000a844:	004d      	lsls	r5, r1, #1
1000a846:	0fc9      	lsrs	r1, r1, #31
1000a848:	4684      	mov	ip, r0
1000a84a:	0b36      	lsrs	r6, r6, #12
1000a84c:	0d6d      	lsrs	r5, r5, #21
1000a84e:	468b      	mov	fp, r1
1000a850:	4690      	mov	r8, r2
1000a852:	0b3f      	lsrs	r7, r7, #12
1000a854:	0d64      	lsrs	r4, r4, #21
1000a856:	429d      	cmp	r5, r3
1000a858:	d00c      	beq.n	1000a874 <__eqdf2+0x48>
1000a85a:	4b15      	ldr	r3, [pc, #84]	; (1000a8b0 <__eqdf2+0x84>)
1000a85c:	429c      	cmp	r4, r3
1000a85e:	d010      	beq.n	1000a882 <__eqdf2+0x56>
1000a860:	2301      	movs	r3, #1
1000a862:	42a5      	cmp	r5, r4
1000a864:	d014      	beq.n	1000a890 <__eqdf2+0x64>
1000a866:	1c18      	adds	r0, r3, #0
1000a868:	bc3c      	pop	{r2, r3, r4, r5}
1000a86a:	4690      	mov	r8, r2
1000a86c:	4699      	mov	r9, r3
1000a86e:	46a2      	mov	sl, r4
1000a870:	46ab      	mov	fp, r5
1000a872:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000a874:	1c31      	adds	r1, r6, #0
1000a876:	2301      	movs	r3, #1
1000a878:	4301      	orrs	r1, r0
1000a87a:	d1f4      	bne.n	1000a866 <__eqdf2+0x3a>
1000a87c:	4b0c      	ldr	r3, [pc, #48]	; (1000a8b0 <__eqdf2+0x84>)
1000a87e:	429c      	cmp	r4, r3
1000a880:	d1ee      	bne.n	1000a860 <__eqdf2+0x34>
1000a882:	433a      	orrs	r2, r7
1000a884:	2301      	movs	r3, #1
1000a886:	2a00      	cmp	r2, #0
1000a888:	d1ed      	bne.n	1000a866 <__eqdf2+0x3a>
1000a88a:	2301      	movs	r3, #1
1000a88c:	42a5      	cmp	r5, r4
1000a88e:	d1ea      	bne.n	1000a866 <__eqdf2+0x3a>
1000a890:	42be      	cmp	r6, r7
1000a892:	d1e8      	bne.n	1000a866 <__eqdf2+0x3a>
1000a894:	45c4      	cmp	ip, r8
1000a896:	d1e6      	bne.n	1000a866 <__eqdf2+0x3a>
1000a898:	45cb      	cmp	fp, r9
1000a89a:	d006      	beq.n	1000a8aa <__eqdf2+0x7e>
1000a89c:	2d00      	cmp	r5, #0
1000a89e:	d1e2      	bne.n	1000a866 <__eqdf2+0x3a>
1000a8a0:	4330      	orrs	r0, r6
1000a8a2:	1c03      	adds	r3, r0, #0
1000a8a4:	1e58      	subs	r0, r3, #1
1000a8a6:	4183      	sbcs	r3, r0
1000a8a8:	e7dd      	b.n	1000a866 <__eqdf2+0x3a>
1000a8aa:	2300      	movs	r3, #0
1000a8ac:	e7db      	b.n	1000a866 <__eqdf2+0x3a>
1000a8ae:	46c0      	nop			; (mov r8, r8)
1000a8b0:	000007ff 	.word	0x000007ff

1000a8b4 <__gedf2>:
1000a8b4:	b5f0      	push	{r4, r5, r6, r7, lr}
1000a8b6:	4657      	mov	r7, sl
1000a8b8:	4645      	mov	r5, r8
1000a8ba:	464e      	mov	r6, r9
1000a8bc:	b4e0      	push	{r5, r6, r7}
1000a8be:	030f      	lsls	r7, r1, #12
1000a8c0:	004e      	lsls	r6, r1, #1
1000a8c2:	0fc9      	lsrs	r1, r1, #31
1000a8c4:	468a      	mov	sl, r1
1000a8c6:	4932      	ldr	r1, [pc, #200]	; (1000a990 <__gedf2+0xdc>)
1000a8c8:	031d      	lsls	r5, r3, #12
1000a8ca:	005c      	lsls	r4, r3, #1
1000a8cc:	4684      	mov	ip, r0
1000a8ce:	0b3f      	lsrs	r7, r7, #12
1000a8d0:	0d76      	lsrs	r6, r6, #21
1000a8d2:	4690      	mov	r8, r2
1000a8d4:	0b2d      	lsrs	r5, r5, #12
1000a8d6:	0d64      	lsrs	r4, r4, #21
1000a8d8:	0fdb      	lsrs	r3, r3, #31
1000a8da:	428e      	cmp	r6, r1
1000a8dc:	d00f      	beq.n	1000a8fe <__gedf2+0x4a>
1000a8de:	428c      	cmp	r4, r1
1000a8e0:	d039      	beq.n	1000a956 <__gedf2+0xa2>
1000a8e2:	2e00      	cmp	r6, #0
1000a8e4:	d110      	bne.n	1000a908 <__gedf2+0x54>
1000a8e6:	4338      	orrs	r0, r7
1000a8e8:	4241      	negs	r1, r0
1000a8ea:	4141      	adcs	r1, r0
1000a8ec:	4689      	mov	r9, r1
1000a8ee:	2c00      	cmp	r4, #0
1000a8f0:	d127      	bne.n	1000a942 <__gedf2+0x8e>
1000a8f2:	432a      	orrs	r2, r5
1000a8f4:	d125      	bne.n	1000a942 <__gedf2+0x8e>
1000a8f6:	2000      	movs	r0, #0
1000a8f8:	2900      	cmp	r1, #0
1000a8fa:	d10e      	bne.n	1000a91a <__gedf2+0x66>
1000a8fc:	e008      	b.n	1000a910 <__gedf2+0x5c>
1000a8fe:	1c39      	adds	r1, r7, #0
1000a900:	4301      	orrs	r1, r0
1000a902:	d12e      	bne.n	1000a962 <__gedf2+0xae>
1000a904:	42b4      	cmp	r4, r6
1000a906:	d026      	beq.n	1000a956 <__gedf2+0xa2>
1000a908:	2c00      	cmp	r4, #0
1000a90a:	d00b      	beq.n	1000a924 <__gedf2+0x70>
1000a90c:	459a      	cmp	sl, r3
1000a90e:	d00d      	beq.n	1000a92c <__gedf2+0x78>
1000a910:	4653      	mov	r3, sl
1000a912:	4259      	negs	r1, r3
1000a914:	2301      	movs	r3, #1
1000a916:	4319      	orrs	r1, r3
1000a918:	1c08      	adds	r0, r1, #0
1000a91a:	bc1c      	pop	{r2, r3, r4}
1000a91c:	4690      	mov	r8, r2
1000a91e:	4699      	mov	r9, r3
1000a920:	46a2      	mov	sl, r4
1000a922:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000a924:	432a      	orrs	r2, r5
1000a926:	d0f3      	beq.n	1000a910 <__gedf2+0x5c>
1000a928:	459a      	cmp	sl, r3
1000a92a:	d1f1      	bne.n	1000a910 <__gedf2+0x5c>
1000a92c:	42a6      	cmp	r6, r4
1000a92e:	dcef      	bgt.n	1000a910 <__gedf2+0x5c>
1000a930:	da1a      	bge.n	1000a968 <__gedf2+0xb4>
1000a932:	4650      	mov	r0, sl
1000a934:	4241      	negs	r1, r0
1000a936:	4148      	adcs	r0, r1
1000a938:	2301      	movs	r3, #1
1000a93a:	4241      	negs	r1, r0
1000a93c:	4319      	orrs	r1, r3
1000a93e:	1c08      	adds	r0, r1, #0
1000a940:	e7eb      	b.n	1000a91a <__gedf2+0x66>
1000a942:	464a      	mov	r2, r9
1000a944:	2a00      	cmp	r2, #0
1000a946:	d0e1      	beq.n	1000a90c <__gedf2+0x58>
1000a948:	4258      	negs	r0, r3
1000a94a:	4158      	adcs	r0, r3
1000a94c:	2201      	movs	r2, #1
1000a94e:	4241      	negs	r1, r0
1000a950:	4311      	orrs	r1, r2
1000a952:	1c08      	adds	r0, r1, #0
1000a954:	e7e1      	b.n	1000a91a <__gedf2+0x66>
1000a956:	1c29      	adds	r1, r5, #0
1000a958:	4311      	orrs	r1, r2
1000a95a:	d102      	bne.n	1000a962 <__gedf2+0xae>
1000a95c:	2e00      	cmp	r6, #0
1000a95e:	d0c2      	beq.n	1000a8e6 <__gedf2+0x32>
1000a960:	e7d4      	b.n	1000a90c <__gedf2+0x58>
1000a962:	2002      	movs	r0, #2
1000a964:	4240      	negs	r0, r0
1000a966:	e7d8      	b.n	1000a91a <__gedf2+0x66>
1000a968:	42af      	cmp	r7, r5
1000a96a:	d8d1      	bhi.n	1000a910 <__gedf2+0x5c>
1000a96c:	d009      	beq.n	1000a982 <__gedf2+0xce>
1000a96e:	2000      	movs	r0, #0
1000a970:	42af      	cmp	r7, r5
1000a972:	d2d2      	bcs.n	1000a91a <__gedf2+0x66>
1000a974:	4650      	mov	r0, sl
1000a976:	4241      	negs	r1, r0
1000a978:	4148      	adcs	r0, r1
1000a97a:	2301      	movs	r3, #1
1000a97c:	4240      	negs	r0, r0
1000a97e:	4318      	orrs	r0, r3
1000a980:	e7cb      	b.n	1000a91a <__gedf2+0x66>
1000a982:	45c4      	cmp	ip, r8
1000a984:	d8c4      	bhi.n	1000a910 <__gedf2+0x5c>
1000a986:	2000      	movs	r0, #0
1000a988:	45c4      	cmp	ip, r8
1000a98a:	d3f3      	bcc.n	1000a974 <__gedf2+0xc0>
1000a98c:	e7c5      	b.n	1000a91a <__gedf2+0x66>
1000a98e:	46c0      	nop			; (mov r8, r8)
1000a990:	000007ff 	.word	0x000007ff

1000a994 <__ledf2>:
1000a994:	b5f0      	push	{r4, r5, r6, r7, lr}
1000a996:	465f      	mov	r7, fp
1000a998:	464d      	mov	r5, r9
1000a99a:	4644      	mov	r4, r8
1000a99c:	4656      	mov	r6, sl
1000a99e:	4680      	mov	r8, r0
1000a9a0:	b4f0      	push	{r4, r5, r6, r7}
1000a9a2:	1c06      	adds	r6, r0, #0
1000a9a4:	0308      	lsls	r0, r1, #12
1000a9a6:	0b00      	lsrs	r0, r0, #12
1000a9a8:	4684      	mov	ip, r0
1000a9aa:	482c      	ldr	r0, [pc, #176]	; (1000aa5c <__ledf2+0xc8>)
1000a9ac:	004c      	lsls	r4, r1, #1
1000a9ae:	031f      	lsls	r7, r3, #12
1000a9b0:	005d      	lsls	r5, r3, #1
1000a9b2:	0fc9      	lsrs	r1, r1, #31
1000a9b4:	0d64      	lsrs	r4, r4, #21
1000a9b6:	468b      	mov	fp, r1
1000a9b8:	4691      	mov	r9, r2
1000a9ba:	0b3f      	lsrs	r7, r7, #12
1000a9bc:	0d6d      	lsrs	r5, r5, #21
1000a9be:	0fdb      	lsrs	r3, r3, #31
1000a9c0:	4284      	cmp	r4, r0
1000a9c2:	d012      	beq.n	1000a9ea <__ledf2+0x56>
1000a9c4:	4285      	cmp	r5, r0
1000a9c6:	d025      	beq.n	1000aa14 <__ledf2+0x80>
1000a9c8:	2c00      	cmp	r4, #0
1000a9ca:	d114      	bne.n	1000a9f6 <__ledf2+0x62>
1000a9cc:	4661      	mov	r1, ip
1000a9ce:	430e      	orrs	r6, r1
1000a9d0:	4270      	negs	r0, r6
1000a9d2:	4146      	adcs	r6, r0
1000a9d4:	2d00      	cmp	r5, #0
1000a9d6:	d035      	beq.n	1000aa44 <__ledf2+0xb0>
1000a9d8:	2e00      	cmp	r6, #0
1000a9da:	d021      	beq.n	1000aa20 <__ledf2+0x8c>
1000a9dc:	4258      	negs	r0, r3
1000a9de:	4158      	adcs	r0, r3
1000a9e0:	2101      	movs	r1, #1
1000a9e2:	4243      	negs	r3, r0
1000a9e4:	430b      	orrs	r3, r1
1000a9e6:	1c18      	adds	r0, r3, #0
1000a9e8:	e00e      	b.n	1000aa08 <__ledf2+0x74>
1000a9ea:	4661      	mov	r1, ip
1000a9ec:	2002      	movs	r0, #2
1000a9ee:	4331      	orrs	r1, r6
1000a9f0:	d10a      	bne.n	1000aa08 <__ledf2+0x74>
1000a9f2:	42a5      	cmp	r5, r4
1000a9f4:	d00e      	beq.n	1000aa14 <__ledf2+0x80>
1000a9f6:	2d00      	cmp	r5, #0
1000a9f8:	d112      	bne.n	1000aa20 <__ledf2+0x8c>
1000a9fa:	433a      	orrs	r2, r7
1000a9fc:	d110      	bne.n	1000aa20 <__ledf2+0x8c>
1000a9fe:	465b      	mov	r3, fp
1000aa00:	4259      	negs	r1, r3
1000aa02:	2301      	movs	r3, #1
1000aa04:	4319      	orrs	r1, r3
1000aa06:	1c08      	adds	r0, r1, #0
1000aa08:	bc3c      	pop	{r2, r3, r4, r5}
1000aa0a:	4690      	mov	r8, r2
1000aa0c:	4699      	mov	r9, r3
1000aa0e:	46a2      	mov	sl, r4
1000aa10:	46ab      	mov	fp, r5
1000aa12:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000aa14:	1c39      	adds	r1, r7, #0
1000aa16:	2002      	movs	r0, #2
1000aa18:	4311      	orrs	r1, r2
1000aa1a:	d1f5      	bne.n	1000aa08 <__ledf2+0x74>
1000aa1c:	2c00      	cmp	r4, #0
1000aa1e:	d0d5      	beq.n	1000a9cc <__ledf2+0x38>
1000aa20:	459b      	cmp	fp, r3
1000aa22:	d1ec      	bne.n	1000a9fe <__ledf2+0x6a>
1000aa24:	42ac      	cmp	r4, r5
1000aa26:	dcea      	bgt.n	1000a9fe <__ledf2+0x6a>
1000aa28:	db05      	blt.n	1000aa36 <__ledf2+0xa2>
1000aa2a:	45bc      	cmp	ip, r7
1000aa2c:	d8e7      	bhi.n	1000a9fe <__ledf2+0x6a>
1000aa2e:	d00f      	beq.n	1000aa50 <__ledf2+0xbc>
1000aa30:	2000      	movs	r0, #0
1000aa32:	45bc      	cmp	ip, r7
1000aa34:	d2e8      	bcs.n	1000aa08 <__ledf2+0x74>
1000aa36:	4658      	mov	r0, fp
1000aa38:	4241      	negs	r1, r0
1000aa3a:	4148      	adcs	r0, r1
1000aa3c:	4241      	negs	r1, r0
1000aa3e:	2001      	movs	r0, #1
1000aa40:	4308      	orrs	r0, r1
1000aa42:	e7e1      	b.n	1000aa08 <__ledf2+0x74>
1000aa44:	433a      	orrs	r2, r7
1000aa46:	d1c7      	bne.n	1000a9d8 <__ledf2+0x44>
1000aa48:	2000      	movs	r0, #0
1000aa4a:	2e00      	cmp	r6, #0
1000aa4c:	d1dc      	bne.n	1000aa08 <__ledf2+0x74>
1000aa4e:	e7d6      	b.n	1000a9fe <__ledf2+0x6a>
1000aa50:	45c8      	cmp	r8, r9
1000aa52:	d8d4      	bhi.n	1000a9fe <__ledf2+0x6a>
1000aa54:	2000      	movs	r0, #0
1000aa56:	45c8      	cmp	r8, r9
1000aa58:	d3ed      	bcc.n	1000aa36 <__ledf2+0xa2>
1000aa5a:	e7d5      	b.n	1000aa08 <__ledf2+0x74>
1000aa5c:	000007ff 	.word	0x000007ff

1000aa60 <__aeabi_dsub>:
1000aa60:	b5f0      	push	{r4, r5, r6, r7, lr}
1000aa62:	464d      	mov	r5, r9
1000aa64:	4644      	mov	r4, r8
1000aa66:	465f      	mov	r7, fp
1000aa68:	4656      	mov	r6, sl
1000aa6a:	b4f0      	push	{r4, r5, r6, r7}
1000aa6c:	1c0e      	adds	r6, r1, #0
1000aa6e:	1c11      	adds	r1, r2, #0
1000aa70:	0332      	lsls	r2, r6, #12
1000aa72:	0a52      	lsrs	r2, r2, #9
1000aa74:	0f47      	lsrs	r7, r0, #29
1000aa76:	4317      	orrs	r7, r2
1000aa78:	00c5      	lsls	r5, r0, #3
1000aa7a:	031a      	lsls	r2, r3, #12
1000aa7c:	0058      	lsls	r0, r3, #1
1000aa7e:	0fdb      	lsrs	r3, r3, #31
1000aa80:	4699      	mov	r9, r3
1000aa82:	0a52      	lsrs	r2, r2, #9
1000aa84:	0f4b      	lsrs	r3, r1, #29
1000aa86:	b083      	sub	sp, #12
1000aa88:	431a      	orrs	r2, r3
1000aa8a:	00cb      	lsls	r3, r1, #3
1000aa8c:	9301      	str	r3, [sp, #4]
1000aa8e:	4bcf      	ldr	r3, [pc, #828]	; (1000adcc <__aeabi_dsub+0x36c>)
1000aa90:	0074      	lsls	r4, r6, #1
1000aa92:	0ff6      	lsrs	r6, r6, #31
1000aa94:	0d64      	lsrs	r4, r4, #21
1000aa96:	46b0      	mov	r8, r6
1000aa98:	0d40      	lsrs	r0, r0, #21
1000aa9a:	4298      	cmp	r0, r3
1000aa9c:	d100      	bne.n	1000aaa0 <__aeabi_dsub+0x40>
1000aa9e:	e0e8      	b.n	1000ac72 <__aeabi_dsub+0x212>
1000aaa0:	2301      	movs	r3, #1
1000aaa2:	4649      	mov	r1, r9
1000aaa4:	4059      	eors	r1, r3
1000aaa6:	1c0b      	adds	r3, r1, #0
1000aaa8:	429e      	cmp	r6, r3
1000aaaa:	d100      	bne.n	1000aaae <__aeabi_dsub+0x4e>
1000aaac:	e0b1      	b.n	1000ac12 <__aeabi_dsub+0x1b2>
1000aaae:	1a26      	subs	r6, r4, r0
1000aab0:	2e00      	cmp	r6, #0
1000aab2:	dc00      	bgt.n	1000aab6 <__aeabi_dsub+0x56>
1000aab4:	e11c      	b.n	1000acf0 <__aeabi_dsub+0x290>
1000aab6:	2800      	cmp	r0, #0
1000aab8:	d142      	bne.n	1000ab40 <__aeabi_dsub+0xe0>
1000aaba:	1c13      	adds	r3, r2, #0
1000aabc:	9901      	ldr	r1, [sp, #4]
1000aabe:	430b      	orrs	r3, r1
1000aac0:	d000      	beq.n	1000aac4 <__aeabi_dsub+0x64>
1000aac2:	e0e6      	b.n	1000ac92 <__aeabi_dsub+0x232>
1000aac4:	076b      	lsls	r3, r5, #29
1000aac6:	d100      	bne.n	1000aaca <__aeabi_dsub+0x6a>
1000aac8:	e08e      	b.n	1000abe8 <__aeabi_dsub+0x188>
1000aaca:	230f      	movs	r3, #15
1000aacc:	402b      	ands	r3, r5
1000aace:	2b04      	cmp	r3, #4
1000aad0:	d100      	bne.n	1000aad4 <__aeabi_dsub+0x74>
1000aad2:	e089      	b.n	1000abe8 <__aeabi_dsub+0x188>
1000aad4:	1d2a      	adds	r2, r5, #4
1000aad6:	42aa      	cmp	r2, r5
1000aad8:	41ad      	sbcs	r5, r5
1000aada:	2380      	movs	r3, #128	; 0x80
1000aadc:	2601      	movs	r6, #1
1000aade:	4641      	mov	r1, r8
1000aae0:	426d      	negs	r5, r5
1000aae2:	197f      	adds	r7, r7, r5
1000aae4:	041b      	lsls	r3, r3, #16
1000aae6:	403b      	ands	r3, r7
1000aae8:	400e      	ands	r6, r1
1000aaea:	1c15      	adds	r5, r2, #0
1000aaec:	2b00      	cmp	r3, #0
1000aaee:	d100      	bne.n	1000aaf2 <__aeabi_dsub+0x92>
1000aaf0:	e083      	b.n	1000abfa <__aeabi_dsub+0x19a>
1000aaf2:	4bb6      	ldr	r3, [pc, #728]	; (1000adcc <__aeabi_dsub+0x36c>)
1000aaf4:	3401      	adds	r4, #1
1000aaf6:	429c      	cmp	r4, r3
1000aaf8:	d100      	bne.n	1000aafc <__aeabi_dsub+0x9c>
1000aafa:	e116      	b.n	1000ad2a <__aeabi_dsub+0x2ca>
1000aafc:	1c3a      	adds	r2, r7, #0
1000aafe:	4bb4      	ldr	r3, [pc, #720]	; (1000add0 <__aeabi_dsub+0x370>)
1000ab00:	08ed      	lsrs	r5, r5, #3
1000ab02:	401a      	ands	r2, r3
1000ab04:	0750      	lsls	r0, r2, #29
1000ab06:	0564      	lsls	r4, r4, #21
1000ab08:	0252      	lsls	r2, r2, #9
1000ab0a:	4305      	orrs	r5, r0
1000ab0c:	0b12      	lsrs	r2, r2, #12
1000ab0e:	0d64      	lsrs	r4, r4, #21
1000ab10:	2100      	movs	r1, #0
1000ab12:	0312      	lsls	r2, r2, #12
1000ab14:	0d0b      	lsrs	r3, r1, #20
1000ab16:	051b      	lsls	r3, r3, #20
1000ab18:	0564      	lsls	r4, r4, #21
1000ab1a:	0b12      	lsrs	r2, r2, #12
1000ab1c:	431a      	orrs	r2, r3
1000ab1e:	0863      	lsrs	r3, r4, #1
1000ab20:	4cac      	ldr	r4, [pc, #688]	; (1000add4 <__aeabi_dsub+0x374>)
1000ab22:	07f6      	lsls	r6, r6, #31
1000ab24:	4014      	ands	r4, r2
1000ab26:	431c      	orrs	r4, r3
1000ab28:	0064      	lsls	r4, r4, #1
1000ab2a:	0864      	lsrs	r4, r4, #1
1000ab2c:	4334      	orrs	r4, r6
1000ab2e:	1c28      	adds	r0, r5, #0
1000ab30:	1c21      	adds	r1, r4, #0
1000ab32:	b003      	add	sp, #12
1000ab34:	bc3c      	pop	{r2, r3, r4, r5}
1000ab36:	4690      	mov	r8, r2
1000ab38:	4699      	mov	r9, r3
1000ab3a:	46a2      	mov	sl, r4
1000ab3c:	46ab      	mov	fp, r5
1000ab3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000ab40:	4ba2      	ldr	r3, [pc, #648]	; (1000adcc <__aeabi_dsub+0x36c>)
1000ab42:	429c      	cmp	r4, r3
1000ab44:	d0be      	beq.n	1000aac4 <__aeabi_dsub+0x64>
1000ab46:	2380      	movs	r3, #128	; 0x80
1000ab48:	041b      	lsls	r3, r3, #16
1000ab4a:	431a      	orrs	r2, r3
1000ab4c:	2e38      	cmp	r6, #56	; 0x38
1000ab4e:	dd00      	ble.n	1000ab52 <__aeabi_dsub+0xf2>
1000ab50:	e103      	b.n	1000ad5a <__aeabi_dsub+0x2fa>
1000ab52:	2e1f      	cmp	r6, #31
1000ab54:	dd00      	ble.n	1000ab58 <__aeabi_dsub+0xf8>
1000ab56:	e13f      	b.n	1000add8 <__aeabi_dsub+0x378>
1000ab58:	2020      	movs	r0, #32
1000ab5a:	1b83      	subs	r3, r0, r6
1000ab5c:	4699      	mov	r9, r3
1000ab5e:	1c13      	adds	r3, r2, #0
1000ab60:	4649      	mov	r1, r9
1000ab62:	408b      	lsls	r3, r1
1000ab64:	469c      	mov	ip, r3
1000ab66:	9b01      	ldr	r3, [sp, #4]
1000ab68:	4660      	mov	r0, ip
1000ab6a:	40f3      	lsrs	r3, r6
1000ab6c:	4303      	orrs	r3, r0
1000ab6e:	9801      	ldr	r0, [sp, #4]
1000ab70:	40f2      	lsrs	r2, r6
1000ab72:	4088      	lsls	r0, r1
1000ab74:	1c01      	adds	r1, r0, #0
1000ab76:	1e48      	subs	r0, r1, #1
1000ab78:	4181      	sbcs	r1, r0
1000ab7a:	430b      	orrs	r3, r1
1000ab7c:	1aeb      	subs	r3, r5, r3
1000ab7e:	429d      	cmp	r5, r3
1000ab80:	4180      	sbcs	r0, r0
1000ab82:	1c1d      	adds	r5, r3, #0
1000ab84:	1aba      	subs	r2, r7, r2
1000ab86:	4240      	negs	r0, r0
1000ab88:	1a17      	subs	r7, r2, r0
1000ab8a:	023b      	lsls	r3, r7, #8
1000ab8c:	d400      	bmi.n	1000ab90 <__aeabi_dsub+0x130>
1000ab8e:	e0a8      	b.n	1000ace2 <__aeabi_dsub+0x282>
1000ab90:	027a      	lsls	r2, r7, #9
1000ab92:	0a56      	lsrs	r6, r2, #9
1000ab94:	2e00      	cmp	r6, #0
1000ab96:	d100      	bne.n	1000ab9a <__aeabi_dsub+0x13a>
1000ab98:	e0ca      	b.n	1000ad30 <__aeabi_dsub+0x2d0>
1000ab9a:	1c30      	adds	r0, r6, #0
1000ab9c:	f7fd f9f4 	bl	10007f88 <__clzsi2>
1000aba0:	1c03      	adds	r3, r0, #0
1000aba2:	3b08      	subs	r3, #8
1000aba4:	2b1f      	cmp	r3, #31
1000aba6:	dd00      	ble.n	1000abaa <__aeabi_dsub+0x14a>
1000aba8:	e0cb      	b.n	1000ad42 <__aeabi_dsub+0x2e2>
1000abaa:	2228      	movs	r2, #40	; 0x28
1000abac:	1c29      	adds	r1, r5, #0
1000abae:	1a12      	subs	r2, r2, r0
1000abb0:	40d1      	lsrs	r1, r2
1000abb2:	409e      	lsls	r6, r3
1000abb4:	1c0a      	adds	r2, r1, #0
1000abb6:	409d      	lsls	r5, r3
1000abb8:	4332      	orrs	r2, r6
1000abba:	429c      	cmp	r4, r3
1000abbc:	dd00      	ble.n	1000abc0 <__aeabi_dsub+0x160>
1000abbe:	e0c8      	b.n	1000ad52 <__aeabi_dsub+0x2f2>
1000abc0:	1b1c      	subs	r4, r3, r4
1000abc2:	1c67      	adds	r7, r4, #1
1000abc4:	2f1f      	cmp	r7, #31
1000abc6:	dd00      	ble.n	1000abca <__aeabi_dsub+0x16a>
1000abc8:	e0ed      	b.n	1000ada6 <__aeabi_dsub+0x346>
1000abca:	231f      	movs	r3, #31
1000abcc:	1c29      	adds	r1, r5, #0
1000abce:	1b1c      	subs	r4, r3, r4
1000abd0:	1c13      	adds	r3, r2, #0
1000abd2:	40a5      	lsls	r5, r4
1000abd4:	40a3      	lsls	r3, r4
1000abd6:	40f9      	lsrs	r1, r7
1000abd8:	1e6c      	subs	r4, r5, #1
1000abda:	41a5      	sbcs	r5, r4
1000abdc:	40fa      	lsrs	r2, r7
1000abde:	4319      	orrs	r1, r3
1000abe0:	430d      	orrs	r5, r1
1000abe2:	1c17      	adds	r7, r2, #0
1000abe4:	2400      	movs	r4, #0
1000abe6:	e76d      	b.n	1000aac4 <__aeabi_dsub+0x64>
1000abe8:	2380      	movs	r3, #128	; 0x80
1000abea:	2601      	movs	r6, #1
1000abec:	4642      	mov	r2, r8
1000abee:	041b      	lsls	r3, r3, #16
1000abf0:	403b      	ands	r3, r7
1000abf2:	4016      	ands	r6, r2
1000abf4:	2b00      	cmp	r3, #0
1000abf6:	d000      	beq.n	1000abfa <__aeabi_dsub+0x19a>
1000abf8:	e77b      	b.n	1000aaf2 <__aeabi_dsub+0x92>
1000abfa:	4b74      	ldr	r3, [pc, #464]	; (1000adcc <__aeabi_dsub+0x36c>)
1000abfc:	08ed      	lsrs	r5, r5, #3
1000abfe:	0778      	lsls	r0, r7, #29
1000ac00:	4305      	orrs	r5, r0
1000ac02:	08fa      	lsrs	r2, r7, #3
1000ac04:	429c      	cmp	r4, r3
1000ac06:	d03b      	beq.n	1000ac80 <__aeabi_dsub+0x220>
1000ac08:	0312      	lsls	r2, r2, #12
1000ac0a:	0564      	lsls	r4, r4, #21
1000ac0c:	0b12      	lsrs	r2, r2, #12
1000ac0e:	0d64      	lsrs	r4, r4, #21
1000ac10:	e77e      	b.n	1000ab10 <__aeabi_dsub+0xb0>
1000ac12:	1a23      	subs	r3, r4, r0
1000ac14:	469a      	mov	sl, r3
1000ac16:	2b00      	cmp	r3, #0
1000ac18:	dc00      	bgt.n	1000ac1c <__aeabi_dsub+0x1bc>
1000ac1a:	e0a5      	b.n	1000ad68 <__aeabi_dsub+0x308>
1000ac1c:	2800      	cmp	r0, #0
1000ac1e:	d044      	beq.n	1000acaa <__aeabi_dsub+0x24a>
1000ac20:	486a      	ldr	r0, [pc, #424]	; (1000adcc <__aeabi_dsub+0x36c>)
1000ac22:	4284      	cmp	r4, r0
1000ac24:	d100      	bne.n	1000ac28 <__aeabi_dsub+0x1c8>
1000ac26:	e74d      	b.n	1000aac4 <__aeabi_dsub+0x64>
1000ac28:	2080      	movs	r0, #128	; 0x80
1000ac2a:	0400      	lsls	r0, r0, #16
1000ac2c:	4302      	orrs	r2, r0
1000ac2e:	4653      	mov	r3, sl
1000ac30:	2b38      	cmp	r3, #56	; 0x38
1000ac32:	dc00      	bgt.n	1000ac36 <__aeabi_dsub+0x1d6>
1000ac34:	e11c      	b.n	1000ae70 <__aeabi_dsub+0x410>
1000ac36:	9b01      	ldr	r3, [sp, #4]
1000ac38:	431a      	orrs	r2, r3
1000ac3a:	1e51      	subs	r1, r2, #1
1000ac3c:	418a      	sbcs	r2, r1
1000ac3e:	b2d1      	uxtb	r1, r2
1000ac40:	2200      	movs	r2, #0
1000ac42:	1949      	adds	r1, r1, r5
1000ac44:	42a9      	cmp	r1, r5
1000ac46:	4180      	sbcs	r0, r0
1000ac48:	1c0d      	adds	r5, r1, #0
1000ac4a:	19d2      	adds	r2, r2, r7
1000ac4c:	4240      	negs	r0, r0
1000ac4e:	1817      	adds	r7, r2, r0
1000ac50:	023b      	lsls	r3, r7, #8
1000ac52:	d546      	bpl.n	1000ace2 <__aeabi_dsub+0x282>
1000ac54:	4b5d      	ldr	r3, [pc, #372]	; (1000adcc <__aeabi_dsub+0x36c>)
1000ac56:	3401      	adds	r4, #1
1000ac58:	429c      	cmp	r4, r3
1000ac5a:	d100      	bne.n	1000ac5e <__aeabi_dsub+0x1fe>
1000ac5c:	e169      	b.n	1000af32 <__aeabi_dsub+0x4d2>
1000ac5e:	2001      	movs	r0, #1
1000ac60:	4a5b      	ldr	r2, [pc, #364]	; (1000add0 <__aeabi_dsub+0x370>)
1000ac62:	086b      	lsrs	r3, r5, #1
1000ac64:	403a      	ands	r2, r7
1000ac66:	4028      	ands	r0, r5
1000ac68:	4318      	orrs	r0, r3
1000ac6a:	07d5      	lsls	r5, r2, #31
1000ac6c:	4305      	orrs	r5, r0
1000ac6e:	0857      	lsrs	r7, r2, #1
1000ac70:	e728      	b.n	1000aac4 <__aeabi_dsub+0x64>
1000ac72:	1c13      	adds	r3, r2, #0
1000ac74:	9901      	ldr	r1, [sp, #4]
1000ac76:	430b      	orrs	r3, r1
1000ac78:	d100      	bne.n	1000ac7c <__aeabi_dsub+0x21c>
1000ac7a:	e711      	b.n	1000aaa0 <__aeabi_dsub+0x40>
1000ac7c:	464b      	mov	r3, r9
1000ac7e:	e713      	b.n	1000aaa8 <__aeabi_dsub+0x48>
1000ac80:	1c2b      	adds	r3, r5, #0
1000ac82:	4313      	orrs	r3, r2
1000ac84:	d051      	beq.n	1000ad2a <__aeabi_dsub+0x2ca>
1000ac86:	2380      	movs	r3, #128	; 0x80
1000ac88:	031b      	lsls	r3, r3, #12
1000ac8a:	431a      	orrs	r2, r3
1000ac8c:	0312      	lsls	r2, r2, #12
1000ac8e:	0b12      	lsrs	r2, r2, #12
1000ac90:	e73e      	b.n	1000ab10 <__aeabi_dsub+0xb0>
1000ac92:	3e01      	subs	r6, #1
1000ac94:	2e00      	cmp	r6, #0
1000ac96:	d000      	beq.n	1000ac9a <__aeabi_dsub+0x23a>
1000ac98:	e080      	b.n	1000ad9c <__aeabi_dsub+0x33c>
1000ac9a:	1a69      	subs	r1, r5, r1
1000ac9c:	428d      	cmp	r5, r1
1000ac9e:	419b      	sbcs	r3, r3
1000aca0:	1aba      	subs	r2, r7, r2
1000aca2:	425b      	negs	r3, r3
1000aca4:	1ad7      	subs	r7, r2, r3
1000aca6:	1c0d      	adds	r5, r1, #0
1000aca8:	e76f      	b.n	1000ab8a <__aeabi_dsub+0x12a>
1000acaa:	1c10      	adds	r0, r2, #0
1000acac:	9b01      	ldr	r3, [sp, #4]
1000acae:	4318      	orrs	r0, r3
1000acb0:	d100      	bne.n	1000acb4 <__aeabi_dsub+0x254>
1000acb2:	e707      	b.n	1000aac4 <__aeabi_dsub+0x64>
1000acb4:	2301      	movs	r3, #1
1000acb6:	425b      	negs	r3, r3
1000acb8:	469c      	mov	ip, r3
1000acba:	44e2      	add	sl, ip
1000acbc:	4653      	mov	r3, sl
1000acbe:	2b00      	cmp	r3, #0
1000acc0:	d000      	beq.n	1000acc4 <__aeabi_dsub+0x264>
1000acc2:	e102      	b.n	1000aeca <__aeabi_dsub+0x46a>
1000acc4:	9b01      	ldr	r3, [sp, #4]
1000acc6:	19d2      	adds	r2, r2, r7
1000acc8:	1959      	adds	r1, r3, r5
1000acca:	42a9      	cmp	r1, r5
1000accc:	419b      	sbcs	r3, r3
1000acce:	425b      	negs	r3, r3
1000acd0:	18d7      	adds	r7, r2, r3
1000acd2:	1c0d      	adds	r5, r1, #0
1000acd4:	e7bc      	b.n	1000ac50 <__aeabi_dsub+0x1f0>
1000acd6:	4663      	mov	r3, ip
1000acd8:	4303      	orrs	r3, r0
1000acda:	d100      	bne.n	1000acde <__aeabi_dsub+0x27e>
1000acdc:	e128      	b.n	1000af30 <__aeabi_dsub+0x4d0>
1000acde:	1c07      	adds	r7, r0, #0
1000ace0:	4665      	mov	r5, ip
1000ace2:	076b      	lsls	r3, r5, #29
1000ace4:	d000      	beq.n	1000ace8 <__aeabi_dsub+0x288>
1000ace6:	e6f0      	b.n	1000aaca <__aeabi_dsub+0x6a>
1000ace8:	2601      	movs	r6, #1
1000acea:	4643      	mov	r3, r8
1000acec:	401e      	ands	r6, r3
1000acee:	e784      	b.n	1000abfa <__aeabi_dsub+0x19a>
1000acf0:	2e00      	cmp	r6, #0
1000acf2:	d000      	beq.n	1000acf6 <__aeabi_dsub+0x296>
1000acf4:	e081      	b.n	1000adfa <__aeabi_dsub+0x39a>
1000acf6:	1c60      	adds	r0, r4, #1
1000acf8:	0540      	lsls	r0, r0, #21
1000acfa:	0d40      	lsrs	r0, r0, #21
1000acfc:	2801      	cmp	r0, #1
1000acfe:	dc00      	bgt.n	1000ad02 <__aeabi_dsub+0x2a2>
1000ad00:	e107      	b.n	1000af12 <__aeabi_dsub+0x4b2>
1000ad02:	9901      	ldr	r1, [sp, #4]
1000ad04:	1a68      	subs	r0, r5, r1
1000ad06:	4684      	mov	ip, r0
1000ad08:	4565      	cmp	r5, ip
1000ad0a:	41b6      	sbcs	r6, r6
1000ad0c:	1ab8      	subs	r0, r7, r2
1000ad0e:	4276      	negs	r6, r6
1000ad10:	1b86      	subs	r6, r0, r6
1000ad12:	0230      	lsls	r0, r6, #8
1000ad14:	d400      	bmi.n	1000ad18 <__aeabi_dsub+0x2b8>
1000ad16:	e0a1      	b.n	1000ae5c <__aeabi_dsub+0x3fc>
1000ad18:	468c      	mov	ip, r1
1000ad1a:	1b4d      	subs	r5, r1, r5
1000ad1c:	45ac      	cmp	ip, r5
1000ad1e:	4189      	sbcs	r1, r1
1000ad20:	1bd2      	subs	r2, r2, r7
1000ad22:	4249      	negs	r1, r1
1000ad24:	1a56      	subs	r6, r2, r1
1000ad26:	4698      	mov	r8, r3
1000ad28:	e734      	b.n	1000ab94 <__aeabi_dsub+0x134>
1000ad2a:	2200      	movs	r2, #0
1000ad2c:	2500      	movs	r5, #0
1000ad2e:	e6ef      	b.n	1000ab10 <__aeabi_dsub+0xb0>
1000ad30:	1c28      	adds	r0, r5, #0
1000ad32:	f7fd f929 	bl	10007f88 <__clzsi2>
1000ad36:	3020      	adds	r0, #32
1000ad38:	1c03      	adds	r3, r0, #0
1000ad3a:	3b08      	subs	r3, #8
1000ad3c:	2b1f      	cmp	r3, #31
1000ad3e:	dc00      	bgt.n	1000ad42 <__aeabi_dsub+0x2e2>
1000ad40:	e733      	b.n	1000abaa <__aeabi_dsub+0x14a>
1000ad42:	1c02      	adds	r2, r0, #0
1000ad44:	3a28      	subs	r2, #40	; 0x28
1000ad46:	4095      	lsls	r5, r2
1000ad48:	1c2a      	adds	r2, r5, #0
1000ad4a:	2500      	movs	r5, #0
1000ad4c:	429c      	cmp	r4, r3
1000ad4e:	dc00      	bgt.n	1000ad52 <__aeabi_dsub+0x2f2>
1000ad50:	e736      	b.n	1000abc0 <__aeabi_dsub+0x160>
1000ad52:	4f1f      	ldr	r7, [pc, #124]	; (1000add0 <__aeabi_dsub+0x370>)
1000ad54:	1ae4      	subs	r4, r4, r3
1000ad56:	4017      	ands	r7, r2
1000ad58:	e6b4      	b.n	1000aac4 <__aeabi_dsub+0x64>
1000ad5a:	9b01      	ldr	r3, [sp, #4]
1000ad5c:	431a      	orrs	r2, r3
1000ad5e:	1e51      	subs	r1, r2, #1
1000ad60:	418a      	sbcs	r2, r1
1000ad62:	b2d3      	uxtb	r3, r2
1000ad64:	2200      	movs	r2, #0
1000ad66:	e709      	b.n	1000ab7c <__aeabi_dsub+0x11c>
1000ad68:	2b00      	cmp	r3, #0
1000ad6a:	d000      	beq.n	1000ad6e <__aeabi_dsub+0x30e>
1000ad6c:	e101      	b.n	1000af72 <__aeabi_dsub+0x512>
1000ad6e:	1c60      	adds	r0, r4, #1
1000ad70:	0543      	lsls	r3, r0, #21
1000ad72:	0d5b      	lsrs	r3, r3, #21
1000ad74:	2b01      	cmp	r3, #1
1000ad76:	dc00      	bgt.n	1000ad7a <__aeabi_dsub+0x31a>
1000ad78:	e0b0      	b.n	1000aedc <__aeabi_dsub+0x47c>
1000ad7a:	4b14      	ldr	r3, [pc, #80]	; (1000adcc <__aeabi_dsub+0x36c>)
1000ad7c:	4298      	cmp	r0, r3
1000ad7e:	d100      	bne.n	1000ad82 <__aeabi_dsub+0x322>
1000ad80:	e11e      	b.n	1000afc0 <__aeabi_dsub+0x560>
1000ad82:	9b01      	ldr	r3, [sp, #4]
1000ad84:	19d2      	adds	r2, r2, r7
1000ad86:	1959      	adds	r1, r3, r5
1000ad88:	42a9      	cmp	r1, r5
1000ad8a:	419b      	sbcs	r3, r3
1000ad8c:	425b      	negs	r3, r3
1000ad8e:	18d2      	adds	r2, r2, r3
1000ad90:	0849      	lsrs	r1, r1, #1
1000ad92:	07d5      	lsls	r5, r2, #31
1000ad94:	430d      	orrs	r5, r1
1000ad96:	0857      	lsrs	r7, r2, #1
1000ad98:	1c04      	adds	r4, r0, #0
1000ad9a:	e693      	b.n	1000aac4 <__aeabi_dsub+0x64>
1000ad9c:	4b0b      	ldr	r3, [pc, #44]	; (1000adcc <__aeabi_dsub+0x36c>)
1000ad9e:	429c      	cmp	r4, r3
1000ada0:	d000      	beq.n	1000ada4 <__aeabi_dsub+0x344>
1000ada2:	e6d3      	b.n	1000ab4c <__aeabi_dsub+0xec>
1000ada4:	e68e      	b.n	1000aac4 <__aeabi_dsub+0x64>
1000ada6:	1c21      	adds	r1, r4, #0
1000ada8:	1c13      	adds	r3, r2, #0
1000adaa:	391f      	subs	r1, #31
1000adac:	40cb      	lsrs	r3, r1
1000adae:	1c19      	adds	r1, r3, #0
1000adb0:	2f20      	cmp	r7, #32
1000adb2:	d100      	bne.n	1000adb6 <__aeabi_dsub+0x356>
1000adb4:	e08e      	b.n	1000aed4 <__aeabi_dsub+0x474>
1000adb6:	233f      	movs	r3, #63	; 0x3f
1000adb8:	1b1c      	subs	r4, r3, r4
1000adba:	40a2      	lsls	r2, r4
1000adbc:	4315      	orrs	r5, r2
1000adbe:	1e6a      	subs	r2, r5, #1
1000adc0:	4195      	sbcs	r5, r2
1000adc2:	2700      	movs	r7, #0
1000adc4:	430d      	orrs	r5, r1
1000adc6:	2400      	movs	r4, #0
1000adc8:	e78b      	b.n	1000ace2 <__aeabi_dsub+0x282>
1000adca:	46c0      	nop			; (mov r8, r8)
1000adcc:	000007ff 	.word	0x000007ff
1000add0:	ff7fffff 	.word	0xff7fffff
1000add4:	800fffff 	.word	0x800fffff
1000add8:	1c33      	adds	r3, r6, #0
1000adda:	1c10      	adds	r0, r2, #0
1000addc:	3b20      	subs	r3, #32
1000adde:	40d8      	lsrs	r0, r3
1000ade0:	2e20      	cmp	r6, #32
1000ade2:	d079      	beq.n	1000aed8 <__aeabi_dsub+0x478>
1000ade4:	2340      	movs	r3, #64	; 0x40
1000ade6:	1b9b      	subs	r3, r3, r6
1000ade8:	409a      	lsls	r2, r3
1000adea:	1c13      	adds	r3, r2, #0
1000adec:	9a01      	ldr	r2, [sp, #4]
1000adee:	4313      	orrs	r3, r2
1000adf0:	1e59      	subs	r1, r3, #1
1000adf2:	418b      	sbcs	r3, r1
1000adf4:	2200      	movs	r2, #0
1000adf6:	4303      	orrs	r3, r0
1000adf8:	e6c0      	b.n	1000ab7c <__aeabi_dsub+0x11c>
1000adfa:	2c00      	cmp	r4, #0
1000adfc:	d053      	beq.n	1000aea6 <__aeabi_dsub+0x446>
1000adfe:	4cc7      	ldr	r4, [pc, #796]	; (1000b11c <__aeabi_dsub+0x6bc>)
1000ae00:	42a0      	cmp	r0, r4
1000ae02:	d100      	bne.n	1000ae06 <__aeabi_dsub+0x3a6>
1000ae04:	e0b0      	b.n	1000af68 <__aeabi_dsub+0x508>
1000ae06:	2480      	movs	r4, #128	; 0x80
1000ae08:	4271      	negs	r1, r6
1000ae0a:	4689      	mov	r9, r1
1000ae0c:	0424      	lsls	r4, r4, #16
1000ae0e:	4327      	orrs	r7, r4
1000ae10:	4649      	mov	r1, r9
1000ae12:	2938      	cmp	r1, #56	; 0x38
1000ae14:	dd00      	ble.n	1000ae18 <__aeabi_dsub+0x3b8>
1000ae16:	e0cd      	b.n	1000afb4 <__aeabi_dsub+0x554>
1000ae18:	291f      	cmp	r1, #31
1000ae1a:	dd00      	ble.n	1000ae1e <__aeabi_dsub+0x3be>
1000ae1c:	e159      	b.n	1000b0d2 <__aeabi_dsub+0x672>
1000ae1e:	2420      	movs	r4, #32
1000ae20:	1c3e      	adds	r6, r7, #0
1000ae22:	1a61      	subs	r1, r4, r1
1000ae24:	408e      	lsls	r6, r1
1000ae26:	468a      	mov	sl, r1
1000ae28:	46b0      	mov	r8, r6
1000ae2a:	4649      	mov	r1, r9
1000ae2c:	1c2e      	adds	r6, r5, #0
1000ae2e:	40ce      	lsrs	r6, r1
1000ae30:	4651      	mov	r1, sl
1000ae32:	46b4      	mov	ip, r6
1000ae34:	408d      	lsls	r5, r1
1000ae36:	4664      	mov	r4, ip
1000ae38:	4646      	mov	r6, r8
1000ae3a:	4649      	mov	r1, r9
1000ae3c:	4326      	orrs	r6, r4
1000ae3e:	1e6c      	subs	r4, r5, #1
1000ae40:	41a5      	sbcs	r5, r4
1000ae42:	40cf      	lsrs	r7, r1
1000ae44:	4335      	orrs	r5, r6
1000ae46:	9901      	ldr	r1, [sp, #4]
1000ae48:	1bd7      	subs	r7, r2, r7
1000ae4a:	468c      	mov	ip, r1
1000ae4c:	1b4d      	subs	r5, r1, r5
1000ae4e:	45ac      	cmp	ip, r5
1000ae50:	4192      	sbcs	r2, r2
1000ae52:	4252      	negs	r2, r2
1000ae54:	1abf      	subs	r7, r7, r2
1000ae56:	1c04      	adds	r4, r0, #0
1000ae58:	4698      	mov	r8, r3
1000ae5a:	e696      	b.n	1000ab8a <__aeabi_dsub+0x12a>
1000ae5c:	4663      	mov	r3, ip
1000ae5e:	4665      	mov	r5, ip
1000ae60:	4333      	orrs	r3, r6
1000ae62:	d000      	beq.n	1000ae66 <__aeabi_dsub+0x406>
1000ae64:	e696      	b.n	1000ab94 <__aeabi_dsub+0x134>
1000ae66:	2600      	movs	r6, #0
1000ae68:	2700      	movs	r7, #0
1000ae6a:	2400      	movs	r4, #0
1000ae6c:	2500      	movs	r5, #0
1000ae6e:	e6c4      	b.n	1000abfa <__aeabi_dsub+0x19a>
1000ae70:	2b1f      	cmp	r3, #31
1000ae72:	dc61      	bgt.n	1000af38 <__aeabi_dsub+0x4d8>
1000ae74:	2020      	movs	r0, #32
1000ae76:	1ac3      	subs	r3, r0, r3
1000ae78:	469b      	mov	fp, r3
1000ae7a:	1c13      	adds	r3, r2, #0
1000ae7c:	4659      	mov	r1, fp
1000ae7e:	408b      	lsls	r3, r1
1000ae80:	4651      	mov	r1, sl
1000ae82:	4699      	mov	r9, r3
1000ae84:	9b01      	ldr	r3, [sp, #4]
1000ae86:	40cb      	lsrs	r3, r1
1000ae88:	469c      	mov	ip, r3
1000ae8a:	464b      	mov	r3, r9
1000ae8c:	4660      	mov	r0, ip
1000ae8e:	4303      	orrs	r3, r0
1000ae90:	469c      	mov	ip, r3
1000ae92:	465b      	mov	r3, fp
1000ae94:	9901      	ldr	r1, [sp, #4]
1000ae96:	4099      	lsls	r1, r3
1000ae98:	4663      	mov	r3, ip
1000ae9a:	1e48      	subs	r0, r1, #1
1000ae9c:	4181      	sbcs	r1, r0
1000ae9e:	4319      	orrs	r1, r3
1000aea0:	4653      	mov	r3, sl
1000aea2:	40da      	lsrs	r2, r3
1000aea4:	e6cd      	b.n	1000ac42 <__aeabi_dsub+0x1e2>
1000aea6:	1c3c      	adds	r4, r7, #0
1000aea8:	432c      	orrs	r4, r5
1000aeaa:	d05d      	beq.n	1000af68 <__aeabi_dsub+0x508>
1000aeac:	43f1      	mvns	r1, r6
1000aeae:	4689      	mov	r9, r1
1000aeb0:	2900      	cmp	r1, #0
1000aeb2:	d155      	bne.n	1000af60 <__aeabi_dsub+0x500>
1000aeb4:	9901      	ldr	r1, [sp, #4]
1000aeb6:	1bd2      	subs	r2, r2, r7
1000aeb8:	468c      	mov	ip, r1
1000aeba:	1b4d      	subs	r5, r1, r5
1000aebc:	45ac      	cmp	ip, r5
1000aebe:	4189      	sbcs	r1, r1
1000aec0:	4249      	negs	r1, r1
1000aec2:	1a57      	subs	r7, r2, r1
1000aec4:	1c04      	adds	r4, r0, #0
1000aec6:	4698      	mov	r8, r3
1000aec8:	e65f      	b.n	1000ab8a <__aeabi_dsub+0x12a>
1000aeca:	4894      	ldr	r0, [pc, #592]	; (1000b11c <__aeabi_dsub+0x6bc>)
1000aecc:	4284      	cmp	r4, r0
1000aece:	d000      	beq.n	1000aed2 <__aeabi_dsub+0x472>
1000aed0:	e6ad      	b.n	1000ac2e <__aeabi_dsub+0x1ce>
1000aed2:	e5f7      	b.n	1000aac4 <__aeabi_dsub+0x64>
1000aed4:	2200      	movs	r2, #0
1000aed6:	e771      	b.n	1000adbc <__aeabi_dsub+0x35c>
1000aed8:	2300      	movs	r3, #0
1000aeda:	e787      	b.n	1000adec <__aeabi_dsub+0x38c>
1000aedc:	1c3b      	adds	r3, r7, #0
1000aede:	432b      	orrs	r3, r5
1000aee0:	2c00      	cmp	r4, #0
1000aee2:	d000      	beq.n	1000aee6 <__aeabi_dsub+0x486>
1000aee4:	e0da      	b.n	1000b09c <__aeabi_dsub+0x63c>
1000aee6:	2b00      	cmp	r3, #0
1000aee8:	d100      	bne.n	1000aeec <__aeabi_dsub+0x48c>
1000aeea:	e113      	b.n	1000b114 <__aeabi_dsub+0x6b4>
1000aeec:	1c13      	adds	r3, r2, #0
1000aeee:	9901      	ldr	r1, [sp, #4]
1000aef0:	430b      	orrs	r3, r1
1000aef2:	d100      	bne.n	1000aef6 <__aeabi_dsub+0x496>
1000aef4:	e5e6      	b.n	1000aac4 <__aeabi_dsub+0x64>
1000aef6:	1949      	adds	r1, r1, r5
1000aef8:	42a9      	cmp	r1, r5
1000aefa:	419b      	sbcs	r3, r3
1000aefc:	19d2      	adds	r2, r2, r7
1000aefe:	425b      	negs	r3, r3
1000af00:	18d7      	adds	r7, r2, r3
1000af02:	023b      	lsls	r3, r7, #8
1000af04:	d400      	bmi.n	1000af08 <__aeabi_dsub+0x4a8>
1000af06:	e121      	b.n	1000b14c <__aeabi_dsub+0x6ec>
1000af08:	4b85      	ldr	r3, [pc, #532]	; (1000b120 <__aeabi_dsub+0x6c0>)
1000af0a:	1c0d      	adds	r5, r1, #0
1000af0c:	401f      	ands	r7, r3
1000af0e:	1c04      	adds	r4, r0, #0
1000af10:	e5d8      	b.n	1000aac4 <__aeabi_dsub+0x64>
1000af12:	1c38      	adds	r0, r7, #0
1000af14:	4328      	orrs	r0, r5
1000af16:	2c00      	cmp	r4, #0
1000af18:	d140      	bne.n	1000af9c <__aeabi_dsub+0x53c>
1000af1a:	2800      	cmp	r0, #0
1000af1c:	d000      	beq.n	1000af20 <__aeabi_dsub+0x4c0>
1000af1e:	e083      	b.n	1000b028 <__aeabi_dsub+0x5c8>
1000af20:	1c10      	adds	r0, r2, #0
1000af22:	9901      	ldr	r1, [sp, #4]
1000af24:	4308      	orrs	r0, r1
1000af26:	d003      	beq.n	1000af30 <__aeabi_dsub+0x4d0>
1000af28:	1c17      	adds	r7, r2, #0
1000af2a:	1c0d      	adds	r5, r1, #0
1000af2c:	4698      	mov	r8, r3
1000af2e:	e5c9      	b.n	1000aac4 <__aeabi_dsub+0x64>
1000af30:	2600      	movs	r6, #0
1000af32:	2700      	movs	r7, #0
1000af34:	2500      	movs	r5, #0
1000af36:	e660      	b.n	1000abfa <__aeabi_dsub+0x19a>
1000af38:	4650      	mov	r0, sl
1000af3a:	1c13      	adds	r3, r2, #0
1000af3c:	3820      	subs	r0, #32
1000af3e:	40c3      	lsrs	r3, r0
1000af40:	1c18      	adds	r0, r3, #0
1000af42:	4653      	mov	r3, sl
1000af44:	2b20      	cmp	r3, #32
1000af46:	d100      	bne.n	1000af4a <__aeabi_dsub+0x4ea>
1000af48:	e0c1      	b.n	1000b0ce <__aeabi_dsub+0x66e>
1000af4a:	2340      	movs	r3, #64	; 0x40
1000af4c:	4651      	mov	r1, sl
1000af4e:	1a5b      	subs	r3, r3, r1
1000af50:	409a      	lsls	r2, r3
1000af52:	9901      	ldr	r1, [sp, #4]
1000af54:	4311      	orrs	r1, r2
1000af56:	1e4a      	subs	r2, r1, #1
1000af58:	4191      	sbcs	r1, r2
1000af5a:	2200      	movs	r2, #0
1000af5c:	4301      	orrs	r1, r0
1000af5e:	e670      	b.n	1000ac42 <__aeabi_dsub+0x1e2>
1000af60:	4c6e      	ldr	r4, [pc, #440]	; (1000b11c <__aeabi_dsub+0x6bc>)
1000af62:	42a0      	cmp	r0, r4
1000af64:	d000      	beq.n	1000af68 <__aeabi_dsub+0x508>
1000af66:	e753      	b.n	1000ae10 <__aeabi_dsub+0x3b0>
1000af68:	1c17      	adds	r7, r2, #0
1000af6a:	9d01      	ldr	r5, [sp, #4]
1000af6c:	1c04      	adds	r4, r0, #0
1000af6e:	4698      	mov	r8, r3
1000af70:	e5a8      	b.n	1000aac4 <__aeabi_dsub+0x64>
1000af72:	2c00      	cmp	r4, #0
1000af74:	d128      	bne.n	1000afc8 <__aeabi_dsub+0x568>
1000af76:	1c3c      	adds	r4, r7, #0
1000af78:	432c      	orrs	r4, r5
1000af7a:	d100      	bne.n	1000af7e <__aeabi_dsub+0x51e>
1000af7c:	e08a      	b.n	1000b094 <__aeabi_dsub+0x634>
1000af7e:	43db      	mvns	r3, r3
1000af80:	469a      	mov	sl, r3
1000af82:	2b00      	cmp	r3, #0
1000af84:	d000      	beq.n	1000af88 <__aeabi_dsub+0x528>
1000af86:	e082      	b.n	1000b08e <__aeabi_dsub+0x62e>
1000af88:	9b01      	ldr	r3, [sp, #4]
1000af8a:	19d2      	adds	r2, r2, r7
1000af8c:	469c      	mov	ip, r3
1000af8e:	4465      	add	r5, ip
1000af90:	429d      	cmp	r5, r3
1000af92:	4189      	sbcs	r1, r1
1000af94:	4249      	negs	r1, r1
1000af96:	1857      	adds	r7, r2, r1
1000af98:	1c04      	adds	r4, r0, #0
1000af9a:	e659      	b.n	1000ac50 <__aeabi_dsub+0x1f0>
1000af9c:	2800      	cmp	r0, #0
1000af9e:	d15b      	bne.n	1000b058 <__aeabi_dsub+0x5f8>
1000afa0:	1c10      	adds	r0, r2, #0
1000afa2:	9901      	ldr	r1, [sp, #4]
1000afa4:	4308      	orrs	r0, r1
1000afa6:	d100      	bne.n	1000afaa <__aeabi_dsub+0x54a>
1000afa8:	e0a4      	b.n	1000b0f4 <__aeabi_dsub+0x694>
1000afaa:	1c17      	adds	r7, r2, #0
1000afac:	1c0d      	adds	r5, r1, #0
1000afae:	4698      	mov	r8, r3
1000afb0:	4c5a      	ldr	r4, [pc, #360]	; (1000b11c <__aeabi_dsub+0x6bc>)
1000afb2:	e587      	b.n	1000aac4 <__aeabi_dsub+0x64>
1000afb4:	433d      	orrs	r5, r7
1000afb6:	1e6f      	subs	r7, r5, #1
1000afb8:	41bd      	sbcs	r5, r7
1000afba:	2700      	movs	r7, #0
1000afbc:	b2ed      	uxtb	r5, r5
1000afbe:	e742      	b.n	1000ae46 <__aeabi_dsub+0x3e6>
1000afc0:	1c04      	adds	r4, r0, #0
1000afc2:	2700      	movs	r7, #0
1000afc4:	2500      	movs	r5, #0
1000afc6:	e618      	b.n	1000abfa <__aeabi_dsub+0x19a>
1000afc8:	4c54      	ldr	r4, [pc, #336]	; (1000b11c <__aeabi_dsub+0x6bc>)
1000afca:	42a0      	cmp	r0, r4
1000afcc:	d062      	beq.n	1000b094 <__aeabi_dsub+0x634>
1000afce:	4653      	mov	r3, sl
1000afd0:	2480      	movs	r4, #128	; 0x80
1000afd2:	425b      	negs	r3, r3
1000afd4:	469a      	mov	sl, r3
1000afd6:	0424      	lsls	r4, r4, #16
1000afd8:	4327      	orrs	r7, r4
1000afda:	4653      	mov	r3, sl
1000afdc:	2b38      	cmp	r3, #56	; 0x38
1000afde:	dd00      	ble.n	1000afe2 <__aeabi_dsub+0x582>
1000afe0:	e08e      	b.n	1000b100 <__aeabi_dsub+0x6a0>
1000afe2:	2b1f      	cmp	r3, #31
1000afe4:	dd00      	ble.n	1000afe8 <__aeabi_dsub+0x588>
1000afe6:	e09d      	b.n	1000b124 <__aeabi_dsub+0x6c4>
1000afe8:	2420      	movs	r4, #32
1000afea:	1ae3      	subs	r3, r4, r3
1000afec:	469b      	mov	fp, r3
1000afee:	1c3b      	adds	r3, r7, #0
1000aff0:	4659      	mov	r1, fp
1000aff2:	408b      	lsls	r3, r1
1000aff4:	4651      	mov	r1, sl
1000aff6:	4699      	mov	r9, r3
1000aff8:	1c2b      	adds	r3, r5, #0
1000affa:	40cb      	lsrs	r3, r1
1000affc:	469c      	mov	ip, r3
1000affe:	464b      	mov	r3, r9
1000b000:	4664      	mov	r4, ip
1000b002:	4323      	orrs	r3, r4
1000b004:	469c      	mov	ip, r3
1000b006:	465b      	mov	r3, fp
1000b008:	409d      	lsls	r5, r3
1000b00a:	4663      	mov	r3, ip
1000b00c:	1e6c      	subs	r4, r5, #1
1000b00e:	41a5      	sbcs	r5, r4
1000b010:	40cf      	lsrs	r7, r1
1000b012:	431d      	orrs	r5, r3
1000b014:	9b01      	ldr	r3, [sp, #4]
1000b016:	18bf      	adds	r7, r7, r2
1000b018:	469c      	mov	ip, r3
1000b01a:	4465      	add	r5, ip
1000b01c:	429d      	cmp	r5, r3
1000b01e:	4192      	sbcs	r2, r2
1000b020:	4252      	negs	r2, r2
1000b022:	18bf      	adds	r7, r7, r2
1000b024:	1c04      	adds	r4, r0, #0
1000b026:	e613      	b.n	1000ac50 <__aeabi_dsub+0x1f0>
1000b028:	1c10      	adds	r0, r2, #0
1000b02a:	9901      	ldr	r1, [sp, #4]
1000b02c:	4308      	orrs	r0, r1
1000b02e:	d100      	bne.n	1000b032 <__aeabi_dsub+0x5d2>
1000b030:	e548      	b.n	1000aac4 <__aeabi_dsub+0x64>
1000b032:	1a68      	subs	r0, r5, r1
1000b034:	4684      	mov	ip, r0
1000b036:	4285      	cmp	r5, r0
1000b038:	4180      	sbcs	r0, r0
1000b03a:	1abe      	subs	r6, r7, r2
1000b03c:	4240      	negs	r0, r0
1000b03e:	1a30      	subs	r0, r6, r0
1000b040:	0206      	lsls	r6, r0, #8
1000b042:	d400      	bmi.n	1000b046 <__aeabi_dsub+0x5e6>
1000b044:	e647      	b.n	1000acd6 <__aeabi_dsub+0x276>
1000b046:	468c      	mov	ip, r1
1000b048:	1b4d      	subs	r5, r1, r5
1000b04a:	45ac      	cmp	ip, r5
1000b04c:	4189      	sbcs	r1, r1
1000b04e:	1bd2      	subs	r2, r2, r7
1000b050:	4249      	negs	r1, r1
1000b052:	1a57      	subs	r7, r2, r1
1000b054:	4698      	mov	r8, r3
1000b056:	e535      	b.n	1000aac4 <__aeabi_dsub+0x64>
1000b058:	1c10      	adds	r0, r2, #0
1000b05a:	9901      	ldr	r1, [sp, #4]
1000b05c:	4308      	orrs	r0, r1
1000b05e:	d034      	beq.n	1000b0ca <__aeabi_dsub+0x66a>
1000b060:	2480      	movs	r4, #128	; 0x80
1000b062:	0778      	lsls	r0, r7, #29
1000b064:	08ed      	lsrs	r5, r5, #3
1000b066:	08ff      	lsrs	r7, r7, #3
1000b068:	0324      	lsls	r4, r4, #12
1000b06a:	4328      	orrs	r0, r5
1000b06c:	4227      	tst	r7, r4
1000b06e:	d008      	beq.n	1000b082 <__aeabi_dsub+0x622>
1000b070:	08d6      	lsrs	r6, r2, #3
1000b072:	4226      	tst	r6, r4
1000b074:	d105      	bne.n	1000b082 <__aeabi_dsub+0x622>
1000b076:	08c9      	lsrs	r1, r1, #3
1000b078:	0752      	lsls	r2, r2, #29
1000b07a:	430a      	orrs	r2, r1
1000b07c:	1c10      	adds	r0, r2, #0
1000b07e:	1c37      	adds	r7, r6, #0
1000b080:	4698      	mov	r8, r3
1000b082:	00ff      	lsls	r7, r7, #3
1000b084:	0f42      	lsrs	r2, r0, #29
1000b086:	4317      	orrs	r7, r2
1000b088:	00c5      	lsls	r5, r0, #3
1000b08a:	4c24      	ldr	r4, [pc, #144]	; (1000b11c <__aeabi_dsub+0x6bc>)
1000b08c:	e51a      	b.n	1000aac4 <__aeabi_dsub+0x64>
1000b08e:	4c23      	ldr	r4, [pc, #140]	; (1000b11c <__aeabi_dsub+0x6bc>)
1000b090:	42a0      	cmp	r0, r4
1000b092:	d1a2      	bne.n	1000afda <__aeabi_dsub+0x57a>
1000b094:	1c17      	adds	r7, r2, #0
1000b096:	9d01      	ldr	r5, [sp, #4]
1000b098:	1c04      	adds	r4, r0, #0
1000b09a:	e513      	b.n	1000aac4 <__aeabi_dsub+0x64>
1000b09c:	2b00      	cmp	r3, #0
1000b09e:	d035      	beq.n	1000b10c <__aeabi_dsub+0x6ac>
1000b0a0:	1c13      	adds	r3, r2, #0
1000b0a2:	9901      	ldr	r1, [sp, #4]
1000b0a4:	430b      	orrs	r3, r1
1000b0a6:	d010      	beq.n	1000b0ca <__aeabi_dsub+0x66a>
1000b0a8:	2480      	movs	r4, #128	; 0x80
1000b0aa:	0778      	lsls	r0, r7, #29
1000b0ac:	08ed      	lsrs	r5, r5, #3
1000b0ae:	08ff      	lsrs	r7, r7, #3
1000b0b0:	0324      	lsls	r4, r4, #12
1000b0b2:	4328      	orrs	r0, r5
1000b0b4:	4227      	tst	r7, r4
1000b0b6:	d0e4      	beq.n	1000b082 <__aeabi_dsub+0x622>
1000b0b8:	08d3      	lsrs	r3, r2, #3
1000b0ba:	4223      	tst	r3, r4
1000b0bc:	d1e1      	bne.n	1000b082 <__aeabi_dsub+0x622>
1000b0be:	08c9      	lsrs	r1, r1, #3
1000b0c0:	0752      	lsls	r2, r2, #29
1000b0c2:	430a      	orrs	r2, r1
1000b0c4:	1c10      	adds	r0, r2, #0
1000b0c6:	1c1f      	adds	r7, r3, #0
1000b0c8:	e7db      	b.n	1000b082 <__aeabi_dsub+0x622>
1000b0ca:	4c14      	ldr	r4, [pc, #80]	; (1000b11c <__aeabi_dsub+0x6bc>)
1000b0cc:	e4fa      	b.n	1000aac4 <__aeabi_dsub+0x64>
1000b0ce:	2200      	movs	r2, #0
1000b0d0:	e73f      	b.n	1000af52 <__aeabi_dsub+0x4f2>
1000b0d2:	464c      	mov	r4, r9
1000b0d4:	1c3e      	adds	r6, r7, #0
1000b0d6:	3c20      	subs	r4, #32
1000b0d8:	40e6      	lsrs	r6, r4
1000b0da:	4649      	mov	r1, r9
1000b0dc:	1c34      	adds	r4, r6, #0
1000b0de:	2920      	cmp	r1, #32
1000b0e0:	d032      	beq.n	1000b148 <__aeabi_dsub+0x6e8>
1000b0e2:	2640      	movs	r6, #64	; 0x40
1000b0e4:	1a76      	subs	r6, r6, r1
1000b0e6:	40b7      	lsls	r7, r6
1000b0e8:	433d      	orrs	r5, r7
1000b0ea:	1e6f      	subs	r7, r5, #1
1000b0ec:	41bd      	sbcs	r5, r7
1000b0ee:	2700      	movs	r7, #0
1000b0f0:	4325      	orrs	r5, r4
1000b0f2:	e6a8      	b.n	1000ae46 <__aeabi_dsub+0x3e6>
1000b0f4:	2780      	movs	r7, #128	; 0x80
1000b0f6:	2600      	movs	r6, #0
1000b0f8:	03ff      	lsls	r7, r7, #15
1000b0fa:	4c08      	ldr	r4, [pc, #32]	; (1000b11c <__aeabi_dsub+0x6bc>)
1000b0fc:	2500      	movs	r5, #0
1000b0fe:	e57c      	b.n	1000abfa <__aeabi_dsub+0x19a>
1000b100:	433d      	orrs	r5, r7
1000b102:	1e6f      	subs	r7, r5, #1
1000b104:	41bd      	sbcs	r5, r7
1000b106:	2700      	movs	r7, #0
1000b108:	b2ed      	uxtb	r5, r5
1000b10a:	e783      	b.n	1000b014 <__aeabi_dsub+0x5b4>
1000b10c:	1c17      	adds	r7, r2, #0
1000b10e:	9d01      	ldr	r5, [sp, #4]
1000b110:	4c02      	ldr	r4, [pc, #8]	; (1000b11c <__aeabi_dsub+0x6bc>)
1000b112:	e4d7      	b.n	1000aac4 <__aeabi_dsub+0x64>
1000b114:	1c17      	adds	r7, r2, #0
1000b116:	9d01      	ldr	r5, [sp, #4]
1000b118:	e4d4      	b.n	1000aac4 <__aeabi_dsub+0x64>
1000b11a:	46c0      	nop			; (mov r8, r8)
1000b11c:	000007ff 	.word	0x000007ff
1000b120:	ff7fffff 	.word	0xff7fffff
1000b124:	4654      	mov	r4, sl
1000b126:	1c3b      	adds	r3, r7, #0
1000b128:	3c20      	subs	r4, #32
1000b12a:	40e3      	lsrs	r3, r4
1000b12c:	1c1c      	adds	r4, r3, #0
1000b12e:	4653      	mov	r3, sl
1000b130:	2b20      	cmp	r3, #32
1000b132:	d00d      	beq.n	1000b150 <__aeabi_dsub+0x6f0>
1000b134:	2340      	movs	r3, #64	; 0x40
1000b136:	4651      	mov	r1, sl
1000b138:	1a5b      	subs	r3, r3, r1
1000b13a:	409f      	lsls	r7, r3
1000b13c:	433d      	orrs	r5, r7
1000b13e:	1e6f      	subs	r7, r5, #1
1000b140:	41bd      	sbcs	r5, r7
1000b142:	2700      	movs	r7, #0
1000b144:	4325      	orrs	r5, r4
1000b146:	e765      	b.n	1000b014 <__aeabi_dsub+0x5b4>
1000b148:	2700      	movs	r7, #0
1000b14a:	e7cd      	b.n	1000b0e8 <__aeabi_dsub+0x688>
1000b14c:	1c0d      	adds	r5, r1, #0
1000b14e:	e5c8      	b.n	1000ace2 <__aeabi_dsub+0x282>
1000b150:	2700      	movs	r7, #0
1000b152:	e7f3      	b.n	1000b13c <__aeabi_dsub+0x6dc>

1000b154 <__aeabi_ui2d>:
1000b154:	b510      	push	{r4, lr}
1000b156:	1e04      	subs	r4, r0, #0
1000b158:	d010      	beq.n	1000b17c <__aeabi_ui2d+0x28>
1000b15a:	f7fc ff15 	bl	10007f88 <__clzsi2>
1000b15e:	4a14      	ldr	r2, [pc, #80]	; (1000b1b0 <__aeabi_ui2d+0x5c>)
1000b160:	1a12      	subs	r2, r2, r0
1000b162:	280a      	cmp	r0, #10
1000b164:	dc1a      	bgt.n	1000b19c <__aeabi_ui2d+0x48>
1000b166:	230b      	movs	r3, #11
1000b168:	1c21      	adds	r1, r4, #0
1000b16a:	1a1b      	subs	r3, r3, r0
1000b16c:	40d9      	lsrs	r1, r3
1000b16e:	3015      	adds	r0, #21
1000b170:	030b      	lsls	r3, r1, #12
1000b172:	0552      	lsls	r2, r2, #21
1000b174:	4084      	lsls	r4, r0
1000b176:	0b1b      	lsrs	r3, r3, #12
1000b178:	0d52      	lsrs	r2, r2, #21
1000b17a:	e001      	b.n	1000b180 <__aeabi_ui2d+0x2c>
1000b17c:	2200      	movs	r2, #0
1000b17e:	2300      	movs	r3, #0
1000b180:	2100      	movs	r1, #0
1000b182:	031b      	lsls	r3, r3, #12
1000b184:	1c20      	adds	r0, r4, #0
1000b186:	0b1c      	lsrs	r4, r3, #12
1000b188:	0d0b      	lsrs	r3, r1, #20
1000b18a:	051b      	lsls	r3, r3, #20
1000b18c:	4323      	orrs	r3, r4
1000b18e:	4c09      	ldr	r4, [pc, #36]	; (1000b1b4 <__aeabi_ui2d+0x60>)
1000b190:	0512      	lsls	r2, r2, #20
1000b192:	4023      	ands	r3, r4
1000b194:	4313      	orrs	r3, r2
1000b196:	005b      	lsls	r3, r3, #1
1000b198:	0859      	lsrs	r1, r3, #1
1000b19a:	bd10      	pop	{r4, pc}
1000b19c:	1c03      	adds	r3, r0, #0
1000b19e:	3b0b      	subs	r3, #11
1000b1a0:	409c      	lsls	r4, r3
1000b1a2:	0552      	lsls	r2, r2, #21
1000b1a4:	0323      	lsls	r3, r4, #12
1000b1a6:	0b1b      	lsrs	r3, r3, #12
1000b1a8:	0d52      	lsrs	r2, r2, #21
1000b1aa:	2400      	movs	r4, #0
1000b1ac:	e7e8      	b.n	1000b180 <__aeabi_ui2d+0x2c>
1000b1ae:	46c0      	nop			; (mov r8, r8)
1000b1b0:	0000041e 	.word	0x0000041e
1000b1b4:	800fffff 	.word	0x800fffff
1000b1b8:	10001b2e 	.word	0x10001b2e
1000b1bc:	10001b2e 	.word	0x10001b2e
1000b1c0:	10001b38 	.word	0x10001b38
1000b1c4:	10001b38 	.word	0x10001b38
1000b1c8:	10001b5a 	.word	0x10001b5a
1000b1cc:	10001b5a 	.word	0x10001b5a
1000b1d0:	10001b5a 	.word	0x10001b5a
1000b1d4:	10001b5a 	.word	0x10001b5a
1000b1d8:	10001b42 	.word	0x10001b42
1000b1dc:	10001b4e 	.word	0x10001b4e
1000b1e0:	100022b6 	.word	0x100022b6
1000b1e4:	100022b6 	.word	0x100022b6
1000b1e8:	100022c0 	.word	0x100022c0
1000b1ec:	100022c0 	.word	0x100022c0
1000b1f0:	100022ca 	.word	0x100022ca
1000b1f4:	100022ca 	.word	0x100022ca
1000b1f8:	100022ec 	.word	0x100022ec
1000b1fc:	100022ec 	.word	0x100022ec
1000b200:	100022d4 	.word	0x100022d4
1000b204:	100022e0 	.word	0x100022e0

1000b208 <g_xmc_vadc_group_array>:
1000b208:	48030400 48030800                       ...H...H

1000b210 <COM_channel_config>:
1000b210:	00000960 10020808 00000200              `...........

1000b21c <COM_tx_pin_config>:
1000b21c:	000000b8 00000001                       ........

1000b224 <COM_tx_pin>:
1000b224:	40040100 00000003 1000b21c              ...@........

1000b230 <COM_config>:
1000b230:	1000b210 1000384d 00000000 00000000     ....M8..........
	...
1000b254:	1000b224 04020200 00000004              $...........

1000b260 <COM_rx_pin_config>:
1000b260:	00000000 00000001                       ........

1000b268 <RS232_channel_config>:
1000b268:	00004b00 10010808 00000000              .K..........

1000b274 <RS232_tx_pin_config>:
1000b274:	00000090 00000001                       ........

1000b27c <RS232_tx_pin>:
1000b27c:	40040100 00000005 1000b274              ...@....t...

1000b288 <RS232_config>:
1000b288:	1000b268 100038f9 00000000 00000000     h....8..........
	...
1000b2ac:	1000b27c 04000000 00000104              |...........

1000b2b8 <RS232_rx_pin_config>:
1000b2b8:	00000000 00000001                       ........

1000b2c0 <PWM_timer_handle>:
	...
1000b2c8:	00000014 00000000                       ........

1000b2d0 <PWM_event0_config>:
1000b2d0:	00010000                                ....

1000b2d4 <PWM_event1_config>:
1000b2d4:	00010000                                ....

1000b2d8 <PWM_event2_config>:
1000b2d8:	00010000                                ....

1000b2dc <PWM_dt_config>:
1000b2dc:	0000000d 00000101 00000000              ............

1000b2e8 <PWM_ch1_out0_config>:
1000b2e8:	000000a8 00010000                       ........

1000b2f0 <PWM_ch1_out1_config>:
1000b2f0:	000000a8 00010000                       ........

1000b2f8 <PWM_config_handle>:
1000b2f8:	018c0000 00c600c6 00000000 00000000     ................
	...
1000b314:	1000b2d0 1000b2d4 1000b2d8 00000000     ................
	...
1000b330:	00000001 08000000 1000b2dc 00000001     ................
1000b340:	1000b2c0 00000001 40040000 00000007     ...........@....
1000b350:	1000b2e8 00000001 40040000 00000006     ...........@....
1000b360:	1000b2f0 00000000 00000000 00000000     ................
	...
1000b384:	200011e4                                ... 

1000b388 <PULSE_5MS_timer_handle>:
1000b388:	00000000 00000006                       ........

1000b390 <PULSE_5MS_event0_config>:
1000b390:	00010000                                ....

1000b394 <PULSE_5MS_event1_config>:
1000b394:	00010000                                ....

1000b398 <PULSE_5MS_event2_config>:
1000b398:	00010000                                ....

1000b39c <PULSE_5MS_config_handle>:
1000b39c:	13870001 000109c4 00000000 00000200     ................
1000b3ac:	00000002 1000b390 1000b394 1000b398     ................
	...
1000b3c8:	01000000 00000000 08000000 1000b388     ................
	...
1000b3e8:	200011f4                                ... 

1000b3ec <PULSE_250US_timer_handle>:
1000b3ec:	00000000 00000006                       ........

1000b3f4 <PULSE_250US_event0_config>:
1000b3f4:	00010000                                ....

1000b3f8 <PULSE_250US_event1_config>:
1000b3f8:	00010000                                ....

1000b3fc <PULSE_250US_event2_config>:
1000b3fc:	00010000                                ....

1000b400 <PULSE_250US_config_handle>:
1000b400:	00f90001 0001007d 00000000 00000300     ....}...........
1000b410:	00000003 1000b3f4 1000b3f8 1000b3fc     ................
	...
1000b42c:	01000000 00000000 04000000 1000b3ec     ................
	...
1000b44c:	200011f4                                ... 

1000b450 <TASK_20MS>:
1000b450:	00010312                                ....

1000b454 <ACOMP_1MS>:
1000b454:	00010314                                ....

1000b458 <group_init_handle0>:
	...

1000b46c <group_init_handle1>:
	...

1000b480 <global_config>:
	...

1000b498 <PWM_ENABLE>:
1000b498:	40040000 00000080 00000001 00000005     ...@............

1000b4a8 <ENC_B>:
1000b4a8:	40040000 00000010 00000000 00000001     ...@............

1000b4b8 <ENC_A>:
1000b4b8:	40040000 00000010 00000000 00000002     ...@............

1000b4c8 <B_LED>:
1000b4c8:	40040100 00000080 00010000 00000002     ...@............

1000b4d8 <G_LED>:
1000b4d8:	40040100 00000080 00010000 00000001     ...@............

1000b4e8 <R_LED>:
1000b4e8:	40040100 00000080 00010000 00000000     ...@............

1000b4f8 <JMP_4>:
1000b4f8:	40040000 00000080 00010000 0000000d     ...@............

1000b508 <ENC_Switch>:
1000b508:	40040000 00000010 00000000 00000003     ...@............

1000b518 <JMP_3>:
1000b518:	40040000 00000010 00000000 0000000c     ...@............

1000b528 <JMP_2>:
1000b528:	40040000 00000010 00000000 0000000b     ...@............

1000b538 <JMP_1>:
1000b538:	40040000 00000010 00000000 0000000a     ...@............
1000b548:	00000100 00010000 00000000              ............

1000b554 <group_ptrs>:
1000b554:	48030400 48030800                       ...H...H

1000b55c <VOLT_CURR_TEMP_Voltage_ch_config>:
1000b55c:	00270000 00000000 00000000 00000001     ..'.............

1000b56c <VOLT_CURR_TEMP_Voltage_res_config>:
1000b56c:	00030000                                ....

1000b570 <VOLT_CURR_TEMP_Voltage_handle>:
1000b570:	1000b55c 1000b56c 00000100              \...l.......

1000b57c <VOLT_CURR_TEMP_Current_ch_config>:
1000b57c:	00220000 00000000 00000000 00000101     ..".............

1000b58c <VOLT_CURR_TEMP_Current_res_config>:
1000b58c:	00030000                                ....

1000b590 <VOLT_CURR_TEMP_Current_handle>:
1000b590:	1000b57c 1000b58c 00000000              |...........

1000b59c <VOLT_CURR_TEMP_Temperature_ch_config>:
1000b59c:	00290000 00000000 00000000 0000ff01     ..).............

1000b5ac <VOLT_CURR_TEMP_Temperature_res_config>:
1000b5ac:	80030000                                ....

1000b5b0 <VOLT_CURR_TEMP_Temperature_handle>:
1000b5b0:	1000b59c 1000b5ac 00000200              ............

1000b5bc <VOLT_CURR_TEMP_queue_config>:
1000b5bc:	00000000 00004000 00000004              .....@......

1000b5c8 <VOLT_CURR_TEMP_queue_handle>:
	...
1000b5d4:	00000002 1000b5bc 00000001              ............

1000b5e0 <VOLT_CURR_TEMP_Voltage_queue_entry_0>:
1000b5e0:	000000a1                                ....

1000b5e4 <VOLT_CURR_TEMP_Current_queue_entry_1>:
1000b5e4:	00000020                                 ...

1000b5e8 <VOLT_CURR_TEMP_Temperature_queue_entry_2>:
1000b5e8:	00000022                                "...

1000b5ec <VOLT_CURR_TEMP>:
1000b5ec:	20001244 20001238 10005275 1000b5c8     D.. 8.. uR......
1000b5fc:	20001250 03030003 00000001              P.. ........

1000b608 <ACOMP_ACOMP_ch_config>:
1000b608:	002b0000 00000000 00000000 00000101     ..+.............

1000b618 <ACOMP_ACOMP_res_config>:
1000b618:	00030000                                ....

1000b61c <ACOMP_ACOMP_handle>:
1000b61c:	1000b608 1000b618 00000001              ............

1000b628 <ACOMP_VRef_ch_config>:
1000b628:	002a0000 00000000 00000000 0000ff01     ..*.............

1000b638 <ACOMP_VRef_res_config>:
1000b638:	80030000                                ....

1000b63c <ACOMP_VRef_handle>:
1000b63c:	1000b628 1000b638 00000501              (...8.......

1000b648 <ACOMP_queue_config>:
1000b648:	00000000 00004100 00000004              .....A......

1000b654 <ACOMP_queue_handle>:
	...
1000b660:	00000002 1000b648 00000001              ....H.......

1000b66c <ACOMP_ACOMP_queue_entry_0>:
1000b66c:	000000a0                                ....

1000b670 <ACOMP_VRef_queue_entry_1>:
1000b670:	00000025                                %...

1000b674 <ACOMP>:
1000b674:	2000125c 20001254 1000528d 1000b654     \.. T.. .R..T...
1000b684:	20001264 02020103 00000001 746c6f56     d.. ........Volt
1000b694:	5d566d5b 3730253a 2066312e 75432020     [mV]:%07.1f   Cu
1000b6a4:	6d5b7272 253a5d41 312e3730 20202066     rr[mA]:%07.1f   
1000b6b4:	5b776f50 253a5d57 312e3530 20202066     Pow[W]:%05.1f   
1000b6c4:	706d6554 43b0c25b 25203a5d 312e3530     Temp[..C]: %05.1
1000b6d4:	20202066 71657246 486b5b75 253a5d7a     f   Frequ[kHz]:%
1000b6e4:	332e3730 564f2066 6931253a 3a434f20     07.3f OV:%1i OC:
1000b6f4:	20693125 253a544f 43206931 31253a4c     %1i OT:%1i CL:%1
1000b704:	32252069 32252078 32252078 32252078     i %2x %2x %2x %2
1000b714:	32252078 0a202078 0000000d 1000680a     x %2x  ......h..
1000b724:	100067d2 100067ee 100067c6 100067ee     .g...g...g...g..
1000b734:	10006732 100067ee 100067c6 100067d2     2g...g...g...g..
1000b744:	100067d2 10006732 100067c6 10006870     .g..2g...g..ph..
1000b754:	10006870 10006870 100067f4 100067d2     ph..ph...g...g..
1000b764:	100067d2 100068ba 100067c4 100068ba     .g...h...g...h..
1000b774:	10006732 100068ba 100067c4 100067d2     2g...h...g...g..
1000b784:	100067d2 10006732 100067c4 10006870     .g..2g...g..ph..
1000b794:	10006870 10006870 1000689e 10006bd2     ph..ph...h...k..
1000b7a4:	10006bca 10006bca 10006bc2 10006b14     .k...k...k...k..
1000b7b4:	10006b14 10006bb8 10006bc2 10006b14     .k...k...k...k..
1000b7c4:	10006bb8 10006b14 10006bc2 10006b16     .k...k...k...k..
1000b7d4:	10006b16 10006b16 10006c5c 10007994     .k...k..\l...y..
1000b7e4:	10007972 10007972 10007966 1000785a     ry..ry..fy..Zx..
1000b7f4:	1000785a 1000795a 10007966 1000785a     Zx..Zy..fy..Zx..
1000b804:	1000795a 1000785a 10007966 1000785e     Zy..Zx..fy..^x..
1000b814:	1000785e 1000785e 10007b74 4e490043     ^x..^x..t{..C.IN
1000b824:	6e690046 414e0066 616e004e 0030006e     F.inf.NAN.nan.0.
1000b834:	33323130 37363534 42413938 46454443     0123456789ABCDEF
1000b844:	32313000 36353433 61393837 65646362     .0123456789abcde
1000b854:	6e490066 696e6966 4e007974 50004e61     f.Infinity.NaN.P
1000b864:	5849534f 00002e00 00000000              OSIX........

1000b870 <__mprec_tens>:
1000b870:	00000000 3ff00000 00000000 40240000     .......?......$@
1000b880:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
1000b890:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
1000b8a0:	00000000 412e8480 00000000 416312d0     .......A......cA
1000b8b0:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
1000b8c0:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
1000b8d0:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
1000b8e0:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
1000b8f0:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
1000b900:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
1000b910:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
1000b920:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
1000b930:	79d99db4 44ea7843                       ...yCx.D

1000b938 <__mprec_bigtens>:
1000b938:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
1000b948:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
1000b958:	7f73bf3c 75154fdd                       <.s..O.u

1000b960 <p05.5277>:
1000b960:	00000005 00000019 0000007d 2b302d23     ........}...#-0+
1000b970:	6c680020 6665004c 47464567 00000000      .hlL.efgEFG....
1000b980:	1000a3b8 1000a2a6 1000a38c 1000a292     ................
1000b990:	1000a38c 1000a396 1000a38c 1000a292     ................
1000b9a0:	1000a2a6 1000a2a6 1000a396 1000a292     ................
1000b9b0:	1000a29c 1000a29c 1000a29c 1000a5fe     ................

Disassembly of section .VENEER_Code:

2000000c <HardFault_Veneer>:
    
    .align 1
    
    .globl HardFault_Veneer
HardFault_Veneer:
    LDR R0, =HardFault_Handler
2000000c:	482c      	ldr	r0, [pc, #176]	; (200000c0 <BCCU0_0_Veneer+0x4>)
    MOV PC,R0
2000000e:	4687      	mov	pc, r0
	...

2000002c <SVC_Veneer>:
    .long 0
    .long 0
/* ======================================================================== */
    .globl SVC_Veneer
SVC_Veneer:
    LDR R0, =SVC_Handler
2000002c:	4825      	ldr	r0, [pc, #148]	; (200000c4 <BCCU0_0_Veneer+0x8>)
    MOV PC,R0
2000002e:	4687      	mov	pc, r0
	...

20000038 <PendSV_Veneer>:
    .long 0
    .long 0
/* ======================================================================== */
    .globl PendSV_Veneer
PendSV_Veneer:
    LDR R0, =PendSV_Handler
20000038:	4823      	ldr	r0, [pc, #140]	; (200000c8 <BCCU0_0_Veneer+0xc>)
    MOV PC,R0
2000003a:	4687      	mov	pc, r0

2000003c <SysTick_Veneer>:
/* ======================================================================== */
    .globl SysTick_Veneer 
SysTick_Veneer:
    LDR R0, =SysTick_Handler
2000003c:	4823      	ldr	r0, [pc, #140]	; (200000cc <BCCU0_0_Veneer+0x10>)
    MOV PC,R0
2000003e:	4687      	mov	pc, r0

20000040 <SCU_0_Veneer>:
/* ======================================================================== */
    .globl SCU_0_Veneer 
SCU_0_Veneer:
    LDR R0, =SCU_0_IRQHandler
20000040:	4823      	ldr	r0, [pc, #140]	; (200000d0 <BCCU0_0_Veneer+0x14>)
    MOV PC,R0
20000042:	4687      	mov	pc, r0

20000044 <SCU_1_Veneer>:
/* ======================================================================== */
    .globl SCU_1_Veneer 
SCU_1_Veneer:
    LDR R0, =SCU_1_IRQHandler
20000044:	4823      	ldr	r0, [pc, #140]	; (200000d4 <BCCU0_0_Veneer+0x18>)
    MOV PC,R0
20000046:	4687      	mov	pc, r0

20000048 <SCU_2_Veneer>:
/* ======================================================================== */
    .globl SCU_2_Veneer
SCU_2_Veneer:
    LDR R0, =SCU_2_IRQHandler
20000048:	4823      	ldr	r0, [pc, #140]	; (200000d8 <BCCU0_0_Veneer+0x1c>)
    MOV PC,R0
2000004a:	4687      	mov	pc, r0

2000004c <SCU_3_Veneer>:
/* ======================================================================== */
    .globl SCU_3_Veneer 
SCU_3_Veneer:
    LDR R0, =ERU0_0_IRQHandler
2000004c:	4823      	ldr	r0, [pc, #140]	; (200000dc <BCCU0_0_Veneer+0x20>)
    MOV PC,R0
2000004e:	4687      	mov	pc, r0

20000050 <SCU_4_Veneer>:
/* ======================================================================== */
    .globl SCU_4_Veneer 
SCU_4_Veneer:
    LDR R0, =ERU0_1_IRQHandler
20000050:	4823      	ldr	r0, [pc, #140]	; (200000e0 <BCCU0_0_Veneer+0x24>)
    MOV PC,R0
20000052:	4687      	mov	pc, r0

20000054 <SCU_5_Veneer>:
/* ======================================================================== */
    .globl SCU_5_Veneer 
SCU_5_Veneer:
    LDR R0, =ERU0_2_IRQHandler
20000054:	4823      	ldr	r0, [pc, #140]	; (200000e4 <BCCU0_0_Veneer+0x28>)
    MOV PC,R0
20000056:	4687      	mov	pc, r0

20000058 <SCU_6_Veneer>:
/* ======================================================================== */
    .globl SCU_6_Veneer 
SCU_6_Veneer:
    LDR R0, =ERU0_3_IRQHandler
20000058:	4823      	ldr	r0, [pc, #140]	; (200000e8 <BCCU0_0_Veneer+0x2c>)
    MOV PC,R0
2000005a:	4687      	mov	pc, r0

2000005c <MATH_Veneer>:
/* ======================================================================== */
    .globl MATH_Veneer 
MATH_Veneer:
    LDR R0, =MATH0_0_IRQHandler
2000005c:	4823      	ldr	r0, [pc, #140]	; (200000ec <BCCU0_0_Veneer+0x30>)
    MOV PC,R0
2000005e:	4687      	mov	pc, r0
20000060:	00000000 	.word	0x00000000

20000064 <USIC0_0_Veneer>:
    .long 0
/* ======================================================================== */
    .globl USIC0_0_Veneer
USIC0_0_Veneer:
    LDR R0, =USIC0_0_IRQHandler
20000064:	4822      	ldr	r0, [pc, #136]	; (200000f0 <BCCU0_0_Veneer+0x34>)
    MOV PC,R0
20000066:	4687      	mov	pc, r0

20000068 <USIC0_1_Veneer>:
/* ======================================================================== */
    .globl USIC0_1_Veneer
USIC0_1_Veneer:
    LDR R0, =USIC0_1_IRQHandler
20000068:	4822      	ldr	r0, [pc, #136]	; (200000f4 <BCCU0_0_Veneer+0x38>)
    MOV PC,R0
2000006a:	4687      	mov	pc, r0

2000006c <USIC0_2_Veneer>:
/* ======================================================================== */
    .globl USIC0_2_Veneer
USIC0_2_Veneer:
    LDR R0, =USIC0_2_IRQHandler
2000006c:	4822      	ldr	r0, [pc, #136]	; (200000f8 <BCCU0_0_Veneer+0x3c>)
    MOV PC,R0
2000006e:	4687      	mov	pc, r0

20000070 <USIC0_3_Veneer>:
/* ======================================================================== */
    .globl USIC0_3_Veneer
USIC0_3_Veneer:
    LDR R0, =USIC0_3_IRQHandler
20000070:	4822      	ldr	r0, [pc, #136]	; (200000fc <BCCU0_0_Veneer+0x40>)
    MOV PC,R0
20000072:	4687      	mov	pc, r0

20000074 <USIC0_4_Veneer>:
/* ======================================================================== */
    .globl USIC0_4_Veneer
USIC0_4_Veneer:
    LDR R0, =USIC0_4_IRQHandler
20000074:	4822      	ldr	r0, [pc, #136]	; (20000100 <BCCU0_0_Veneer+0x44>)
    MOV PC,R0
20000076:	4687      	mov	pc, r0

20000078 <USIC0_5_Veneer>:
/* ======================================================================== */
    .globl USIC0_5_Veneer
USIC0_5_Veneer:
    LDR R0, =USIC0_5_IRQHandler
20000078:	4822      	ldr	r0, [pc, #136]	; (20000104 <BCCU0_0_Veneer+0x48>)
    MOV PC,R0
2000007a:	4687      	mov	pc, r0

2000007c <VADC0_C0_0_Veneer>:
/* ======================================================================== */
    .globl VADC0_C0_0_Veneer 
VADC0_C0_0_Veneer:
    LDR R0, =VADC0_C0_0_IRQHandler
2000007c:	4822      	ldr	r0, [pc, #136]	; (20000108 <BCCU0_0_Veneer+0x4c>)
    MOV PC,R0
2000007e:	4687      	mov	pc, r0

20000080 <VADC0_C0_1_Veneer>:
/* ======================================================================== */
    .globl VADC0_C0_1_Veneer
VADC0_C0_1_Veneer:
    LDR R0, =VADC0_C0_1_IRQHandler
20000080:	4822      	ldr	r0, [pc, #136]	; (2000010c <BCCU0_0_Veneer+0x50>)
    MOV PC,R0
20000082:	4687      	mov	pc, r0

20000084 <VADC0_G0_0_Veneer>:
/* ======================================================================== */
    .globl VADC0_G0_0_Veneer
VADC0_G0_0_Veneer:
    LDR R0, =VADC0_G0_0_IRQHandler
20000084:	4822      	ldr	r0, [pc, #136]	; (20000110 <BCCU0_0_Veneer+0x54>)
    MOV PC,R0
20000086:	4687      	mov	pc, r0

20000088 <VADC0_G0_1_Veneer>:
/* ======================================================================== */
    .globl VADC0_G0_1_Veneer
VADC0_G0_1_Veneer:
    LDR R0, =VADC0_G0_1_IRQHandler
20000088:	4822      	ldr	r0, [pc, #136]	; (20000114 <BCCU0_0_Veneer+0x58>)
    MOV PC,R0
2000008a:	4687      	mov	pc, r0

2000008c <VADC0_G1_0_Veneer>:
/* ======================================================================== */
    .globl VADC0_G1_0_Veneer
VADC0_G1_0_Veneer:
    LDR R0, =VADC0_G1_0_IRQHandler
2000008c:	4822      	ldr	r0, [pc, #136]	; (20000118 <BCCU0_0_Veneer+0x5c>)
    MOV PC,R0
2000008e:	4687      	mov	pc, r0

20000090 <VADC0_G1_1_Veneer>:
/* ======================================================================== */
    .globl VADC0_G1_1_Veneer
VADC0_G1_1_Veneer:
    LDR R0, =VADC0_G1_1_IRQHandler
20000090:	4822      	ldr	r0, [pc, #136]	; (2000011c <BCCU0_0_Veneer+0x60>)
    MOV PC,R0
20000092:	4687      	mov	pc, r0

20000094 <CCU40_0_Veneer>:
/* ======================================================================== */
    .globl CCU40_0_Veneer
CCU40_0_Veneer:
    LDR R0, =CCU40_0_IRQHandler
20000094:	4822      	ldr	r0, [pc, #136]	; (20000120 <BCCU0_0_Veneer+0x64>)
    MOV PC,R0
20000096:	4687      	mov	pc, r0

20000098 <CCU40_1_Veneer>:
/* ======================================================================== */
    .globl CCU40_1_Veneer
CCU40_1_Veneer:
    LDR R0, =CCU40_1_IRQHandler
20000098:	4822      	ldr	r0, [pc, #136]	; (20000124 <BCCU0_0_Veneer+0x68>)
    MOV PC,R0
2000009a:	4687      	mov	pc, r0

2000009c <CCU40_2_Veneer>:
/* ======================================================================== */
    .globl CCU40_2_Veneer
CCU40_2_Veneer:
    LDR R0, =CCU40_2_IRQHandler
2000009c:	4822      	ldr	r0, [pc, #136]	; (20000128 <BCCU0_0_Veneer+0x6c>)
    MOV PC,R0
2000009e:	4687      	mov	pc, r0

200000a0 <CCU40_3_Veneer>:
/* ======================================================================== */
    .globl CCU40_3_Veneer
CCU40_3_Veneer:
    LDR R0, =CCU40_3_IRQHandler
200000a0:	4822      	ldr	r0, [pc, #136]	; (2000012c <BCCU0_0_Veneer+0x70>)
    MOV PC,R0
200000a2:	4687      	mov	pc, r0

200000a4 <CCU80_0_Veneer>:
/* ======================================================================== */
    .globl CCU80_0_Veneer
CCU80_0_Veneer:
    LDR R0, =CCU80_0_IRQHandler
200000a4:	4822      	ldr	r0, [pc, #136]	; (20000130 <BCCU0_0_Veneer+0x74>)
    MOV PC,R0
200000a6:	4687      	mov	pc, r0

200000a8 <CCU80_1_Veneer>:
/* ======================================================================== */
    .globl CCU80_1_Veneer
CCU80_1_Veneer:
    LDR R0, =CCU80_1_IRQHandler
200000a8:	4822      	ldr	r0, [pc, #136]	; (20000134 <BCCU0_0_Veneer+0x78>)
    MOV PC,R0
200000aa:	4687      	mov	pc, r0

200000ac <POSIF0_0_Veneer>:
/* ======================================================================== */
    .globl POSIF0_0_Veneer
POSIF0_0_Veneer:
    LDR R0, =POSIF0_0_IRQHandler
200000ac:	4822      	ldr	r0, [pc, #136]	; (20000138 <BCCU0_0_Veneer+0x7c>)
    MOV PC,R0
200000ae:	4687      	mov	pc, r0

200000b0 <POSIF0_1_Veneer>:
/* ======================================================================== */
    .globl POSIF0_1_Veneer
POSIF0_1_Veneer:
    LDR R0, =POSIF0_1_IRQHandler
200000b0:	4822      	ldr	r0, [pc, #136]	; (2000013c <BCCU0_0_Veneer+0x80>)
    MOV PC,R0
200000b2:	4687      	mov	pc, r0
	...

200000bc <BCCU0_0_Veneer>:
    .long 0
    .long 0
/* ======================================================================== */
    .globl BCCU0_0_Veneer
BCCU0_0_Veneer:
    LDR R0, =BCCU0_0_IRQHandler
200000bc:	4820      	ldr	r0, [pc, #128]	; (20000140 <BCCU0_0_Veneer+0x84>)
    MOV PC,R0
200000be:	4687      	mov	pc, r0
    
    .align 1
    
    .globl HardFault_Veneer
HardFault_Veneer:
    LDR R0, =HardFault_Handler
200000c0:	10001099 	.word	0x10001099
    .long 0
    .long 0
/* ======================================================================== */
    .globl SVC_Veneer
SVC_Veneer:
    LDR R0, =SVC_Handler
200000c4:	10001099 	.word	0x10001099
    .long 0
    .long 0
/* ======================================================================== */
    .globl PendSV_Veneer
PendSV_Veneer:
    LDR R0, =PendSV_Handler
200000c8:	10001099 	.word	0x10001099
    MOV PC,R0
/* ======================================================================== */
    .globl SysTick_Veneer 
SysTick_Veneer:
    LDR R0, =SysTick_Handler
200000cc:	10001099 	.word	0x10001099
    MOV PC,R0
/* ======================================================================== */
    .globl SCU_0_Veneer 
SCU_0_Veneer:
    LDR R0, =SCU_0_IRQHandler
200000d0:	10001099 	.word	0x10001099
    MOV PC,R0
/* ======================================================================== */
    .globl SCU_1_Veneer 
SCU_1_Veneer:
    LDR R0, =SCU_1_IRQHandler
200000d4:	10001099 	.word	0x10001099
    MOV PC,R0
/* ======================================================================== */
    .globl SCU_2_Veneer
SCU_2_Veneer:
    LDR R0, =SCU_2_IRQHandler
200000d8:	10001099 	.word	0x10001099
    MOV PC,R0
/* ======================================================================== */
    .globl SCU_3_Veneer 
SCU_3_Veneer:
    LDR R0, =ERU0_0_IRQHandler
200000dc:	10001099 	.word	0x10001099
    MOV PC,R0
/* ======================================================================== */
    .globl SCU_4_Veneer 
SCU_4_Veneer:
    LDR R0, =ERU0_1_IRQHandler
200000e0:	10001099 	.word	0x10001099
    MOV PC,R0
/* ======================================================================== */
    .globl SCU_5_Veneer 
SCU_5_Veneer:
    LDR R0, =ERU0_2_IRQHandler
200000e4:	10001099 	.word	0x10001099
    MOV PC,R0
/* ======================================================================== */
    .globl SCU_6_Veneer 
SCU_6_Veneer:
    LDR R0, =ERU0_3_IRQHandler
200000e8:	10001099 	.word	0x10001099
    MOV PC,R0
/* ======================================================================== */
    .globl MATH_Veneer 
MATH_Veneer:
    LDR R0, =MATH0_0_IRQHandler
200000ec:	10001099 	.word	0x10001099
    MOV PC,R0
    .long 0
/* ======================================================================== */
    .globl USIC0_0_Veneer
USIC0_0_Veneer:
    LDR R0, =USIC0_0_IRQHandler
200000f0:	10003a09 	.word	0x10003a09
    MOV PC,R0
/* ======================================================================== */
    .globl USIC0_1_Veneer
USIC0_1_Veneer:
    LDR R0, =USIC0_1_IRQHandler
200000f4:	100039f5 	.word	0x100039f5
    MOV PC,R0
/* ======================================================================== */
    .globl USIC0_2_Veneer
USIC0_2_Veneer:
    LDR R0, =USIC0_2_IRQHandler
200000f8:	10001099 	.word	0x10001099
    MOV PC,R0
/* ======================================================================== */
    .globl USIC0_3_Veneer
USIC0_3_Veneer:
    LDR R0, =USIC0_3_IRQHandler
200000fc:	10001099 	.word	0x10001099
    MOV PC,R0
/* ======================================================================== */
    .globl USIC0_4_Veneer
USIC0_4_Veneer:
    LDR R0, =USIC0_4_IRQHandler
20000100:	10001099 	.word	0x10001099
    MOV PC,R0
/* ======================================================================== */
    .globl USIC0_5_Veneer
USIC0_5_Veneer:
    LDR R0, =USIC0_5_IRQHandler
20000104:	10001099 	.word	0x10001099
    MOV PC,R0
/* ======================================================================== */
    .globl VADC0_C0_0_Veneer 
VADC0_C0_0_Veneer:
    LDR R0, =VADC0_C0_0_IRQHandler
20000108:	10001099 	.word	0x10001099
    MOV PC,R0
/* ======================================================================== */
    .globl VADC0_C0_1_Veneer
VADC0_C0_1_Veneer:
    LDR R0, =VADC0_C0_1_IRQHandler
2000010c:	10001099 	.word	0x10001099
    MOV PC,R0
/* ======================================================================== */
    .globl VADC0_G0_0_Veneer
VADC0_G0_0_Veneer:
    LDR R0, =VADC0_G0_0_IRQHandler
20000110:	10001099 	.word	0x10001099
    MOV PC,R0
/* ======================================================================== */
    .globl VADC0_G0_1_Veneer
VADC0_G0_1_Veneer:
    LDR R0, =VADC0_G0_1_IRQHandler
20000114:	10005f35 	.word	0x10005f35
    MOV PC,R0
/* ======================================================================== */
    .globl VADC0_G1_0_Veneer
VADC0_G1_0_Veneer:
    LDR R0, =VADC0_G1_0_IRQHandler
20000118:	10001099 	.word	0x10001099
    MOV PC,R0
/* ======================================================================== */
    .globl VADC0_G1_1_Veneer
VADC0_G1_1_Veneer:
    LDR R0, =VADC0_G1_1_IRQHandler
2000011c:	100061f1 	.word	0x100061f1
    MOV PC,R0
/* ======================================================================== */
    .globl CCU40_0_Veneer
CCU40_0_Veneer:
    LDR R0, =CCU40_0_IRQHandler
20000120:	10001099 	.word	0x10001099
    MOV PC,R0
/* ======================================================================== */
    .globl CCU40_1_Veneer
CCU40_1_Veneer:
    LDR R0, =CCU40_1_IRQHandler
20000124:	10001099 	.word	0x10001099
    MOV PC,R0
/* ======================================================================== */
    .globl CCU40_2_Veneer
CCU40_2_Veneer:
    LDR R0, =CCU40_2_IRQHandler
20000128:	10001099 	.word	0x10001099
    MOV PC,R0
/* ======================================================================== */
    .globl CCU40_3_Veneer
CCU40_3_Veneer:
    LDR R0, =CCU40_3_IRQHandler
2000012c:	10001099 	.word	0x10001099
    MOV PC,R0
/* ======================================================================== */
    .globl CCU80_0_Veneer
CCU80_0_Veneer:
    LDR R0, =CCU80_0_IRQHandler
20000130:	10001099 	.word	0x10001099
    MOV PC,R0
/* ======================================================================== */
    .globl CCU80_1_Veneer
CCU80_1_Veneer:
    LDR R0, =CCU80_1_IRQHandler
20000134:	10001099 	.word	0x10001099
    MOV PC,R0
/* ======================================================================== */
    .globl POSIF0_0_Veneer
POSIF0_0_Veneer:
    LDR R0, =POSIF0_0_IRQHandler
20000138:	10001099 	.word	0x10001099
    MOV PC,R0
/* ======================================================================== */
    .globl POSIF0_1_Veneer
POSIF0_1_Veneer:
    LDR R0, =POSIF0_1_IRQHandler
2000013c:	10001099 	.word	0x10001099
    .long 0
    .long 0
/* ======================================================================== */
    .globl BCCU0_0_Veneer
BCCU0_0_Veneer:
    LDR R0, =BCCU0_0_IRQHandler
20000140:	10001099 	.word	0x10001099
