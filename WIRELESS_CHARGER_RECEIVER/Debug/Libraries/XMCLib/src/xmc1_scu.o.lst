   1              	 .cpu cortex-m0
   2              	 .fpu softvfp
   3              	 .eabi_attribute 20,1
   4              	 .eabi_attribute 21,1
   5              	 .eabi_attribute 23,3
   6              	 .eabi_attribute 24,1
   7              	 .eabi_attribute 25,1
   8              	 .eabi_attribute 26,1
   9              	 .eabi_attribute 30,2
  10              	 .eabi_attribute 34,0
  11              	 .eabi_attribute 18,4
  12              	 .code 16
  13              	 .file "xmc1_scu.c"
  14              	 .text
  15              	.Ltext0:
  16              	 .cfi_sections .debug_frame
  17              	 .section .text.XMC_SCU_INTERRUPT_EnableEvent,"ax",%progbits
  18              	 .align 2
  19              	 .global XMC_SCU_INTERRUPT_EnableEvent
  20              	 .code 16
  21              	 .thumb_func
  23              	XMC_SCU_INTERRUPT_EnableEvent:
  24              	.LFB51:
  25              	 .file 1 "../Libraries/XMCLib/src/xmc1_scu.c"
   1:../Libraries/XMCLib/src/xmc1_scu.c **** /**
   2:../Libraries/XMCLib/src/xmc1_scu.c ****  * @file xmc1_scu.c
   3:../Libraries/XMCLib/src/xmc1_scu.c ****  * @date 2017-06-24
   4:../Libraries/XMCLib/src/xmc1_scu.c ****  *
   5:../Libraries/XMCLib/src/xmc1_scu.c ****  * @cond
   6:../Libraries/XMCLib/src/xmc1_scu.c ****  **************************************************************************************************
   7:../Libraries/XMCLib/src/xmc1_scu.c ****  * XMClib v2.1.16 - XMC Peripheral Driver Library 
   8:../Libraries/XMCLib/src/xmc1_scu.c ****  *
   9:../Libraries/XMCLib/src/xmc1_scu.c ****  * Copyright (c) 2015-2017, Infineon Technologies AG
  10:../Libraries/XMCLib/src/xmc1_scu.c ****  * All rights reserved.
  11:../Libraries/XMCLib/src/xmc1_scu.c ****  *
  12:../Libraries/XMCLib/src/xmc1_scu.c ****  * Redistribution and use in source and binary forms, with or without modification,are permitted pr
  13:../Libraries/XMCLib/src/xmc1_scu.c ****  * following conditions are met:
  14:../Libraries/XMCLib/src/xmc1_scu.c ****  *
  15:../Libraries/XMCLib/src/xmc1_scu.c ****  * Redistributions of source code must retain the above copyright notice, this list of conditions a
  16:../Libraries/XMCLib/src/xmc1_scu.c ****  * disclaimer.
  17:../Libraries/XMCLib/src/xmc1_scu.c ****  *
  18:../Libraries/XMCLib/src/xmc1_scu.c ****  * Redistributions in binary form must reproduce the above copyright notice, this list of condition
  19:../Libraries/XMCLib/src/xmc1_scu.c ****  * disclaimer in the documentation and/or other materials provided with the distribution.
  20:../Libraries/XMCLib/src/xmc1_scu.c ****  *
  21:../Libraries/XMCLib/src/xmc1_scu.c ****  * Neither the name of the copyright holders nor the names of its contributors may be used to endor
  22:../Libraries/XMCLib/src/xmc1_scu.c ****  * products derived from this software without specific prior written permission.
  23:../Libraries/XMCLib/src/xmc1_scu.c ****  *
  24:../Libraries/XMCLib/src/xmc1_scu.c ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR I
  25:../Libraries/XMCLib/src/xmc1_scu.c ****  * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTI
  26:../Libraries/XMCLib/src/xmc1_scu.c ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, IN
  27:../Libraries/XMCLib/src/xmc1_scu.c ****  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBS
  28:../Libraries/XMCLib/src/xmc1_scu.c ****  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THE
  29:../Libraries/XMCLib/src/xmc1_scu.c ****  * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
  30:../Libraries/XMCLib/src/xmc1_scu.c ****  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  31:../Libraries/XMCLib/src/xmc1_scu.c ****  *
  32:../Libraries/XMCLib/src/xmc1_scu.c ****  * To improve the quality of the software, users are encouraged to share modifications, enhancement
  33:../Libraries/XMCLib/src/xmc1_scu.c ****  * Infineon Technologies AG dave@infineon.com).
  34:../Libraries/XMCLib/src/xmc1_scu.c ****  **************************************************************************************************
  35:../Libraries/XMCLib/src/xmc1_scu.c ****  *
  36:../Libraries/XMCLib/src/xmc1_scu.c ****  * Change History
  37:../Libraries/XMCLib/src/xmc1_scu.c ****  * --------------
  38:../Libraries/XMCLib/src/xmc1_scu.c ****  *
  39:../Libraries/XMCLib/src/xmc1_scu.c ****  * 2015-02-20:
  40:../Libraries/XMCLib/src/xmc1_scu.c ****  *     - Initial <br>
  41:../Libraries/XMCLib/src/xmc1_scu.c ****  *
  42:../Libraries/XMCLib/src/xmc1_scu.c ****  * 2015-05-20:
  43:../Libraries/XMCLib/src/xmc1_scu.c ****  *     - XMC_SCU_StartTempMeasurement API is modified
  44:../Libraries/XMCLib/src/xmc1_scu.c ****  *     - XMC_ASSERT statements are added in XMC_SCU_INTERRUPT_SetEventHandler
  45:../Libraries/XMCLib/src/xmc1_scu.c ****  *
  46:../Libraries/XMCLib/src/xmc1_scu.c ****  * 2015-06-20:
  47:../Libraries/XMCLib/src/xmc1_scu.c ****  *     - XMC_SCU_INTERRUPT_EnableEvent,XMC_SCU_INTERRUPT_DisableEvent,
  48:../Libraries/XMCLib/src/xmc1_scu.c ****  *     - XMC_SCU_INTERRUPT_TriggerEvent,XMC_SCU_INTERUPT_GetEventStatus,
  49:../Libraries/XMCLib/src/xmc1_scu.c ****  *     - XMC_SCU_INTERRUPT_ClearEventStatus APIs are added
  50:../Libraries/XMCLib/src/xmc1_scu.c ****  *
  51:../Libraries/XMCLib/src/xmc1_scu.c ****  * 2015-09-23:
  52:../Libraries/XMCLib/src/xmc1_scu.c ****  *     - XMC1400 support added
  53:../Libraries/XMCLib/src/xmc1_scu.c ****  *
  54:../Libraries/XMCLib/src/xmc1_scu.c ****  * 2015-11-30:
  55:../Libraries/XMCLib/src/xmc1_scu.c ****  *     - Documentation improved
  56:../Libraries/XMCLib/src/xmc1_scu.c ****  *
  57:../Libraries/XMCLib/src/xmc1_scu.c ****  * 2016-02-29:
  58:../Libraries/XMCLib/src/xmc1_scu.c ****  *     - Fixed XMC_SCU_CLOCK_ScaleMCLKFrequency
  59:../Libraries/XMCLib/src/xmc1_scu.c ****  *       It solves issues with down clock frequency scaling
  60:../Libraries/XMCLib/src/xmc1_scu.c ****  *
  61:../Libraries/XMCLib/src/xmc1_scu.c ****  * 2016-04-15:
  62:../Libraries/XMCLib/src/xmc1_scu.c ****  *     - Fixed XMC_SCU_CLOCK_Init for XMC1400
  63:../Libraries/XMCLib/src/xmc1_scu.c ****  *       It solves issues when trying to disable the OSCHP and use the XTAL pins as GPIO
  64:../Libraries/XMCLib/src/xmc1_scu.c ****  *
  65:../Libraries/XMCLib/src/xmc1_scu.c ****  * 2017-02-09
  66:../Libraries/XMCLib/src/xmc1_scu.c ****  *     - At XMC_SCU_CLOCK_Init() fixed issue while reading oscillator watchdog status
  67:../Libraries/XMCLib/src/xmc1_scu.c ****  *
  68:../Libraries/XMCLib/src/xmc1_scu.c ****  * 2017-04-11:
  69:../Libraries/XMCLib/src/xmc1_scu.c ****  *     - Added XMC_SCU_SetBMI()
  70:../Libraries/XMCLib/src/xmc1_scu.c ****  *
  71:../Libraries/XMCLib/src/xmc1_scu.c ****  * 2017-06-24
  72:../Libraries/XMCLib/src/xmc1_scu.c ****  *     - Changed XMC_SCU_SetBMI() for XMC11/XMC12/XMC13 to set to 1 the bit 11 of BMI
  73:../Libraries/XMCLib/src/xmc1_scu.c ****  *
  74:../Libraries/XMCLib/src/xmc1_scu.c ****  * @endcond
  75:../Libraries/XMCLib/src/xmc1_scu.c ****  *
  76:../Libraries/XMCLib/src/xmc1_scu.c ****  */
  77:../Libraries/XMCLib/src/xmc1_scu.c **** 
  78:../Libraries/XMCLib/src/xmc1_scu.c **** /**
  79:../Libraries/XMCLib/src/xmc1_scu.c ****  *
  80:../Libraries/XMCLib/src/xmc1_scu.c ****  * @brief SCU low level driver API prototype definition for XMC1 family of microcontrollers <br>
  81:../Libraries/XMCLib/src/xmc1_scu.c ****  *
  82:../Libraries/XMCLib/src/xmc1_scu.c ****  * <b>Detailed description of file</b> <br>
  83:../Libraries/XMCLib/src/xmc1_scu.c ****  * APIs provided in this file cover the following functional blocks of SCU: <br>
  84:../Libraries/XMCLib/src/xmc1_scu.c ****  * -- GCU (APIs prefixed with XMC_SCU_GEN_) <br>
  85:../Libraries/XMCLib/src/xmc1_scu.c ****  * ----Temperature Monitoring, Voltage Monitoring, CCU Start etc
  86:../Libraries/XMCLib/src/xmc1_scu.c ****  *
  87:../Libraries/XMCLib/src/xmc1_scu.c ****  * -- CCU (APIs prefixed with XMC_SCU_CLOCK_)<br>
  88:../Libraries/XMCLib/src/xmc1_scu.c ****  * ---- Clock initialization, Clock Gating, Sleep Management etc
  89:../Libraries/XMCLib/src/xmc1_scu.c ****  *
  90:../Libraries/XMCLib/src/xmc1_scu.c ****  * -- RCU (APIs prefixed with XMC_SCU_RESET_) <br>
  91:../Libraries/XMCLib/src/xmc1_scu.c ****  * ---- Reset Init, Cause, Manual Reset Assert/Deassert etc
  92:../Libraries/XMCLib/src/xmc1_scu.c ****  *
  93:../Libraries/XMCLib/src/xmc1_scu.c ****  * -- INTERRUPT (APIs prefixed with XMC_SCU_INTERRUPT_)<br>
  94:../Libraries/XMCLib/src/xmc1_scu.c ****  * ---- Initialization, Manual Assert/Deassert, Acknowledge etc
  95:../Libraries/XMCLib/src/xmc1_scu.c ****  *
  96:../Libraries/XMCLib/src/xmc1_scu.c ****  */
  97:../Libraries/XMCLib/src/xmc1_scu.c **** 
  98:../Libraries/XMCLib/src/xmc1_scu.c **** /**************************************************************************************************
  99:../Libraries/XMCLib/src/xmc1_scu.c ****  * HEADER FILES
 100:../Libraries/XMCLib/src/xmc1_scu.c ****  **************************************************************************************************
 101:../Libraries/XMCLib/src/xmc1_scu.c **** #include <xmc_scu.h>
 102:../Libraries/XMCLib/src/xmc1_scu.c **** 
 103:../Libraries/XMCLib/src/xmc1_scu.c **** #if UC_FAMILY == XMC1
 104:../Libraries/XMCLib/src/xmc1_scu.c **** 
 105:../Libraries/XMCLib/src/xmc1_scu.c **** /**************************************************************************************************
 106:../Libraries/XMCLib/src/xmc1_scu.c ****  * MACROS
 107:../Libraries/XMCLib/src/xmc1_scu.c ****  **************************************************************************************************
 108:../Libraries/XMCLib/src/xmc1_scu.c **** #define SCU_IRQ_NUM             (3U)  /**< array index value for list of events that can generate S
 109:../Libraries/XMCLib/src/xmc1_scu.c **** #define SCU_GCU_PASSWD_PROT_ENABLE  (195UL) /**< Password for enabling protection */
 110:../Libraries/XMCLib/src/xmc1_scu.c **** #define SCU_GCU_PASSWD_PROT_DISABLE (192UL) /**< Password for disabling protection */
 111:../Libraries/XMCLib/src/xmc1_scu.c **** 
 112:../Libraries/XMCLib/src/xmc1_scu.c **** 
 113:../Libraries/XMCLib/src/xmc1_scu.c **** #define XMC_SCU_CHECK_RTCCLKSRC(source)       ( (source == XMC_SCU_CLOCK_RTCCLKSRC_DCO2) || \
 114:../Libraries/XMCLib/src/xmc1_scu.c ****                                                 (source == XMC_SCU_CLOCK_RTCCLKSRC_ERU_IOUT0) || \
 115:../Libraries/XMCLib/src/xmc1_scu.c ****                                                 (source == XMC_SCU_CLOCK_RTCCLKSRC_ACMP0_OUT) || \
 116:../Libraries/XMCLib/src/xmc1_scu.c ****                                                 (source == XMC_SCU_CLOCK_RTCCLKSRC_ACMP1_OUT) || \
 117:../Libraries/XMCLib/src/xmc1_scu.c ****                                                 (source == XMC_SCU_CLOCK_RTCCLKSRC_ACMP2_OUT) ) /**
 118:../Libraries/XMCLib/src/xmc1_scu.c ****                                                                                                 whe
 119:../Libraries/XMCLib/src/xmc1_scu.c ****                                                                                                 clo
 120:../Libraries/XMCLib/src/xmc1_scu.c ****                                                                                                 or 
 121:../Libraries/XMCLib/src/xmc1_scu.c **** #define SCU_GENERAL_INTCR_INTSEL_Msk SCU_GENERAL_INTCR0_INTSEL0_Msk /**< Mask value of Interrupt So
 122:../Libraries/XMCLib/src/xmc1_scu.c ****                                                                          for Node 0 */
 123:../Libraries/XMCLib/src/xmc1_scu.c **** #define SCU_GENERAL_INTCR_INTSEL_Size SCU_GENERAL_INTCR0_INTSEL1_Pos /**< Bit position value of Int
 124:../Libraries/XMCLib/src/xmc1_scu.c ****                                                                          for Node 1 */
 125:../Libraries/XMCLib/src/xmc1_scu.c **** 
 126:../Libraries/XMCLib/src/xmc1_scu.c **** #define ANA_TSE_T1   (0x10000F30U) /**< d is a constant data can be retrieved from Flash sector 0 t
 127:../Libraries/XMCLib/src/xmc1_scu.c ****                                          value for DCO calibration */
 128:../Libraries/XMCLib/src/xmc1_scu.c **** #define ANA_TSE_T2   (0x10000F31U) /**< e is a constant data can be retrieved from Flash sector 0 t
 129:../Libraries/XMCLib/src/xmc1_scu.c ****                                          value for DCO calibration */
 130:../Libraries/XMCLib/src/xmc1_scu.c **** #define DCO_ADJLO_T1 (0x10000F32U) /**< b is a constant data can be retrieved from Flash sector 0 t
 131:../Libraries/XMCLib/src/xmc1_scu.c ****                                          value for DCO calibration */
 132:../Libraries/XMCLib/src/xmc1_scu.c **** #define DCO_ADJLO_T2 (0x10000F33U) /**< a is a constant data can be retrieved from Flash sector 0 t
 133:../Libraries/XMCLib/src/xmc1_scu.c ****                                          value for DCO calibration */
 134:../Libraries/XMCLib/src/xmc1_scu.c **** 
 135:../Libraries/XMCLib/src/xmc1_scu.c **** #if UC_SERIES == XMC14
 136:../Libraries/XMCLib/src/xmc1_scu.c **** #define XMC_SCU_INTERRUPT_EVENT_MAX (64U) /**< Maximum supported SCU events for XMC14 device. */
 137:../Libraries/XMCLib/src/xmc1_scu.c **** #else
 138:../Libraries/XMCLib/src/xmc1_scu.c **** #define XMC_SCU_INTERRUPT_EVENT_MAX (32U)  /**< Maximum supported SCU events for XMC11/12/13 device
 139:../Libraries/XMCLib/src/xmc1_scu.c **** #endif
 140:../Libraries/XMCLib/src/xmc1_scu.c **** 
 141:../Libraries/XMCLib/src/xmc1_scu.c **** #if UC_SERIES == XMC14
 142:../Libraries/XMCLib/src/xmc1_scu.c **** #define DCO1_DIV2_FREQUENCY_KHZ_Q22_10 (48000U << 10) /**< used to configures main clock (MCLK) fre
 143:../Libraries/XMCLib/src/xmc1_scu.c ****                                                          frequency value during runtime for XMC14 d
 144:../Libraries/XMCLib/src/xmc1_scu.c **** #else
 145:../Libraries/XMCLib/src/xmc1_scu.c **** #define DCO1_DIV2_FREQUENCY_KHZ_Q24_8 (32000U << 8) /**< used to configures main clock (MCLK) frequ
 146:../Libraries/XMCLib/src/xmc1_scu.c ****                                                          frequency value during runtime for XMC11/1
 147:../Libraries/XMCLib/src/xmc1_scu.c **** #endif
 148:../Libraries/XMCLib/src/xmc1_scu.c **** 
 149:../Libraries/XMCLib/src/xmc1_scu.c **** #define ROM_BmiInstallationReq \
 150:../Libraries/XMCLib/src/xmc1_scu.c ****         (*((uint32_t (**)(uint32_t requestedBmiValue))0x00000108U)) /**< Pointer to Request BMI ins
 151:../Libraries/XMCLib/src/xmc1_scu.c ****                                                                          available inside ROM. */
 152:../Libraries/XMCLib/src/xmc1_scu.c **** 
 153:../Libraries/XMCLib/src/xmc1_scu.c **** #define ROM_CalcTemperature \
 154:../Libraries/XMCLib/src/xmc1_scu.c ****         (*((uint32_t (**)(void))0x0000010cU)) /**<  Pointer to Calculate chip temperature routine i
 155:../Libraries/XMCLib/src/xmc1_scu.c ****                                                     available inside ROM. */
 156:../Libraries/XMCLib/src/xmc1_scu.c **** 
 157:../Libraries/XMCLib/src/xmc1_scu.c **** #define ROM_CalcTSEVAR \
 158:../Libraries/XMCLib/src/xmc1_scu.c ****         (*((uint32_t (**)(uint32_t temperature))0x00000120U)) /**<  Pointer to Calculate target lev
 159:../Libraries/XMCLib/src/xmc1_scu.c ****                                                                     comparison routine is available
 160:../Libraries/XMCLib/src/xmc1_scu.c ****         
 161:../Libraries/XMCLib/src/xmc1_scu.c **** /**************************************************************************************************
 162:../Libraries/XMCLib/src/xmc1_scu.c ****  * LOCAL DATA
 163:../Libraries/XMCLib/src/xmc1_scu.c ****  **************************************************************************************************
 164:../Libraries/XMCLib/src/xmc1_scu.c **** static XMC_SCU_INTERRUPT_EVENT_HANDLER_t event_handler_list[XMC_SCU_INTERRUPT_EVENT_MAX]; /**< For 
 165:../Libraries/XMCLib/src/xmc1_scu.c ****                                                                                         functions o
 166:../Libraries/XMCLib/src/xmc1_scu.c ****                                                                                         occurrence.
 167:../Libraries/XMCLib/src/xmc1_scu.c **** 
 168:../Libraries/XMCLib/src/xmc1_scu.c **** static XMC_SCU_INTERRUPT_EVENT_t event_masks[SCU_IRQ_NUM] =
 169:../Libraries/XMCLib/src/xmc1_scu.c **** {
 170:../Libraries/XMCLib/src/xmc1_scu.c ****   (XMC_SCU_INTERRUPT_EVENT_FLASH_ERROR |
 171:../Libraries/XMCLib/src/xmc1_scu.c ****    XMC_SCU_INTERRUPT_EVENT_FLASH_COMPLETED |
 172:../Libraries/XMCLib/src/xmc1_scu.c ****    XMC_SCU_INTERRUPT_EVENT_PESRAM |
 173:../Libraries/XMCLib/src/xmc1_scu.c ****    XMC_SCU_INTERRUPT_EVENT_PEUSIC0 |
 174:../Libraries/XMCLib/src/xmc1_scu.c **** #if defined(USIC1)
 175:../Libraries/XMCLib/src/xmc1_scu.c ****    XMC_SCU_INTERRUPT_EVENT_PEUSIC1 |
 176:../Libraries/XMCLib/src/xmc1_scu.c **** #endif
 177:../Libraries/XMCLib/src/xmc1_scu.c **** #if defined(CAN)
 178:../Libraries/XMCLib/src/xmc1_scu.c ****    XMC_SCU_INTERRUPT_EVENT_PEMCAN |
 179:../Libraries/XMCLib/src/xmc1_scu.c **** #endif
 180:../Libraries/XMCLib/src/xmc1_scu.c **** #if UC_SERIES == XMC14
 181:../Libraries/XMCLib/src/xmc1_scu.c ****    XMC_SCU_INTERRUPT_EVENT_LOSS_EXT_CLOCK |
 182:../Libraries/XMCLib/src/xmc1_scu.c **** #endif
 183:../Libraries/XMCLib/src/xmc1_scu.c ****    XMC_SCU_INTERRUPT_EVENT_LOCI),
 184:../Libraries/XMCLib/src/xmc1_scu.c **** 
 185:../Libraries/XMCLib/src/xmc1_scu.c ****   (XMC_SCU_INTERRUPT_EVENT_STDBYCLKFAIL |
 186:../Libraries/XMCLib/src/xmc1_scu.c **** #if UC_SERIES == XMC14
 187:../Libraries/XMCLib/src/xmc1_scu.c ****    XMC_SCU_INTERRUPT_EVENT_DCO1_OUT_SYNC |
 188:../Libraries/XMCLib/src/xmc1_scu.c **** #endif
 189:../Libraries/XMCLib/src/xmc1_scu.c ****    XMC_SCU_INTERRUPT_EVENT_VDDPI |
 190:../Libraries/XMCLib/src/xmc1_scu.c ****    XMC_SCU_INTERRUPT_EVENT_VDROP |
 191:../Libraries/XMCLib/src/xmc1_scu.c ****    XMC_SCU_INTERRUPT_EVENT_VCLIP |
 192:../Libraries/XMCLib/src/xmc1_scu.c ****    XMC_SCU_INTERRUPT_EVENT_TSE_DONE |
 193:../Libraries/XMCLib/src/xmc1_scu.c ****    XMC_SCU_INTERRUPT_EVENT_TSE_HIGH |
 194:../Libraries/XMCLib/src/xmc1_scu.c ****    XMC_SCU_INTERRUPT_EVENT_TSE_LOW |
 195:../Libraries/XMCLib/src/xmc1_scu.c ****    XMC_SCU_INTERRUPT_EVENT_WDT_WARN |
 196:../Libraries/XMCLib/src/xmc1_scu.c ****    XMC_SCU_INTERRUPT_EVENT_RTC_PERIODIC |
 197:../Libraries/XMCLib/src/xmc1_scu.c ****    XMC_SCU_INTERRUPT_EVENT_RTC_ALARM |
 198:../Libraries/XMCLib/src/xmc1_scu.c ****    XMC_SCU_INTERRUPT_EVENT_RTCCTR_UPDATED |
 199:../Libraries/XMCLib/src/xmc1_scu.c ****    XMC_SCU_INTERRUPT_EVENT_RTCATIM0_UPDATED |
 200:../Libraries/XMCLib/src/xmc1_scu.c ****    XMC_SCU_INTERRUPT_EVENT_RTCATIM1_UPDATED |
 201:../Libraries/XMCLib/src/xmc1_scu.c ****    XMC_SCU_INTERRUPT_EVENT_RTCTIM0_UPDATED |
 202:../Libraries/XMCLib/src/xmc1_scu.c ****    XMC_SCU_INTERRUPT_EVENT_RTCTIM1_UPDATED),
 203:../Libraries/XMCLib/src/xmc1_scu.c **** 
 204:../Libraries/XMCLib/src/xmc1_scu.c ****   (
 205:../Libraries/XMCLib/src/xmc1_scu.c **** #if UC_SERIES != XMC11
 206:../Libraries/XMCLib/src/xmc1_scu.c ****    XMC_SCU_INTERRUPT_EVENT_ORC0 |
 207:../Libraries/XMCLib/src/xmc1_scu.c ****    XMC_SCU_INTERRUPT_EVENT_ORC1 |
 208:../Libraries/XMCLib/src/xmc1_scu.c ****    XMC_SCU_INTERRUPT_EVENT_ORC2 |
 209:../Libraries/XMCLib/src/xmc1_scu.c ****    XMC_SCU_INTERRUPT_EVENT_ORC3 |
 210:../Libraries/XMCLib/src/xmc1_scu.c ****    XMC_SCU_INTERRUPT_EVENT_ORC4 |
 211:../Libraries/XMCLib/src/xmc1_scu.c ****    XMC_SCU_INTERRUPT_EVENT_ORC5 |
 212:../Libraries/XMCLib/src/xmc1_scu.c ****    XMC_SCU_INTERRUPT_EVENT_ORC6 |
 213:../Libraries/XMCLib/src/xmc1_scu.c ****    XMC_SCU_INTERRUPT_EVENT_ORC7 |
 214:../Libraries/XMCLib/src/xmc1_scu.c **** #endif
 215:../Libraries/XMCLib/src/xmc1_scu.c **** #if defined(COMPARATOR)
 216:../Libraries/XMCLib/src/xmc1_scu.c ****    XMC_SCU_INTERRUPT_EVENT_ACMP0 |
 217:../Libraries/XMCLib/src/xmc1_scu.c ****    XMC_SCU_INTERRUPT_EVENT_ACMP1 |
 218:../Libraries/XMCLib/src/xmc1_scu.c ****    XMC_SCU_INTERRUPT_EVENT_ACMP2 |
 219:../Libraries/XMCLib/src/xmc1_scu.c **** #if UC_SERIES == XMC14
 220:../Libraries/XMCLib/src/xmc1_scu.c ****    XMC_SCU_INTERRUPT_EVENT_ACMP3 |
 221:../Libraries/XMCLib/src/xmc1_scu.c **** #endif
 222:../Libraries/XMCLib/src/xmc1_scu.c **** #endif
 223:../Libraries/XMCLib/src/xmc1_scu.c ****    0)
 224:../Libraries/XMCLib/src/xmc1_scu.c **** }; /**<   Defines list of events that can generate SCU interrupt and also indicates SCU events mapp
 225:../Libraries/XMCLib/src/xmc1_scu.c ****          service request number. These event mask values can be used to verify which event is trigg
 226:../Libraries/XMCLib/src/xmc1_scu.c ****          to service request number during runtime. All the event items are tabulated as per service
 227:../Libraries/XMCLib/src/xmc1_scu.c ****          table of SCU. */
 228:../Libraries/XMCLib/src/xmc1_scu.c **** 
 229:../Libraries/XMCLib/src/xmc1_scu.c **** /**************************************************************************************************
 230:../Libraries/XMCLib/src/xmc1_scu.c ****  * LOCAL ROUTINES
 231:../Libraries/XMCLib/src/xmc1_scu.c ****  **************************************************************************************************
 232:../Libraries/XMCLib/src/xmc1_scu.c **** /* Utility routine to perform frequency up scaling */
 233:../Libraries/XMCLib/src/xmc1_scu.c **** static void XMC_SCU_CLOCK_lFrequencyUpScaling(uint32_t curr_idiv, uint32_t idiv);
 234:../Libraries/XMCLib/src/xmc1_scu.c **** 
 235:../Libraries/XMCLib/src/xmc1_scu.c **** /* Utility routine to perform frequency down scaling */
 236:../Libraries/XMCLib/src/xmc1_scu.c **** static void XMC_SCU_CLOCK_lFrequencyDownScaling(uint32_t curr_idiv, uint32_t idiv);
 237:../Libraries/XMCLib/src/xmc1_scu.c **** 
 238:../Libraries/XMCLib/src/xmc1_scu.c **** /* Calculates the value which must be installed in ANATSEIx register to get indication in
 239:../Libraries/XMCLib/src/xmc1_scu.c ****    SCU_INTERRUPT->SRRAW  bit when the chip temperature is above/below some target/threshold. */
 240:../Libraries/XMCLib/src/xmc1_scu.c **** static uint32_t XMC_SCU_CalcTSEVAR(uint32_t temperature)
 241:../Libraries/XMCLib/src/xmc1_scu.c **** {
 242:../Libraries/XMCLib/src/xmc1_scu.c ****   uint32_t limit;
 243:../Libraries/XMCLib/src/xmc1_scu.c **** 
 244:../Libraries/XMCLib/src/xmc1_scu.c ****   XMC_ASSERT("XMC_SCU_CalcTSEVAR: temperature out of range", (temperature >= 233U) && (temperature 
 245:../Libraries/XMCLib/src/xmc1_scu.c **** 
 246:../Libraries/XMCLib/src/xmc1_scu.c ****   limit = ROM_CalcTSEVAR(temperature);
 247:../Libraries/XMCLib/src/xmc1_scu.c ****   if (limit == 0U)
 248:../Libraries/XMCLib/src/xmc1_scu.c ****   {
 249:../Libraries/XMCLib/src/xmc1_scu.c ****     limit = ROM_CalcTSEVAR(temperature + 1U);
 250:../Libraries/XMCLib/src/xmc1_scu.c ****     if (limit == 0U)
 251:../Libraries/XMCLib/src/xmc1_scu.c ****     {
 252:../Libraries/XMCLib/src/xmc1_scu.c ****       limit = ROM_CalcTSEVAR(temperature - 1U);
 253:../Libraries/XMCLib/src/xmc1_scu.c ****     }
 254:../Libraries/XMCLib/src/xmc1_scu.c ****   }
 255:../Libraries/XMCLib/src/xmc1_scu.c ****   
 256:../Libraries/XMCLib/src/xmc1_scu.c ****   return (limit);
 257:../Libraries/XMCLib/src/xmc1_scu.c **** }
 258:../Libraries/XMCLib/src/xmc1_scu.c **** 
 259:../Libraries/XMCLib/src/xmc1_scu.c **** #if UC_SERIES == XMC14
 260:../Libraries/XMCLib/src/xmc1_scu.c **** /* This is a local function used to generate the delay until register get updated with new configur
 261:../Libraries/XMCLib/src/xmc1_scu.c **** static void delay(uint32_t cycles)
 262:../Libraries/XMCLib/src/xmc1_scu.c **** {
 263:../Libraries/XMCLib/src/xmc1_scu.c ****   while(cycles > 0U)
 264:../Libraries/XMCLib/src/xmc1_scu.c ****   {
 265:../Libraries/XMCLib/src/xmc1_scu.c ****     __NOP();
 266:../Libraries/XMCLib/src/xmc1_scu.c ****     cycles--;
 267:../Libraries/XMCLib/src/xmc1_scu.c ****   }
 268:../Libraries/XMCLib/src/xmc1_scu.c **** }
 269:../Libraries/XMCLib/src/xmc1_scu.c **** #endif
 270:../Libraries/XMCLib/src/xmc1_scu.c **** 
 271:../Libraries/XMCLib/src/xmc1_scu.c **** /**************************************************************************************************
 272:../Libraries/XMCLib/src/xmc1_scu.c ****  * API IMPLEMENTATION
 273:../Libraries/XMCLib/src/xmc1_scu.c ****  **************************************************************************************************
 274:../Libraries/XMCLib/src/xmc1_scu.c ****  #ifdef XMC_ASSERT_ENABLE
 275:../Libraries/XMCLib/src/xmc1_scu.c **** /* API to verify SCU event weather it is valid event or not */
 276:../Libraries/XMCLib/src/xmc1_scu.c **** __STATIC_INLINE bool XMC_SCU_INTERRUPT_IsValidEvent(XMC_SCU_INTERRUPT_EVENT_t event)
 277:../Libraries/XMCLib/src/xmc1_scu.c **** {
 278:../Libraries/XMCLib/src/xmc1_scu.c ****   return ((event == XMC_SCU_INTERRUPT_EVENT_WDT_WARN) ||
 279:../Libraries/XMCLib/src/xmc1_scu.c ****           (event == XMC_SCU_INTERRUPT_EVENT_RTC_PERIODIC) ||
 280:../Libraries/XMCLib/src/xmc1_scu.c ****           (event == XMC_SCU_INTERRUPT_EVENT_RTC_ALARM) ||
 281:../Libraries/XMCLib/src/xmc1_scu.c ****           (event == XMC_SCU_INTERRUPT_EVENT_VDDPI) ||
 282:../Libraries/XMCLib/src/xmc1_scu.c **** #if defined(USIC1)
 283:../Libraries/XMCLib/src/xmc1_scu.c ****           (event == XMC_SCU_INTERRUPT_EVENT_PEUSIC1) ||
 284:../Libraries/XMCLib/src/xmc1_scu.c **** #endif
 285:../Libraries/XMCLib/src/xmc1_scu.c **** #if defined(CAN)
 286:../Libraries/XMCLib/src/xmc1_scu.c ****           (event == XMC_SCU_INTERRUPT_EVENT_PEMCAN) ||
 287:../Libraries/XMCLib/src/xmc1_scu.c **** #endif
 288:../Libraries/XMCLib/src/xmc1_scu.c **** #if UC_SERIES == XMC14
 289:../Libraries/XMCLib/src/xmc1_scu.c ****           (event == XMC_SCU_INTERRUPT_EVENT_LOSS_EXT_CLOCK) ||
 290:../Libraries/XMCLib/src/xmc1_scu.c ****           (event == XMC_SCU_INTERRUPT_EVENT_DCO1_OUT_SYNC) ||
 291:../Libraries/XMCLib/src/xmc1_scu.c **** #endif
 292:../Libraries/XMCLib/src/xmc1_scu.c **** #if defined(COMPARATOR)
 293:../Libraries/XMCLib/src/xmc1_scu.c ****           (event == XMC_SCU_INTERRUPT_EVENT_ACMP0) ||
 294:../Libraries/XMCLib/src/xmc1_scu.c ****           (event == XMC_SCU_INTERRUPT_EVENT_ACMP1) ||
 295:../Libraries/XMCLib/src/xmc1_scu.c ****           (event == XMC_SCU_INTERRUPT_EVENT_ACMP2) ||
 296:../Libraries/XMCLib/src/xmc1_scu.c **** #if UC_SERIES == XMC14
 297:../Libraries/XMCLib/src/xmc1_scu.c ****           (event == XMC_SCU_INTERRUPT_EVENT_ACMP3) ||
 298:../Libraries/XMCLib/src/xmc1_scu.c **** #endif
 299:../Libraries/XMCLib/src/xmc1_scu.c **** #endif
 300:../Libraries/XMCLib/src/xmc1_scu.c ****           (event == XMC_SCU_INTERRUPT_EVENT_VDROP) ||
 301:../Libraries/XMCLib/src/xmc1_scu.c **** #if UC_SERIES != XMC11
 302:../Libraries/XMCLib/src/xmc1_scu.c ****           (event == XMC_SCU_INTERRUPT_EVENT_ORC0) ||
 303:../Libraries/XMCLib/src/xmc1_scu.c ****           (event == XMC_SCU_INTERRUPT_EVENT_ORC1) ||
 304:../Libraries/XMCLib/src/xmc1_scu.c ****           (event == XMC_SCU_INTERRUPT_EVENT_ORC2) ||
 305:../Libraries/XMCLib/src/xmc1_scu.c ****           (event == XMC_SCU_INTERRUPT_EVENT_ORC3) ||
 306:../Libraries/XMCLib/src/xmc1_scu.c ****           (event == XMC_SCU_INTERRUPT_EVENT_ORC4) ||
 307:../Libraries/XMCLib/src/xmc1_scu.c ****           (event == XMC_SCU_INTERRUPT_EVENT_ORC5) ||
 308:../Libraries/XMCLib/src/xmc1_scu.c ****           (event == XMC_SCU_INTERRUPT_EVENT_ORC6) ||
 309:../Libraries/XMCLib/src/xmc1_scu.c ****           (event == XMC_SCU_INTERRUPT_EVENT_ORC7) ||
 310:../Libraries/XMCLib/src/xmc1_scu.c **** #endif
 311:../Libraries/XMCLib/src/xmc1_scu.c ****           (event == XMC_SCU_INTERRUPT_EVENT_LOCI) ||
 312:../Libraries/XMCLib/src/xmc1_scu.c ****           (event == XMC_SCU_INTERRUPT_EVENT_PESRAM) ||
 313:../Libraries/XMCLib/src/xmc1_scu.c ****           (event == XMC_SCU_INTERRUPT_EVENT_PEUSIC0) ||
 314:../Libraries/XMCLib/src/xmc1_scu.c ****           (event == XMC_SCU_INTERRUPT_EVENT_FLASH_ERROR) ||
 315:../Libraries/XMCLib/src/xmc1_scu.c ****           (event == XMC_SCU_INTERRUPT_EVENT_FLASH_COMPLETED) ||
 316:../Libraries/XMCLib/src/xmc1_scu.c ****           (event == XMC_SCU_INTERRUPT_EVENT_VCLIP) ||
 317:../Libraries/XMCLib/src/xmc1_scu.c ****           (event == XMC_SCU_INTERRUPT_EVENT_STDBYCLKFAIL) ||
 318:../Libraries/XMCLib/src/xmc1_scu.c ****           (event == XMC_SCU_INTERRUPT_EVENT_RTCCTR_UPDATED) ||
 319:../Libraries/XMCLib/src/xmc1_scu.c ****           (event == XMC_SCU_INTERRUPT_EVENT_RTCATIM0_UPDATED) ||
 320:../Libraries/XMCLib/src/xmc1_scu.c ****           (event == XMC_SCU_INTERRUPT_EVENT_RTCATIM1_UPDATED) ||
 321:../Libraries/XMCLib/src/xmc1_scu.c ****           (event == XMC_SCU_INTERRUPT_EVENT_RTCTIM0_UPDATED) ||
 322:../Libraries/XMCLib/src/xmc1_scu.c ****           (event == XMC_SCU_INTERRUPT_EVENT_RTCTIM1_UPDATED) ||
 323:../Libraries/XMCLib/src/xmc1_scu.c ****           (event == XMC_SCU_INTERRUPT_EVENT_TSE_DONE) ||
 324:../Libraries/XMCLib/src/xmc1_scu.c ****           (event == XMC_SCU_INTERRUPT_EVENT_TSE_HIGH) ||
 325:../Libraries/XMCLib/src/xmc1_scu.c ****           (event == XMC_SCU_INTERRUPT_EVENT_TSE_LOW));
 326:../Libraries/XMCLib/src/xmc1_scu.c **** }
 327:../Libraries/XMCLib/src/xmc1_scu.c ****  #endif
 328:../Libraries/XMCLib/src/xmc1_scu.c **** 
 329:../Libraries/XMCLib/src/xmc1_scu.c **** /* API to enable the SCU event */
 330:../Libraries/XMCLib/src/xmc1_scu.c **** void XMC_SCU_INTERRUPT_EnableEvent(const XMC_SCU_INTERRUPT_EVENT_t event)
 331:../Libraries/XMCLib/src/xmc1_scu.c **** {
  26              	 .loc 1 331 0
  27              	 .cfi_startproc
  28              	.LVL0:
 332:../Libraries/XMCLib/src/xmc1_scu.c ****   SCU_INTERRUPT->SRMSK |= (uint32_t)event;
  29              	 .loc 1 332 0
  30 0000 024A     	 ldr r2,.L2
 333:../Libraries/XMCLib/src/xmc1_scu.c **** #if UC_SERIES == XMC14
 334:../Libraries/XMCLib/src/xmc1_scu.c ****   SCU_INTERRUPT->SRMSK1 |= (uint32_t)(event >> 32U);
 335:../Libraries/XMCLib/src/xmc1_scu.c **** #endif
 336:../Libraries/XMCLib/src/xmc1_scu.c **** }
  31              	 .loc 1 336 0
  32              	 
 332:../Libraries/XMCLib/src/xmc1_scu.c ****   SCU_INTERRUPT->SRMSK |= (uint32_t)event;
  33              	 .loc 1 332 0
  34 0002 5368     	 ldr r3,[r2,#4]
  35 0004 1843     	 orr r0,r3
  36              	.LVL1:
  37 0006 5060     	 str r0,[r2,#4]
  38              	 .loc 1 336 0
  39 0008 7047     	 bx lr
  40              	.L3:
  41 000a C046     	 .align 2
  42              	.L2:
  43 000c 38000140 	 .word 1073807416
  44              	 .cfi_endproc
  45              	.LFE51:
  47              	 .section .text.XMC_SCU_INTERRUPT_DisableEvent,"ax",%progbits
  48              	 .align 2
  49              	 .global XMC_SCU_INTERRUPT_DisableEvent
  50              	 .code 16
  51              	 .thumb_func
  53              	XMC_SCU_INTERRUPT_DisableEvent:
  54              	.LFB52:
 337:../Libraries/XMCLib/src/xmc1_scu.c **** 
 338:../Libraries/XMCLib/src/xmc1_scu.c **** /* API to disable the SCU event */
 339:../Libraries/XMCLib/src/xmc1_scu.c **** void XMC_SCU_INTERRUPT_DisableEvent(const XMC_SCU_INTERRUPT_EVENT_t event)
 340:../Libraries/XMCLib/src/xmc1_scu.c **** {
  55              	 .loc 1 340 0
  56              	 .cfi_startproc
  57              	.LVL2:
 341:../Libraries/XMCLib/src/xmc1_scu.c ****   SCU_INTERRUPT->SRMSK &= ~(uint32_t)event;
  58              	 .loc 1 341 0
  59 0000 024A     	 ldr r2,.L5
 342:../Libraries/XMCLib/src/xmc1_scu.c **** #if UC_SERIES == XMC14
 343:../Libraries/XMCLib/src/xmc1_scu.c ****   SCU_INTERRUPT->SRMSK1 &= (uint32_t)~(event >> 32U);
 344:../Libraries/XMCLib/src/xmc1_scu.c **** #endif
 345:../Libraries/XMCLib/src/xmc1_scu.c **** }
  60              	 .loc 1 345 0
  61              	 
 341:../Libraries/XMCLib/src/xmc1_scu.c ****   SCU_INTERRUPT->SRMSK &= ~(uint32_t)event;
  62              	 .loc 1 341 0
  63 0002 5368     	 ldr r3,[r2,#4]
  64 0004 8343     	 bic r3,r0
  65 0006 5360     	 str r3,[r2,#4]
  66              	 .loc 1 345 0
  67 0008 7047     	 bx lr
  68              	.L6:
  69 000a C046     	 .align 2
  70              	.L5:
  71 000c 38000140 	 .word 1073807416
  72              	 .cfi_endproc
  73              	.LFE52:
  75              	 .section .text.XMC_SCU_INTERRUPT_TriggerEvent,"ax",%progbits
  76              	 .align 2
  77              	 .global XMC_SCU_INTERRUPT_TriggerEvent
  78              	 .code 16
  79              	 .thumb_func
  81              	XMC_SCU_INTERRUPT_TriggerEvent:
  82              	.LFB53:
 346:../Libraries/XMCLib/src/xmc1_scu.c **** 
 347:../Libraries/XMCLib/src/xmc1_scu.c **** /* API to trigger the SCU event */
 348:../Libraries/XMCLib/src/xmc1_scu.c **** void XMC_SCU_INTERRUPT_TriggerEvent(const XMC_SCU_INTERRUPT_EVENT_t event)
 349:../Libraries/XMCLib/src/xmc1_scu.c **** {
  83              	 .loc 1 349 0
  84              	 .cfi_startproc
  85              	.LVL3:
 350:../Libraries/XMCLib/src/xmc1_scu.c ****   SCU_INTERRUPT->SRSET |= (uint32_t)event;
  86              	 .loc 1 350 0
  87 0000 024A     	 ldr r2,.L8
 351:../Libraries/XMCLib/src/xmc1_scu.c **** #if UC_SERIES == XMC14
 352:../Libraries/XMCLib/src/xmc1_scu.c ****   SCU_INTERRUPT->SRSET1 |= (uint32_t)(event >> 32U);
 353:../Libraries/XMCLib/src/xmc1_scu.c **** #endif
 354:../Libraries/XMCLib/src/xmc1_scu.c **** }
  88              	 .loc 1 354 0
  89              	 
 350:../Libraries/XMCLib/src/xmc1_scu.c ****   SCU_INTERRUPT->SRSET |= (uint32_t)event;
  90              	 .loc 1 350 0
  91 0002 D368     	 ldr r3,[r2,#12]
  92 0004 1843     	 orr r0,r3
  93              	.LVL4:
  94 0006 D060     	 str r0,[r2,#12]
  95              	 .loc 1 354 0
  96 0008 7047     	 bx lr
  97              	.L9:
  98 000a C046     	 .align 2
  99              	.L8:
 100 000c 38000140 	 .word 1073807416
 101              	 .cfi_endproc
 102              	.LFE53:
 104              	 .section .text.XMC_SCU_INTERUPT_GetEventStatus,"ax",%progbits
 105              	 .align 2
 106              	 .global XMC_SCU_INTERUPT_GetEventStatus
 107              	 .code 16
 108              	 .thumb_func
 110              	XMC_SCU_INTERUPT_GetEventStatus:
 111              	.LFB54:
 355:../Libraries/XMCLib/src/xmc1_scu.c **** 
 356:../Libraries/XMCLib/src/xmc1_scu.c **** /* API to get the SCU event status */
 357:../Libraries/XMCLib/src/xmc1_scu.c **** XMC_SCU_INTERRUPT_EVENT_t XMC_SCU_INTERUPT_GetEventStatus(void)
 358:../Libraries/XMCLib/src/xmc1_scu.c **** {
 112              	 .loc 1 358 0
 113              	 .cfi_startproc
 359:../Libraries/XMCLib/src/xmc1_scu.c ****   XMC_SCU_INTERRUPT_EVENT_t tmp;
 360:../Libraries/XMCLib/src/xmc1_scu.c **** 
 361:../Libraries/XMCLib/src/xmc1_scu.c ****   tmp = SCU_INTERRUPT->SRRAW;
 114              	 .loc 1 361 0
 115 0000 014B     	 ldr r3,.L11
 362:../Libraries/XMCLib/src/xmc1_scu.c **** #if UC_SERIES == XMC14
 363:../Libraries/XMCLib/src/xmc1_scu.c ****   tmp |= ((int64_t)SCU_INTERRUPT->SRRAW1 << 32U);
 364:../Libraries/XMCLib/src/xmc1_scu.c **** #endif
 365:../Libraries/XMCLib/src/xmc1_scu.c ****   return (tmp);
 366:../Libraries/XMCLib/src/xmc1_scu.c **** }
 116              	 .loc 1 366 0
 117              	 
 361:../Libraries/XMCLib/src/xmc1_scu.c **** #if UC_SERIES == XMC14
 118              	 .loc 1 361 0
 119 0002 1868     	 ldr r0,[r3]
 120              	.LVL5:
 121              	 .loc 1 366 0
 122 0004 7047     	 bx lr
 123              	.L12:
 124 0006 C046     	 .align 2
 125              	.L11:
 126 0008 38000140 	 .word 1073807416
 127              	 .cfi_endproc
 128              	.LFE54:
 130              	 .section .text.XMC_SCU_INTERRUPT_ClearEventStatus,"ax",%progbits
 131              	 .align 2
 132              	 .global XMC_SCU_INTERRUPT_ClearEventStatus
 133              	 .code 16
 134              	 .thumb_func
 136              	XMC_SCU_INTERRUPT_ClearEventStatus:
 137              	.LFB55:
 367:../Libraries/XMCLib/src/xmc1_scu.c **** 
 368:../Libraries/XMCLib/src/xmc1_scu.c **** /* API to clear the SCU event status */
 369:../Libraries/XMCLib/src/xmc1_scu.c **** void XMC_SCU_INTERRUPT_ClearEventStatus(const XMC_SCU_INTERRUPT_EVENT_t event)
 370:../Libraries/XMCLib/src/xmc1_scu.c **** {
 138              	 .loc 1 370 0
 139              	 .cfi_startproc
 140              	.LVL6:
 371:../Libraries/XMCLib/src/xmc1_scu.c ****   SCU_INTERRUPT->SRCLR |= (uint32_t)event;
 141              	 .loc 1 371 0
 142 0000 024A     	 ldr r2,.L14
 372:../Libraries/XMCLib/src/xmc1_scu.c **** #if UC_SERIES == XMC14
 373:../Libraries/XMCLib/src/xmc1_scu.c ****   SCU_INTERRUPT->SRCLR1 |= (uint32_t)(event >> 32U);
 374:../Libraries/XMCLib/src/xmc1_scu.c **** #endif
 375:../Libraries/XMCLib/src/xmc1_scu.c **** }
 143              	 .loc 1 375 0
 144              	 
 371:../Libraries/XMCLib/src/xmc1_scu.c ****   SCU_INTERRUPT->SRCLR |= (uint32_t)event;
 145              	 .loc 1 371 0
 146 0002 9368     	 ldr r3,[r2,#8]
 147 0004 1843     	 orr r0,r3
 148              	.LVL7:
 149 0006 9060     	 str r0,[r2,#8]
 150              	 .loc 1 375 0
 151 0008 7047     	 bx lr
 152              	.L15:
 153 000a C046     	 .align 2
 154              	.L14:
 155 000c 38000140 	 .word 1073807416
 156              	 .cfi_endproc
 157              	.LFE55:
 159              	 .section .text.XMC_SCU_LockProtectedBits,"ax",%progbits
 160              	 .align 2
 161              	 .global XMC_SCU_LockProtectedBits
 162              	 .code 16
 163              	 .thumb_func
 165              	XMC_SCU_LockProtectedBits:
 166              	.LFB56:
 376:../Libraries/XMCLib/src/xmc1_scu.c **** 
 377:../Libraries/XMCLib/src/xmc1_scu.c **** /* API to lock protected bitfields from being modified */
 378:../Libraries/XMCLib/src/xmc1_scu.c **** void XMC_SCU_LockProtectedBits(void)
 379:../Libraries/XMCLib/src/xmc1_scu.c **** {
 167              	 .loc 1 379 0
 168              	 .cfi_startproc
 380:../Libraries/XMCLib/src/xmc1_scu.c ****   SCU_GENERAL->PASSWD = SCU_GCU_PASSWD_PROT_ENABLE;
 169              	 .loc 1 380 0
 170 0000 C322     	 mov r2,#195
 171 0002 014B     	 ldr r3,.L17
 381:../Libraries/XMCLib/src/xmc1_scu.c **** }
 172              	 .loc 1 381 0
 173              	 
 380:../Libraries/XMCLib/src/xmc1_scu.c ****   SCU_GENERAL->PASSWD = SCU_GCU_PASSWD_PROT_ENABLE;
 174              	 .loc 1 380 0
 175 0004 5A62     	 str r2,[r3,#36]
 176              	 .loc 1 381 0
 177 0006 7047     	 bx lr
 178              	.L18:
 179              	 .align 2
 180              	.L17:
 181 0008 00000140 	 .word 1073807360
 182              	 .cfi_endproc
 183              	.LFE56:
 185              	 .section .text.XMC_SCU_UnlockProtectedBits,"ax",%progbits
 186              	 .align 2
 187              	 .global XMC_SCU_UnlockProtectedBits
 188              	 .code 16
 189              	 .thumb_func
 191              	XMC_SCU_UnlockProtectedBits:
 192              	.LFB57:
 382:../Libraries/XMCLib/src/xmc1_scu.c **** 
 383:../Libraries/XMCLib/src/xmc1_scu.c **** /* API to make protected bitfields available for modification */
 384:../Libraries/XMCLib/src/xmc1_scu.c **** void XMC_SCU_UnlockProtectedBits(void)
 385:../Libraries/XMCLib/src/xmc1_scu.c **** {
 193              	 .loc 1 385 0
 194              	 .cfi_startproc
 386:../Libraries/XMCLib/src/xmc1_scu.c ****   SCU_GENERAL->PASSWD = SCU_GCU_PASSWD_PROT_DISABLE;
 195              	 .loc 1 386 0
 196 0000 C023     	 mov r3,#192
 387:../Libraries/XMCLib/src/xmc1_scu.c **** 
 388:../Libraries/XMCLib/src/xmc1_scu.c ****   while(((SCU_GENERAL->PASSWD) & SCU_GENERAL_PASSWD_PROTS_Msk))
 197              	 .loc 1 388 0
 198 0002 0421     	 mov r1,#4
 386:../Libraries/XMCLib/src/xmc1_scu.c ****   SCU_GENERAL->PASSWD = SCU_GCU_PASSWD_PROT_DISABLE;
 199              	 .loc 1 386 0
 200 0004 024A     	 ldr r2,.L23
 201 0006 5362     	 str r3,[r2,#36]
 202              	.L20:
 203              	 .loc 1 388 0 discriminator 1
 204 0008 536A     	 ldr r3,[r2,#36]
 205 000a 1942     	 tst r1,r3
 206 000c FCD1     	 bne .L20
 389:../Libraries/XMCLib/src/xmc1_scu.c ****   {
 390:../Libraries/XMCLib/src/xmc1_scu.c ****     /* Loop until the lock is removed */
 391:../Libraries/XMCLib/src/xmc1_scu.c ****   }
 392:../Libraries/XMCLib/src/xmc1_scu.c **** }
 207              	 .loc 1 392 0
 208              	 
 209 000e 7047     	 bx lr
 210              	.L24:
 211              	 .align 2
 212              	.L23:
 213 0010 00000140 	 .word 1073807360
 214              	 .cfi_endproc
 215              	.LFE57:
 217              	 .section .text.XMC_SCU_SupplyMonitorInit,"ax",%progbits
 218              	 .align 2
 219              	 .global XMC_SCU_SupplyMonitorInit
 220              	 .code 16
 221              	 .thumb_func
 223              	XMC_SCU_SupplyMonitorInit:
 224              	.LFB58:
 393:../Libraries/XMCLib/src/xmc1_scu.c **** 
 394:../Libraries/XMCLib/src/xmc1_scu.c **** /* API to initialize power supply monitoring unit */
 395:../Libraries/XMCLib/src/xmc1_scu.c **** void XMC_SCU_SupplyMonitorInit(const XMC_SCU_SUPPLYMONITOR_t *obj)
 396:../Libraries/XMCLib/src/xmc1_scu.c **** {
 225              	 .loc 1 396 0
 226              	 .cfi_startproc
 227              	.LVL8:
 397:../Libraries/XMCLib/src/xmc1_scu.c ****   uint32_t anavdel;
 398:../Libraries/XMCLib/src/xmc1_scu.c ****   uint32_t irqmask;
 399:../Libraries/XMCLib/src/xmc1_scu.c **** 
 400:../Libraries/XMCLib/src/xmc1_scu.c ****   anavdel = 0UL;
 401:../Libraries/XMCLib/src/xmc1_scu.c **** 
 402:../Libraries/XMCLib/src/xmc1_scu.c ****   anavdel |= (uint32_t)((obj-> ext_supply_threshold) << SCU_ANALOG_ANAVDEL_VDEL_SELECT_Pos);
 403:../Libraries/XMCLib/src/xmc1_scu.c ****   anavdel |= (uint32_t)((obj->ext_supply_monitor_speed) << SCU_ANALOG_ANAVDEL_VDEL_TIM_ADJ_Pos);
 228              	 .loc 1 403 0
 229 0000 4368     	 ldr r3,[r0,#4]
 230 0002 0268     	 ldr r2,[r0]
 231 0004 9B00     	 lsl r3,r3,#2
 232 0006 1343     	 orr r3,r2
 233              	.LVL9:
 404:../Libraries/XMCLib/src/xmc1_scu.c **** 
 405:../Libraries/XMCLib/src/xmc1_scu.c ****   if(true == (obj->enable_at_init))
 234              	 .loc 1 405 0
 235 0008 C27A     	 ldrb r2,[r0,#11]
 236 000a 002A     	 cmp r2,#0
 237 000c 01D0     	 beq .L26
 406:../Libraries/XMCLib/src/xmc1_scu.c ****   {
 407:../Libraries/XMCLib/src/xmc1_scu.c ****     anavdel |= (uint32_t)SCU_ANALOG_ANAVDEL_VDEL_EN_Msk;
 238              	 .loc 1 407 0
 239 000e 1022     	 mov r2,#16
 240 0010 1343     	 orr r3,r2
 241              	.LVL10:
 242              	.L26:
 408:../Libraries/XMCLib/src/xmc1_scu.c ****   }
 409:../Libraries/XMCLib/src/xmc1_scu.c ****    SCU_ANALOG->ANAVDEL = (uint16_t) anavdel;
 243              	 .loc 1 409 0
 244 0012 5022     	 mov r2,#80
 245 0014 0C49     	 ldr r1,.L37
 246 0016 9BB2     	 uxth r3,r3
 247              	.LVL11:
 248 0018 8B52     	 strh r3,[r1,r2]
 249              	.LVL12:
 410:../Libraries/XMCLib/src/xmc1_scu.c **** 
 411:../Libraries/XMCLib/src/xmc1_scu.c ****   irqmask = 0UL;
 412:../Libraries/XMCLib/src/xmc1_scu.c **** 
 413:../Libraries/XMCLib/src/xmc1_scu.c ****   if(true == (obj->enable_prewarning_int))
 250              	 .loc 1 413 0
 251 001a 037A     	 ldrb r3,[r0,#8]
 252 001c 002B     	 cmp r3,#0
 253 001e 10D0     	 beq .L30
 414:../Libraries/XMCLib/src/xmc1_scu.c ****   {
 415:../Libraries/XMCLib/src/xmc1_scu.c ****     irqmask |= (uint32_t)SCU_INTERRUPT_SRMSK_VDDPI_Msk;
 254              	 .loc 1 415 0
 255 0020 0821     	 mov r1,#8
 413:../Libraries/XMCLib/src/xmc1_scu.c ****   {
 256              	 .loc 1 413 0
 257 0022 3832     	 add r2,r2,#56
 258              	.L27:
 259              	.LVL13:
 416:../Libraries/XMCLib/src/xmc1_scu.c ****   }
 417:../Libraries/XMCLib/src/xmc1_scu.c **** 
 418:../Libraries/XMCLib/src/xmc1_scu.c ****   if(true == (obj->enable_vdrop_int))
 260              	 .loc 1 418 0
 261 0024 437A     	 ldrb r3,[r0,#9]
 262 0026 002B     	 cmp r3,#0
 263 0028 00D1     	 bne .L28
 264 002a 0A1C     	 mov r2,r1
 265              	.L28:
 266              	.LVL14:
 419:../Libraries/XMCLib/src/xmc1_scu.c ****   {
 420:../Libraries/XMCLib/src/xmc1_scu.c ****     irqmask |= (uint32_t)SCU_INTERRUPT_SRMSK_VDROPI_Msk;
 421:../Libraries/XMCLib/src/xmc1_scu.c ****   }
 422:../Libraries/XMCLib/src/xmc1_scu.c **** 
 423:../Libraries/XMCLib/src/xmc1_scu.c ****   if(true == (obj->enable_vclip_int))
 267              	 .loc 1 423 0
 268 002c 837A     	 ldrb r3,[r0,#10]
 269 002e 002B     	 cmp r3,#0
 270 0030 02D0     	 beq .L29
 424:../Libraries/XMCLib/src/xmc1_scu.c ****   {
 425:../Libraries/XMCLib/src/xmc1_scu.c ****     irqmask |= (uint32_t)SCU_INTERRUPT_SRMSK_VCLIPI_Msk;
 271              	 .loc 1 425 0
 272 0032 8023     	 mov r3,#128
 273 0034 9B03     	 lsl r3,r3,#14
 274 0036 1A43     	 orr r2,r3
 275              	.LVL15:
 276              	.L29:
 426:../Libraries/XMCLib/src/xmc1_scu.c ****   }
 427:../Libraries/XMCLib/src/xmc1_scu.c ****   SCU_INTERRUPT->SRMSK |= (uint32_t)irqmask;
 277              	 .loc 1 427 0
 278 0038 0449     	 ldr r1,.L37+4
 428:../Libraries/XMCLib/src/xmc1_scu.c **** }
 279              	 .loc 1 428 0
 280              	 
 427:../Libraries/XMCLib/src/xmc1_scu.c **** }
 281              	 .loc 1 427 0
 282 003a 4B68     	 ldr r3,[r1,#4]
 283 003c 1343     	 orr r3,r2
 284 003e 4B60     	 str r3,[r1,#4]
 285              	 .loc 1 428 0
 286 0040 7047     	 bx lr
 287              	.LVL16:
 288              	.L30:
 289 0042 8022     	 mov r2,#128
 411:../Libraries/XMCLib/src/xmc1_scu.c **** 
 290              	 .loc 1 411 0
 291 0044 0021     	 mov r1,#0
 292 0046 EDE7     	 b .L27
 293              	.L38:
 294              	 .align 2
 295              	.L37:
 296 0048 00100140 	 .word 1073811456
 297 004c 38000140 	 .word 1073807416
 298              	 .cfi_endproc
 299              	.LFE58:
 301              	 .section .text.XMC_SCU_SetTempLowLimit,"ax",%progbits
 302              	 .align 2
 303              	 .global XMC_SCU_SetTempLowLimit
 304              	 .code 16
 305              	 .thumb_func
 307              	XMC_SCU_SetTempLowLimit:
 308              	.LFB59:
 429:../Libraries/XMCLib/src/xmc1_scu.c **** 
 430:../Libraries/XMCLib/src/xmc1_scu.c **** /* API to program lower temperature limit */
 431:../Libraries/XMCLib/src/xmc1_scu.c **** XMC_SCU_STATUS_t XMC_SCU_SetTempLowLimit(uint32_t limit)
 432:../Libraries/XMCLib/src/xmc1_scu.c **** {
 309              	 .loc 1 432 0
 310              	 .cfi_startproc
 311              	.LVL17:
 312 0000 38B5     	 push {r3,r4,r5,lr}
 313              	.LCFI0:
 314              	 .cfi_def_cfa_offset 16
 315              	 .cfi_offset 3,-16
 316              	 .cfi_offset 4,-12
 317              	 .cfi_offset 5,-8
 318              	 .cfi_offset 14,-4
 319              	.LBB40:
 320              	.LBB41:
 246:../Libraries/XMCLib/src/xmc1_scu.c ****   if (limit == 0U)
 321              	 .loc 1 246 0
 322 0002 9025     	 mov r5,#144
 323 0004 6D00     	 lsl r5,r5,#1
 324 0006 2B68     	 ldr r3,[r5]
 325              	.LBE41:
 326              	.LBE40:
 327              	 .loc 1 432 0
 328 0008 041C     	 mov r4,r0
 329              	.LBB46:
 330              	.LBB44:
 246:../Libraries/XMCLib/src/xmc1_scu.c ****   if (limit == 0U)
 331              	 .loc 1 246 0
 332 000a 9847     	 blx r3
 333              	.LVL18:
 247:../Libraries/XMCLib/src/xmc1_scu.c ****   {
 334              	 .loc 1 247 0
 335 000c 0028     	 cmp r0,#0
 336 000e 05D0     	 beq .L45
 337              	.LVL19:
 338              	.L42:
 339              	.LBE44:
 340              	.LBE46:
 433:../Libraries/XMCLib/src/xmc1_scu.c ****   XMC_SCU_STATUS_t status = XMC_SCU_STATUS_OK;
 434:../Libraries/XMCLib/src/xmc1_scu.c **** 
 435:../Libraries/XMCLib/src/xmc1_scu.c ****   limit = XMC_SCU_CalcTSEVAR(limit);
 436:../Libraries/XMCLib/src/xmc1_scu.c **** 
 437:../Libraries/XMCLib/src/xmc1_scu.c ****   if (limit != 0) 
 438:../Libraries/XMCLib/src/xmc1_scu.c ****   {
 439:../Libraries/XMCLib/src/xmc1_scu.c ****     SCU_ANALOG->ANATSEIL = (uint16_t)limit;
 341              	 .loc 1 439 0
 342 0010 084B     	 ldr r3,.L46
 343 0012 80B2     	 uxth r0,r0
 344              	.LVL20:
 345 0014 9886     	 strh r0,[r3,#52]
 433:../Libraries/XMCLib/src/xmc1_scu.c ****   XMC_SCU_STATUS_t status = XMC_SCU_STATUS_OK;
 346              	 .loc 1 433 0
 347 0016 0023     	 mov r3,#0
 348              	.L41:
 349              	.LVL21:
 440:../Libraries/XMCLib/src/xmc1_scu.c ****   }
 441:../Libraries/XMCLib/src/xmc1_scu.c ****   else
 442:../Libraries/XMCLib/src/xmc1_scu.c ****   {
 443:../Libraries/XMCLib/src/xmc1_scu.c ****     status = XMC_SCU_STATUS_ERROR;
 444:../Libraries/XMCLib/src/xmc1_scu.c ****   }
 445:../Libraries/XMCLib/src/xmc1_scu.c **** 
 446:../Libraries/XMCLib/src/xmc1_scu.c ****   return (status);
 447:../Libraries/XMCLib/src/xmc1_scu.c **** }
 350              	 .loc 1 447 0
 351 0018 181C     	 mov r0,r3
 352              	 
 353              	.LVL22:
 354 001a 38BD     	 pop {r3,r4,r5,pc}
 355              	.LVL23:
 356              	.L45:
 357              	.LBB47:
 358              	.LBB45:
 249:../Libraries/XMCLib/src/xmc1_scu.c ****     if (limit == 0U)
 359              	 .loc 1 249 0
 360 001c 601C     	 add r0,r4,#1
 361              	.LVL24:
 362 001e 2B68     	 ldr r3,[r5]
 363 0020 9847     	 blx r3
 364              	.LVL25:
 250:../Libraries/XMCLib/src/xmc1_scu.c ****     {
 365              	 .loc 1 250 0
 366 0022 0028     	 cmp r0,#0
 367 0024 F4D1     	 bne .L42
 368              	.LVL26:
 369              	.LBB42:
 370              	.LBB43:
 252:../Libraries/XMCLib/src/xmc1_scu.c ****     }
 371              	 .loc 1 252 0
 372 0026 2B68     	 ldr r3,[r5]
 373 0028 601E     	 sub r0,r4,#1
 374              	.LVL27:
 375 002a 9847     	 blx r3
 376              	.LVL28:
 377              	.LBE43:
 378              	.LBE42:
 379              	.LBE45:
 380              	.LBE47:
 443:../Libraries/XMCLib/src/xmc1_scu.c ****   }
 381              	 .loc 1 443 0
 382 002c 0123     	 mov r3,#1
 437:../Libraries/XMCLib/src/xmc1_scu.c ****   {
 383              	 .loc 1 437 0
 384 002e 0028     	 cmp r0,#0
 385 0030 F2D0     	 beq .L41
 386 0032 EDE7     	 b .L42
 387              	.L47:
 388              	 .align 2
 389              	.L46:
 390 0034 00100140 	 .word 1073811456
 391              	 .cfi_endproc
 392              	.LFE59:
 394              	 .section .text.XMC_SCU_SetTempHighLimit,"ax",%progbits
 395              	 .align 2
 396              	 .global XMC_SCU_SetTempHighLimit
 397              	 .code 16
 398              	 .thumb_func
 400              	XMC_SCU_SetTempHighLimit:
 401              	.LFB60:
 448:../Libraries/XMCLib/src/xmc1_scu.c ****   
 449:../Libraries/XMCLib/src/xmc1_scu.c **** /* API to program higher temperature limit */
 450:../Libraries/XMCLib/src/xmc1_scu.c **** XMC_SCU_STATUS_t XMC_SCU_SetTempHighLimit(uint32_t limit)
 451:../Libraries/XMCLib/src/xmc1_scu.c **** {
 402              	 .loc 1 451 0
 403              	 .cfi_startproc
 404              	.LVL29:
 405 0000 38B5     	 push {r3,r4,r5,lr}
 406              	.LCFI1:
 407              	 .cfi_def_cfa_offset 16
 408              	 .cfi_offset 3,-16
 409              	 .cfi_offset 4,-12
 410              	 .cfi_offset 5,-8
 411              	 .cfi_offset 14,-4
 412              	.LBB52:
 413              	.LBB53:
 246:../Libraries/XMCLib/src/xmc1_scu.c ****   if (limit == 0U)
 414              	 .loc 1 246 0
 415 0002 9025     	 mov r5,#144
 416 0004 6D00     	 lsl r5,r5,#1
 417 0006 2B68     	 ldr r3,[r5]
 418              	.LBE53:
 419              	.LBE52:
 420              	 .loc 1 451 0
 421 0008 041C     	 mov r4,r0
 422              	.LBB58:
 423              	.LBB56:
 246:../Libraries/XMCLib/src/xmc1_scu.c ****   if (limit == 0U)
 424              	 .loc 1 246 0
 425 000a 9847     	 blx r3
 426              	.LVL30:
 247:../Libraries/XMCLib/src/xmc1_scu.c ****   {
 427              	 .loc 1 247 0
 428 000c 0028     	 cmp r0,#0
 429 000e 05D0     	 beq .L54
 430              	.LVL31:
 431              	.L51:
 432              	.LBE56:
 433              	.LBE58:
 452:../Libraries/XMCLib/src/xmc1_scu.c ****   XMC_SCU_STATUS_t status = XMC_SCU_STATUS_OK;
 453:../Libraries/XMCLib/src/xmc1_scu.c **** 
 454:../Libraries/XMCLib/src/xmc1_scu.c ****   limit = XMC_SCU_CalcTSEVAR(limit);
 455:../Libraries/XMCLib/src/xmc1_scu.c **** 
 456:../Libraries/XMCLib/src/xmc1_scu.c ****   if (limit != 0) 
 457:../Libraries/XMCLib/src/xmc1_scu.c ****   {
 458:../Libraries/XMCLib/src/xmc1_scu.c ****     SCU_ANALOG->ANATSEIH = (uint16_t)limit;
 434              	 .loc 1 458 0
 435 0010 084B     	 ldr r3,.L55
 436 0012 80B2     	 uxth r0,r0
 437              	.LVL32:
 438 0014 1886     	 strh r0,[r3,#48]
 452:../Libraries/XMCLib/src/xmc1_scu.c ****   XMC_SCU_STATUS_t status = XMC_SCU_STATUS_OK;
 439              	 .loc 1 452 0
 440 0016 0023     	 mov r3,#0
 441              	.L50:
 442              	.LVL33:
 459:../Libraries/XMCLib/src/xmc1_scu.c ****   }
 460:../Libraries/XMCLib/src/xmc1_scu.c ****   else
 461:../Libraries/XMCLib/src/xmc1_scu.c ****   {
 462:../Libraries/XMCLib/src/xmc1_scu.c ****     status = XMC_SCU_STATUS_ERROR;
 463:../Libraries/XMCLib/src/xmc1_scu.c ****   } 
 464:../Libraries/XMCLib/src/xmc1_scu.c **** 
 465:../Libraries/XMCLib/src/xmc1_scu.c ****   return (status);
 466:../Libraries/XMCLib/src/xmc1_scu.c **** }
 443              	 .loc 1 466 0
 444 0018 181C     	 mov r0,r3
 445              	 
 446              	.LVL34:
 447 001a 38BD     	 pop {r3,r4,r5,pc}
 448              	.LVL35:
 449              	.L54:
 450              	.LBB59:
 451              	.LBB57:
 249:../Libraries/XMCLib/src/xmc1_scu.c ****     if (limit == 0U)
 452              	 .loc 1 249 0
 453 001c 601C     	 add r0,r4,#1
 454              	.LVL36:
 455 001e 2B68     	 ldr r3,[r5]
 456 0020 9847     	 blx r3
 457              	.LVL37:
 250:../Libraries/XMCLib/src/xmc1_scu.c ****     {
 458              	 .loc 1 250 0
 459 0022 0028     	 cmp r0,#0
 460 0024 F4D1     	 bne .L51
 461              	.LVL38:
 462              	.LBB54:
 463              	.LBB55:
 252:../Libraries/XMCLib/src/xmc1_scu.c ****     }
 464              	 .loc 1 252 0
 465 0026 2B68     	 ldr r3,[r5]
 466 0028 601E     	 sub r0,r4,#1
 467              	.LVL39:
 468 002a 9847     	 blx r3
 469              	.LVL40:
 470              	.LBE55:
 471              	.LBE54:
 472              	.LBE57:
 473              	.LBE59:
 462:../Libraries/XMCLib/src/xmc1_scu.c ****   } 
 474              	 .loc 1 462 0
 475 002c 0123     	 mov r3,#1
 456:../Libraries/XMCLib/src/xmc1_scu.c ****   {
 476              	 .loc 1 456 0
 477 002e 0028     	 cmp r0,#0
 478 0030 F2D0     	 beq .L50
 479 0032 EDE7     	 b .L51
 480              	.L56:
 481              	 .align 2
 482              	.L55:
 483 0034 00100140 	 .word 1073811456
 484              	 .cfi_endproc
 485              	.LFE60:
 487              	 .section .text.XMC_SCU_SetRawTempLimits,"ax",%progbits
 488              	 .align 2
 489              	 .global XMC_SCU_SetRawTempLimits
 490              	 .code 16
 491              	 .thumb_func
 493              	XMC_SCU_SetRawTempLimits:
 494              	.LFB61:
 467:../Libraries/XMCLib/src/xmc1_scu.c **** 
 468:../Libraries/XMCLib/src/xmc1_scu.c **** /* API to program temperature limits as raw digital values into temperature sensor */
 469:../Libraries/XMCLib/src/xmc1_scu.c **** void XMC_SCU_SetRawTempLimits(const uint32_t lower_temp, const uint32_t upper_temp)
 470:../Libraries/XMCLib/src/xmc1_scu.c **** {
 495              	 .loc 1 470 0
 496              	 .cfi_startproc
 497              	.LVL41:
 471:../Libraries/XMCLib/src/xmc1_scu.c ****   SCU_ANALOG->ANATSEIH = (uint16_t)(upper_temp & SCU_ANALOG_ANATSEIH_TSE_IH_Msk);
 498              	 .loc 1 471 0
 499 0000 024B     	 ldr r3,.L58
 500 0002 89B2     	 uxth r1,r1
 501              	.LVL42:
 472:../Libraries/XMCLib/src/xmc1_scu.c ****   SCU_ANALOG->ANATSEIL = (uint16_t)(lower_temp & SCU_ANALOG_ANATSEIL_TSE_IL_Msk);
 502              	 .loc 1 472 0
 503 0004 80B2     	 uxth r0,r0
 504              	.LVL43:
 471:../Libraries/XMCLib/src/xmc1_scu.c ****   SCU_ANALOG->ANATSEIH = (uint16_t)(upper_temp & SCU_ANALOG_ANATSEIH_TSE_IH_Msk);
 505              	 .loc 1 471 0
 506 0006 1986     	 strh r1,[r3,#48]
 473:../Libraries/XMCLib/src/xmc1_scu.c **** }
 507              	 .loc 1 473 0
 508              	 
 472:../Libraries/XMCLib/src/xmc1_scu.c ****   SCU_ANALOG->ANATSEIL = (uint16_t)(lower_temp & SCU_ANALOG_ANATSEIL_TSE_IL_Msk);
 509              	 .loc 1 472 0
 510 0008 9886     	 strh r0,[r3,#52]
 511              	 .loc 1 473 0
 512 000a 7047     	 bx lr
 513              	.L59:
 514              	 .align 2
 515              	.L58:
 516 000c 00100140 	 .word 1073811456
 517              	 .cfi_endproc
 518              	.LFE61:
 520              	 .section .text.XMC_SCU_StartTempMeasurement,"ax",%progbits
 521              	 .align 2
 522              	 .global XMC_SCU_StartTempMeasurement
 523              	 .code 16
 524              	 .thumb_func
 526              	XMC_SCU_StartTempMeasurement:
 527              	.LFB62:
 474:../Libraries/XMCLib/src/xmc1_scu.c **** 
 475:../Libraries/XMCLib/src/xmc1_scu.c **** /* API to start temperature measurement */
 476:../Libraries/XMCLib/src/xmc1_scu.c **** void XMC_SCU_StartTempMeasurement(void)
 477:../Libraries/XMCLib/src/xmc1_scu.c **** {
 528              	 .loc 1 477 0
 529              	 .cfi_startproc
 478:../Libraries/XMCLib/src/xmc1_scu.c ****   SCU_ANALOG->ANATSECTRL |= (uint16_t)SCU_ANALOG_ANATSECTRL_TSE_EN_Msk;
 530              	 .loc 1 478 0
 531 0000 0123     	 mov r3,#1
 532 0002 024A     	 ldr r2,.L61
 479:../Libraries/XMCLib/src/xmc1_scu.c **** }
 533              	 .loc 1 479 0
 534              	 
 478:../Libraries/XMCLib/src/xmc1_scu.c ****   SCU_ANALOG->ANATSECTRL |= (uint16_t)SCU_ANALOG_ANATSECTRL_TSE_EN_Msk;
 535              	 .loc 1 478 0
 536 0004 918C     	 ldrh r1,[r2,#36]
 537 0006 0B43     	 orr r3,r1
 538 0008 9384     	 strh r3,[r2,#36]
 539              	 .loc 1 479 0
 540 000a 7047     	 bx lr
 541              	.L62:
 542              	 .align 2
 543              	.L61:
 544 000c 00100140 	 .word 1073811456
 545              	 .cfi_endproc
 546              	.LFE62:
 548              	 .section .text.XMC_SCU_StopTempMeasurement,"ax",%progbits
 549              	 .align 2
 550              	 .global XMC_SCU_StopTempMeasurement
 551              	 .code 16
 552              	 .thumb_func
 554              	XMC_SCU_StopTempMeasurement:
 555              	.LFB63:
 480:../Libraries/XMCLib/src/xmc1_scu.c **** 
 481:../Libraries/XMCLib/src/xmc1_scu.c **** /* API to stop temperature measurement */
 482:../Libraries/XMCLib/src/xmc1_scu.c **** void XMC_SCU_StopTempMeasurement(void)
 483:../Libraries/XMCLib/src/xmc1_scu.c **** {
 556              	 .loc 1 483 0
 557              	 .cfi_startproc
 484:../Libraries/XMCLib/src/xmc1_scu.c ****   SCU_ANALOG->ANATSECTRL &= (uint16_t)~SCU_ANALOG_ANATSECTRL_TSE_EN_Msk;
 558              	 .loc 1 484 0
 559 0000 0121     	 mov r1,#1
 560 0002 024A     	 ldr r2,.L64
 485:../Libraries/XMCLib/src/xmc1_scu.c **** }
 561              	 .loc 1 485 0
 562              	 
 484:../Libraries/XMCLib/src/xmc1_scu.c ****   SCU_ANALOG->ANATSECTRL &= (uint16_t)~SCU_ANALOG_ANATSECTRL_TSE_EN_Msk;
 563              	 .loc 1 484 0
 564 0004 938C     	 ldrh r3,[r2,#36]
 565 0006 8B43     	 bic r3,r1
 566 0008 9384     	 strh r3,[r2,#36]
 567              	 .loc 1 485 0
 568 000a 7047     	 bx lr
 569              	.L65:
 570              	 .align 2
 571              	.L64:
 572 000c 00100140 	 .word 1073811456
 573              	 .cfi_endproc
 574              	.LFE63:
 576              	 .section .text.XMC_SCU_HighTemperature,"ax",%progbits
 577              	 .align 2
 578              	 .global XMC_SCU_HighTemperature
 579              	 .code 16
 580              	 .thumb_func
 582              	XMC_SCU_HighTemperature:
 583              	.LFB64:
 486:../Libraries/XMCLib/src/xmc1_scu.c **** 
 487:../Libraries/XMCLib/src/xmc1_scu.c **** /* API to check if the temperature has gone past the ceiling */
 488:../Libraries/XMCLib/src/xmc1_scu.c **** bool XMC_SCU_HighTemperature(void)
 489:../Libraries/XMCLib/src/xmc1_scu.c **** {
 584              	 .loc 1 489 0
 585              	 .cfi_startproc
 490:../Libraries/XMCLib/src/xmc1_scu.c ****   return ((SCU_INTERRUPT->SRRAW & SCU_INTERRUPT_SRRAW_TSE_HIGH_Msk) == SCU_INTERRUPT_SRRAW_TSE_HIGH
 586              	 .loc 1 490 0
 587 0000 024B     	 ldr r3,.L67
 491:../Libraries/XMCLib/src/xmc1_scu.c **** }
 588              	 .loc 1 491 0
 589              	 
 490:../Libraries/XMCLib/src/xmc1_scu.c ****   return ((SCU_INTERRUPT->SRRAW & SCU_INTERRUPT_SRRAW_TSE_HIGH_Msk) == SCU_INTERRUPT_SRRAW_TSE_HIGH
 590              	 .loc 1 490 0
 591 0002 1868     	 ldr r0,[r3]
 592 0004 4000     	 lsl r0,r0,#1
 593 0006 C00F     	 lsr r0,r0,#31
 594              	 .loc 1 491 0
 595 0008 7047     	 bx lr
 596              	.L68:
 597 000a C046     	 .align 2
 598              	.L67:
 599 000c 38000140 	 .word 1073807416
 600              	 .cfi_endproc
 601              	.LFE64:
 603              	 .section .text.XMC_SCU_LowTemperature,"ax",%progbits
 604              	 .align 2
 605              	 .global XMC_SCU_LowTemperature
 606              	 .code 16
 607              	 .thumb_func
 609              	XMC_SCU_LowTemperature:
 610              	.LFB65:
 492:../Libraries/XMCLib/src/xmc1_scu.c **** 
 493:../Libraries/XMCLib/src/xmc1_scu.c **** /* API to check if the temperature is lower than normal */
 494:../Libraries/XMCLib/src/xmc1_scu.c **** bool XMC_SCU_LowTemperature(void)
 495:../Libraries/XMCLib/src/xmc1_scu.c **** {
 611              	 .loc 1 495 0
 612              	 .cfi_startproc
 496:../Libraries/XMCLib/src/xmc1_scu.c ****   return ((SCU_INTERRUPT->SRRAW & SCU_INTERRUPT_SRRAW_TSE_LOW_Msk) == SCU_INTERRUPT_SRRAW_TSE_LOW_M
 613              	 .loc 1 496 0
 614 0000 014B     	 ldr r3,.L70
 497:../Libraries/XMCLib/src/xmc1_scu.c **** }
 615              	 .loc 1 497 0
 616              	 
 496:../Libraries/XMCLib/src/xmc1_scu.c ****   return ((SCU_INTERRUPT->SRRAW & SCU_INTERRUPT_SRRAW_TSE_LOW_Msk) == SCU_INTERRUPT_SRRAW_TSE_LOW_M
 617              	 .loc 1 496 0
 618 0002 1868     	 ldr r0,[r3]
 619 0004 C00F     	 lsr r0,r0,#31
 620              	 .loc 1 497 0
 621 0006 7047     	 bx lr
 622              	.L71:
 623              	 .align 2
 624              	.L70:
 625 0008 38000140 	 .word 1073807416
 626              	 .cfi_endproc
 627              	.LFE65:
 629              	 .section .text.XMC_SCU_GetTemperature,"ax",%progbits
 630              	 .align 2
 631              	 .global XMC_SCU_GetTemperature
 632              	 .code 16
 633              	 .thumb_func
 635              	XMC_SCU_GetTemperature:
 636              	.LFB66:
 498:../Libraries/XMCLib/src/xmc1_scu.c **** 
 499:../Libraries/XMCLib/src/xmc1_scu.c **** /* API to retrieve the device temperature */
 500:../Libraries/XMCLib/src/xmc1_scu.c **** uint32_t XMC_SCU_GetTemperature(void)
 501:../Libraries/XMCLib/src/xmc1_scu.c **** {
 637              	 .loc 1 501 0
 638              	 .cfi_startproc
 502:../Libraries/XMCLib/src/xmc1_scu.c ****   uint32_t temperature;
 503:../Libraries/XMCLib/src/xmc1_scu.c **** 
 504:../Libraries/XMCLib/src/xmc1_scu.c ****   temperature = (uint32_t)(SCU_ANALOG->ANATSEMON);
 639              	 .loc 1 504 0
 640 0000 4023     	 mov r3,#64
 641 0002 024A     	 ldr r2,.L73
 505:../Libraries/XMCLib/src/xmc1_scu.c **** 
 506:../Libraries/XMCLib/src/xmc1_scu.c ****   return (temperature);
 507:../Libraries/XMCLib/src/xmc1_scu.c **** }
 642              	 .loc 1 507 0
 643              	 
 504:../Libraries/XMCLib/src/xmc1_scu.c **** 
 644              	 .loc 1 504 0
 645 0004 D05A     	 ldrh r0,[r2,r3]
 646 0006 80B2     	 uxth r0,r0
 647              	.LVL44:
 648              	 .loc 1 507 0
 649 0008 7047     	 bx lr
 650              	.L74:
 651 000a C046     	 .align 2
 652              	.L73:
 653 000c 00100140 	 .word 1073811456
 654              	 .cfi_endproc
 655              	.LFE66:
 657              	 .section .text.XMC_SCU_CalcTemperature,"ax",%progbits
 658              	 .align 2
 659              	 .global XMC_SCU_CalcTemperature
 660              	 .code 16
 661              	 .thumb_func
 663              	XMC_SCU_CalcTemperature:
 664              	.LFB67:
 508:../Libraries/XMCLib/src/xmc1_scu.c **** 
 509:../Libraries/XMCLib/src/xmc1_scu.c **** /* Calculates the die temperature value using ROM function */
 510:../Libraries/XMCLib/src/xmc1_scu.c **** uint32_t XMC_SCU_CalcTemperature(void)
 511:../Libraries/XMCLib/src/xmc1_scu.c **** {
 665              	 .loc 1 511 0
 666              	 .cfi_startproc
 667 0000 08B5     	 push {r3,lr}
 668              	.LCFI2:
 669              	 .cfi_def_cfa_offset 8
 670              	 .cfi_offset 3,-8
 671              	 .cfi_offset 14,-4
 512:../Libraries/XMCLib/src/xmc1_scu.c ****   return (ROM_CalcTemperature());
 672              	 .loc 1 512 0
 673 0002 8623     	 mov r3,#134
 674 0004 5B00     	 lsl r3,r3,#1
 675 0006 1B68     	 ldr r3,[r3]
 676 0008 9847     	 blx r3
 677              	.LVL45:
 513:../Libraries/XMCLib/src/xmc1_scu.c **** }
 678              	 .loc 1 513 0
 679              	 
 680 000a 08BD     	 pop {r3,pc}
 681              	 .cfi_endproc
 682              	.LFE67:
 684              	 .section .text.XMC_SCU_CLOCK_SetRtcClockSource,"ax",%progbits
 685              	 .align 2
 686              	 .global XMC_SCU_CLOCK_SetRtcClockSource
 687              	 .code 16
 688              	 .thumb_func
 690              	XMC_SCU_CLOCK_SetRtcClockSource:
 691              	.LFB69:
 514:../Libraries/XMCLib/src/xmc1_scu.c **** 
 515:../Libraries/XMCLib/src/xmc1_scu.c **** 
 516:../Libraries/XMCLib/src/xmc1_scu.c **** /* API which initializes the clock tree ofthe device */
 517:../Libraries/XMCLib/src/xmc1_scu.c **** void XMC_SCU_CLOCK_Init(const XMC_SCU_CLOCK_CONFIG_t *const config)
 518:../Libraries/XMCLib/src/xmc1_scu.c **** {
 519:../Libraries/XMCLib/src/xmc1_scu.c ****   /* Remove protection */
 520:../Libraries/XMCLib/src/xmc1_scu.c ****   XMC_SCU_UnlockProtectedBits();
 521:../Libraries/XMCLib/src/xmc1_scu.c **** 
 522:../Libraries/XMCLib/src/xmc1_scu.c **** #if (UC_SERIES == XMC14)
 523:../Libraries/XMCLib/src/xmc1_scu.c ****   /* OSCHP source selection - OSC mode */
 524:../Libraries/XMCLib/src/xmc1_scu.c **** 
 525:../Libraries/XMCLib/src/xmc1_scu.c ****   if (config->oschp_mode != XMC_SCU_CLOCK_OSCHP_MODE_DISABLED)
 526:../Libraries/XMCLib/src/xmc1_scu.c ****   {
 527:../Libraries/XMCLib/src/xmc1_scu.c ****     if (OSCHP_GetFrequency() > 20000000U)
 528:../Libraries/XMCLib/src/xmc1_scu.c ****     {
 529:../Libraries/XMCLib/src/xmc1_scu.c ****       SCU_ANALOG->ANAOSCHPCTRL |= (uint16_t)SCU_ANALOG_ANAOSCHPCTRL_HYSCTRL_Msk;
 530:../Libraries/XMCLib/src/xmc1_scu.c ****     }
 531:../Libraries/XMCLib/src/xmc1_scu.c **** 
 532:../Libraries/XMCLib/src/xmc1_scu.c ****     SCU_ANALOG->ANAOSCHPCTRL = (uint16_t)(SCU_ANALOG->ANAOSCHPCTRL & ~(SCU_ANALOG_ANAOSCHPCTRL_SHBY
 533:../Libraries/XMCLib/src/xmc1_scu.c ****                                config->oschp_mode;
 534:../Libraries/XMCLib/src/xmc1_scu.c **** 
 535:../Libraries/XMCLib/src/xmc1_scu.c ****     do
 536:../Libraries/XMCLib/src/xmc1_scu.c ****     {
 537:../Libraries/XMCLib/src/xmc1_scu.c ****       /* Restart OSC_HP oscillator watchdog */
 538:../Libraries/XMCLib/src/xmc1_scu.c ****       SCU_INTERRUPT->SRCLR1 = SCU_INTERRUPT_SRCLR1_LOECI_Msk;
 539:../Libraries/XMCLib/src/xmc1_scu.c **** 
 540:../Libraries/XMCLib/src/xmc1_scu.c ****       /* Enable OSC_HP oscillator watchdog*/
 541:../Libraries/XMCLib/src/xmc1_scu.c ****       SCU_CLK->OSCCSR &= ~SCU_CLK_OSCCSR_XOWDEN_Msk;
 542:../Libraries/XMCLib/src/xmc1_scu.c ****       SCU_CLK->OSCCSR |= SCU_CLK_OSCCSR_XOWDEN_Msk;
 543:../Libraries/XMCLib/src/xmc1_scu.c **** 
 544:../Libraries/XMCLib/src/xmc1_scu.c ****       /* Wait a few DCO2 cycles for the update of the clock detection result */
 545:../Libraries/XMCLib/src/xmc1_scu.c ****       delay(2500);
 546:../Libraries/XMCLib/src/xmc1_scu.c **** 
 547:../Libraries/XMCLib/src/xmc1_scu.c ****       /* check clock is ok */
 548:../Libraries/XMCLib/src/xmc1_scu.c ****     }
 549:../Libraries/XMCLib/src/xmc1_scu.c ****     while(SCU_INTERRUPT->SRRAW1 & SCU_INTERRUPT_SRRAW1_LOECI_Msk);
 550:../Libraries/XMCLib/src/xmc1_scu.c ****   }
 551:../Libraries/XMCLib/src/xmc1_scu.c ****   else /* (config->oschp_mode == XMC_SCU_CLOCK_OSCHP_MODE_DISABLED) */
 552:../Libraries/XMCLib/src/xmc1_scu.c ****   {
 553:../Libraries/XMCLib/src/xmc1_scu.c ****     SCU_ANALOG->ANAOSCHPCTRL |= SCU_ANALOG_ANAOSCHPCTRL_MODE_Msk;
 554:../Libraries/XMCLib/src/xmc1_scu.c ****   }
 555:../Libraries/XMCLib/src/xmc1_scu.c **** 
 556:../Libraries/XMCLib/src/xmc1_scu.c ****   SCU_ANALOG->ANAOSCLPCTRL = (uint16_t)config->osclp_mode;
 557:../Libraries/XMCLib/src/xmc1_scu.c **** 
 558:../Libraries/XMCLib/src/xmc1_scu.c ****   SCU_CLK->CLKCR1 = (SCU_CLK->CLKCR1 & ~SCU_CLK_CLKCR1_DCLKSEL_Msk) |
 559:../Libraries/XMCLib/src/xmc1_scu.c ****                     config->dclk_src;
 560:../Libraries/XMCLib/src/xmc1_scu.c **** 
 561:../Libraries/XMCLib/src/xmc1_scu.c **** #endif
 562:../Libraries/XMCLib/src/xmc1_scu.c ****   /* Update PCLK selection mux. */
 563:../Libraries/XMCLib/src/xmc1_scu.c ****   SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_PCLKSEL_Msk | SCU_CLK_CLKCR_RTCCLKSE
 564:../Libraries/XMCLib/src/xmc1_scu.c ****                    config->rtc_src |
 565:../Libraries/XMCLib/src/xmc1_scu.c ****                    config->pclk_src;
 566:../Libraries/XMCLib/src/xmc1_scu.c **** 
 567:../Libraries/XMCLib/src/xmc1_scu.c ****   /* Close the lock opened above. */
 568:../Libraries/XMCLib/src/xmc1_scu.c ****   XMC_SCU_LockProtectedBits();
 569:../Libraries/XMCLib/src/xmc1_scu.c **** 
 570:../Libraries/XMCLib/src/xmc1_scu.c ****   /* Update the dividers now */
 571:../Libraries/XMCLib/src/xmc1_scu.c ****   XMC_SCU_CLOCK_ScaleMCLKFrequency(config->idiv, config->fdiv);
 572:../Libraries/XMCLib/src/xmc1_scu.c **** 
 573:../Libraries/XMCLib/src/xmc1_scu.c **** }
 574:../Libraries/XMCLib/src/xmc1_scu.c **** 
 575:../Libraries/XMCLib/src/xmc1_scu.c **** /* API which selects one of the available parent clock nodes for a given child clock node */
 576:../Libraries/XMCLib/src/xmc1_scu.c **** void XMC_SCU_CLOCK_SetRtcClockSource(const XMC_SCU_CLOCK_RTCCLKSRC_t source)
 577:../Libraries/XMCLib/src/xmc1_scu.c **** {
 692              	 .loc 1 577 0
 693              	 .cfi_startproc
 694              	.LVL46:
 695              	.LBB60:
 696              	.LBB61:
 386:../Libraries/XMCLib/src/xmc1_scu.c **** 
 697              	 .loc 1 386 0
 698 0000 C023     	 mov r3,#192
 388:../Libraries/XMCLib/src/xmc1_scu.c ****   {
 699              	 .loc 1 388 0
 700 0002 0421     	 mov r1,#4
 386:../Libraries/XMCLib/src/xmc1_scu.c **** 
 701              	 .loc 1 386 0
 702 0004 074A     	 ldr r2,.L79
 703 0006 5362     	 str r3,[r2,#36]
 704              	.L77:
 388:../Libraries/XMCLib/src/xmc1_scu.c ****   {
 705              	 .loc 1 388 0
 706 0008 536A     	 ldr r3,[r2,#36]
 707 000a 1942     	 tst r1,r3
 708 000c FCD1     	 bne .L77
 709              	.LBE61:
 710              	.LBE60:
 578:../Libraries/XMCLib/src/xmc1_scu.c ****   XMC_ASSERT("XMC_SCU_CLOCK_SetRtcSourceClock:Wrong Parent Clock", XMC_SCU_CHECK_RTCCLKSRC(source))
 579:../Libraries/XMCLib/src/xmc1_scu.c **** 
 580:../Libraries/XMCLib/src/xmc1_scu.c ****   XMC_SCU_UnlockProtectedBits();
 581:../Libraries/XMCLib/src/xmc1_scu.c **** 
 582:../Libraries/XMCLib/src/xmc1_scu.c ****   SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~SCU_CLK_CLKCR_RTCCLKSEL_Msk) |
 711              	 .loc 1 582 0
 712 000e 064A     	 ldr r2,.L79+4
 713 0010 064B     	 ldr r3,.L79+8
 714 0012 1168     	 ldr r1,[r2]
 583:../Libraries/XMCLib/src/xmc1_scu.c ****                    source;
 584:../Libraries/XMCLib/src/xmc1_scu.c **** 
 585:../Libraries/XMCLib/src/xmc1_scu.c ****   XMC_SCU_LockProtectedBits();
 586:../Libraries/XMCLib/src/xmc1_scu.c **** }
 715              	 .loc 1 586 0
 716              	 
 582:../Libraries/XMCLib/src/xmc1_scu.c ****                    source;
 717              	 .loc 1 582 0
 718 0014 0B40     	 and r3,r1
 719 0016 1843     	 orr r0,r3
 720              	.LVL47:
 721 0018 1060     	 str r0,[r2]
 722              	.LBB62:
 723              	.LBB63:
 380:../Libraries/XMCLib/src/xmc1_scu.c **** }
 724              	 .loc 1 380 0
 725 001a C322     	 mov r2,#195
 726 001c 014B     	 ldr r3,.L79
 727 001e 5A62     	 str r2,[r3,#36]
 728              	.LBE63:
 729              	.LBE62:
 730              	 .loc 1 586 0
 731 0020 7047     	 bx lr
 732              	.L80:
 733 0022 C046     	 .align 2
 734              	.L79:
 735 0024 00000140 	 .word 1073807360
 736 0028 00030140 	 .word 1073808128
 737 002c FFFFF1FF 	 .word -917505
 738              	 .cfi_endproc
 739              	.LFE69:
 741              	 .section .text.XMC_SCU_CLOCK_SetFastPeripheralClockSource,"ax",%progbits
 742              	 .align 2
 743              	 .global XMC_SCU_CLOCK_SetFastPeripheralClockSource
 744              	 .code 16
 745              	 .thumb_func
 747              	XMC_SCU_CLOCK_SetFastPeripheralClockSource:
 748              	.LFB70:
 587:../Libraries/XMCLib/src/xmc1_scu.c **** 
 588:../Libraries/XMCLib/src/xmc1_scu.c **** /* API to program the divider placed between fperiph and its parent */
 589:../Libraries/XMCLib/src/xmc1_scu.c **** void XMC_SCU_CLOCK_SetFastPeripheralClockSource(const XMC_SCU_CLOCK_PCLKSRC_t source)
 590:../Libraries/XMCLib/src/xmc1_scu.c **** {
 749              	 .loc 1 590 0
 750              	 .cfi_startproc
 751              	.LVL48:
 752              	.LBB64:
 753              	.LBB65:
 386:../Libraries/XMCLib/src/xmc1_scu.c **** 
 754              	 .loc 1 386 0
 755 0000 C023     	 mov r3,#192
 388:../Libraries/XMCLib/src/xmc1_scu.c ****   {
 756              	 .loc 1 388 0
 757 0002 0421     	 mov r1,#4
 386:../Libraries/XMCLib/src/xmc1_scu.c **** 
 758              	 .loc 1 386 0
 759 0004 074A     	 ldr r2,.L84
 760 0006 5362     	 str r3,[r2,#36]
 761              	.L82:
 388:../Libraries/XMCLib/src/xmc1_scu.c ****   {
 762              	 .loc 1 388 0
 763 0008 536A     	 ldr r3,[r2,#36]
 764 000a 1942     	 tst r1,r3
 765 000c FCD1     	 bne .L82
 766              	.LBE65:
 767              	.LBE64:
 591:../Libraries/XMCLib/src/xmc1_scu.c ****   XMC_SCU_UnlockProtectedBits();
 592:../Libraries/XMCLib/src/xmc1_scu.c **** 
 593:../Libraries/XMCLib/src/xmc1_scu.c ****   SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~SCU_CLK_CLKCR_PCLKSEL_Msk) |
 768              	 .loc 1 593 0
 769 000e 064A     	 ldr r2,.L84+4
 770 0010 064B     	 ldr r3,.L84+8
 771 0012 1168     	 ldr r1,[r2]
 594:../Libraries/XMCLib/src/xmc1_scu.c ****                    source;
 595:../Libraries/XMCLib/src/xmc1_scu.c **** 
 596:../Libraries/XMCLib/src/xmc1_scu.c ****   XMC_SCU_LockProtectedBits();
 597:../Libraries/XMCLib/src/xmc1_scu.c **** }
 772              	 .loc 1 597 0
 773              	 
 593:../Libraries/XMCLib/src/xmc1_scu.c ****                    source;
 774              	 .loc 1 593 0
 775 0014 0B40     	 and r3,r1
 776 0016 1843     	 orr r0,r3
 777              	.LVL49:
 778 0018 1060     	 str r0,[r2]
 779              	.LBB66:
 780              	.LBB67:
 380:../Libraries/XMCLib/src/xmc1_scu.c **** }
 781              	 .loc 1 380 0
 782 001a C322     	 mov r2,#195
 783 001c 014B     	 ldr r3,.L84
 784 001e 5A62     	 str r2,[r3,#36]
 785              	.LBE67:
 786              	.LBE66:
 787              	 .loc 1 597 0
 788 0020 7047     	 bx lr
 789              	.L85:
 790 0022 C046     	 .align 2
 791              	.L84:
 792 0024 00000140 	 .word 1073807360
 793 0028 00030140 	 .word 1073808128
 794 002c FFFFFEFF 	 .word -65537
 795              	 .cfi_endproc
 796              	.LFE70:
 798              	 .section .text.XMC_SCU_CLOCK_GatePeripheralClock,"ax",%progbits
 799              	 .align 2
 800              	 .global XMC_SCU_CLOCK_GatePeripheralClock
 801              	 .code 16
 802              	 .thumb_func
 804              	XMC_SCU_CLOCK_GatePeripheralClock:
 805              	.LFB71:
 598:../Libraries/XMCLib/src/xmc1_scu.c **** 
 599:../Libraries/XMCLib/src/xmc1_scu.c **** /* API which gates a clock node at its source */
 600:../Libraries/XMCLib/src/xmc1_scu.c **** void XMC_SCU_CLOCK_GatePeripheralClock(const XMC_SCU_PERIPHERAL_CLOCK_t peripheral)
 601:../Libraries/XMCLib/src/xmc1_scu.c **** {
 806              	 .loc 1 601 0
 807              	 .cfi_startproc
 808              	.LVL50:
 809              	.LBB68:
 810              	.LBB69:
 386:../Libraries/XMCLib/src/xmc1_scu.c **** 
 811              	 .loc 1 386 0
 812 0000 C023     	 mov r3,#192
 388:../Libraries/XMCLib/src/xmc1_scu.c ****   {
 813              	 .loc 1 388 0
 814 0002 0421     	 mov r1,#4
 386:../Libraries/XMCLib/src/xmc1_scu.c **** 
 815              	 .loc 1 386 0
 816 0004 064A     	 ldr r2,.L89
 817 0006 5362     	 str r3,[r2,#36]
 818              	.L87:
 388:../Libraries/XMCLib/src/xmc1_scu.c ****   {
 819              	 .loc 1 388 0
 820 0008 536A     	 ldr r3,[r2,#36]
 821 000a 1942     	 tst r1,r3
 822 000c FCD1     	 bne .L87
 823              	.LBE69:
 824              	.LBE68:
 602:../Libraries/XMCLib/src/xmc1_scu.c ****   XMC_SCU_UnlockProtectedBits();
 603:../Libraries/XMCLib/src/xmc1_scu.c ****   SCU_CLK->CGATSET0 |= (uint32_t)peripheral;
 825              	 .loc 1 603 0
 826 000e 054A     	 ldr r2,.L89+4
 604:../Libraries/XMCLib/src/xmc1_scu.c ****   XMC_SCU_LockProtectedBits();
 605:../Libraries/XMCLib/src/xmc1_scu.c **** }
 827              	 .loc 1 605 0
 828              	 
 603:../Libraries/XMCLib/src/xmc1_scu.c ****   XMC_SCU_LockProtectedBits();
 829              	 .loc 1 603 0
 830 0010 D368     	 ldr r3,[r2,#12]
 831 0012 1843     	 orr r0,r3
 832              	.LVL51:
 833 0014 D060     	 str r0,[r2,#12]
 834              	.LBB70:
 835              	.LBB71:
 380:../Libraries/XMCLib/src/xmc1_scu.c **** }
 836              	 .loc 1 380 0
 837 0016 C322     	 mov r2,#195
 838 0018 014B     	 ldr r3,.L89
 839 001a 5A62     	 str r2,[r3,#36]
 840              	.LBE71:
 841              	.LBE70:
 842              	 .loc 1 605 0
 843 001c 7047     	 bx lr
 844              	.L90:
 845 001e C046     	 .align 2
 846              	.L89:
 847 0020 00000140 	 .word 1073807360
 848 0024 00030140 	 .word 1073808128
 849              	 .cfi_endproc
 850              	.LFE71:
 852              	 .section .text.XMC_SCU_CLOCK_UngatePeripheralClock,"ax",%progbits
 853              	 .align 2
 854              	 .global XMC_SCU_CLOCK_UngatePeripheralClock
 855              	 .code 16
 856              	 .thumb_func
 858              	XMC_SCU_CLOCK_UngatePeripheralClock:
 859              	.LFB72:
 606:../Libraries/XMCLib/src/xmc1_scu.c **** 
 607:../Libraries/XMCLib/src/xmc1_scu.c **** /* API which ungates a clock note at its source */
 608:../Libraries/XMCLib/src/xmc1_scu.c **** void XMC_SCU_CLOCK_UngatePeripheralClock(const XMC_SCU_PERIPHERAL_CLOCK_t peripheral)
 609:../Libraries/XMCLib/src/xmc1_scu.c **** {
 860              	 .loc 1 609 0
 861              	 .cfi_startproc
 862              	.LVL52:
 863              	.LBB72:
 864              	.LBB73:
 386:../Libraries/XMCLib/src/xmc1_scu.c **** 
 865              	 .loc 1 386 0
 866 0000 C023     	 mov r3,#192
 388:../Libraries/XMCLib/src/xmc1_scu.c ****   {
 867              	 .loc 1 388 0
 868 0002 0421     	 mov r1,#4
 386:../Libraries/XMCLib/src/xmc1_scu.c **** 
 869              	 .loc 1 386 0
 870 0004 084A     	 ldr r2,.L96
 871 0006 5362     	 str r3,[r2,#36]
 872              	.L92:
 388:../Libraries/XMCLib/src/xmc1_scu.c ****   {
 873              	 .loc 1 388 0
 874 0008 536A     	 ldr r3,[r2,#36]
 875 000a 1942     	 tst r1,r3
 876 000c FCD1     	 bne .L92
 877              	.LBE73:
 878              	.LBE72:
 610:../Libraries/XMCLib/src/xmc1_scu.c ****   XMC_SCU_UnlockProtectedBits();
 611:../Libraries/XMCLib/src/xmc1_scu.c ****   SCU_CLK->CGATCLR0 |= (uint32_t)peripheral;
 612:../Libraries/XMCLib/src/xmc1_scu.c ****   while ((SCU_CLK->CLKCR) & SCU_CLK_CLKCR_VDDC2LOW_Msk)
 879              	 .loc 1 612 0
 880 000e 8021     	 mov r1,#128
 611:../Libraries/XMCLib/src/xmc1_scu.c ****   while ((SCU_CLK->CLKCR) & SCU_CLK_CLKCR_VDDC2LOW_Msk)
 881              	 .loc 1 611 0
 882 0010 064A     	 ldr r2,.L96+4
 883              	 .loc 1 612 0
 884 0012 C905     	 lsl r1,r1,#23
 611:../Libraries/XMCLib/src/xmc1_scu.c ****   while ((SCU_CLK->CLKCR) & SCU_CLK_CLKCR_VDDC2LOW_Msk)
 885              	 .loc 1 611 0
 886 0014 1369     	 ldr r3,[r2,#16]
 887 0016 1843     	 orr r0,r3
 888              	.LVL53:
 889 0018 1061     	 str r0,[r2,#16]
 890              	.L93:
 891              	 .loc 1 612 0 discriminator 1
 892 001a 1368     	 ldr r3,[r2]
 893 001c 0B42     	 tst r3,r1
 894 001e FCD1     	 bne .L93
 895              	.LBB74:
 896              	.LBB75:
 380:../Libraries/XMCLib/src/xmc1_scu.c **** }
 897              	 .loc 1 380 0
 898 0020 C322     	 mov r2,#195
 899 0022 014B     	 ldr r3,.L96
 900              	.LBE75:
 901              	.LBE74:
 613:../Libraries/XMCLib/src/xmc1_scu.c ****   {
 614:../Libraries/XMCLib/src/xmc1_scu.c ****     /* Wait voltage suply stabilization */
 615:../Libraries/XMCLib/src/xmc1_scu.c ****   }
 616:../Libraries/XMCLib/src/xmc1_scu.c ****   XMC_SCU_LockProtectedBits();
 617:../Libraries/XMCLib/src/xmc1_scu.c **** }
 902              	 .loc 1 617 0
 903              	 
 904              	.LBB77:
 905              	.LBB76:
 380:../Libraries/XMCLib/src/xmc1_scu.c **** }
 906              	 .loc 1 380 0
 907 0024 5A62     	 str r2,[r3,#36]
 908              	.LBE76:
 909              	.LBE77:
 910              	 .loc 1 617 0
 911 0026 7047     	 bx lr
 912              	.L97:
 913              	 .align 2
 914              	.L96:
 915 0028 00000140 	 .word 1073807360
 916 002c 00030140 	 .word 1073808128
 917              	 .cfi_endproc
 918              	.LFE72:
 920              	 .section .text.XMC_SCU_CLOCK_IsPeripheralClockGated,"ax",%progbits
 921              	 .align 2
 922              	 .global XMC_SCU_CLOCK_IsPeripheralClockGated
 923              	 .code 16
 924              	 .thumb_func
 926              	XMC_SCU_CLOCK_IsPeripheralClockGated:
 927              	.LFB73:
 618:../Libraries/XMCLib/src/xmc1_scu.c **** 
 619:../Libraries/XMCLib/src/xmc1_scu.c **** /* Checks the status of peripheral clock gating */
 620:../Libraries/XMCLib/src/xmc1_scu.c **** bool XMC_SCU_CLOCK_IsPeripheralClockGated(const XMC_SCU_PERIPHERAL_CLOCK_t peripheral)
 621:../Libraries/XMCLib/src/xmc1_scu.c **** {
 928              	 .loc 1 621 0
 929              	 .cfi_startproc
 930              	.LVL54:
 622:../Libraries/XMCLib/src/xmc1_scu.c ****   return (bool)((SCU_CLK->CGATSTAT0 & peripheral) != 0);
 931              	 .loc 1 622 0
 932 0000 034B     	 ldr r3,.L99
 623:../Libraries/XMCLib/src/xmc1_scu.c **** }
 933              	 .loc 1 623 0
 934              	 
 622:../Libraries/XMCLib/src/xmc1_scu.c ****   return (bool)((SCU_CLK->CGATSTAT0 & peripheral) != 0);
 935              	 .loc 1 622 0
 936 0002 9B68     	 ldr r3,[r3,#8]
 937 0004 1840     	 and r0,r3
 938              	.LVL55:
 939 0006 431E     	 sub r3,r0,#1
 940 0008 9841     	 sbc r0,r0,r3
 941 000a C0B2     	 uxtb r0,r0
 942              	 .loc 1 623 0
 943 000c 7047     	 bx lr
 944              	.L100:
 945 000e C046     	 .align 2
 946              	.L99:
 947 0010 00030140 	 .word 1073808128
 948              	 .cfi_endproc
 949              	.LFE73:
 951              	 .section .text.XMC_SCU_CLOCK_ScaleMCLKFrequency,"ax",%progbits
 952              	 .align 2
 953              	 .global XMC_SCU_CLOCK_ScaleMCLKFrequency
 954              	 .code 16
 955              	 .thumb_func
 957              	XMC_SCU_CLOCK_ScaleMCLKFrequency:
 958              	.LFB75:
 624:../Libraries/XMCLib/src/xmc1_scu.c **** 
 625:../Libraries/XMCLib/src/xmc1_scu.c **** /* This API configures main clock (MCLK) frequency to requested frequency value. */
 626:../Libraries/XMCLib/src/xmc1_scu.c **** void XMC_SCU_CLOCK_SetMCLKFrequency(uint32_t freq_khz)
 627:../Libraries/XMCLib/src/xmc1_scu.c **** {
 628:../Libraries/XMCLib/src/xmc1_scu.c ****   uint32_t ratio;
 629:../Libraries/XMCLib/src/xmc1_scu.c ****   uint32_t ratio_int;
 630:../Libraries/XMCLib/src/xmc1_scu.c ****   uint32_t ratio_frac;
 631:../Libraries/XMCLib/src/xmc1_scu.c **** 
 632:../Libraries/XMCLib/src/xmc1_scu.c **** #if UC_SERIES == XMC14
 633:../Libraries/XMCLib/src/xmc1_scu.c ****   if (((SCU_CLK->CLKCR1) & SCU_CLK_CLKCR1_DCLKSEL_Msk) == 0U)
 634:../Libraries/XMCLib/src/xmc1_scu.c ****   {
 635:../Libraries/XMCLib/src/xmc1_scu.c ****      ratio = DCO1_DIV2_FREQUENCY_KHZ_Q22_10 / freq_khz;
 636:../Libraries/XMCLib/src/xmc1_scu.c ****   }
 637:../Libraries/XMCLib/src/xmc1_scu.c ****   else
 638:../Libraries/XMCLib/src/xmc1_scu.c ****   {
 639:../Libraries/XMCLib/src/xmc1_scu.c ****      ratio = ((OSCHP_GetFrequency() / 1000U) << 10U) / freq_khz;
 640:../Libraries/XMCLib/src/xmc1_scu.c ****   }
 641:../Libraries/XMCLib/src/xmc1_scu.c **** 
 642:../Libraries/XMCLib/src/xmc1_scu.c ****   /* Manage overflow */
 643:../Libraries/XMCLib/src/xmc1_scu.c ****   if (ratio > 0xffffffU)
 644:../Libraries/XMCLib/src/xmc1_scu.c ****   {
 645:../Libraries/XMCLib/src/xmc1_scu.c ****     ratio = 0xffffffU;
 646:../Libraries/XMCLib/src/xmc1_scu.c ****   }
 647:../Libraries/XMCLib/src/xmc1_scu.c **** 
 648:../Libraries/XMCLib/src/xmc1_scu.c ****   ratio_int = ratio >> 10U;
 649:../Libraries/XMCLib/src/xmc1_scu.c ****   ratio_frac = ratio & 0x3ffU;
 650:../Libraries/XMCLib/src/xmc1_scu.c **** #else
 651:../Libraries/XMCLib/src/xmc1_scu.c ****     ratio = DCO1_DIV2_FREQUENCY_KHZ_Q24_8 / freq_khz;
 652:../Libraries/XMCLib/src/xmc1_scu.c **** 
 653:../Libraries/XMCLib/src/xmc1_scu.c ****   /* Manage overflow */
 654:../Libraries/XMCLib/src/xmc1_scu.c ****   if (ratio > 0xffffU)
 655:../Libraries/XMCLib/src/xmc1_scu.c ****   {
 656:../Libraries/XMCLib/src/xmc1_scu.c ****     ratio = 0xffffU;
 657:../Libraries/XMCLib/src/xmc1_scu.c ****   }
 658:../Libraries/XMCLib/src/xmc1_scu.c **** 
 659:../Libraries/XMCLib/src/xmc1_scu.c ****   ratio_int = ratio >> 8U;
 660:../Libraries/XMCLib/src/xmc1_scu.c ****   ratio_frac = ratio & 0xffU;
 661:../Libraries/XMCLib/src/xmc1_scu.c **** #endif
 662:../Libraries/XMCLib/src/xmc1_scu.c **** 
 663:../Libraries/XMCLib/src/xmc1_scu.c ****   XMC_SCU_CLOCK_ScaleMCLKFrequency(ratio_int, ratio_frac);
 664:../Libraries/XMCLib/src/xmc1_scu.c **** }
 665:../Libraries/XMCLib/src/xmc1_scu.c **** 
 666:../Libraries/XMCLib/src/xmc1_scu.c **** 
 667:../Libraries/XMCLib/src/xmc1_scu.c **** /* A utility routine which updates the fractional dividers in steps */
 668:../Libraries/XMCLib/src/xmc1_scu.c **** void XMC_SCU_CLOCK_ScaleMCLKFrequency(uint32_t idiv, uint32_t fdiv)
 669:../Libraries/XMCLib/src/xmc1_scu.c **** {
 959              	 .loc 1 669 0
 960              	 .cfi_startproc
 961              	.LVL56:
 962 0000 F8B5     	 push {r3,r4,r5,r6,r7,lr}
 963              	.LCFI3:
 964              	 .cfi_def_cfa_offset 24
 965              	 .cfi_offset 3,-24
 966              	 .cfi_offset 4,-20
 967              	 .cfi_offset 5,-16
 968              	 .cfi_offset 6,-12
 969              	 .cfi_offset 7,-8
 970              	 .cfi_offset 14,-4
 971              	.LBB86:
 972              	.LBB87:
 386:../Libraries/XMCLib/src/xmc1_scu.c **** 
 973              	 .loc 1 386 0
 974 0002 C023     	 mov r3,#192
 388:../Libraries/XMCLib/src/xmc1_scu.c ****   {
 975              	 .loc 1 388 0
 976 0004 0424     	 mov r4,#4
 386:../Libraries/XMCLib/src/xmc1_scu.c **** 
 977              	 .loc 1 386 0
 978 0006 2D4A     	 ldr r2,.L120
 979 0008 5362     	 str r3,[r2,#36]
 980              	.L102:
 388:../Libraries/XMCLib/src/xmc1_scu.c ****   {
 981              	 .loc 1 388 0
 982 000a 536A     	 ldr r3,[r2,#36]
 983 000c 1C42     	 tst r4,r3
 984 000e FCD1     	 bne .L102
 985              	.LBE87:
 986              	.LBE86:
 670:../Libraries/XMCLib/src/xmc1_scu.c ****   /* Find out current and target value of idiv */
 671:../Libraries/XMCLib/src/xmc1_scu.c ****   uint32_t curr_idiv;
 672:../Libraries/XMCLib/src/xmc1_scu.c **** 
 673:../Libraries/XMCLib/src/xmc1_scu.c ****   XMC_SCU_UnlockProtectedBits();
 674:../Libraries/XMCLib/src/xmc1_scu.c **** 
 675:../Libraries/XMCLib/src/xmc1_scu.c ****   /* Take a snapshot of value already programmed into IDIV */
 676:../Libraries/XMCLib/src/xmc1_scu.c ****   curr_idiv = (SCU_CLK->CLKCR & SCU_CLK_CLKCR_IDIV_Msk) >> SCU_CLK_CLKCR_IDIV_Pos;
 987              	 .loc 1 676 0
 988 0010 2B4A     	 ldr r2,.L120+4
 677:../Libraries/XMCLib/src/xmc1_scu.c **** 
 678:../Libraries/XMCLib/src/xmc1_scu.c **** #if (UC_SERIES == XMC14)
 679:../Libraries/XMCLib/src/xmc1_scu.c ****   SCU_CLK->CLKCR1 = (SCU_CLK->CLKCR1 & (uint32_t)~(SCU_CLK_CLKCR1_FDIV_Msk)) |
 680:../Libraries/XMCLib/src/xmc1_scu.c ****                    (uint32_t)((fdiv >> 8U) << SCU_CLK_CLKCR1_FDIV_Pos);
 681:../Libraries/XMCLib/src/xmc1_scu.c **** 
 682:../Libraries/XMCLib/src/xmc1_scu.c ****   SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_FDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)
 683:../Libraries/XMCLib/src/xmc1_scu.c ****                    (uint32_t)((fdiv & 0xffU) << SCU_CLK_CLKCR_FDIV_Pos) |
 684:../Libraries/XMCLib/src/xmc1_scu.c ****                    (uint32_t)(1023UL << SCU_CLK_CLKCR_CNTADJ_Pos);
 685:../Libraries/XMCLib/src/xmc1_scu.c **** #else
 686:../Libraries/XMCLib/src/xmc1_scu.c ****   SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_FDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)
 989              	 .loc 1 686 0
 990 0012 2C4D     	 ldr r5,.L120+8
 676:../Libraries/XMCLib/src/xmc1_scu.c **** 
 991              	 .loc 1 676 0
 992 0014 1468     	 ldr r4,[r2]
 993              	 .loc 1 686 0
 994 0016 1368     	 ldr r3,[r2]
 676:../Libraries/XMCLib/src/xmc1_scu.c **** 
 995              	 .loc 1 676 0
 996 0018 2404     	 lsl r4,r4,#16
 997              	 .loc 1 686 0
 998 001a 1D40     	 and r5,r3
 999 001c 2A4B     	 ldr r3,.L120+12
 676:../Libraries/XMCLib/src/xmc1_scu.c **** 
 1000              	 .loc 1 676 0
 1001 001e 240E     	 lsr r4,r4,#24
 1002              	.LVL57:
 1003 0020 2B43     	 orr r3,r5
 687:../Libraries/XMCLib/src/xmc1_scu.c ****                    (uint32_t)(fdiv << SCU_CLK_CLKCR_FDIV_Pos) |
 1004              	 .loc 1 687 0
 1005 0022 0B43     	 orr r3,r1
 688:../Libraries/XMCLib/src/xmc1_scu.c ****                    (uint32_t)(1023UL << SCU_CLK_CLKCR_CNTADJ_Pos);
 689:../Libraries/XMCLib/src/xmc1_scu.c **** #endif
 690:../Libraries/XMCLib/src/xmc1_scu.c **** 
 691:../Libraries/XMCLib/src/xmc1_scu.c ****   while ((SCU_CLK->CLKCR)& SCU_CLK_CLKCR_VDDC2LOW_Msk)
 1006              	 .loc 1 691 0
 1007 0024 8021     	 mov r1,#128
 1008              	.LVL58:
 686:../Libraries/XMCLib/src/xmc1_scu.c ****                    (uint32_t)(fdiv << SCU_CLK_CLKCR_FDIV_Pos) |
 1009              	 .loc 1 686 0
 1010 0026 1360     	 str r3,[r2]
 1011              	 .loc 1 691 0
 1012 0028 C905     	 lsl r1,r1,#23
 1013              	.L103:
 1014              	 .loc 1 691 0 is_stmt 0 discriminator 1
 1015 002a 1368     	 ldr r3,[r2]
 1016 002c 0B42     	 tst r3,r1
 1017 002e FCD1     	 bne .L103
 692:../Libraries/XMCLib/src/xmc1_scu.c ****   {
 693:../Libraries/XMCLib/src/xmc1_scu.c ****     /* Spin until the core supply stabilizes */
 694:../Libraries/XMCLib/src/xmc1_scu.c ****   }
 695:../Libraries/XMCLib/src/xmc1_scu.c **** 
 696:../Libraries/XMCLib/src/xmc1_scu.c ****   if(curr_idiv <= idiv)
 1018              	 .loc 1 696 0 is_stmt 1
 1019 0030 8442     	 cmp r4,r0
 1020 0032 29D9     	 bls .L104
 1021              	.LBB88:
 1022              	.LBB89:
 697:../Libraries/XMCLib/src/xmc1_scu.c ****   {
 698:../Libraries/XMCLib/src/xmc1_scu.c ****     /* Requested IDIV is greater than currently programmed IDIV. So downscale the frequency */
 699:../Libraries/XMCLib/src/xmc1_scu.c ****     XMC_SCU_CLOCK_lFrequencyDownScaling(curr_idiv, idiv);
 700:../Libraries/XMCLib/src/xmc1_scu.c ****   }
 701:../Libraries/XMCLib/src/xmc1_scu.c ****   else
 702:../Libraries/XMCLib/src/xmc1_scu.c ****   {
 703:../Libraries/XMCLib/src/xmc1_scu.c ****     /* Requested IDIV is lower than currently programmed IDIV. So upscale the frequency */
 704:../Libraries/XMCLib/src/xmc1_scu.c ****     XMC_SCU_CLOCK_lFrequencyUpScaling(curr_idiv, idiv);
 705:../Libraries/XMCLib/src/xmc1_scu.c ****   }
 706:../Libraries/XMCLib/src/xmc1_scu.c **** 
 707:../Libraries/XMCLib/src/xmc1_scu.c ****   SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_IDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)
 708:../Libraries/XMCLib/src/xmc1_scu.c ****                    (uint32_t)(idiv << SCU_CLK_CLKCR_IDIV_Pos) | (uint32_t)(1023UL << SCU_CLK_CLKCR_
 709:../Libraries/XMCLib/src/xmc1_scu.c **** 
 710:../Libraries/XMCLib/src/xmc1_scu.c ****   while ((SCU_CLK->CLKCR) & SCU_CLK_CLKCR_VDDC2LOW_Msk)
 711:../Libraries/XMCLib/src/xmc1_scu.c ****   {
 712:../Libraries/XMCLib/src/xmc1_scu.c ****     /* Wait voltage suply stabilization */
 713:../Libraries/XMCLib/src/xmc1_scu.c ****   }
 714:../Libraries/XMCLib/src/xmc1_scu.c **** 
 715:../Libraries/XMCLib/src/xmc1_scu.c ****   XMC_SCU_LockProtectedBits();
 716:../Libraries/XMCLib/src/xmc1_scu.c **** 
 717:../Libraries/XMCLib/src/xmc1_scu.c ****   SystemCoreClockUpdate();
 718:../Libraries/XMCLib/src/xmc1_scu.c **** 
 719:../Libraries/XMCLib/src/xmc1_scu.c **** }
 720:../Libraries/XMCLib/src/xmc1_scu.c **** 
 721:../Libraries/XMCLib/src/xmc1_scu.c **** /* Utility routine to perform frequency up scaling */
 722:../Libraries/XMCLib/src/xmc1_scu.c **** static void XMC_SCU_CLOCK_lFrequencyUpScaling(uint32_t curr_idiv, uint32_t target_idiv)
 723:../Libraries/XMCLib/src/xmc1_scu.c **** {
 724:../Libraries/XMCLib/src/xmc1_scu.c ****   while (curr_idiv > (target_idiv * 4UL))
 725:../Libraries/XMCLib/src/xmc1_scu.c ****   {
 726:../Libraries/XMCLib/src/xmc1_scu.c ****     curr_idiv = (uint32_t)(curr_idiv >> 2UL);   /* Divide by 4. */
 727:../Libraries/XMCLib/src/xmc1_scu.c **** 
 728:../Libraries/XMCLib/src/xmc1_scu.c ****     SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_IDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Ms
 729:../Libraries/XMCLib/src/xmc1_scu.c ****                      (uint32_t)(curr_idiv << SCU_CLK_CLKCR_IDIV_Pos) | 
 730:../Libraries/XMCLib/src/xmc1_scu.c ****                      (uint32_t)(1023UL << SCU_CLK_CLKCR_CNTADJ_Pos);
 731:../Libraries/XMCLib/src/xmc1_scu.c **** 
 732:../Libraries/XMCLib/src/xmc1_scu.c ****     while (SCU_CLK->CLKCR & SCU_CLK_CLKCR_VDDC2LOW_Msk)
 1023              	 .loc 1 732 0
 1024 0034 8021     	 mov r1,#128
 728:../Libraries/XMCLib/src/xmc1_scu.c ****                      (uint32_t)(curr_idiv << SCU_CLK_CLKCR_IDIV_Pos) | 
 1025              	 .loc 1 728 0
 1026 0036 254B     	 ldr r3,.L120+16
 1027 0038 8600     	 lsl r6,r0,#2
 1028 003a 214A     	 ldr r2,.L120+4
 1029 003c 9C46     	 mov ip,r3
 1030 003e 224F     	 ldr r7,.L120+12
 1031              	 .loc 1 732 0
 1032 0040 C905     	 lsl r1,r1,#23
 1033              	.LVL59:
 724:../Libraries/XMCLib/src/xmc1_scu.c ****   {
 1034              	 .loc 1 724 0
 1035 0042 B442     	 cmp r4,r6
 1036 0044 0CD9     	 bls .L113
 1037              	.LVL60:
 1038              	.L112:
 728:../Libraries/XMCLib/src/xmc1_scu.c ****                      (uint32_t)(curr_idiv << SCU_CLK_CLKCR_IDIV_Pos) | 
 1039              	 .loc 1 728 0
 1040 0046 6546     	 mov r5,ip
 1041 0048 1368     	 ldr r3,[r2]
 726:../Libraries/XMCLib/src/xmc1_scu.c **** 
 1042              	 .loc 1 726 0
 1043 004a A408     	 lsr r4,r4,#2
 1044              	.LVL61:
 728:../Libraries/XMCLib/src/xmc1_scu.c ****                      (uint32_t)(curr_idiv << SCU_CLK_CLKCR_IDIV_Pos) | 
 1045              	 .loc 1 728 0
 1046 004c 2B40     	 and r3,r5
 1047 004e 3B43     	 orr r3,r7
 729:../Libraries/XMCLib/src/xmc1_scu.c ****                      (uint32_t)(1023UL << SCU_CLK_CLKCR_CNTADJ_Pos);
 1048              	 .loc 1 729 0
 1049 0050 2502     	 lsl r5,r4,#8
 1050 0052 2B43     	 orr r3,r5
 728:../Libraries/XMCLib/src/xmc1_scu.c ****                      (uint32_t)(curr_idiv << SCU_CLK_CLKCR_IDIV_Pos) | 
 1051              	 .loc 1 728 0
 1052 0054 1360     	 str r3,[r2]
 1053              	.L111:
 1054              	 .loc 1 732 0
 1055 0056 1368     	 ldr r3,[r2]
 1056 0058 0B42     	 tst r3,r1
 1057 005a FCD1     	 bne .L111
 724:../Libraries/XMCLib/src/xmc1_scu.c ****   {
 1058              	 .loc 1 724 0
 1059 005c B442     	 cmp r4,r6
 1060 005e F2D8     	 bhi .L112
 1061              	.LVL62:
 1062              	.L113:
 1063              	.LBE89:
 1064              	.LBE88:
 707:../Libraries/XMCLib/src/xmc1_scu.c ****                    (uint32_t)(idiv << SCU_CLK_CLKCR_IDIV_Pos) | (uint32_t)(1023UL << SCU_CLK_CLKCR_
 1065              	 .loc 1 707 0
 1066 0060 174A     	 ldr r2,.L120+4
 1067 0062 1A4B     	 ldr r3,.L120+16
 1068 0064 1168     	 ldr r1,[r2]
 708:../Libraries/XMCLib/src/xmc1_scu.c **** 
 1069              	 .loc 1 708 0
 1070 0066 0002     	 lsl r0,r0,#8
 1071              	.LVL63:
 707:../Libraries/XMCLib/src/xmc1_scu.c ****                    (uint32_t)(idiv << SCU_CLK_CLKCR_IDIV_Pos) | (uint32_t)(1023UL << SCU_CLK_CLKCR_
 1072              	 .loc 1 707 0
 1073 0068 0B40     	 and r3,r1
 1074 006a 1749     	 ldr r1,.L120+12
 1075 006c 0B43     	 orr r3,r1
 710:../Libraries/XMCLib/src/xmc1_scu.c ****   {
 1076              	 .loc 1 710 0
 1077 006e 8021     	 mov r1,#128
 708:../Libraries/XMCLib/src/xmc1_scu.c **** 
 1078              	 .loc 1 708 0
 1079 0070 0343     	 orr r3,r0
 707:../Libraries/XMCLib/src/xmc1_scu.c ****                    (uint32_t)(idiv << SCU_CLK_CLKCR_IDIV_Pos) | (uint32_t)(1023UL << SCU_CLK_CLKCR_
 1080              	 .loc 1 707 0
 1081 0072 1360     	 str r3,[r2]
 710:../Libraries/XMCLib/src/xmc1_scu.c ****   {
 1082              	 .loc 1 710 0
 1083 0074 C905     	 lsl r1,r1,#23
 1084              	.L110:
 710:../Libraries/XMCLib/src/xmc1_scu.c ****   {
 1085              	 .loc 1 710 0 is_stmt 0 discriminator 1
 1086 0076 1368     	 ldr r3,[r2]
 1087 0078 0B42     	 tst r3,r1
 1088 007a FCD1     	 bne .L110
 1089              	.LBB90:
 1090              	.LBB91:
 380:../Libraries/XMCLib/src/xmc1_scu.c **** }
 1091              	 .loc 1 380 0 is_stmt 1
 1092 007c C322     	 mov r2,#195
 1093 007e 0F4B     	 ldr r3,.L120
 1094              	.LBE91:
 1095              	.LBE90:
 719:../Libraries/XMCLib/src/xmc1_scu.c **** 
 1096              	 .loc 1 719 0
 1097              	 
 1098              	.LBB93:
 1099              	.LBB92:
 380:../Libraries/XMCLib/src/xmc1_scu.c **** }
 1100              	 .loc 1 380 0
 1101 0080 5A62     	 str r2,[r3,#36]
 1102              	.LBE92:
 1103              	.LBE93:
 717:../Libraries/XMCLib/src/xmc1_scu.c **** 
 1104              	 .loc 1 717 0
 1105 0082 FFF7FEFF 	 bl SystemCoreClockUpdate
 1106              	.LVL64:
 719:../Libraries/XMCLib/src/xmc1_scu.c **** 
 1107              	 .loc 1 719 0
 1108 0086 F8BD     	 pop {r3,r4,r5,r6,r7,pc}
 1109              	.LVL65:
 1110              	.L104:
 1111              	.LBB94:
 1112              	.LBB95:
 733:../Libraries/XMCLib/src/xmc1_scu.c ****     {
 734:../Libraries/XMCLib/src/xmc1_scu.c ****     /* Wait voltage suply stabilization */
 735:../Libraries/XMCLib/src/xmc1_scu.c ****     }
 736:../Libraries/XMCLib/src/xmc1_scu.c ****   }
 737:../Libraries/XMCLib/src/xmc1_scu.c **** }
 738:../Libraries/XMCLib/src/xmc1_scu.c **** 
 739:../Libraries/XMCLib/src/xmc1_scu.c **** /* Utility routine to perform frequency down scaling */
 740:../Libraries/XMCLib/src/xmc1_scu.c **** static void XMC_SCU_CLOCK_lFrequencyDownScaling(uint32_t curr_idiv, uint32_t target_idiv)
 741:../Libraries/XMCLib/src/xmc1_scu.c **** {
 742:../Libraries/XMCLib/src/xmc1_scu.c **** 
 743:../Libraries/XMCLib/src/xmc1_scu.c ****   while ((curr_idiv * 4UL) < target_idiv)
 744:../Libraries/XMCLib/src/xmc1_scu.c ****   {
 745:../Libraries/XMCLib/src/xmc1_scu.c ****     if(0U == curr_idiv)
 746:../Libraries/XMCLib/src/xmc1_scu.c ****     {
 747:../Libraries/XMCLib/src/xmc1_scu.c ****       curr_idiv = 1U;
 748:../Libraries/XMCLib/src/xmc1_scu.c ****     }
 749:../Libraries/XMCLib/src/xmc1_scu.c ****     curr_idiv  = (uint32_t)(curr_idiv << 2UL);   /* Multiply by 4. */
 750:../Libraries/XMCLib/src/xmc1_scu.c ****     SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_IDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Ms
 751:../Libraries/XMCLib/src/xmc1_scu.c ****                      (uint32_t)(curr_idiv << SCU_CLK_CLKCR_IDIV_Pos) |
 752:../Libraries/XMCLib/src/xmc1_scu.c ****                      (uint32_t)(1023UL << SCU_CLK_CLKCR_CNTADJ_Pos);
 753:../Libraries/XMCLib/src/xmc1_scu.c **** 
 754:../Libraries/XMCLib/src/xmc1_scu.c ****     while (SCU_CLK->CLKCR & SCU_CLK_CLKCR_VDDC2LOW_Msk)
 1113              	 .loc 1 754 0
 1114 0088 8021     	 mov r1,#128
 750:../Libraries/XMCLib/src/xmc1_scu.c ****                      (uint32_t)(curr_idiv << SCU_CLK_CLKCR_IDIV_Pos) |
 1115              	 .loc 1 750 0
 1116 008a 0D4A     	 ldr r2,.L120+4
 1117 008c 0F4F     	 ldr r7,.L120+16
 1118 008e 0E4E     	 ldr r6,.L120+12
 1119              	 .loc 1 754 0
 1120 0090 C905     	 lsl r1,r1,#23
 1121              	.LVL66:
 1122              	.L108:
 743:../Libraries/XMCLib/src/xmc1_scu.c ****   {
 1123              	 .loc 1 743 0
 1124 0092 A300     	 lsl r3,r4,#2
 1125 0094 9842     	 cmp r0,r3
 1126 0096 E3D9     	 bls .L113
 745:../Libraries/XMCLib/src/xmc1_scu.c ****     {
 1127              	 .loc 1 745 0
 1128 0098 002C     	 cmp r4,#0
 1129 009a 0AD0     	 beq .L114
 1130 009c A502     	 lsl r5,r4,#10
 1131 009e 1C1C     	 mov r4,r3
 1132              	.LVL67:
 1133              	.L106:
 750:../Libraries/XMCLib/src/xmc1_scu.c ****                      (uint32_t)(curr_idiv << SCU_CLK_CLKCR_IDIV_Pos) |
 1134              	 .loc 1 750 0
 1135 00a0 1368     	 ldr r3,[r2]
 1136 00a2 3B40     	 and r3,r7
 1137 00a4 3343     	 orr r3,r6
 751:../Libraries/XMCLib/src/xmc1_scu.c ****                      (uint32_t)(1023UL << SCU_CLK_CLKCR_CNTADJ_Pos);
 1138              	 .loc 1 751 0
 1139 00a6 2B43     	 orr r3,r5
 750:../Libraries/XMCLib/src/xmc1_scu.c ****                      (uint32_t)(curr_idiv << SCU_CLK_CLKCR_IDIV_Pos) |
 1140              	 .loc 1 750 0
 1141 00a8 1360     	 str r3,[r2]
 1142              	.L107:
 1143              	 .loc 1 754 0
 1144 00aa 1368     	 ldr r3,[r2]
 1145 00ac 0B42     	 tst r3,r1
 1146 00ae FCD1     	 bne .L107
 1147 00b0 EFE7     	 b .L108
 1148              	.L114:
 745:../Libraries/XMCLib/src/xmc1_scu.c ****     {
 1149              	 .loc 1 745 0
 1150 00b2 8025     	 mov r5,#128
 1151 00b4 0424     	 mov r4,#4
 1152              	.LVL68:
 1153 00b6 ED00     	 lsl r5,r5,#3
 1154 00b8 F2E7     	 b .L106
 1155              	.L121:
 1156 00ba C046     	 .align 2
 1157              	.L120:
 1158 00bc 00000140 	 .word 1073807360
 1159 00c0 00030140 	 .word 1073808128
 1160 00c4 00FF0FC0 	 .word -1072693504
 1161 00c8 0000F03F 	 .word 1072693248
 1162 00cc FF000FC0 	 .word -1072758529
 1163              	.LBE95:
 1164              	.LBE94:
 1165              	 .cfi_endproc
 1166              	.LFE75:
 1168              	 .section .text.XMC_SCU_CLOCK_Init,"ax",%progbits
 1169              	 .align 2
 1170              	 .global XMC_SCU_CLOCK_Init
 1171              	 .code 16
 1172              	 .thumb_func
 1174              	XMC_SCU_CLOCK_Init:
 1175              	.LFB68:
 518:../Libraries/XMCLib/src/xmc1_scu.c ****   /* Remove protection */
 1176              	 .loc 1 518 0
 1177              	 .cfi_startproc
 1178              	.LVL69:
 1179              	.LBB96:
 1180              	.LBB97:
 386:../Libraries/XMCLib/src/xmc1_scu.c **** 
 1181              	 .loc 1 386 0
 1182 0000 C023     	 mov r3,#192
 388:../Libraries/XMCLib/src/xmc1_scu.c ****   {
 1183              	 .loc 1 388 0
 1184 0002 0421     	 mov r1,#4
 386:../Libraries/XMCLib/src/xmc1_scu.c **** 
 1185              	 .loc 1 386 0
 1186 0004 0B4A     	 ldr r2,.L125
 1187              	.LBE97:
 1188              	.LBE96:
 518:../Libraries/XMCLib/src/xmc1_scu.c ****   /* Remove protection */
 1189              	 .loc 1 518 0
 1190 0006 10B5     	 push {r4,lr}
 1191              	.LCFI4:
 1192              	 .cfi_def_cfa_offset 8
 1193              	 .cfi_offset 4,-8
 1194              	 .cfi_offset 14,-4
 1195              	.LBB99:
 1196              	.LBB98:
 386:../Libraries/XMCLib/src/xmc1_scu.c **** 
 1197              	 .loc 1 386 0
 1198 0008 5362     	 str r3,[r2,#36]
 1199              	.L123:
 388:../Libraries/XMCLib/src/xmc1_scu.c ****   {
 1200              	 .loc 1 388 0
 1201 000a 536A     	 ldr r3,[r2,#36]
 1202 000c 1942     	 tst r1,r3
 1203 000e FCD1     	 bne .L123
 1204 0010 8268     	 ldr r2,[r0,#8]
 1205 0012 4168     	 ldr r1,[r0,#4]
 1206              	.LBE98:
 1207              	.LBE99:
 563:../Libraries/XMCLib/src/xmc1_scu.c ****                    config->rtc_src |
 1208              	 .loc 1 563 0
 1209 0014 084C     	 ldr r4,.L125+4
 1210 0016 1143     	 orr r1,r2
 1211 0018 2368     	 ldr r3,[r4]
 1212 001a 084A     	 ldr r2,.L125+8
 573:../Libraries/XMCLib/src/xmc1_scu.c **** 
 1213              	 .loc 1 573 0
 1214              	 
 563:../Libraries/XMCLib/src/xmc1_scu.c ****                    config->rtc_src |
 1215              	 .loc 1 563 0
 1216 001c 1340     	 and r3,r2
 1217              	.LBB100:
 1218              	.LBB101:
 380:../Libraries/XMCLib/src/xmc1_scu.c **** }
 1219              	 .loc 1 380 0
 1220 001e C322     	 mov r2,#195
 1221              	.LBE101:
 1222              	.LBE100:
 564:../Libraries/XMCLib/src/xmc1_scu.c ****                    config->pclk_src;
 1223              	 .loc 1 564 0
 1224 0020 0B43     	 orr r3,r1
 563:../Libraries/XMCLib/src/xmc1_scu.c ****                    config->rtc_src |
 1225              	 .loc 1 563 0
 1226 0022 2360     	 str r3,[r4]
 1227              	.LBB103:
 1228              	.LBB102:
 380:../Libraries/XMCLib/src/xmc1_scu.c **** }
 1229              	 .loc 1 380 0
 1230 0024 034B     	 ldr r3,.L125
 1231 0026 5A62     	 str r2,[r3,#36]
 1232              	.LBE102:
 1233              	.LBE103:
 571:../Libraries/XMCLib/src/xmc1_scu.c **** 
 1234              	 .loc 1 571 0
 1235 0028 4378     	 ldrb r3,[r0,#1]
 1236 002a 0178     	 ldrb r1,[r0]
 1237 002c 181C     	 mov r0,r3
 1238              	.LVL70:
 1239 002e FFF7FEFF 	 bl XMC_SCU_CLOCK_ScaleMCLKFrequency
 1240              	.LVL71:
 573:../Libraries/XMCLib/src/xmc1_scu.c **** 
 1241              	 .loc 1 573 0
 1242 0032 10BD     	 pop {r4,pc}
 1243              	.L126:
 1244              	 .align 2
 1245              	.L125:
 1246 0034 00000140 	 .word 1073807360
 1247 0038 00030140 	 .word 1073808128
 1248 003c FFFFF0FF 	 .word -983041
 1249              	 .cfi_endproc
 1250              	.LFE68:
 1252              	 .global __aeabi_uidiv
 1253              	 .section .text.XMC_SCU_CLOCK_SetMCLKFrequency,"ax",%progbits
 1254              	 .align 2
 1255              	 .global XMC_SCU_CLOCK_SetMCLKFrequency
 1256              	 .code 16
 1257              	 .thumb_func
 1259              	XMC_SCU_CLOCK_SetMCLKFrequency:
 1260              	.LFB74:
 627:../Libraries/XMCLib/src/xmc1_scu.c ****   uint32_t ratio;
 1261              	 .loc 1 627 0
 1262              	 .cfi_startproc
 1263              	.LVL72:
 1264 0000 011C     	 mov r1,r0
 651:../Libraries/XMCLib/src/xmc1_scu.c **** 
 1265              	 .loc 1 651 0
 1266 0002 FA20     	 mov r0,#250
 1267              	.LVL73:
 627:../Libraries/XMCLib/src/xmc1_scu.c ****   uint32_t ratio;
 1268              	 .loc 1 627 0
 1269 0004 08B5     	 push {r3,lr}
 1270              	.LCFI5:
 1271              	 .cfi_def_cfa_offset 8
 1272              	 .cfi_offset 3,-8
 1273              	 .cfi_offset 14,-4
 651:../Libraries/XMCLib/src/xmc1_scu.c **** 
 1274              	 .loc 1 651 0
 1275 0006 C003     	 lsl r0,r0,#15
 1276 0008 FFF7FEFF 	 bl __aeabi_uidiv
 1277              	.LVL74:
 1278 000c 054B     	 ldr r3,.L129
 1279 000e 011E     	 sub r1,r0,#0
 1280              	.LVL75:
 1281 0010 9942     	 cmp r1,r3
 1282 0012 00D9     	 bls .L128
 1283 0014 191C     	 mov r1,r3
 1284              	.L128:
 1285              	.LVL76:
 660:../Libraries/XMCLib/src/xmc1_scu.c **** #endif
 1286              	 .loc 1 660 0
 1287 0016 FF23     	 mov r3,#255
 659:../Libraries/XMCLib/src/xmc1_scu.c ****   ratio_frac = ratio & 0xffU;
 1288              	 .loc 1 659 0
 1289 0018 080A     	 lsr r0,r1,#8
 1290              	.LVL77:
 660:../Libraries/XMCLib/src/xmc1_scu.c **** #endif
 1291              	 .loc 1 660 0
 1292 001a 1940     	 and r1,r3
 1293              	.LVL78:
 663:../Libraries/XMCLib/src/xmc1_scu.c **** }
 1294              	 .loc 1 663 0
 1295 001c FFF7FEFF 	 bl XMC_SCU_CLOCK_ScaleMCLKFrequency
 1296              	.LVL79:
 664:../Libraries/XMCLib/src/xmc1_scu.c **** 
 1297              	 .loc 1 664 0
 1298              	 
 1299 0020 08BD     	 pop {r3,pc}
 1300              	.L130:
 1301 0022 C046     	 .align 2
 1302              	.L129:
 1303 0024 FFFF0000 	 .word 65535
 1304              	 .cfi_endproc
 1305              	.LFE74:
 1307              	 .section .text.XMC_SCU_CLOCK_GetPeripheralClockFrequency,"ax",%progbits
 1308              	 .align 2
 1309              	 .global XMC_SCU_CLOCK_GetPeripheralClockFrequency
 1310              	 .code 16
 1311              	 .thumb_func
 1313              	XMC_SCU_CLOCK_GetPeripheralClockFrequency:
 1314              	.LFB78:
 755:../Libraries/XMCLib/src/xmc1_scu.c ****     {
 756:../Libraries/XMCLib/src/xmc1_scu.c ****     /* Wait voltage suply stabilization */
 757:../Libraries/XMCLib/src/xmc1_scu.c ****     }
 758:../Libraries/XMCLib/src/xmc1_scu.c ****   }
 759:../Libraries/XMCLib/src/xmc1_scu.c **** }
 760:../Libraries/XMCLib/src/xmc1_scu.c **** 
 761:../Libraries/XMCLib/src/xmc1_scu.c **** /*
 762:../Libraries/XMCLib/src/xmc1_scu.c ****  * API to retrieve clock frequency of peripherals on the peripheral bus using a shared functional c
 763:../Libraries/XMCLib/src/xmc1_scu.c ****  */
 764:../Libraries/XMCLib/src/xmc1_scu.c **** uint32_t XMC_SCU_CLOCK_GetPeripheralClockFrequency(void)
 765:../Libraries/XMCLib/src/xmc1_scu.c **** {
 1315              	 .loc 1 765 0
 1316              	 .cfi_startproc
 766:../Libraries/XMCLib/src/xmc1_scu.c ****   return (SystemCoreClock);
 1317              	 .loc 1 766 0
 1318 0000 014B     	 ldr r3,.L132
 767:../Libraries/XMCLib/src/xmc1_scu.c **** }
 1319              	 .loc 1 767 0
 1320              	 
 766:../Libraries/XMCLib/src/xmc1_scu.c ****   return (SystemCoreClock);
 1321              	 .loc 1 766 0
 1322 0002 1868     	 ldr r0,[r3]
 1323              	 .loc 1 767 0
 1324 0004 7047     	 bx lr
 1325              	.L133:
 1326 0006 C046     	 .align 2
 1327              	.L132:
 1328 0008 00000000 	 .word SystemCoreClock
 1329              	 .cfi_endproc
 1330              	.LFE78:
 1332              	 .section .text.XMC_SCU_CLOCK_GetFastPeripheralClockFrequency,"ax",%progbits
 1333              	 .align 2
 1334              	 .global XMC_SCU_CLOCK_GetFastPeripheralClockFrequency
 1335              	 .code 16
 1336              	 .thumb_func
 1338              	XMC_SCU_CLOCK_GetFastPeripheralClockFrequency:
 1339              	.LFB79:
 768:../Libraries/XMCLib/src/xmc1_scu.c **** 
 769:../Libraries/XMCLib/src/xmc1_scu.c **** /* Provides the clock frequency of peripherals on the peripheral bus that are using a shared functi
 770:../Libraries/XMCLib/src/xmc1_scu.c **** uint32_t XMC_SCU_CLOCK_GetFastPeripheralClockFrequency(void)
 771:../Libraries/XMCLib/src/xmc1_scu.c **** {
 1340              	 .loc 1 771 0
 1341              	 .cfi_startproc
 772:../Libraries/XMCLib/src/xmc1_scu.c ****   return (SystemCoreClock << ((SCU_CLK->CLKCR & SCU_CLK_CLKCR_PCLKSEL_Msk) >> SCU_CLK_CLKCR_PCLKSEL
 1342              	 .loc 1 772 0
 1343 0000 044B     	 ldr r3,.L135
 773:../Libraries/XMCLib/src/xmc1_scu.c **** }
 1344              	 .loc 1 773 0
 1345              	 
 772:../Libraries/XMCLib/src/xmc1_scu.c ****   return (SystemCoreClock << ((SCU_CLK->CLKCR & SCU_CLK_CLKCR_PCLKSEL_Msk) >> SCU_CLK_CLKCR_PCLKSEL
 1346              	 .loc 1 772 0
 1347 0002 1868     	 ldr r0,[r3]
 1348 0004 044B     	 ldr r3,.L135+4
 1349 0006 C003     	 lsl r0,r0,#15
 1350 0008 1B68     	 ldr r3,[r3]
 1351 000a C00F     	 lsr r0,r0,#31
 1352 000c 8340     	 lsl r3,r3,r0
 1353 000e 181C     	 mov r0,r3
 1354              	 .loc 1 773 0
 1355 0010 7047     	 bx lr
 1356              	.L136:
 1357 0012 C046     	 .align 2
 1358              	.L135:
 1359 0014 00030140 	 .word 1073808128
 1360 0018 00000000 	 .word SystemCoreClock
 1361              	 .cfi_endproc
 1362              	.LFE79:
 1364              	 .global __aeabi_idiv
 1365              	 .section .text.XMC_SCU_CLOCK_CalibrateOscillatorOnTemperature,"ax",%progbits
 1366              	 .align 2
 1367              	 .global XMC_SCU_CLOCK_CalibrateOscillatorOnTemperature
 1368              	 .code 16
 1369              	 .thumb_func
 1371              	XMC_SCU_CLOCK_CalibrateOscillatorOnTemperature:
 1372              	.LFB80:
 774:../Libraries/XMCLib/src/xmc1_scu.c **** 
 775:../Libraries/XMCLib/src/xmc1_scu.c **** /* DCO1 clock frequency can be calibrated during runtime to achieve a better accuracy */
 776:../Libraries/XMCLib/src/xmc1_scu.c **** void XMC_SCU_CLOCK_CalibrateOscillatorOnTemperature(int32_t temperature)
 777:../Libraries/XMCLib/src/xmc1_scu.c **** {
 1373              	 .loc 1 777 0
 1374              	 .cfi_startproc
 1375              	.LVL80:
 1376 0000 10B5     	 push {r4,lr}
 1377              	.LCFI6:
 1378              	 .cfi_def_cfa_offset 8
 1379              	 .cfi_offset 4,-8
 1380              	 .cfi_offset 14,-4
 778:../Libraries/XMCLib/src/xmc1_scu.c ****   int32_t a;
 779:../Libraries/XMCLib/src/xmc1_scu.c ****   int32_t b;
 780:../Libraries/XMCLib/src/xmc1_scu.c ****   int32_t d;
 781:../Libraries/XMCLib/src/xmc1_scu.c ****   int32_t e;
 782:../Libraries/XMCLib/src/xmc1_scu.c ****   int32_t offset;
 783:../Libraries/XMCLib/src/xmc1_scu.c **** 
 784:../Libraries/XMCLib/src/xmc1_scu.c ****   a = *((uint8_t*)DCO_ADJLO_T2);
 785:../Libraries/XMCLib/src/xmc1_scu.c ****   b = *((uint8_t*)DCO_ADJLO_T1);
 1381              	 .loc 1 785 0
 1382 0002 104B     	 ldr r3,.L140
 1383 0004 1C78     	 ldrb r4,[r3]
 1384              	.LVL81:
 786:../Libraries/XMCLib/src/xmc1_scu.c ****   d = *((uint8_t*)ANA_TSE_T1);
 1385              	 .loc 1 786 0
 1386 0006 104B     	 ldr r3,.L140+4
 1387 0008 1978     	 ldrb r1,[r3]
 1388              	.LVL82:
 784:../Libraries/XMCLib/src/xmc1_scu.c ****   b = *((uint8_t*)DCO_ADJLO_T1);
 1389              	 .loc 1 784 0
 1390 000a 104B     	 ldr r3,.L140+8
 1391              	.LVL83:
 787:../Libraries/XMCLib/src/xmc1_scu.c ****   e = *((uint8_t*)ANA_TSE_T2);
 788:../Libraries/XMCLib/src/xmc1_scu.c **** 
 789:../Libraries/XMCLib/src/xmc1_scu.c ****   offset = b + (((a - b) * (temperature - d)) / (e - d));
 1392              	 .loc 1 789 0
 1393 000c 401A     	 sub r0,r0,r1
 1394              	.LVL84:
 784:../Libraries/XMCLib/src/xmc1_scu.c ****   b = *((uint8_t*)DCO_ADJLO_T1);
 1395              	 .loc 1 784 0
 1396 000e 1B78     	 ldrb r3,[r3]
 1397              	.LVL85:
 1398              	 .loc 1 789 0
 1399 0010 1B1B     	 sub r3,r3,r4
 1400 0012 5843     	 mul r0,r3
 787:../Libraries/XMCLib/src/xmc1_scu.c ****   e = *((uint8_t*)ANA_TSE_T2);
 1401              	 .loc 1 787 0
 1402 0014 0E4B     	 ldr r3,.L140+12
 1403              	.LVL86:
 1404 0016 1B78     	 ldrb r3,[r3]
 1405              	.LVL87:
 1406              	 .loc 1 789 0
 1407 0018 591A     	 sub r1,r3,r1
 1408              	.LVL88:
 1409 001a FFF7FEFF 	 bl __aeabi_idiv
 1410              	.LVL89:
 1411              	.LBB104:
 1412              	.LBB105:
 386:../Libraries/XMCLib/src/xmc1_scu.c **** 
 1413              	 .loc 1 386 0
 1414 001e C023     	 mov r3,#192
 1415              	.LBE105:
 1416              	.LBE104:
 1417              	 .loc 1 789 0
 1418 0020 0419     	 add r4,r0,r4
 1419              	.LVL90:
 790:../Libraries/XMCLib/src/xmc1_scu.c ****   offset &= SCU_ANALOG_ANAOFFSET_ADJL_OFFSET_Msk;
 1420              	 .loc 1 790 0
 1421 0022 0F20     	 mov r0,#15
 1422              	.LBB108:
 1423              	.LBB106:
 388:../Libraries/XMCLib/src/xmc1_scu.c ****   {
 1424              	 .loc 1 388 0
 1425 0024 0421     	 mov r1,#4
 386:../Libraries/XMCLib/src/xmc1_scu.c **** 
 1426              	 .loc 1 386 0
 1427 0026 0B4A     	 ldr r2,.L140+16
 1428              	.LBE106:
 1429              	.LBE108:
 1430              	 .loc 1 790 0
 1431 0028 0440     	 and r4,r0
 1432              	.LVL91:
 1433              	.LBB109:
 1434              	.LBB107:
 386:../Libraries/XMCLib/src/xmc1_scu.c **** 
 1435              	 .loc 1 386 0
 1436 002a 5362     	 str r3,[r2,#36]
 1437              	.L138:
 388:../Libraries/XMCLib/src/xmc1_scu.c ****   {
 1438              	 .loc 1 388 0
 1439 002c 536A     	 ldr r3,[r2,#36]
 1440 002e 1942     	 tst r1,r3
 1441 0030 FCD1     	 bne .L138
 1442              	.LBE107:
 1443              	.LBE109:
 791:../Libraries/XMCLib/src/xmc1_scu.c **** 
 792:../Libraries/XMCLib/src/xmc1_scu.c ****   XMC_SCU_UnlockProtectedBits();
 793:../Libraries/XMCLib/src/xmc1_scu.c ****   SCU_ANALOG->ANAOFFSET = (uint16_t)offset;
 1444              	 .loc 1 793 0
 1445 0032 6C23     	 mov r3,#108
 1446 0034 084A     	 ldr r2,.L140+20
 1447 0036 A4B2     	 uxth r4,r4
 1448              	.LVL92:
 1449 0038 D452     	 strh r4,[r2,r3]
 1450              	.LBB110:
 1451              	.LBB111:
 380:../Libraries/XMCLib/src/xmc1_scu.c **** }
 1452              	 .loc 1 380 0
 1453 003a C322     	 mov r2,#195
 1454 003c 054B     	 ldr r3,.L140+16
 1455              	.LBE111:
 1456              	.LBE110:
 794:../Libraries/XMCLib/src/xmc1_scu.c ****   XMC_SCU_LockProtectedBits();
 795:../Libraries/XMCLib/src/xmc1_scu.c **** }
 1457              	 .loc 1 795 0
 1458              	 
 1459              	.LBB113:
 1460              	.LBB112:
 380:../Libraries/XMCLib/src/xmc1_scu.c **** }
 1461              	 .loc 1 380 0
 1462 003e 5A62     	 str r2,[r3,#36]
 1463              	.LBE112:
 1464              	.LBE113:
 1465              	 .loc 1 795 0
 1466 0040 10BD     	 pop {r4,pc}
 1467              	.L141:
 1468 0042 C046     	 .align 2
 1469              	.L140:
 1470 0044 320F0010 	 .word 268439346
 1471 0048 300F0010 	 .word 268439344
 1472 004c 330F0010 	 .word 268439347
 1473 0050 310F0010 	 .word 268439345
 1474 0054 00000140 	 .word 1073807360
 1475 0058 00100140 	 .word 1073811456
 1476              	 .cfi_endproc
 1477              	.LFE80:
 1479              	 .section .text.XMC_SCU_INTERRUPT_SetEventHandler,"ax",%progbits
 1480              	 .align 2
 1481              	 .global XMC_SCU_INTERRUPT_SetEventHandler
 1482              	 .code 16
 1483              	 .thumb_func
 1485              	XMC_SCU_INTERRUPT_SetEventHandler:
 1486              	.LFB81:
 796:../Libraries/XMCLib/src/xmc1_scu.c **** 
 797:../Libraries/XMCLib/src/xmc1_scu.c **** /*
 798:../Libraries/XMCLib/src/xmc1_scu.c ****  * API to assign the event handler function to be executed on occurrence of the selected event
 799:../Libraries/XMCLib/src/xmc1_scu.c ****  */
 800:../Libraries/XMCLib/src/xmc1_scu.c **** XMC_SCU_STATUS_t XMC_SCU_INTERRUPT_SetEventHandler(XMC_SCU_INTERRUPT_EVENT_t event, XMC_SCU_INTERRU
 801:../Libraries/XMCLib/src/xmc1_scu.c **** {
 1487              	 .loc 1 801 0
 1488              	 .cfi_startproc
 1489              	.LVL93:
 1490 0000 10B5     	 push {r4,lr}
 1491              	.LCFI7:
 1492              	 .cfi_def_cfa_offset 8
 1493              	 .cfi_offset 4,-8
 1494              	 .cfi_offset 14,-4
 802:../Libraries/XMCLib/src/xmc1_scu.c ****   uint32_t index;
 803:../Libraries/XMCLib/src/xmc1_scu.c ****   XMC_SCU_STATUS_t status;
 804:../Libraries/XMCLib/src/xmc1_scu.c **** 
 805:../Libraries/XMCLib/src/xmc1_scu.c ****   XMC_ASSERT("XMC_SCU_INTERRUPT_SetEventHandler: Invalid event", XMC_SCU_INTERRUPT_IsValidEvent(eve
 806:../Libraries/XMCLib/src/xmc1_scu.c ****   XMC_ASSERT("XMC_SCU_INTERRUPT_SetEventHandler: Invalid handler", handler != NULL);
 807:../Libraries/XMCLib/src/xmc1_scu.c **** 
 808:../Libraries/XMCLib/src/xmc1_scu.c ****   index = 0U;
 809:../Libraries/XMCLib/src/xmc1_scu.c **** 
 810:../Libraries/XMCLib/src/xmc1_scu.c ****   while (((event & ((XMC_SCU_INTERRUPT_EVENT_t)1 << index)) == 0U) && (index < XMC_SCU_INTERRUPT_EV
 1495              	 .loc 1 810 0
 1496 0002 C307     	 lsl r3,r0,#31
 1497 0004 13D4     	 bmi .L147
 1498 0006 0023     	 mov r3,#0
 1499 0008 0124     	 mov r4,#1
 1500 000a 01E0     	 b .L145
 1501              	.LVL94:
 1502              	.L152:
 1503              	 .loc 1 810 0 is_stmt 0 discriminator 1
 1504 000c 202B     	 cmp r3,#32
 1505 000e 0CD0     	 beq .L151
 1506              	.LVL95:
 1507              	.L145:
 1508              	 .loc 1 810 0
 1509 0010 021C     	 mov r2,r0
 811:../Libraries/XMCLib/src/xmc1_scu.c ****   {
 812:../Libraries/XMCLib/src/xmc1_scu.c ****     index++;
 1510              	 .loc 1 812 0 is_stmt 1
 1511 0012 0133     	 add r3,r3,#1
 1512              	.LVL96:
 810:../Libraries/XMCLib/src/xmc1_scu.c ****   {
 1513              	 .loc 1 810 0
 1514 0014 DA40     	 lsr r2,r2,r3
 1515 0016 1442     	 tst r4,r2
 1516 0018 F8D0     	 beq .L152
 813:../Libraries/XMCLib/src/xmc1_scu.c ****   }
 814:../Libraries/XMCLib/src/xmc1_scu.c **** 
 815:../Libraries/XMCLib/src/xmc1_scu.c ****   if (index == XMC_SCU_INTERRUPT_EVENT_MAX)
 816:../Libraries/XMCLib/src/xmc1_scu.c ****   {
 817:../Libraries/XMCLib/src/xmc1_scu.c ****     status = XMC_SCU_STATUS_ERROR;
 1517              	 .loc 1 817 0
 1518 001a 0120     	 mov r0,#1
 1519              	.LVL97:
 815:../Libraries/XMCLib/src/xmc1_scu.c ****   {
 1520              	 .loc 1 815 0
 1521 001c 202B     	 cmp r3,#32
 1522 001e 03D0     	 beq .L146
 1523              	.LVL98:
 1524              	.L143:
 818:../Libraries/XMCLib/src/xmc1_scu.c ****   }
 819:../Libraries/XMCLib/src/xmc1_scu.c ****   else
 820:../Libraries/XMCLib/src/xmc1_scu.c ****   {
 821:../Libraries/XMCLib/src/xmc1_scu.c ****     event_handler_list[index] = handler;
 822:../Libraries/XMCLib/src/xmc1_scu.c ****     status = XMC_SCU_STATUS_OK;
 1525              	 .loc 1 822 0
 1526 0020 0020     	 mov r0,#0
 821:../Libraries/XMCLib/src/xmc1_scu.c ****     status = XMC_SCU_STATUS_OK;
 1527              	 .loc 1 821 0
 1528 0022 044A     	 ldr r2,.L153
 1529 0024 9B00     	 lsl r3,r3,#2
 1530 0026 9950     	 str r1,[r3,r2]
 1531              	.LVL99:
 1532              	.L146:
 823:../Libraries/XMCLib/src/xmc1_scu.c ****   }
 824:../Libraries/XMCLib/src/xmc1_scu.c **** 
 825:../Libraries/XMCLib/src/xmc1_scu.c ****   return (status);
 826:../Libraries/XMCLib/src/xmc1_scu.c **** }
 1533              	 .loc 1 826 0
 1534              	 
 1535 0028 10BD     	 pop {r4,pc}
 1536              	.LVL100:
 1537              	.L151:
 817:../Libraries/XMCLib/src/xmc1_scu.c ****   }
 1538              	 .loc 1 817 0
 1539 002a 0120     	 mov r0,#1
 1540              	.LVL101:
 1541 002c FCE7     	 b .L146
 1542              	.LVL102:
 1543              	.L147:
 808:../Libraries/XMCLib/src/xmc1_scu.c **** 
 1544              	 .loc 1 808 0
 1545 002e 0023     	 mov r3,#0
 1546 0030 F6E7     	 b .L143
 1547              	.L154:
 1548 0032 C046     	 .align 2
 1549              	.L153:
 1550 0034 00000000 	 .word .LANCHOR0
 1551              	 .cfi_endproc
 1552              	.LFE81:
 1554              	 .section .text.XMC_SCU_IRQHandler,"ax",%progbits
 1555              	 .align 2
 1556              	 .global XMC_SCU_IRQHandler
 1557              	 .code 16
 1558              	 .thumb_func
 1560              	XMC_SCU_IRQHandler:
 1561              	.LFB82:
 827:../Libraries/XMCLib/src/xmc1_scu.c **** 
 828:../Libraries/XMCLib/src/xmc1_scu.c **** /*
 829:../Libraries/XMCLib/src/xmc1_scu.c ****  * A common function to execute callback functions for multiple events
 830:../Libraries/XMCLib/src/xmc1_scu.c ****  */
 831:../Libraries/XMCLib/src/xmc1_scu.c **** void XMC_SCU_IRQHandler(uint32_t sr_num)
 832:../Libraries/XMCLib/src/xmc1_scu.c **** {
 1562              	 .loc 1 832 0
 1563              	 .cfi_startproc
 1564              	.LVL103:
 1565 0000 F8B5     	 push {r3,r4,r5,r6,r7,lr}
 1566              	.LCFI8:
 1567              	 .cfi_def_cfa_offset 24
 1568              	 .cfi_offset 3,-24
 1569              	 .cfi_offset 4,-20
 1570              	 .cfi_offset 5,-16
 1571              	 .cfi_offset 6,-12
 1572              	 .cfi_offset 7,-8
 1573              	 .cfi_offset 14,-4
 833:../Libraries/XMCLib/src/xmc1_scu.c ****   XMC_ASSERT("XMC_SCU_IRQHandler: Invalid sr_num", sr_num < SCU_IRQ_NUM);
 834:../Libraries/XMCLib/src/xmc1_scu.c **** 
 835:../Libraries/XMCLib/src/xmc1_scu.c ****   uint32_t index;
 836:../Libraries/XMCLib/src/xmc1_scu.c ****   XMC_SCU_INTERRUPT_EVENT_t event;
 837:../Libraries/XMCLib/src/xmc1_scu.c ****   XMC_SCU_INTERRUPT_EVENT_HANDLER_t event_handler;
 838:../Libraries/XMCLib/src/xmc1_scu.c **** 
 839:../Libraries/XMCLib/src/xmc1_scu.c ****   index = 0U;
 840:../Libraries/XMCLib/src/xmc1_scu.c ****   event = XMC_SCU_INTERUPT_GetEventStatus() & event_masks[sr_num];
 1574              	 .loc 1 840 0
 1575 0002 1049     	 ldr r1,.L172
 1576              	.LBB114:
 1577              	.LBB115:
 361:../Libraries/XMCLib/src/xmc1_scu.c **** #if UC_SERIES == XMC14
 1578              	 .loc 1 361 0
 1579 0004 104B     	 ldr r3,.L172+4
 1580              	.LBE115:
 1581              	.LBE114:
 1582              	 .loc 1 840 0
 1583 0006 8000     	 lsl r0,r0,#2
 1584              	.LVL104:
 1585              	.LBB117:
 1586              	.LBB116:
 361:../Libraries/XMCLib/src/xmc1_scu.c **** #if UC_SERIES == XMC14
 1587              	 .loc 1 361 0
 1588 0008 1A68     	 ldr r2,[r3]
 1589              	.LVL105:
 1590              	.LBE116:
 1591              	.LBE117:
 1592              	 .loc 1 840 0
 1593 000a 4558     	 ldr r5,[r0,r1]
 841:../Libraries/XMCLib/src/xmc1_scu.c ****   XMC_SCU_INTERRUPT_ClearEventStatus(event);
 842:../Libraries/XMCLib/src/xmc1_scu.c **** 
 843:../Libraries/XMCLib/src/xmc1_scu.c ****   while ((event != 0) && (index < XMC_SCU_INTERRUPT_EVENT_MAX))
 1594              	 .loc 1 843 0
 1595 000c 0024     	 mov r4,#0
 840:../Libraries/XMCLib/src/xmc1_scu.c ****   XMC_SCU_INTERRUPT_ClearEventStatus(event);
 1596              	 .loc 1 840 0
 1597 000e 1540     	 and r5,r2
 1598              	.LVL106:
 1599              	.LBB118:
 1600              	.LBB119:
 371:../Libraries/XMCLib/src/xmc1_scu.c **** #if UC_SERIES == XMC14
 1601              	 .loc 1 371 0
 1602 0010 9A68     	 ldr r2,[r3,#8]
 1603              	.LVL107:
 1604 0012 2A43     	 orr r2,r5
 1605 0014 9A60     	 str r2,[r3,#8]
 1606              	.LBE119:
 1607              	.LBE118:
 1608              	 .loc 1 843 0
 1609 0016 002D     	 cmp r5,#0
 1610 0018 13D0     	 beq .L155
 844:../Libraries/XMCLib/src/xmc1_scu.c ****   {
 845:../Libraries/XMCLib/src/xmc1_scu.c ****     if ((event & ((XMC_SCU_INTERRUPT_EVENT_t)1 << index)) != 0U)
 1611              	 .loc 1 845 0
 1612 001a 0126     	 mov r6,#1
 846:../Libraries/XMCLib/src/xmc1_scu.c ****     {
 847:../Libraries/XMCLib/src/xmc1_scu.c ****       event &= ~((XMC_SCU_INTERRUPT_EVENT_t)1 << index);
 848:../Libraries/XMCLib/src/xmc1_scu.c ****       event_handler = event_handler_list[index];
 1613              	 .loc 1 848 0
 1614 001c 0B4F     	 ldr r7,.L172+8
 1615 001e 01E0     	 b .L166
 1616              	.LVL108:
 1617              	.L171:
 843:../Libraries/XMCLib/src/xmc1_scu.c ****   {
 1618              	 .loc 1 843 0 discriminator 1
 1619 0020 202C     	 cmp r4,#32
 1620 0022 0ED0     	 beq .L155
 1621              	.LVL109:
 1622              	.L166:
 845:../Libraries/XMCLib/src/xmc1_scu.c ****     {
 1623              	 .loc 1 845 0
 1624 0024 2B1C     	 mov r3,r5
 1625 0026 E340     	 lsr r3,r3,r4
 1626 0028 1E42     	 tst r6,r3
 1627 002a 07D0     	 beq .L157
 847:../Libraries/XMCLib/src/xmc1_scu.c ****       event_handler = event_handler_list[index];
 1628              	 .loc 1 847 0
 1629 002c 331C     	 mov r3,r6
 1630 002e A340     	 lsl r3,r3,r4
 1631 0030 9D43     	 bic r5,r3
 1632              	.LVL110:
 1633 0032 A300     	 lsl r3,r4,#2
 1634              	 .loc 1 848 0
 1635 0034 DB59     	 ldr r3,[r3,r7]
 1636              	.LVL111:
 849:../Libraries/XMCLib/src/xmc1_scu.c ****       if (event_handler != NULL)
 1637              	 .loc 1 849 0
 1638 0036 002B     	 cmp r3,#0
 1639 0038 00D0     	 beq .L157
 850:../Libraries/XMCLib/src/xmc1_scu.c ****       {
 851:../Libraries/XMCLib/src/xmc1_scu.c ****         event_handler();
 1640              	 .loc 1 851 0
 1641 003a 9847     	 blx r3
 1642              	.LVL112:
 1643              	.L157:
 852:../Libraries/XMCLib/src/xmc1_scu.c ****       }
 853:../Libraries/XMCLib/src/xmc1_scu.c **** 
 854:../Libraries/XMCLib/src/xmc1_scu.c ****       /* break; XMC1: Only PULSE interrupts */
 855:../Libraries/XMCLib/src/xmc1_scu.c ****     }
 856:../Libraries/XMCLib/src/xmc1_scu.c ****     index++;
 1644              	 .loc 1 856 0
 1645 003c 0134     	 add r4,r4,#1
 1646              	.LVL113:
 843:../Libraries/XMCLib/src/xmc1_scu.c ****   {
 1647              	 .loc 1 843 0
 1648 003e 002D     	 cmp r5,#0
 1649 0040 EED1     	 bne .L171
 1650              	.LVL114:
 1651              	.L155:
 857:../Libraries/XMCLib/src/xmc1_scu.c ****   }
 858:../Libraries/XMCLib/src/xmc1_scu.c **** }
 1652              	 .loc 1 858 0
 1653              	 
 1654              	.LVL115:
 1655 0042 F8BD     	 pop {r3,r4,r5,r6,r7,pc}
 1656              	.L173:
 1657              	 .align 2
 1658              	.L172:
 1659 0044 00000000 	 .word .LANCHOR1
 1660 0048 38000140 	 .word 1073807416
 1661 004c 00000000 	 .word .LANCHOR0
 1662              	 .cfi_endproc
 1663              	.LFE82:
 1665              	 .section .text.XMC_SCU_SetBMI,"ax",%progbits
 1666              	 .align 2
 1667              	 .global XMC_SCU_SetBMI
 1668              	 .code 16
 1669              	 .thumb_func
 1671              	XMC_SCU_SetBMI:
 1672              	.LFB83:
 859:../Libraries/XMCLib/src/xmc1_scu.c **** 
 860:../Libraries/XMCLib/src/xmc1_scu.c **** /* Install BMI */
 861:../Libraries/XMCLib/src/xmc1_scu.c **** uint32_t XMC_SCU_SetBMI(uint32_t flags, uint8_t timeout)
 862:../Libraries/XMCLib/src/xmc1_scu.c **** {
 1673              	 .loc 1 862 0
 1674              	 .cfi_startproc
 1675              	.LVL116:
 1676 0000 08B5     	 push {r3,lr}
 1677              	.LCFI9:
 1678              	 .cfi_def_cfa_offset 8
 1679              	 .cfi_offset 3,-8
 1680              	 .cfi_offset 14,-4
 1681 0002 8023     	 mov r3,#128
 863:../Libraries/XMCLib/src/xmc1_scu.c **** #if (UC_SERIES == XMC14)
 864:../Libraries/XMCLib/src/xmc1_scu.c ****   return ROM_BmiInstallationReq((flags & 0x0fffU) | ((timeout << 12) & 0xf000U));
 865:../Libraries/XMCLib/src/xmc1_scu.c **** #else
 866:../Libraries/XMCLib/src/xmc1_scu.c ****   return ROM_BmiInstallationReq((flags & 0x07ffU) | ((timeout << 12) & 0xf000U) | 0x0800U);
 1682              	 .loc 1 866 0
 1683 0004 4005     	 lsl r0,r0,#21
 1684              	.LVL117:
 1685 0006 1B01     	 lsl r3,r3,#4
 1686 0008 400D     	 lsr r0,r0,#21
 1687 000a 1843     	 orr r0,r3
 1688 000c 8423     	 mov r3,#132
 1689 000e 0907     	 lsl r1,r1,#28
 1690              	.LVL118:
 1691 0010 090C     	 lsr r1,r1,#16
 1692 0012 5B00     	 lsl r3,r3,#1
 1693 0014 0843     	 orr r0,r1
 1694 0016 1B68     	 ldr r3,[r3]
 1695 0018 9847     	 blx r3
 1696              	.LVL119:
 867:../Libraries/XMCLib/src/xmc1_scu.c **** #endif
 868:../Libraries/XMCLib/src/xmc1_scu.c **** }
 1697              	 .loc 1 868 0
 1698              	 
 1699 001a 08BD     	 pop {r3,pc}
 1700              	 .cfi_endproc
 1701              	.LFE83:
 1703              	 .section .bss.event_handler_list,"aw",%nobits
 1704              	 .align 2
 1705              	 .set .LANCHOR0,.+0
 1708              	event_handler_list:
 1709 0000 00000000 	 .space 128
 1709      00000000 
 1709      00000000 
 1709      00000000 
 1709      00000000 
 1710              	 .section .rodata.event_masks,"a",%progbits
 1711              	 .align 2
 1712              	 .set .LANCHOR1,.+0
 1715              	event_masks:
 1716 0000 00001F00 	 .word 2031616
 1717 0004 8F0060FF 	 .word -10485617
 1718 0008 70FF0000 	 .word 65392
 1719              	 .text
 1720              	.Letext0:
 1721              	 .file 2 "c:\\users\\jutta.schuerba\\desktop\\dave-ide-4.4.2-64bit\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\machine\\_default_types.h"
 1722              	 .file 3 "c:\\users\\jutta.schuerba\\desktop\\dave-ide-4.4.2-64bit\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\stdint.h"
 1723              	 .file 4 "C:/Workspaces/DAVE-4.4.2-64Bit/WIRELESS_CHARGER_RECVEIVER_delivered/Libraries/CMSIS/Infineon/XMC1300_series/Include/XMC1300.h"
 1724              	 .file 5 "C:/Workspaces/DAVE-4.4.2-64Bit/WIRELESS_CHARGER_RECVEIVER_delivered/Libraries/XMCLib/inc/xmc_scu.h"
 1725              	 .file 6 "C:/Workspaces/DAVE-4.4.2-64Bit/WIRELESS_CHARGER_RECVEIVER_delivered/Libraries/XMCLib/inc/xmc1_scu.h"
 1726              	 .file 7 "C:/Workspaces/DAVE-4.4.2-64Bit/WIRELESS_CHARGER_RECVEIVER_delivered/Libraries/CMSIS/Infineon/XMC1300_series/Include/system_XMC1300.h"
DEFINED SYMBOLS
                            *ABS*:00000000 xmc1_scu.c
    {standard input}:18     .text.XMC_SCU_INTERRUPT_EnableEvent:00000000 $t
    {standard input}:23     .text.XMC_SCU_INTERRUPT_EnableEvent:00000000 XMC_SCU_INTERRUPT_EnableEvent
    {standard input}:43     .text.XMC_SCU_INTERRUPT_EnableEvent:0000000c $d
    {standard input}:48     .text.XMC_SCU_INTERRUPT_DisableEvent:00000000 $t
    {standard input}:53     .text.XMC_SCU_INTERRUPT_DisableEvent:00000000 XMC_SCU_INTERRUPT_DisableEvent
    {standard input}:71     .text.XMC_SCU_INTERRUPT_DisableEvent:0000000c $d
    {standard input}:76     .text.XMC_SCU_INTERRUPT_TriggerEvent:00000000 $t
    {standard input}:81     .text.XMC_SCU_INTERRUPT_TriggerEvent:00000000 XMC_SCU_INTERRUPT_TriggerEvent
    {standard input}:100    .text.XMC_SCU_INTERRUPT_TriggerEvent:0000000c $d
    {standard input}:105    .text.XMC_SCU_INTERUPT_GetEventStatus:00000000 $t
    {standard input}:110    .text.XMC_SCU_INTERUPT_GetEventStatus:00000000 XMC_SCU_INTERUPT_GetEventStatus
    {standard input}:126    .text.XMC_SCU_INTERUPT_GetEventStatus:00000008 $d
    {standard input}:131    .text.XMC_SCU_INTERRUPT_ClearEventStatus:00000000 $t
    {standard input}:136    .text.XMC_SCU_INTERRUPT_ClearEventStatus:00000000 XMC_SCU_INTERRUPT_ClearEventStatus
    {standard input}:155    .text.XMC_SCU_INTERRUPT_ClearEventStatus:0000000c $d
    {standard input}:160    .text.XMC_SCU_LockProtectedBits:00000000 $t
    {standard input}:165    .text.XMC_SCU_LockProtectedBits:00000000 XMC_SCU_LockProtectedBits
    {standard input}:181    .text.XMC_SCU_LockProtectedBits:00000008 $d
    {standard input}:186    .text.XMC_SCU_UnlockProtectedBits:00000000 $t
    {standard input}:191    .text.XMC_SCU_UnlockProtectedBits:00000000 XMC_SCU_UnlockProtectedBits
    {standard input}:213    .text.XMC_SCU_UnlockProtectedBits:00000010 $d
    {standard input}:218    .text.XMC_SCU_SupplyMonitorInit:00000000 $t
    {standard input}:223    .text.XMC_SCU_SupplyMonitorInit:00000000 XMC_SCU_SupplyMonitorInit
    {standard input}:296    .text.XMC_SCU_SupplyMonitorInit:00000048 $d
    {standard input}:302    .text.XMC_SCU_SetTempLowLimit:00000000 $t
    {standard input}:307    .text.XMC_SCU_SetTempLowLimit:00000000 XMC_SCU_SetTempLowLimit
    {standard input}:390    .text.XMC_SCU_SetTempLowLimit:00000034 $d
    {standard input}:395    .text.XMC_SCU_SetTempHighLimit:00000000 $t
    {standard input}:400    .text.XMC_SCU_SetTempHighLimit:00000000 XMC_SCU_SetTempHighLimit
    {standard input}:483    .text.XMC_SCU_SetTempHighLimit:00000034 $d
    {standard input}:488    .text.XMC_SCU_SetRawTempLimits:00000000 $t
    {standard input}:493    .text.XMC_SCU_SetRawTempLimits:00000000 XMC_SCU_SetRawTempLimits
    {standard input}:516    .text.XMC_SCU_SetRawTempLimits:0000000c $d
    {standard input}:521    .text.XMC_SCU_StartTempMeasurement:00000000 $t
    {standard input}:526    .text.XMC_SCU_StartTempMeasurement:00000000 XMC_SCU_StartTempMeasurement
    {standard input}:544    .text.XMC_SCU_StartTempMeasurement:0000000c $d
    {standard input}:549    .text.XMC_SCU_StopTempMeasurement:00000000 $t
    {standard input}:554    .text.XMC_SCU_StopTempMeasurement:00000000 XMC_SCU_StopTempMeasurement
    {standard input}:572    .text.XMC_SCU_StopTempMeasurement:0000000c $d
    {standard input}:577    .text.XMC_SCU_HighTemperature:00000000 $t
    {standard input}:582    .text.XMC_SCU_HighTemperature:00000000 XMC_SCU_HighTemperature
    {standard input}:599    .text.XMC_SCU_HighTemperature:0000000c $d
    {standard input}:604    .text.XMC_SCU_LowTemperature:00000000 $t
    {standard input}:609    .text.XMC_SCU_LowTemperature:00000000 XMC_SCU_LowTemperature
    {standard input}:625    .text.XMC_SCU_LowTemperature:00000008 $d
    {standard input}:630    .text.XMC_SCU_GetTemperature:00000000 $t
    {standard input}:635    .text.XMC_SCU_GetTemperature:00000000 XMC_SCU_GetTemperature
    {standard input}:653    .text.XMC_SCU_GetTemperature:0000000c $d
    {standard input}:658    .text.XMC_SCU_CalcTemperature:00000000 $t
    {standard input}:663    .text.XMC_SCU_CalcTemperature:00000000 XMC_SCU_CalcTemperature
    {standard input}:685    .text.XMC_SCU_CLOCK_SetRtcClockSource:00000000 $t
    {standard input}:690    .text.XMC_SCU_CLOCK_SetRtcClockSource:00000000 XMC_SCU_CLOCK_SetRtcClockSource
    {standard input}:735    .text.XMC_SCU_CLOCK_SetRtcClockSource:00000024 $d
    {standard input}:742    .text.XMC_SCU_CLOCK_SetFastPeripheralClockSource:00000000 $t
    {standard input}:747    .text.XMC_SCU_CLOCK_SetFastPeripheralClockSource:00000000 XMC_SCU_CLOCK_SetFastPeripheralClockSource
    {standard input}:792    .text.XMC_SCU_CLOCK_SetFastPeripheralClockSource:00000024 $d
    {standard input}:799    .text.XMC_SCU_CLOCK_GatePeripheralClock:00000000 $t
    {standard input}:804    .text.XMC_SCU_CLOCK_GatePeripheralClock:00000000 XMC_SCU_CLOCK_GatePeripheralClock
    {standard input}:847    .text.XMC_SCU_CLOCK_GatePeripheralClock:00000020 $d
    {standard input}:853    .text.XMC_SCU_CLOCK_UngatePeripheralClock:00000000 $t
    {standard input}:858    .text.XMC_SCU_CLOCK_UngatePeripheralClock:00000000 XMC_SCU_CLOCK_UngatePeripheralClock
    {standard input}:915    .text.XMC_SCU_CLOCK_UngatePeripheralClock:00000028 $d
    {standard input}:921    .text.XMC_SCU_CLOCK_IsPeripheralClockGated:00000000 $t
    {standard input}:926    .text.XMC_SCU_CLOCK_IsPeripheralClockGated:00000000 XMC_SCU_CLOCK_IsPeripheralClockGated
    {standard input}:947    .text.XMC_SCU_CLOCK_IsPeripheralClockGated:00000010 $d
    {standard input}:952    .text.XMC_SCU_CLOCK_ScaleMCLKFrequency:00000000 $t
    {standard input}:957    .text.XMC_SCU_CLOCK_ScaleMCLKFrequency:00000000 XMC_SCU_CLOCK_ScaleMCLKFrequency
    {standard input}:1158   .text.XMC_SCU_CLOCK_ScaleMCLKFrequency:000000bc $d
    {standard input}:1169   .text.XMC_SCU_CLOCK_Init:00000000 $t
    {standard input}:1174   .text.XMC_SCU_CLOCK_Init:00000000 XMC_SCU_CLOCK_Init
    {standard input}:1246   .text.XMC_SCU_CLOCK_Init:00000034 $d
    {standard input}:1254   .text.XMC_SCU_CLOCK_SetMCLKFrequency:00000000 $t
    {standard input}:1259   .text.XMC_SCU_CLOCK_SetMCLKFrequency:00000000 XMC_SCU_CLOCK_SetMCLKFrequency
    {standard input}:1303   .text.XMC_SCU_CLOCK_SetMCLKFrequency:00000024 $d
    {standard input}:1308   .text.XMC_SCU_CLOCK_GetPeripheralClockFrequency:00000000 $t
    {standard input}:1313   .text.XMC_SCU_CLOCK_GetPeripheralClockFrequency:00000000 XMC_SCU_CLOCK_GetPeripheralClockFrequency
    {standard input}:1328   .text.XMC_SCU_CLOCK_GetPeripheralClockFrequency:00000008 $d
    {standard input}:1333   .text.XMC_SCU_CLOCK_GetFastPeripheralClockFrequency:00000000 $t
    {standard input}:1338   .text.XMC_SCU_CLOCK_GetFastPeripheralClockFrequency:00000000 XMC_SCU_CLOCK_GetFastPeripheralClockFrequency
    {standard input}:1359   .text.XMC_SCU_CLOCK_GetFastPeripheralClockFrequency:00000014 $d
    {standard input}:1366   .text.XMC_SCU_CLOCK_CalibrateOscillatorOnTemperature:00000000 $t
    {standard input}:1371   .text.XMC_SCU_CLOCK_CalibrateOscillatorOnTemperature:00000000 XMC_SCU_CLOCK_CalibrateOscillatorOnTemperature
    {standard input}:1470   .text.XMC_SCU_CLOCK_CalibrateOscillatorOnTemperature:00000044 $d
    {standard input}:1480   .text.XMC_SCU_INTERRUPT_SetEventHandler:00000000 $t
    {standard input}:1485   .text.XMC_SCU_INTERRUPT_SetEventHandler:00000000 XMC_SCU_INTERRUPT_SetEventHandler
    {standard input}:1550   .text.XMC_SCU_INTERRUPT_SetEventHandler:00000034 $d
    {standard input}:1555   .text.XMC_SCU_IRQHandler:00000000 $t
    {standard input}:1560   .text.XMC_SCU_IRQHandler:00000000 XMC_SCU_IRQHandler
    {standard input}:1659   .text.XMC_SCU_IRQHandler:00000044 $d
    {standard input}:1666   .text.XMC_SCU_SetBMI:00000000 $t
    {standard input}:1671   .text.XMC_SCU_SetBMI:00000000 XMC_SCU_SetBMI
    {standard input}:1704   .bss.event_handler_list:00000000 $d
    {standard input}:1708   .bss.event_handler_list:00000000 event_handler_list
    {standard input}:1711   .rodata.event_masks:00000000 $d
    {standard input}:1715   .rodata.event_masks:00000000 event_masks
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
SystemCoreClockUpdate
__aeabi_uidiv
SystemCoreClock
__aeabi_idiv
