
WIRELESS_CHARGER_RECVEIVER_delivered.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003a50  10001000  10001000  00001000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .VENEER_Code  00000138  2000000c  10004a50  0000800c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 Stack         00000404  20000144  00000000  00000144  2**0
                  ALLOC
  3 .data         000000d8  20000548  10004b88  00008548  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .bss          00000088  20000620  000004dc  00008620  2**2
                  ALLOC
  5 .no_init      00000004  20003ffc  00003eb8  00000144  2**2
                  ALLOC
  6 .debug_aranges 00000ae0  00000000  00000000  00008620  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0001ac52  00000000  00000000  00009100  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000396b  00000000  00000000  00023d52  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00006b2a  00000000  00000000  000276bd  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00001c7c  00000000  00000000  0002e1e8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000a273  00000000  00000000  0002fe64  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000086ed  00000000  00000000  0003a0d7  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000012c8  00000000  00000000  000427c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .build_attributes 000008aa  00000000  00000000  00043a90  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

10001000 <__Vectors>:
10001000:	48 05 00 20 19 10 00 10 00 00 00 00 99 10 00 10     H.. ............
10001010:	00 04 01 00 00 01 00 00                             ........

10001018 <Reset_Handler>:
    .thumb_func 
    .globl  Reset_Handler
    .type   Reset_Handler, %function
Reset_Handler: 
/* Initialize interrupt veneer */
	ldr	r1, =eROData
10001018:	4911      	ldr	r1, [pc, #68]	; (10001060 <__copy_data+0xe>)
	ldr	r2, =VeneerStart
1000101a:	4a12      	ldr	r2, [pc, #72]	; (10001064 <__copy_data+0x12>)
	ldr	r3, =VeneerEnd
1000101c:	4b12      	ldr	r3, [pc, #72]	; (10001068 <__copy_data+0x16>)
	bl  __copy_data
1000101e:	f000 f818 	bl	10001052 <__copy_data>

    ldr  r0, =SystemInit
10001022:	4812      	ldr	r0, [pc, #72]	; (1000106c <__copy_data+0x1a>)
    blx  r0
10001024:	4780      	blx	r0
	
/* Initialize data */
	ldr	r1, =DataLoadAddr
10001026:	4912      	ldr	r1, [pc, #72]	; (10001070 <__copy_data+0x1e>)
	ldr	r2, =__data_start
10001028:	4a12      	ldr	r2, [pc, #72]	; (10001074 <__copy_data+0x22>)
	ldr	r3, =__data_end
1000102a:	4b13      	ldr	r3, [pc, #76]	; (10001078 <__copy_data+0x26>)
	bl  __copy_data
1000102c:	f000 f811 	bl	10001052 <__copy_data>

/* RAM code */
	ldr	r1, =__ram_code_load
10001030:	4912      	ldr	r1, [pc, #72]	; (1000107c <__copy_data+0x2a>)
	ldr	r2, =__ram_code_start
10001032:	4a13      	ldr	r2, [pc, #76]	; (10001080 <__copy_data+0x2e>)
	ldr	r3, =__ram_code_end
10001034:	4b13      	ldr	r3, [pc, #76]	; (10001084 <__copy_data+0x32>)
	bl  __copy_data
10001036:	f000 f80c 	bl	10001052 <__copy_data>
 *    __bss_end__: end of the BSS section.
 *
 *  Both addresses must be aligned to 4 bytes boundary.
 */
#ifndef __SKIP_BSS_CLEAR
	ldr	r1, =__bss_start
1000103a:	4913      	ldr	r1, [pc, #76]	; (10001088 <__copy_data+0x36>)
	ldr	r2, =__bss_end
1000103c:	4a13      	ldr	r2, [pc, #76]	; (1000108c <__copy_data+0x3a>)

	movs	r0, 0
1000103e:	2000      	movs	r0, #0

	subs	r2, r1
10001040:	1a52      	subs	r2, r2, r1
	ble	.L_loop3_done
10001042:	dd02      	ble.n	1000104a <Reset_Handler+0x32>

.L_loop3:
	subs	r2, #4
10001044:	3a04      	subs	r2, #4
	str	r0, [r1, r2]
10001046:	5088      	str	r0, [r1, r2]
	bgt	.L_loop3
10001048:	dcfc      	bgt.n	10001044 <Reset_Handler+0x2c>
.L_loop3_done:
#endif /* __SKIP_BSS_CLEAR */

#ifndef __SKIP_LIBC_INIT_ARRAY
    ldr  r0, =__libc_init_array
1000104a:	4811      	ldr	r0, [pc, #68]	; (10001090 <__copy_data+0x3e>)
    blx  r0
1000104c:	4780      	blx	r0
#endif

    ldr  r0, =main
1000104e:	4811      	ldr	r0, [pc, #68]	; (10001094 <__copy_data+0x42>)
    blx  r0
10001050:	4780      	blx	r0

10001052 <__copy_data>:
 *    r3: end of the section to copy to
 *
 *  All addresses must be aligned to 4 bytes boundary.
 *  Uses r0
 */
	subs	r3, r2
10001052:	1a9b      	subs	r3, r3, r2
	ble	.L_loop_done
10001054:	dd03      	ble.n	1000105e <__copy_data+0xc>

.L_loop:
	subs	r3, #4
10001056:	3b04      	subs	r3, #4
	ldr	r0, [r1,r3]
10001058:	58c8      	ldr	r0, [r1, r3]
	str	r0, [r2,r3]
1000105a:	50d0      	str	r0, [r2, r3]
	bgt	.L_loop
1000105c:	dcfb      	bgt.n	10001056 <__copy_data+0x4>

.L_loop_done:
	bx  lr
1000105e:	4770      	bx	lr
    .thumb_func 
    .globl  Reset_Handler
    .type   Reset_Handler, %function
Reset_Handler: 
/* Initialize interrupt veneer */
	ldr	r1, =eROData
10001060:	10004a50 	.word	0x10004a50
	ldr	r2, =VeneerStart
10001064:	2000000c 	.word	0x2000000c
	ldr	r3, =VeneerEnd
10001068:	20000144 	.word	0x20000144
	bl  __copy_data

    ldr  r0, =SystemInit
1000106c:	100010e9 	.word	0x100010e9
    blx  r0
	
/* Initialize data */
	ldr	r1, =DataLoadAddr
10001070:	10004b88 	.word	0x10004b88
	ldr	r2, =__data_start
10001074:	20000548 	.word	0x20000548
	ldr	r3, =__data_end
10001078:	20000620 	.word	0x20000620
	bl  __copy_data

/* RAM code */
	ldr	r1, =__ram_code_load
1000107c:	10004c60 	.word	0x10004c60
	ldr	r2, =__ram_code_start
10001080:	20000620 	.word	0x20000620
	ldr	r3, =__ram_code_end
10001084:	20000620 	.word	0x20000620
 *    __bss_end__: end of the BSS section.
 *
 *  Both addresses must be aligned to 4 bytes boundary.
 */
#ifndef __SKIP_BSS_CLEAR
	ldr	r1, =__bss_start
10001088:	20000620 	.word	0x20000620
	ldr	r2, =__bss_end
1000108c:	200006a8 	.word	0x200006a8
	bgt	.L_loop3
.L_loop3_done:
#endif /* __SKIP_BSS_CLEAR */

#ifndef __SKIP_LIBC_INIT_ARRAY
    ldr  r0, =__libc_init_array
10001090:	10004535 	.word	0x10004535
    blx  r0
#endif

    ldr  r0, =main
10001094:	10002409 	.word	0x10002409

10001098 <BCCU0_0_IRQHandler>:
    
    .thumb_func
    .weak Default_handler
    .type Default_handler, %function
Default_handler:
    b  .
10001098:	e7fe      	b.n	10001098 <BCCU0_0_IRQHandler>
	...

1000109c <SystemCoreClockUpdate>:

__WEAK void SystemCoreClockUpdate(void)
{
  static uint32_t IDIV, FDIV;

  IDIV = ((SCU_CLK->CLKCR) & SCU_CLK_CLKCR_IDIV_Msk) >> SCU_CLK_CLKCR_IDIV_Pos;
1000109c:	4a0c      	ldr	r2, [pc, #48]	; (100010d0 <SystemCoreClockUpdate+0x34>)

  SystemCoreClockUpdate();
}

__WEAK void SystemCoreClockUpdate(void)
{
1000109e:	b508      	push	{r3, lr}
  static uint32_t IDIV, FDIV;

  IDIV = ((SCU_CLK->CLKCR) & SCU_CLK_CLKCR_IDIV_Msk) >> SCU_CLK_CLKCR_IDIV_Pos;
100010a0:	6813      	ldr	r3, [r2, #0]
100010a2:	490c      	ldr	r1, [pc, #48]	; (100010d4 <SystemCoreClockUpdate+0x38>)
100010a4:	041b      	lsls	r3, r3, #16
100010a6:	0e1b      	lsrs	r3, r3, #24
100010a8:	600b      	str	r3, [r1, #0]
  FDIV = ((SCU_CLK->CLKCR) & SCU_CLK_CLKCR_FDIV_Msk) >> SCU_CLK_CLKCR_FDIV_Pos;
100010aa:	21ff      	movs	r1, #255	; 0xff
100010ac:	6812      	ldr	r2, [r2, #0]
100010ae:	4011      	ands	r1, r2
100010b0:	4a09      	ldr	r2, [pc, #36]	; (100010d8 <SystemCoreClockUpdate+0x3c>)
100010b2:	6011      	str	r1, [r2, #0]
  
  if (IDIV != 0)
100010b4:	2b00      	cmp	r3, #0
100010b6:	d103      	bne.n	100010c0 <SystemCoreClockUpdate+0x24>
    SystemCoreClock = ((DCO1_FREQUENCY << 6U) / ((IDIV << 8) + FDIV)) << 1U;
  }
  else
  {
    /* Fractional divider bypassed. Simply divide DCO_DCLK by 2 */
    SystemCoreClock = DCO1_FREQUENCY >> 1U;
100010b8:	4808      	ldr	r0, [pc, #32]	; (100010dc <SystemCoreClockUpdate+0x40>)
100010ba:	4b09      	ldr	r3, [pc, #36]	; (100010e0 <SystemCoreClockUpdate+0x44>)
  }
}
100010bc:	6018      	str	r0, [r3, #0]
100010be:	bd08      	pop	{r3, pc}
  FDIV = ((SCU_CLK->CLKCR) & SCU_CLK_CLKCR_FDIV_Msk) >> SCU_CLK_CLKCR_FDIV_Pos;
  
  if (IDIV != 0)
  {
    /* Fractional divider is enabled and used */
    SystemCoreClock = ((DCO1_FREQUENCY << 6U) / ((IDIV << 8) + FDIV)) << 1U;
100010c0:	021b      	lsls	r3, r3, #8
100010c2:	1859      	adds	r1, r3, r1
100010c4:	4807      	ldr	r0, [pc, #28]	; (100010e4 <SystemCoreClockUpdate+0x48>)
100010c6:	f000 fa5f 	bl	10001588 <__aeabi_uidiv>
100010ca:	0040      	lsls	r0, r0, #1
100010cc:	e7f5      	b.n	100010ba <SystemCoreClockUpdate+0x1e>
100010ce:	46c0      	nop			; (mov r8, r8)
100010d0:	40010300 	.word	0x40010300
100010d4:	20000620 	.word	0x20000620
100010d8:	20000624 	.word	0x20000624
100010dc:	01e84800 	.word	0x01e84800
100010e0:	20003ffc 	.word	0x20003ffc
100010e4:	f4240000 	.word	0xf4240000

100010e8 <SystemInit>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

__WEAK void SystemInit(void)
{    
100010e8:	b508      	push	{r3, lr}
  SystemCoreSetup();
100010ea:	f000 ffd5 	bl	10002098 <SystemCoreSetup>
  SystemCoreClockSetup();
100010ee:	f000 ffdd 	bl	100020ac <SystemCoreClockSetup>
}
100010f2:	bd08      	pop	{r3, pc}

100010f4 <XMC_GPIO_Init>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

void XMC_GPIO_Init(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_CONFIG_t *const config)
{
100010f4:	b5f0      	push	{r4, r5, r6, r7, lr}
  XMC_ASSERT("XMC_GPIO_Init: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_Init: Invalid mode", XMC_GPIO_IsModeValid(config->mode));
  XMC_ASSERT("XMC_GPIO_Init: Invalid input hysteresis", XMC_GPIO_CHECK_INPUT_HYSTERESIS(config->input_hysteresis));
  
  /* Switch to input */
  port->IOCR[pin >> 2U] &= ~(uint32_t)((uint32_t)PORT_IOCR_PC_Msk << (PORT_IOCR_PC_Size * (pin & 0x3U)));
100010f6:	2403      	movs	r4, #3
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

void XMC_GPIO_Init(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_CONFIG_t *const config)
{
100010f8:	4647      	mov	r7, r8
  XMC_ASSERT("XMC_GPIO_Init: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_Init: Invalid mode", XMC_GPIO_IsModeValid(config->mode));
  XMC_ASSERT("XMC_GPIO_Init: Invalid input hysteresis", XMC_GPIO_CHECK_INPUT_HYSTERESIS(config->input_hysteresis));
  
  /* Switch to input */
  port->IOCR[pin >> 2U] &= ~(uint32_t)((uint32_t)PORT_IOCR_PC_Msk << (PORT_IOCR_PC_Size * (pin & 0x3U)));
100010fa:	1c26      	adds	r6, r4, #0
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

void XMC_GPIO_Init(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_CONFIG_t *const config)
{
100010fc:	b480      	push	{r7}
  XMC_ASSERT("XMC_GPIO_Init: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_Init: Invalid mode", XMC_GPIO_IsModeValid(config->mode));
  XMC_ASSERT("XMC_GPIO_Init: Invalid input hysteresis", XMC_GPIO_CHECK_INPUT_HYSTERESIS(config->input_hysteresis));
  
  /* Switch to input */
  port->IOCR[pin >> 2U] &= ~(uint32_t)((uint32_t)PORT_IOCR_PC_Msk << (PORT_IOCR_PC_Size * (pin & 0x3U)));
100010fe:	27f8      	movs	r7, #248	; 0xf8
10001100:	400e      	ands	r6, r1
10001102:	00f6      	lsls	r6, r6, #3
10001104:	40b7      	lsls	r7, r6
10001106:	088b      	lsrs	r3, r1, #2
10001108:	009b      	lsls	r3, r3, #2
1000110a:	18c3      	adds	r3, r0, r3
1000110c:	691d      	ldr	r5, [r3, #16]
1000110e:	46b0      	mov	r8, r6
10001110:	43bd      	bics	r5, r7

  /* HW port control is disabled */
  port->HWSEL &= ~(uint32_t)((uint32_t)PORT_HWSEL_Msk << ((uint32_t)pin << 1U));
10001112:	004f      	lsls	r7, r1, #1
10001114:	40bc      	lsls	r4, r7
  XMC_ASSERT("XMC_GPIO_Init: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_Init: Invalid mode", XMC_GPIO_IsModeValid(config->mode));
  XMC_ASSERT("XMC_GPIO_Init: Invalid input hysteresis", XMC_GPIO_CHECK_INPUT_HYSTERESIS(config->input_hysteresis));
  
  /* Switch to input */
  port->IOCR[pin >> 2U] &= ~(uint32_t)((uint32_t)PORT_IOCR_PC_Msk << (PORT_IOCR_PC_Size * (pin & 0x3U)));
10001116:	611d      	str	r5, [r3, #16]

  /* HW port control is disabled */
  port->HWSEL &= ~(uint32_t)((uint32_t)PORT_HWSEL_Msk << ((uint32_t)pin << 1U));
10001118:	6f45      	ldr	r5, [r0, #116]	; 0x74

  /* Set input hysteresis */
  port->PHCR[(uint32_t)pin >> 3U] &= ~(uint32_t)((uint32_t)PORT_PHCR_Msk << ((uint32_t)PORT_PHCR_Size * ((uint32_t)pin & 0x7U)));
1000111a:	2604      	movs	r6, #4
  
  /* Switch to input */
  port->IOCR[pin >> 2U] &= ~(uint32_t)((uint32_t)PORT_IOCR_PC_Msk << (PORT_IOCR_PC_Size * (pin & 0x3U)));

  /* HW port control is disabled */
  port->HWSEL &= ~(uint32_t)((uint32_t)PORT_HWSEL_Msk << ((uint32_t)pin << 1U));
1000111c:	43a5      	bics	r5, r4
1000111e:	6745      	str	r5, [r0, #116]	; 0x74

  /* Set input hysteresis */
  port->PHCR[(uint32_t)pin >> 3U] &= ~(uint32_t)((uint32_t)PORT_PHCR_Msk << ((uint32_t)PORT_PHCR_Size * ((uint32_t)pin & 0x7U)));
10001120:	2507      	movs	r5, #7
10001122:	400d      	ands	r5, r1
10001124:	00ad      	lsls	r5, r5, #2
10001126:	40ae      	lsls	r6, r5
10001128:	08cc      	lsrs	r4, r1, #3
1000112a:	00a4      	lsls	r4, r4, #2
1000112c:	1904      	adds	r4, r0, r4
1000112e:	6c27      	ldr	r7, [r4, #64]	; 0x40
10001130:	43b7      	bics	r7, r6
10001132:	6427      	str	r7, [r4, #64]	; 0x40
  port->PHCR[(uint32_t)pin >> 3U] |= (uint32_t)config->input_hysteresis << ((uint32_t)PORT_PHCR_Size * ((uint32_t)pin & 0x7U));
10001134:	7856      	ldrb	r6, [r2, #1]
10001136:	6c27      	ldr	r7, [r4, #64]	; 0x40
10001138:	40ae      	lsls	r6, r5
1000113a:	1c35      	adds	r5, r6, #0
1000113c:	433d      	orrs	r5, r7
1000113e:	6425      	str	r5, [r4, #64]	; 0x40
    
  /* Enable digital input */
  if (XMC_GPIO_CHECK_ANALOG_PORT(port))
10001140:	4c0a      	ldr	r4, [pc, #40]	; (1000116c <XMC_GPIO_Init+0x78>)
10001142:	42a0      	cmp	r0, r4
10001144:	d00c      	beq.n	10001160 <XMC_GPIO_Init+0x6c>
  {    
    port->PDISC &= ~(uint32_t)((uint32_t)0x1U << pin);
  }
  /* Set output level */
  port->OMR = (uint32_t)config->output_level << pin;
10001146:	6854      	ldr	r4, [r2, #4]
  
  /* Set mode */
  port->IOCR[pin >> 2U] |= (uint32_t)config->mode << (PORT_IOCR_PC_Size * (pin & 0x3U));
10001148:	7812      	ldrb	r2, [r2, #0]
  if (XMC_GPIO_CHECK_ANALOG_PORT(port))
  {    
    port->PDISC &= ~(uint32_t)((uint32_t)0x1U << pin);
  }
  /* Set output level */
  port->OMR = (uint32_t)config->output_level << pin;
1000114a:	408c      	lsls	r4, r1
1000114c:	6044      	str	r4, [r0, #4]
  
  /* Set mode */
  port->IOCR[pin >> 2U] |= (uint32_t)config->mode << (PORT_IOCR_PC_Size * (pin & 0x3U));
1000114e:	4640      	mov	r0, r8
10001150:	4082      	lsls	r2, r0
10001152:	1c16      	adds	r6, r2, #0
10001154:	6919      	ldr	r1, [r3, #16]
10001156:	430e      	orrs	r6, r1
10001158:	611e      	str	r6, [r3, #16]
}
1000115a:	bc04      	pop	{r2}
1000115c:	4690      	mov	r8, r2
1000115e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  port->PHCR[(uint32_t)pin >> 3U] |= (uint32_t)config->input_hysteresis << ((uint32_t)PORT_PHCR_Size * ((uint32_t)pin & 0x7U));
    
  /* Enable digital input */
  if (XMC_GPIO_CHECK_ANALOG_PORT(port))
  {    
    port->PDISC &= ~(uint32_t)((uint32_t)0x1U << pin);
10001160:	2501      	movs	r5, #1
10001162:	408d      	lsls	r5, r1
10001164:	6e04      	ldr	r4, [r0, #96]	; 0x60
10001166:	43ac      	bics	r4, r5
10001168:	6604      	str	r4, [r0, #96]	; 0x60
1000116a:	e7ec      	b.n	10001146 <XMC_GPIO_Init+0x52>
1000116c:	40040200 	.word	0x40040200

10001170 <XMC_SCU_CLOCK_UngatePeripheralClock>:
}

/* API to make protected bitfields available for modification */
void XMC_SCU_UnlockProtectedBits(void)
{
  SCU_GENERAL->PASSWD = SCU_GCU_PASSWD_PROT_DISABLE;
10001170:	23c0      	movs	r3, #192	; 0xc0

  while(((SCU_GENERAL->PASSWD) & SCU_GENERAL_PASSWD_PROTS_Msk))
10001172:	2104      	movs	r1, #4
}

/* API to make protected bitfields available for modification */
void XMC_SCU_UnlockProtectedBits(void)
{
  SCU_GENERAL->PASSWD = SCU_GCU_PASSWD_PROT_DISABLE;
10001174:	4a08      	ldr	r2, [pc, #32]	; (10001198 <XMC_SCU_CLOCK_UngatePeripheralClock+0x28>)
10001176:	6253      	str	r3, [r2, #36]	; 0x24

  while(((SCU_GENERAL->PASSWD) & SCU_GENERAL_PASSWD_PROTS_Msk))
10001178:	6a53      	ldr	r3, [r2, #36]	; 0x24
1000117a:	4219      	tst	r1, r3
1000117c:	d1fc      	bne.n	10001178 <XMC_SCU_CLOCK_UngatePeripheralClock+0x8>
/* API which ungates a clock note at its source */
void XMC_SCU_CLOCK_UngatePeripheralClock(const XMC_SCU_PERIPHERAL_CLOCK_t peripheral)
{
  XMC_SCU_UnlockProtectedBits();
  SCU_CLK->CGATCLR0 |= (uint32_t)peripheral;
  while ((SCU_CLK->CLKCR) & SCU_CLK_CLKCR_VDDC2LOW_Msk)
1000117e:	2180      	movs	r1, #128	; 0x80

/* API which ungates a clock note at its source */
void XMC_SCU_CLOCK_UngatePeripheralClock(const XMC_SCU_PERIPHERAL_CLOCK_t peripheral)
{
  XMC_SCU_UnlockProtectedBits();
  SCU_CLK->CGATCLR0 |= (uint32_t)peripheral;
10001180:	4a06      	ldr	r2, [pc, #24]	; (1000119c <XMC_SCU_CLOCK_UngatePeripheralClock+0x2c>)
  while ((SCU_CLK->CLKCR) & SCU_CLK_CLKCR_VDDC2LOW_Msk)
10001182:	05c9      	lsls	r1, r1, #23

/* API which ungates a clock note at its source */
void XMC_SCU_CLOCK_UngatePeripheralClock(const XMC_SCU_PERIPHERAL_CLOCK_t peripheral)
{
  XMC_SCU_UnlockProtectedBits();
  SCU_CLK->CGATCLR0 |= (uint32_t)peripheral;
10001184:	6913      	ldr	r3, [r2, #16]
10001186:	4318      	orrs	r0, r3
10001188:	6110      	str	r0, [r2, #16]
  while ((SCU_CLK->CLKCR) & SCU_CLK_CLKCR_VDDC2LOW_Msk)
1000118a:	6813      	ldr	r3, [r2, #0]
1000118c:	420b      	tst	r3, r1
1000118e:	d1fc      	bne.n	1000118a <XMC_SCU_CLOCK_UngatePeripheralClock+0x1a>
}

/* API to lock protected bitfields from being modified */
void XMC_SCU_LockProtectedBits(void)
{
  SCU_GENERAL->PASSWD = SCU_GCU_PASSWD_PROT_ENABLE;
10001190:	22c3      	movs	r2, #195	; 0xc3
10001192:	4b01      	ldr	r3, [pc, #4]	; (10001198 <XMC_SCU_CLOCK_UngatePeripheralClock+0x28>)
10001194:	625a      	str	r2, [r3, #36]	; 0x24
  while ((SCU_CLK->CLKCR) & SCU_CLK_CLKCR_VDDC2LOW_Msk)
  {
    /* Wait voltage suply stabilization */
  }
  XMC_SCU_LockProtectedBits();
}
10001196:	4770      	bx	lr
10001198:	40010000 	.word	0x40010000
1000119c:	40010300 	.word	0x40010300

100011a0 <XMC_SCU_CLOCK_IsPeripheralClockGated>:

/* Checks the status of peripheral clock gating */
bool XMC_SCU_CLOCK_IsPeripheralClockGated(const XMC_SCU_PERIPHERAL_CLOCK_t peripheral)
{
  return (bool)((SCU_CLK->CGATSTAT0 & peripheral) != 0);
100011a0:	4b03      	ldr	r3, [pc, #12]	; (100011b0 <XMC_SCU_CLOCK_IsPeripheralClockGated+0x10>)
100011a2:	689b      	ldr	r3, [r3, #8]
100011a4:	4018      	ands	r0, r3
100011a6:	1e43      	subs	r3, r0, #1
100011a8:	4198      	sbcs	r0, r3
100011aa:	b2c0      	uxtb	r0, r0
}
100011ac:	4770      	bx	lr
100011ae:	46c0      	nop			; (mov r8, r8)
100011b0:	40010300 	.word	0x40010300

100011b4 <XMC_SCU_CLOCK_ScaleMCLKFrequency>:
}


/* A utility routine which updates the fractional dividers in steps */
void XMC_SCU_CLOCK_ScaleMCLKFrequency(uint32_t idiv, uint32_t fdiv)
{
100011b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
}

/* API to make protected bitfields available for modification */
void XMC_SCU_UnlockProtectedBits(void)
{
  SCU_GENERAL->PASSWD = SCU_GCU_PASSWD_PROT_DISABLE;
100011b6:	23c0      	movs	r3, #192	; 0xc0

  while(((SCU_GENERAL->PASSWD) & SCU_GENERAL_PASSWD_PROTS_Msk))
100011b8:	2404      	movs	r4, #4
}

/* API to make protected bitfields available for modification */
void XMC_SCU_UnlockProtectedBits(void)
{
  SCU_GENERAL->PASSWD = SCU_GCU_PASSWD_PROT_DISABLE;
100011ba:	4a2d      	ldr	r2, [pc, #180]	; (10001270 <XMC_SCU_CLOCK_ScaleMCLKFrequency+0xbc>)
100011bc:	6253      	str	r3, [r2, #36]	; 0x24

  while(((SCU_GENERAL->PASSWD) & SCU_GENERAL_PASSWD_PROTS_Msk))
100011be:	6a53      	ldr	r3, [r2, #36]	; 0x24
100011c0:	421c      	tst	r4, r3
100011c2:	d1fc      	bne.n	100011be <XMC_SCU_CLOCK_ScaleMCLKFrequency+0xa>
  uint32_t curr_idiv;

  XMC_SCU_UnlockProtectedBits();

  /* Take a snapshot of value already programmed into IDIV */
  curr_idiv = (SCU_CLK->CLKCR & SCU_CLK_CLKCR_IDIV_Msk) >> SCU_CLK_CLKCR_IDIV_Pos;
100011c4:	4a2b      	ldr	r2, [pc, #172]	; (10001274 <XMC_SCU_CLOCK_ScaleMCLKFrequency+0xc0>)

  SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_FDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)) |
                   (uint32_t)((fdiv & 0xffU) << SCU_CLK_CLKCR_FDIV_Pos) |
                   (uint32_t)(1023UL << SCU_CLK_CLKCR_CNTADJ_Pos);
#else
  SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_FDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)) |
100011c6:	4d2c      	ldr	r5, [pc, #176]	; (10001278 <XMC_SCU_CLOCK_ScaleMCLKFrequency+0xc4>)
  uint32_t curr_idiv;

  XMC_SCU_UnlockProtectedBits();

  /* Take a snapshot of value already programmed into IDIV */
  curr_idiv = (SCU_CLK->CLKCR & SCU_CLK_CLKCR_IDIV_Msk) >> SCU_CLK_CLKCR_IDIV_Pos;
100011c8:	6814      	ldr	r4, [r2, #0]

  SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_FDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)) |
                   (uint32_t)((fdiv & 0xffU) << SCU_CLK_CLKCR_FDIV_Pos) |
                   (uint32_t)(1023UL << SCU_CLK_CLKCR_CNTADJ_Pos);
#else
  SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_FDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)) |
100011ca:	6813      	ldr	r3, [r2, #0]
  uint32_t curr_idiv;

  XMC_SCU_UnlockProtectedBits();

  /* Take a snapshot of value already programmed into IDIV */
  curr_idiv = (SCU_CLK->CLKCR & SCU_CLK_CLKCR_IDIV_Msk) >> SCU_CLK_CLKCR_IDIV_Pos;
100011cc:	0424      	lsls	r4, r4, #16

  SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_FDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)) |
                   (uint32_t)((fdiv & 0xffU) << SCU_CLK_CLKCR_FDIV_Pos) |
                   (uint32_t)(1023UL << SCU_CLK_CLKCR_CNTADJ_Pos);
#else
  SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_FDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)) |
100011ce:	401d      	ands	r5, r3
100011d0:	4b2a      	ldr	r3, [pc, #168]	; (1000127c <XMC_SCU_CLOCK_ScaleMCLKFrequency+0xc8>)
  uint32_t curr_idiv;

  XMC_SCU_UnlockProtectedBits();

  /* Take a snapshot of value already programmed into IDIV */
  curr_idiv = (SCU_CLK->CLKCR & SCU_CLK_CLKCR_IDIV_Msk) >> SCU_CLK_CLKCR_IDIV_Pos;
100011d2:	0e24      	lsrs	r4, r4, #24
100011d4:	432b      	orrs	r3, r5
  SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_FDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)) |
                   (uint32_t)((fdiv & 0xffU) << SCU_CLK_CLKCR_FDIV_Pos) |
                   (uint32_t)(1023UL << SCU_CLK_CLKCR_CNTADJ_Pos);
#else
  SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_FDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)) |
                   (uint32_t)(fdiv << SCU_CLK_CLKCR_FDIV_Pos) |
100011d6:	430b      	orrs	r3, r1
                   (uint32_t)(1023UL << SCU_CLK_CLKCR_CNTADJ_Pos);
#endif

  while ((SCU_CLK->CLKCR)& SCU_CLK_CLKCR_VDDC2LOW_Msk)
100011d8:	2180      	movs	r1, #128	; 0x80

  SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_FDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)) |
                   (uint32_t)((fdiv & 0xffU) << SCU_CLK_CLKCR_FDIV_Pos) |
                   (uint32_t)(1023UL << SCU_CLK_CLKCR_CNTADJ_Pos);
#else
  SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_FDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)) |
100011da:	6013      	str	r3, [r2, #0]
                   (uint32_t)(fdiv << SCU_CLK_CLKCR_FDIV_Pos) |
                   (uint32_t)(1023UL << SCU_CLK_CLKCR_CNTADJ_Pos);
#endif

  while ((SCU_CLK->CLKCR)& SCU_CLK_CLKCR_VDDC2LOW_Msk)
100011dc:	05c9      	lsls	r1, r1, #23
100011de:	6813      	ldr	r3, [r2, #0]
100011e0:	420b      	tst	r3, r1
100011e2:	d1fc      	bne.n	100011de <XMC_SCU_CLOCK_ScaleMCLKFrequency+0x2a>
  {
    /* Spin until the core supply stabilizes */
  }

  if(curr_idiv <= idiv)
100011e4:	4284      	cmp	r4, r0
100011e6:	d929      	bls.n	1000123c <XMC_SCU_CLOCK_ScaleMCLKFrequency+0x88>

    SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_IDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)) |
                     (uint32_t)(curr_idiv << SCU_CLK_CLKCR_IDIV_Pos) | 
                     (uint32_t)(1023UL << SCU_CLK_CLKCR_CNTADJ_Pos);

    while (SCU_CLK->CLKCR & SCU_CLK_CLKCR_VDDC2LOW_Msk)
100011e8:	2180      	movs	r1, #128	; 0x80
{
  while (curr_idiv > (target_idiv * 4UL))
  {
    curr_idiv = (uint32_t)(curr_idiv >> 2UL);   /* Divide by 4. */

    SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_IDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)) |
100011ea:	4b25      	ldr	r3, [pc, #148]	; (10001280 <XMC_SCU_CLOCK_ScaleMCLKFrequency+0xcc>)
100011ec:	0086      	lsls	r6, r0, #2
100011ee:	4a21      	ldr	r2, [pc, #132]	; (10001274 <XMC_SCU_CLOCK_ScaleMCLKFrequency+0xc0>)
100011f0:	469c      	mov	ip, r3
100011f2:	4f22      	ldr	r7, [pc, #136]	; (1000127c <XMC_SCU_CLOCK_ScaleMCLKFrequency+0xc8>)
                     (uint32_t)(curr_idiv << SCU_CLK_CLKCR_IDIV_Pos) | 
                     (uint32_t)(1023UL << SCU_CLK_CLKCR_CNTADJ_Pos);

    while (SCU_CLK->CLKCR & SCU_CLK_CLKCR_VDDC2LOW_Msk)
100011f4:	05c9      	lsls	r1, r1, #23
}

/* Utility routine to perform frequency up scaling */
static void XMC_SCU_CLOCK_lFrequencyUpScaling(uint32_t curr_idiv, uint32_t target_idiv)
{
  while (curr_idiv > (target_idiv * 4UL))
100011f6:	42b4      	cmp	r4, r6
100011f8:	d90c      	bls.n	10001214 <XMC_SCU_CLOCK_ScaleMCLKFrequency+0x60>
  {
    curr_idiv = (uint32_t)(curr_idiv >> 2UL);   /* Divide by 4. */

    SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_IDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)) |
100011fa:	4665      	mov	r5, ip
100011fc:	6813      	ldr	r3, [r2, #0]
/* Utility routine to perform frequency up scaling */
static void XMC_SCU_CLOCK_lFrequencyUpScaling(uint32_t curr_idiv, uint32_t target_idiv)
{
  while (curr_idiv > (target_idiv * 4UL))
  {
    curr_idiv = (uint32_t)(curr_idiv >> 2UL);   /* Divide by 4. */
100011fe:	08a4      	lsrs	r4, r4, #2

    SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_IDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)) |
10001200:	402b      	ands	r3, r5
10001202:	433b      	orrs	r3, r7
                     (uint32_t)(curr_idiv << SCU_CLK_CLKCR_IDIV_Pos) | 
10001204:	0225      	lsls	r5, r4, #8
10001206:	432b      	orrs	r3, r5
{
  while (curr_idiv > (target_idiv * 4UL))
  {
    curr_idiv = (uint32_t)(curr_idiv >> 2UL);   /* Divide by 4. */

    SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_IDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)) |
10001208:	6013      	str	r3, [r2, #0]
                     (uint32_t)(curr_idiv << SCU_CLK_CLKCR_IDIV_Pos) | 
                     (uint32_t)(1023UL << SCU_CLK_CLKCR_CNTADJ_Pos);

    while (SCU_CLK->CLKCR & SCU_CLK_CLKCR_VDDC2LOW_Msk)
1000120a:	6813      	ldr	r3, [r2, #0]
1000120c:	420b      	tst	r3, r1
1000120e:	d1fc      	bne.n	1000120a <XMC_SCU_CLOCK_ScaleMCLKFrequency+0x56>
}

/* Utility routine to perform frequency up scaling */
static void XMC_SCU_CLOCK_lFrequencyUpScaling(uint32_t curr_idiv, uint32_t target_idiv)
{
  while (curr_idiv > (target_idiv * 4UL))
10001210:	42b4      	cmp	r4, r6
10001212:	d8f2      	bhi.n	100011fa <XMC_SCU_CLOCK_ScaleMCLKFrequency+0x46>
  {
    /* Requested IDIV is lower than currently programmed IDIV. So upscale the frequency */
    XMC_SCU_CLOCK_lFrequencyUpScaling(curr_idiv, idiv);
  }

  SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_IDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)) |
10001214:	4a17      	ldr	r2, [pc, #92]	; (10001274 <XMC_SCU_CLOCK_ScaleMCLKFrequency+0xc0>)
10001216:	4b1a      	ldr	r3, [pc, #104]	; (10001280 <XMC_SCU_CLOCK_ScaleMCLKFrequency+0xcc>)
10001218:	6811      	ldr	r1, [r2, #0]
                   (uint32_t)(idiv << SCU_CLK_CLKCR_IDIV_Pos) | (uint32_t)(1023UL << SCU_CLK_CLKCR_CNTADJ_Pos);
1000121a:	0200      	lsls	r0, r0, #8
  {
    /* Requested IDIV is lower than currently programmed IDIV. So upscale the frequency */
    XMC_SCU_CLOCK_lFrequencyUpScaling(curr_idiv, idiv);
  }

  SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_IDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)) |
1000121c:	400b      	ands	r3, r1
1000121e:	4917      	ldr	r1, [pc, #92]	; (1000127c <XMC_SCU_CLOCK_ScaleMCLKFrequency+0xc8>)
10001220:	430b      	orrs	r3, r1
                   (uint32_t)(idiv << SCU_CLK_CLKCR_IDIV_Pos) | (uint32_t)(1023UL << SCU_CLK_CLKCR_CNTADJ_Pos);

  while ((SCU_CLK->CLKCR) & SCU_CLK_CLKCR_VDDC2LOW_Msk)
10001222:	2180      	movs	r1, #128	; 0x80
    /* Requested IDIV is lower than currently programmed IDIV. So upscale the frequency */
    XMC_SCU_CLOCK_lFrequencyUpScaling(curr_idiv, idiv);
  }

  SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_IDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)) |
                   (uint32_t)(idiv << SCU_CLK_CLKCR_IDIV_Pos) | (uint32_t)(1023UL << SCU_CLK_CLKCR_CNTADJ_Pos);
10001224:	4303      	orrs	r3, r0
  {
    /* Requested IDIV is lower than currently programmed IDIV. So upscale the frequency */
    XMC_SCU_CLOCK_lFrequencyUpScaling(curr_idiv, idiv);
  }

  SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_IDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)) |
10001226:	6013      	str	r3, [r2, #0]
                   (uint32_t)(idiv << SCU_CLK_CLKCR_IDIV_Pos) | (uint32_t)(1023UL << SCU_CLK_CLKCR_CNTADJ_Pos);

  while ((SCU_CLK->CLKCR) & SCU_CLK_CLKCR_VDDC2LOW_Msk)
10001228:	05c9      	lsls	r1, r1, #23
1000122a:	6813      	ldr	r3, [r2, #0]
1000122c:	420b      	tst	r3, r1
1000122e:	d1fc      	bne.n	1000122a <XMC_SCU_CLOCK_ScaleMCLKFrequency+0x76>
}

/* API to lock protected bitfields from being modified */
void XMC_SCU_LockProtectedBits(void)
{
  SCU_GENERAL->PASSWD = SCU_GCU_PASSWD_PROT_ENABLE;
10001230:	22c3      	movs	r2, #195	; 0xc3
10001232:	4b0f      	ldr	r3, [pc, #60]	; (10001270 <XMC_SCU_CLOCK_ScaleMCLKFrequency+0xbc>)
10001234:	625a      	str	r2, [r3, #36]	; 0x24
    /* Wait voltage suply stabilization */
  }

  XMC_SCU_LockProtectedBits();

  SystemCoreClockUpdate();
10001236:	f7ff ff31 	bl	1000109c <SystemCoreClockUpdate>

}
1000123a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    curr_idiv  = (uint32_t)(curr_idiv << 2UL);   /* Multiply by 4. */
    SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_IDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)) |
                     (uint32_t)(curr_idiv << SCU_CLK_CLKCR_IDIV_Pos) |
                     (uint32_t)(1023UL << SCU_CLK_CLKCR_CNTADJ_Pos);

    while (SCU_CLK->CLKCR & SCU_CLK_CLKCR_VDDC2LOW_Msk)
1000123c:	2180      	movs	r1, #128	; 0x80
    if(0U == curr_idiv)
    {
      curr_idiv = 1U;
    }
    curr_idiv  = (uint32_t)(curr_idiv << 2UL);   /* Multiply by 4. */
    SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_IDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)) |
1000123e:	4a0d      	ldr	r2, [pc, #52]	; (10001274 <XMC_SCU_CLOCK_ScaleMCLKFrequency+0xc0>)
10001240:	4f0f      	ldr	r7, [pc, #60]	; (10001280 <XMC_SCU_CLOCK_ScaleMCLKFrequency+0xcc>)
10001242:	4e0e      	ldr	r6, [pc, #56]	; (1000127c <XMC_SCU_CLOCK_ScaleMCLKFrequency+0xc8>)
                     (uint32_t)(curr_idiv << SCU_CLK_CLKCR_IDIV_Pos) |
                     (uint32_t)(1023UL << SCU_CLK_CLKCR_CNTADJ_Pos);

    while (SCU_CLK->CLKCR & SCU_CLK_CLKCR_VDDC2LOW_Msk)
10001244:	05c9      	lsls	r1, r1, #23

/* Utility routine to perform frequency down scaling */
static void XMC_SCU_CLOCK_lFrequencyDownScaling(uint32_t curr_idiv, uint32_t target_idiv)
{

  while ((curr_idiv * 4UL) < target_idiv)
10001246:	00a3      	lsls	r3, r4, #2
10001248:	4298      	cmp	r0, r3
1000124a:	d9e3      	bls.n	10001214 <XMC_SCU_CLOCK_ScaleMCLKFrequency+0x60>
  {
    if(0U == curr_idiv)
1000124c:	2c00      	cmp	r4, #0
1000124e:	d00a      	beq.n	10001266 <XMC_SCU_CLOCK_ScaleMCLKFrequency+0xb2>
10001250:	02a5      	lsls	r5, r4, #10
10001252:	1c1c      	adds	r4, r3, #0
    {
      curr_idiv = 1U;
    }
    curr_idiv  = (uint32_t)(curr_idiv << 2UL);   /* Multiply by 4. */
    SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_IDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)) |
10001254:	6813      	ldr	r3, [r2, #0]
10001256:	403b      	ands	r3, r7
10001258:	4333      	orrs	r3, r6
                     (uint32_t)(curr_idiv << SCU_CLK_CLKCR_IDIV_Pos) |
1000125a:	432b      	orrs	r3, r5
    if(0U == curr_idiv)
    {
      curr_idiv = 1U;
    }
    curr_idiv  = (uint32_t)(curr_idiv << 2UL);   /* Multiply by 4. */
    SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_IDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)) |
1000125c:	6013      	str	r3, [r2, #0]
                     (uint32_t)(curr_idiv << SCU_CLK_CLKCR_IDIV_Pos) |
                     (uint32_t)(1023UL << SCU_CLK_CLKCR_CNTADJ_Pos);

    while (SCU_CLK->CLKCR & SCU_CLK_CLKCR_VDDC2LOW_Msk)
1000125e:	6813      	ldr	r3, [r2, #0]
10001260:	420b      	tst	r3, r1
10001262:	d1fc      	bne.n	1000125e <XMC_SCU_CLOCK_ScaleMCLKFrequency+0xaa>
10001264:	e7ef      	b.n	10001246 <XMC_SCU_CLOCK_ScaleMCLKFrequency+0x92>
static void XMC_SCU_CLOCK_lFrequencyDownScaling(uint32_t curr_idiv, uint32_t target_idiv)
{

  while ((curr_idiv * 4UL) < target_idiv)
  {
    if(0U == curr_idiv)
10001266:	2580      	movs	r5, #128	; 0x80
10001268:	2404      	movs	r4, #4
1000126a:	00ed      	lsls	r5, r5, #3
1000126c:	e7f2      	b.n	10001254 <XMC_SCU_CLOCK_ScaleMCLKFrequency+0xa0>
1000126e:	46c0      	nop			; (mov r8, r8)
10001270:	40010000 	.word	0x40010000
10001274:	40010300 	.word	0x40010300
10001278:	c00fff00 	.word	0xc00fff00
1000127c:	3ff00000 	.word	0x3ff00000
10001280:	c00f00ff 	.word	0xc00f00ff

10001284 <XMC_SCU_CLOCK_Init>:
}

/* API to make protected bitfields available for modification */
void XMC_SCU_UnlockProtectedBits(void)
{
  SCU_GENERAL->PASSWD = SCU_GCU_PASSWD_PROT_DISABLE;
10001284:	23c0      	movs	r3, #192	; 0xc0

  while(((SCU_GENERAL->PASSWD) & SCU_GENERAL_PASSWD_PROTS_Msk))
10001286:	2104      	movs	r1, #4
}

/* API to make protected bitfields available for modification */
void XMC_SCU_UnlockProtectedBits(void)
{
  SCU_GENERAL->PASSWD = SCU_GCU_PASSWD_PROT_DISABLE;
10001288:	4a0b      	ldr	r2, [pc, #44]	; (100012b8 <XMC_SCU_CLOCK_Init+0x34>)
}


/* API which initializes the clock tree ofthe device */
void XMC_SCU_CLOCK_Init(const XMC_SCU_CLOCK_CONFIG_t *const config)
{
1000128a:	b510      	push	{r4, lr}
}

/* API to make protected bitfields available for modification */
void XMC_SCU_UnlockProtectedBits(void)
{
  SCU_GENERAL->PASSWD = SCU_GCU_PASSWD_PROT_DISABLE;
1000128c:	6253      	str	r3, [r2, #36]	; 0x24

  while(((SCU_GENERAL->PASSWD) & SCU_GENERAL_PASSWD_PROTS_Msk))
1000128e:	6a53      	ldr	r3, [r2, #36]	; 0x24
10001290:	4219      	tst	r1, r3
10001292:	d1fc      	bne.n	1000128e <XMC_SCU_CLOCK_Init+0xa>
10001294:	6882      	ldr	r2, [r0, #8]
10001296:	6841      	ldr	r1, [r0, #4]
  SCU_CLK->CLKCR1 = (SCU_CLK->CLKCR1 & ~SCU_CLK_CLKCR1_DCLKSEL_Msk) |
                    config->dclk_src;

#endif
  /* Update PCLK selection mux. */
  SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_PCLKSEL_Msk | SCU_CLK_CLKCR_RTCCLKSEL_Msk)) |
10001298:	4c08      	ldr	r4, [pc, #32]	; (100012bc <XMC_SCU_CLOCK_Init+0x38>)
1000129a:	4311      	orrs	r1, r2
1000129c:	6823      	ldr	r3, [r4, #0]
1000129e:	4a08      	ldr	r2, [pc, #32]	; (100012c0 <XMC_SCU_CLOCK_Init+0x3c>)
100012a0:	4013      	ands	r3, r2
}

/* API to lock protected bitfields from being modified */
void XMC_SCU_LockProtectedBits(void)
{
  SCU_GENERAL->PASSWD = SCU_GCU_PASSWD_PROT_ENABLE;
100012a2:	22c3      	movs	r2, #195	; 0xc3
                    config->dclk_src;

#endif
  /* Update PCLK selection mux. */
  SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_PCLKSEL_Msk | SCU_CLK_CLKCR_RTCCLKSEL_Msk)) |
                   config->rtc_src |
100012a4:	430b      	orrs	r3, r1
  SCU_CLK->CLKCR1 = (SCU_CLK->CLKCR1 & ~SCU_CLK_CLKCR1_DCLKSEL_Msk) |
                    config->dclk_src;

#endif
  /* Update PCLK selection mux. */
  SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_PCLKSEL_Msk | SCU_CLK_CLKCR_RTCCLKSEL_Msk)) |
100012a6:	6023      	str	r3, [r4, #0]
}

/* API to lock protected bitfields from being modified */
void XMC_SCU_LockProtectedBits(void)
{
  SCU_GENERAL->PASSWD = SCU_GCU_PASSWD_PROT_ENABLE;
100012a8:	4b03      	ldr	r3, [pc, #12]	; (100012b8 <XMC_SCU_CLOCK_Init+0x34>)
100012aa:	625a      	str	r2, [r3, #36]	; 0x24

  /* Close the lock opened above. */
  XMC_SCU_LockProtectedBits();

  /* Update the dividers now */
  XMC_SCU_CLOCK_ScaleMCLKFrequency(config->idiv, config->fdiv);
100012ac:	7843      	ldrb	r3, [r0, #1]
100012ae:	7801      	ldrb	r1, [r0, #0]
100012b0:	1c18      	adds	r0, r3, #0
100012b2:	f7ff ff7f 	bl	100011b4 <XMC_SCU_CLOCK_ScaleMCLKFrequency>

}
100012b6:	bd10      	pop	{r4, pc}
100012b8:	40010000 	.word	0x40010000
100012bc:	40010300 	.word	0x40010300
100012c0:	fff0ffff 	.word	0xfff0ffff

100012c4 <XMC_SCU_CLOCK_GetPeripheralClockFrequency>:
/*
 * API to retrieve clock frequency of peripherals on the peripheral bus using a shared functional clock
 */
uint32_t XMC_SCU_CLOCK_GetPeripheralClockFrequency(void)
{
  return (SystemCoreClock);
100012c4:	4b01      	ldr	r3, [pc, #4]	; (100012cc <XMC_SCU_CLOCK_GetPeripheralClockFrequency+0x8>)
100012c6:	6818      	ldr	r0, [r3, #0]
}
100012c8:	4770      	bx	lr
100012ca:	46c0      	nop			; (mov r8, r8)
100012cc:	20003ffc 	.word	0x20003ffc

100012d0 <XMC_CCU4_Init>:
#endif
}

/* API to initialize CCU4 global resources  */
void XMC_CCU4_Init(XMC_CCU4_MODULE_t *const module, const XMC_CCU4_SLICE_MCMS_ACTION_t mcs_action)
{
100012d0:	b538      	push	{r3, r4, r5, lr}
  }
}

__STATIC_INLINE void XMC_CCU4_lUngateClock(const XMC_CCU4_MODULE_t *const module)
{
  if (module == CCU40)
100012d2:	4b0a      	ldr	r3, [pc, #40]	; (100012fc <XMC_CCU4_Init+0x2c>)
#endif
}

/* API to initialize CCU4 global resources  */
void XMC_CCU4_Init(XMC_CCU4_MODULE_t *const module, const XMC_CCU4_SLICE_MCMS_ACTION_t mcs_action)
{
100012d4:	1c04      	adds	r4, r0, #0
100012d6:	1c0d      	adds	r5, r1, #0
  }
}

__STATIC_INLINE void XMC_CCU4_lUngateClock(const XMC_CCU4_MODULE_t *const module)
{
  if (module == CCU40)
100012d8:	4298      	cmp	r0, r3
100012da:	d00b      	beq.n	100012f4 <XMC_CCU4_Init+0x24>
 * XMC_CCU4_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU4_StartPrescaler(XMC_CCU4_MODULE_t *const module)
{
  XMC_ASSERT("XMC_CCU4_StartPrescaler:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
  module->GIDLC |= (uint32_t) CCU4_GIDLC_SPRB_Msk;
100012dc:	2280      	movs	r2, #128	; 0x80
100012de:	68e3      	ldr	r3, [r4, #12]
100012e0:	0052      	lsls	r2, r2, #1
100012e2:	4313      	orrs	r3, r2
100012e4:	60e3      	str	r3, [r4, #12]
  /* Enable CCU4 module */
  XMC_CCU4_EnableModule(module);
  /* Start the prescaler */
  XMC_CCU4_StartPrescaler(module);
  
  gctrl = module->GCTRL;
100012e6:	6821      	ldr	r1, [r4, #0]
  gctrl &= ~((uint32_t) CCU4_GCTRL_MSDE_Msk);
100012e8:	4b05      	ldr	r3, [pc, #20]	; (10001300 <XMC_CCU4_Init+0x30>)
100012ea:	400b      	ands	r3, r1
  gctrl |= ((uint32_t) mcs_action) << CCU4_GCTRL_MSDE_Pos;
100012ec:	03a9      	lsls	r1, r5, #14
100012ee:	4319      	orrs	r1, r3
  
  module->GCTRL = gctrl;
100012f0:	6021      	str	r1, [r4, #0]
}
100012f2:	bd38      	pop	{r3, r4, r5, pc}

__STATIC_INLINE void XMC_CCU4_lUngateClock(const XMC_CCU4_MODULE_t *const module)
{
  if (module == CCU40)
  {
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_CCU40);
100012f4:	2004      	movs	r0, #4
100012f6:	f7ff ff3b 	bl	10001170 <XMC_SCU_CLOCK_UngatePeripheralClock>
100012fa:	e7ef      	b.n	100012dc <XMC_CCU4_Init+0xc>
100012fc:	48040000 	.word	0x48040000
10001300:	ffff3fff 	.word	0xffff3fff

10001304 <XMC_CCU4_SetMultiChannelShadowTransferMode>:
{
  uint32_t gctrl;

  XMC_ASSERT("XMC_CCU4_SetMultiChannelShadowTransferMode:Invalid module Pointer", XMC_CCU4_IsValidModule(module));
  
  gctrl = module->GCTRL;
10001304:	6803      	ldr	r3, [r0, #0]
  gctrl &= ~((uint32_t)slice_mode_msk >> 16U);
10001306:	0c0a      	lsrs	r2, r1, #16
  gctrl |= ((uint32_t)slice_mode_msk & 0xFFFFU);
10001308:	0409      	lsls	r1, r1, #16
  uint32_t gctrl;

  XMC_ASSERT("XMC_CCU4_SetMultiChannelShadowTransferMode:Invalid module Pointer", XMC_CCU4_IsValidModule(module));
  
  gctrl = module->GCTRL;
  gctrl &= ~((uint32_t)slice_mode_msk >> 16U);
1000130a:	4393      	bics	r3, r2
  gctrl |= ((uint32_t)slice_mode_msk & 0xFFFFU);
1000130c:	0c09      	lsrs	r1, r1, #16
1000130e:	4319      	orrs	r1, r3
  module->GCTRL = gctrl;
10001310:	6001      	str	r1, [r0, #0]
}
10001312:	4770      	bx	lr

10001314 <XMC_CCU4_SLICE_CompareInit>:
  XMC_ASSERT("XMC_CCU4_SLICE_CompareInit:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_CompareInit:Compare Init Pointer is NULL",
             (XMC_CCU4_SLICE_COMPARE_CONFIG_t *) NULL != compare_init);

  /* Program the timer mode */
  slice->TC = compare_init->tc;
10001314:	680b      	ldr	r3, [r1, #0]
10001316:	6143      	str	r3, [r0, #20]
  /* Enable the timer concatenation */
  slice->CMC = ((uint32_t) compare_init->timer_concatenation << CCU4_CC4_CMC_TCE_Pos);
10001318:	794b      	ldrb	r3, [r1, #5]
1000131a:	069b      	lsls	r3, r3, #26
1000131c:	0fdb      	lsrs	r3, r3, #31
1000131e:	051b      	lsls	r3, r3, #20
10001320:	6043      	str	r3, [r0, #4]
  /* Program initial prescaler divider value */
  slice->PSC = (uint32_t) compare_init->prescaler_initval;
10001322:	790b      	ldrb	r3, [r1, #4]
10001324:	071b      	lsls	r3, r3, #28
10001326:	0f1b      	lsrs	r3, r3, #28
10001328:	6243      	str	r3, [r0, #36]	; 0x24
  /* Program the dither compare value */
  slice->DITS = (uint32_t) compare_init->dither_limit;
1000132a:	794b      	ldrb	r3, [r1, #5]
1000132c:	071b      	lsls	r3, r3, #28
1000132e:	0f1b      	lsrs	r3, r3, #28
10001330:	6203      	str	r3, [r0, #32]
  /* Program timer output passive level */
  slice->PSL = (uint32_t) compare_init->passive_level;
10001332:	794b      	ldrb	r3, [r1, #5]
10001334:	06db      	lsls	r3, r3, #27
10001336:	0fdb      	lsrs	r3, r3, #31
10001338:	6183      	str	r3, [r0, #24]
  /* Program floating prescaler compare value */
  slice->FPCS = (uint32_t) compare_init->float_limit;
1000133a:	790b      	ldrb	r3, [r1, #4]
1000133c:	091b      	lsrs	r3, r3, #4
1000133e:	62c3      	str	r3, [r0, #44]	; 0x2c
}
10001340:	4770      	bx	lr
10001342:	46c0      	nop			; (mov r8, r8)

10001344 <XMC_CCU4_SLICE_StartConfig>:

/* API to configure the Start trigger function of a slice */
void XMC_CCU4_SLICE_StartConfig(XMC_CCU4_SLICE_t *const slice,
                            const XMC_CCU4_SLICE_EVENT_t event,
                                const XMC_CCU4_SLICE_START_MODE_t start_mode)
{
10001344:	b510      	push	{r4, lr}
  XMC_ASSERT("XMC_CCU4_SLICE_StartConfig:Invalid Start Mode", 
             ((start_mode == XMC_CCU4_SLICE_START_MODE_TIMER_START_CLEAR) ||\
              (start_mode == XMC_CCU4_SLICE_START_MODE_TIMER_START)));
  /* First, Bind the event with the stop function */
  cmc = slice->CMC;
  cmc &= ~((uint32_t) CCU4_CC4_CMC_STRTS_Msk);
10001346:	2403      	movs	r4, #3
  XMC_ASSERT("XMC_CCU4_SLICE_StartConfig:Invalid Event ID", XMC_CCU4_SLICE_CHECK_EVENT_ID(event));
  XMC_ASSERT("XMC_CCU4_SLICE_StartConfig:Invalid Start Mode", 
             ((start_mode == XMC_CCU4_SLICE_START_MODE_TIMER_START_CLEAR) ||\
              (start_mode == XMC_CCU4_SLICE_START_MODE_TIMER_START)));
  /* First, Bind the event with the stop function */
  cmc = slice->CMC;
10001348:	6843      	ldr	r3, [r0, #4]
  cmc &= ~((uint32_t) CCU4_CC4_CMC_STRTS_Msk);
1000134a:	43a3      	bics	r3, r4
  cmc |= ((uint32_t) event) << CCU4_CC4_CMC_STRTS_Pos;
1000134c:	4319      	orrs	r1, r3

  slice->CMC = cmc;
1000134e:	6041      	str	r1, [r0, #4]
  
  tc  = slice->TC;
10001350:	6943      	ldr	r3, [r0, #20]
  /* Next, Configure the start mode */
  if (start_mode == XMC_CCU4_SLICE_START_MODE_TIMER_START_CLEAR)
10001352:	2a01      	cmp	r2, #1
10001354:	d003      	beq.n	1000135e <XMC_CCU4_SLICE_StartConfig+0x1a>
  {
    tc |= (uint32_t)CCU4_CC4_TC_STRM_Msk;
  }
  else
  {
    tc &= ~((uint32_t)CCU4_CC4_TC_STRM_Msk);
10001356:	4a04      	ldr	r2, [pc, #16]	; (10001368 <XMC_CCU4_SLICE_StartConfig+0x24>)
10001358:	4013      	ands	r3, r2
  }
  
  slice->TC = tc;
1000135a:	6143      	str	r3, [r0, #20]
}
1000135c:	bd10      	pop	{r4, pc}
  
  tc  = slice->TC;
  /* Next, Configure the start mode */
  if (start_mode == XMC_CCU4_SLICE_START_MODE_TIMER_START_CLEAR)
  {
    tc |= (uint32_t)CCU4_CC4_TC_STRM_Msk;
1000135e:	2280      	movs	r2, #128	; 0x80
10001360:	00d2      	lsls	r2, r2, #3
10001362:	4313      	orrs	r3, r2
10001364:	e7f9      	b.n	1000135a <XMC_CCU4_SLICE_StartConfig+0x16>
10001366:	46c0      	nop			; (mov r8, r8)
10001368:	fffffbff 	.word	0xfffffbff

1000136c <XMC_CCU4_SLICE_StopConfig>:

/* API to configure the Stop trigger function of a slice */
void XMC_CCU4_SLICE_StopConfig(XMC_CCU4_SLICE_t *const slice,
                           const XMC_CCU4_SLICE_EVENT_t event,
                               const XMC_CCU4_SLICE_END_MODE_t end_mode)
{
1000136c:	b510      	push	{r4, lr}
  XMC_ASSERT("XMC_CCU4_SLICE_StopConfig:Invalid Event ID", XMC_CCU4_SLICE_CHECK_EVENT_ID(event));
  XMC_ASSERT("XMC_CCU4_SLICE_StopConfig:Invalid Start Mode", XMC_CCU4_CHECK_END_MODE(end_mode));
  
  /* First, Bind the event with the stop function */
  cmc = slice->CMC;
  cmc &= ~((uint32_t) CCU4_CC4_CMC_ENDS_Msk);
1000136e:	240c      	movs	r4, #12
  XMC_ASSERT("XMC_CCU4_SLICE_StopConfig:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_StopConfig:Invalid Event ID", XMC_CCU4_SLICE_CHECK_EVENT_ID(event));
  XMC_ASSERT("XMC_CCU4_SLICE_StopConfig:Invalid Start Mode", XMC_CCU4_CHECK_END_MODE(end_mode));
  
  /* First, Bind the event with the stop function */
  cmc = slice->CMC;
10001370:	6843      	ldr	r3, [r0, #4]
  cmc &= ~((uint32_t) CCU4_CC4_CMC_ENDS_Msk);
  cmc |= ((uint32_t) event) << CCU4_CC4_CMC_ENDS_Pos;
10001372:	0089      	lsls	r1, r1, #2
  XMC_ASSERT("XMC_CCU4_SLICE_StopConfig:Invalid Event ID", XMC_CCU4_SLICE_CHECK_EVENT_ID(event));
  XMC_ASSERT("XMC_CCU4_SLICE_StopConfig:Invalid Start Mode", XMC_CCU4_CHECK_END_MODE(end_mode));
  
  /* First, Bind the event with the stop function */
  cmc = slice->CMC;
  cmc &= ~((uint32_t) CCU4_CC4_CMC_ENDS_Msk);
10001374:	43a3      	bics	r3, r4
  cmc |= ((uint32_t) event) << CCU4_CC4_CMC_ENDS_Pos;
10001376:	4319      	orrs	r1, r3

  slice->CMC = cmc;
10001378:	6041      	str	r1, [r0, #4]
  
  /* Next, Configure the stop mode */
  tc = slice->TC;
1000137a:	6941      	ldr	r1, [r0, #20]
  tc &= ~((uint32_t) CCU4_CC4_TC_ENDM_Msk);
1000137c:	4b02      	ldr	r3, [pc, #8]	; (10001388 <XMC_CCU4_SLICE_StopConfig+0x1c>)
  tc |= ((uint32_t) end_mode) << CCU4_CC4_TC_ENDM_Pos;
1000137e:	0212      	lsls	r2, r2, #8

  slice->CMC = cmc;
  
  /* Next, Configure the stop mode */
  tc = slice->TC;
  tc &= ~((uint32_t) CCU4_CC4_TC_ENDM_Msk);
10001380:	400b      	ands	r3, r1
  tc |= ((uint32_t) end_mode) << CCU4_CC4_TC_ENDM_Pos;
10001382:	431a      	orrs	r2, r3

  slice->TC = tc;
10001384:	6142      	str	r2, [r0, #20]
}
10001386:	bd10      	pop	{r4, pc}
10001388:	fffffcff 	.word	0xfffffcff

1000138c <XMC_CCU4_SLICE_LoadConfig>:
  
  XMC_ASSERT("XMC_CCU4_SLICE_LoadConfig:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_LoadConfig:Invalid Event ID", XMC_CCU4_SLICE_CHECK_EVENT_ID(event));
  
  /* Bind the event with the load function */
  cmc = slice->CMC;
1000138c:	6842      	ldr	r2, [r0, #4]
  cmc &= ~((uint32_t) CCU4_CC4_CMC_LDS_Msk);
1000138e:	4b03      	ldr	r3, [pc, #12]	; (1000139c <XMC_CCU4_SLICE_LoadConfig+0x10>)
  cmc |= ((uint32_t) event) << CCU4_CC4_CMC_LDS_Pos;
10001390:	0309      	lsls	r1, r1, #12
  XMC_ASSERT("XMC_CCU4_SLICE_LoadConfig:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_LoadConfig:Invalid Event ID", XMC_CCU4_SLICE_CHECK_EVENT_ID(event));
  
  /* Bind the event with the load function */
  cmc = slice->CMC;
  cmc &= ~((uint32_t) CCU4_CC4_CMC_LDS_Msk);
10001392:	4013      	ands	r3, r2
  cmc |= ((uint32_t) event) << CCU4_CC4_CMC_LDS_Pos;
10001394:	4319      	orrs	r1, r3

  slice->CMC = cmc;
10001396:	6041      	str	r1, [r0, #4]
}
10001398:	4770      	bx	lr
1000139a:	46c0      	nop			; (mov r8, r8)
1000139c:	ffffcfff 	.word	0xffffcfff

100013a0 <XMC_CCU4_SLICE_ModulationConfig>:
/* API to configure the slice modulation function */
void XMC_CCU4_SLICE_ModulationConfig(XMC_CCU4_SLICE_t *const slice,
                                     const XMC_CCU4_SLICE_EVENT_t event,
                                     const XMC_CCU4_SLICE_MODULATION_MODE_t mod_mode,
                                     const bool synch_with_pwm)
{
100013a0:	b570      	push	{r4, r5, r6, lr}
  XMC_ASSERT("XMC_CCU4_SLICE_ModulationConfig:Invalid Event ID", XMC_CCU4_SLICE_CHECK_EVENT_ID(event));
  XMC_ASSERT("XMC_CCU4_SLICE_ModulationConfig:Invalid Modulation Mode",
             ((mod_mode == XMC_CCU4_SLICE_MODULATION_MODE_CLEAR_OUT) ||\
              (mod_mode == XMC_CCU4_SLICE_MODULATION_MODE_CLEAR_ST_OUT)));
  
  tc  = slice->TC;
100013a2:	6944      	ldr	r4, [r0, #20]
  cmc = slice->CMC;
  
  /* First, Bind the event with the modulation function */
  cmc &= ~((uint32_t) CCU4_CC4_CMC_MOS_Msk);
100013a4:	4d0b      	ldr	r5, [pc, #44]	; (100013d4 <XMC_CCU4_SLICE_ModulationConfig+0x34>)
  XMC_ASSERT("XMC_CCU4_SLICE_ModulationConfig:Invalid Modulation Mode",
             ((mod_mode == XMC_CCU4_SLICE_MODULATION_MODE_CLEAR_OUT) ||\
              (mod_mode == XMC_CCU4_SLICE_MODULATION_MODE_CLEAR_ST_OUT)));
  
  tc  = slice->TC;
  cmc = slice->CMC;
100013a6:	6846      	ldr	r6, [r0, #4]
  
  /* First, Bind the event with the modulation function */
  cmc &= ~((uint32_t) CCU4_CC4_CMC_MOS_Msk);
  cmc |= ((uint32_t) event) << CCU4_CC4_CMC_MOS_Pos;
100013a8:	0489      	lsls	r1, r1, #18
  
  tc  = slice->TC;
  cmc = slice->CMC;
  
  /* First, Bind the event with the modulation function */
  cmc &= ~((uint32_t) CCU4_CC4_CMC_MOS_Msk);
100013aa:	4035      	ands	r5, r6
  cmc |= ((uint32_t) event) << CCU4_CC4_CMC_MOS_Pos;
100013ac:	4329      	orrs	r1, r5
  slice->CMC = cmc;
100013ae:	6041      	str	r1, [r0, #4]
  
  /* Next, Modulation mode */
  if (mod_mode == XMC_CCU4_SLICE_MODULATION_MODE_CLEAR_OUT)
100013b0:	2a01      	cmp	r2, #1
100013b2:	d00b      	beq.n	100013cc <XMC_CCU4_SLICE_ModulationConfig+0x2c>
  {
    tc |= (uint32_t) CCU4_CC4_TC_EMT_Msk;
  }
  else
  {
    tc &= ~((uint32_t) CCU4_CC4_TC_EMT_Msk);
100013b4:	4a08      	ldr	r2, [pc, #32]	; (100013d8 <XMC_CCU4_SLICE_ModulationConfig+0x38>)
100013b6:	4022      	ands	r2, r4
  }

  /* Synchronization of modulation effect with PWM cycle */
  if (synch_with_pwm == (bool) true)
100013b8:	2b00      	cmp	r3, #0
100013ba:	d103      	bne.n	100013c4 <XMC_CCU4_SLICE_ModulationConfig+0x24>
  {
    tc |= (uint32_t) CCU4_CC4_TC_EMS_Msk;
  }
  else
  {
    tc &= ~((uint32_t) CCU4_CC4_TC_EMS_Msk);
100013bc:	4b07      	ldr	r3, [pc, #28]	; (100013dc <XMC_CCU4_SLICE_ModulationConfig+0x3c>)
100013be:	4013      	ands	r3, r2
  }
  
  slice->TC = tc;
100013c0:	6143      	str	r3, [r0, #20]
}
100013c2:	bd70      	pop	{r4, r5, r6, pc}
  }

  /* Synchronization of modulation effect with PWM cycle */
  if (synch_with_pwm == (bool) true)
  {
    tc |= (uint32_t) CCU4_CC4_TC_EMS_Msk;
100013c4:	2380      	movs	r3, #128	; 0x80
100013c6:	041b      	lsls	r3, r3, #16
100013c8:	4313      	orrs	r3, r2
100013ca:	e7f9      	b.n	100013c0 <XMC_CCU4_SLICE_ModulationConfig+0x20>
  slice->CMC = cmc;
  
  /* Next, Modulation mode */
  if (mod_mode == XMC_CCU4_SLICE_MODULATION_MODE_CLEAR_OUT)
  {
    tc |= (uint32_t) CCU4_CC4_TC_EMT_Msk;
100013cc:	2280      	movs	r2, #128	; 0x80
100013ce:	0452      	lsls	r2, r2, #17
100013d0:	4322      	orrs	r2, r4
100013d2:	e7f1      	b.n	100013b8 <XMC_CCU4_SLICE_ModulationConfig+0x18>
100013d4:	fff3ffff 	.word	0xfff3ffff
100013d8:	feffffff 	.word	0xfeffffff
100013dc:	ff7fffff 	.word	0xff7fffff

100013e0 <XMC_CCU4_SLICE_CountConfig>:
  
  XMC_ASSERT("XMC_CCU4_SLICE_CountConfig:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_CountConfig:Invalid Event ID", XMC_CCU4_SLICE_CHECK_EVENT_ID(event));

  /* Bind the event with the count function */
  cmc = slice->CMC;
100013e0:	6842      	ldr	r2, [r0, #4]
  cmc &= ~((uint32_t) CCU4_CC4_CMC_CNTS_Msk);
100013e2:	4b03      	ldr	r3, [pc, #12]	; (100013f0 <XMC_CCU4_SLICE_CountConfig+0x10>)
  cmc |= ((uint32_t) event) << CCU4_CC4_CMC_CNTS_Pos;
100013e4:	0389      	lsls	r1, r1, #14
  XMC_ASSERT("XMC_CCU4_SLICE_CountConfig:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_CountConfig:Invalid Event ID", XMC_CCU4_SLICE_CHECK_EVENT_ID(event));

  /* Bind the event with the count function */
  cmc = slice->CMC;
  cmc &= ~((uint32_t) CCU4_CC4_CMC_CNTS_Msk);
100013e6:	4013      	ands	r3, r2
  cmc |= ((uint32_t) event) << CCU4_CC4_CMC_CNTS_Pos;
100013e8:	4319      	orrs	r1, r3

  slice->CMC = cmc;
100013ea:	6041      	str	r1, [r0, #4]
}
100013ec:	4770      	bx	lr
100013ee:	46c0      	nop			; (mov r8, r8)
100013f0:	ffff3fff 	.word	0xffff3fff

100013f4 <XMC_CCU4_SLICE_GateConfig>:
  
  XMC_ASSERT("XMC_CCU4_SLICE_GateConfig:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_GateConfig:Invalid Event ID", XMC_CCU4_SLICE_CHECK_EVENT_ID(event));
  
  /* Bind the event with the gate function */
  cmc = slice->CMC;
100013f4:	6842      	ldr	r2, [r0, #4]
  cmc &= ~((uint32_t) CCU4_CC4_CMC_GATES_Msk);
100013f6:	4b03      	ldr	r3, [pc, #12]	; (10001404 <XMC_CCU4_SLICE_GateConfig+0x10>)
  cmc |= ((uint32_t) event) << CCU4_CC4_CMC_GATES_Pos;
100013f8:	0209      	lsls	r1, r1, #8
  XMC_ASSERT("XMC_CCU4_SLICE_GateConfig:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_GateConfig:Invalid Event ID", XMC_CCU4_SLICE_CHECK_EVENT_ID(event));
  
  /* Bind the event with the gate function */
  cmc = slice->CMC;
  cmc &= ~((uint32_t) CCU4_CC4_CMC_GATES_Msk);
100013fa:	4013      	ands	r3, r2
  cmc |= ((uint32_t) event) << CCU4_CC4_CMC_GATES_Pos;
100013fc:	4319      	orrs	r1, r3

  slice->CMC = cmc;
100013fe:	6041      	str	r1, [r0, #4]
}
10001400:	4770      	bx	lr
10001402:	46c0      	nop			; (mov r8, r8)
10001404:	fffffcff 	.word	0xfffffcff

10001408 <XMC_CCU4_SLICE_DirectionConfig>:
  
  XMC_ASSERT("XMC_CCU4_SLICE_DirectionConfig:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_DirectionConfig:Invalid Event ID", XMC_CCU4_SLICE_CHECK_EVENT_ID(event));
  
  /* Bind the event with the direction function */
  cmc = slice->CMC;
10001408:	6842      	ldr	r2, [r0, #4]
  cmc &= ~((uint32_t) CCU4_CC4_CMC_UDS_Msk);
1000140a:	4b03      	ldr	r3, [pc, #12]	; (10001418 <XMC_CCU4_SLICE_DirectionConfig+0x10>)
  cmc |= ((uint32_t) event) << CCU4_CC4_CMC_UDS_Pos;
1000140c:	0289      	lsls	r1, r1, #10
  XMC_ASSERT("XMC_CCU4_SLICE_DirectionConfig:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_DirectionConfig:Invalid Event ID", XMC_CCU4_SLICE_CHECK_EVENT_ID(event));
  
  /* Bind the event with the direction function */
  cmc = slice->CMC;
  cmc &= ~((uint32_t) CCU4_CC4_CMC_UDS_Msk);
1000140e:	4013      	ands	r3, r2
  cmc |= ((uint32_t) event) << CCU4_CC4_CMC_UDS_Pos;
10001410:	4319      	orrs	r1, r3
  
  slice->CMC = cmc;
10001412:	6041      	str	r1, [r0, #4]
}
10001414:	4770      	bx	lr
10001416:	46c0      	nop			; (mov r8, r8)
10001418:	fffff3ff 	.word	0xfffff3ff

1000141c <XMC_CCU4_SLICE_StatusBitOverrideConfig>:
  /* Bind the event with the override function */
  cmc = slice->CMC;
  /* Map status bit trigger override to Event 1 & 
         status bit value override to Event 2 */
  cmc &= ~((uint32_t) CCU4_CC4_CMC_OFS_Msk);
  cmc |= ((uint32_t) 1) << CCU4_CC4_CMC_OFS_Pos;
1000141c:	2380      	movs	r3, #128	; 0x80
  uint32_t cmc;
  
  XMC_ASSERT("XMC_CCU4_SLICE_StatusBitOverrideConfig:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  
  /* Bind the event with the override function */
  cmc = slice->CMC;
1000141e:	6842      	ldr	r2, [r0, #4]
  /* Map status bit trigger override to Event 1 & 
         status bit value override to Event 2 */
  cmc &= ~((uint32_t) CCU4_CC4_CMC_OFS_Msk);
  cmc |= ((uint32_t) 1) << CCU4_CC4_CMC_OFS_Pos;
10001420:	025b      	lsls	r3, r3, #9
10001422:	4313      	orrs	r3, r2

  slice->CMC = cmc;
10001424:	6043      	str	r3, [r0, #4]
}
10001426:	4770      	bx	lr

10001428 <XMC_CCU4_SLICE_TrapConfig>:
                                                             (exit_mode == XMC_CCU4_SLICE_TRAP_EXIT_MODE_SW)));
    
  /* First, Map trap function to Event 2 */
  cmc = slice->CMC;
  cmc &= ~((uint32_t) CCU4_CC4_CMC_TS_Msk);
  cmc |= ((uint32_t) 1) << CCU4_CC4_CMC_TS_Pos;
10001428:	2380      	movs	r3, #128	; 0x80

/* API to configure trap function */
void XMC_CCU4_SLICE_TrapConfig(XMC_CCU4_SLICE_t *const slice,
                               const XMC_CCU4_SLICE_TRAP_EXIT_MODE_t exit_mode,
                               const bool synch_with_pwm)
{
1000142a:	b510      	push	{r4, lr}
  XMC_ASSERT("XMC_CCU4_SLICE_TrapConfig:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_TrapConfig:Invalid Exit Mode", ((exit_mode == XMC_CCU4_SLICE_TRAP_EXIT_MODE_AUTOMATIC) ||\
                                                             (exit_mode == XMC_CCU4_SLICE_TRAP_EXIT_MODE_SW)));
    
  /* First, Map trap function to Event 2 */
  cmc = slice->CMC;
1000142c:	6844      	ldr	r4, [r0, #4]
  cmc &= ~((uint32_t) CCU4_CC4_CMC_TS_Msk);
  cmc |= ((uint32_t) 1) << CCU4_CC4_CMC_TS_Pos;
1000142e:	029b      	lsls	r3, r3, #10
10001430:	4323      	orrs	r3, r4
  slice->CMC = cmc;
10001432:	6043      	str	r3, [r0, #4]
  
  /* Next, Configure synchronization option */
  tc = slice->TC;
10001434:	6943      	ldr	r3, [r0, #20]

  if (synch_with_pwm == (bool) true)
10001436:	2a00      	cmp	r2, #0
10001438:	d008      	beq.n	1000144c <XMC_CCU4_SLICE_TrapConfig+0x24>
  {
    tc |= (uint32_t) CCU4_CC4_TC_TRPSE_Msk;
1000143a:	2280      	movs	r2, #128	; 0x80
1000143c:	0392      	lsls	r2, r2, #14
1000143e:	4313      	orrs	r3, r2
  {
    tc &= ~((uint32_t) CCU4_CC4_TC_TRPSE_Msk);
  }
  
  /* Configure exit mode */
  if (exit_mode == XMC_CCU4_SLICE_TRAP_EXIT_MODE_SW)
10001440:	2901      	cmp	r1, #1
10001442:	d007      	beq.n	10001454 <XMC_CCU4_SLICE_TrapConfig+0x2c>
  {
    tc |= (uint32_t) CCU4_CC4_TC_TRPSW_Msk;
  }
  else
  {
    tc &= ~((uint32_t) CCU4_CC4_TC_TRPSW_Msk);
10001444:	4a05      	ldr	r2, [pc, #20]	; (1000145c <XMC_CCU4_SLICE_TrapConfig+0x34>)
10001446:	4013      	ands	r3, r2
  }
  
  slice->TC = tc;
10001448:	6143      	str	r3, [r0, #20]
}
1000144a:	bd10      	pop	{r4, pc}
  {
    tc |= (uint32_t) CCU4_CC4_TC_TRPSE_Msk;
  }
  else
  {
    tc &= ~((uint32_t) CCU4_CC4_TC_TRPSE_Msk);
1000144c:	4a04      	ldr	r2, [pc, #16]	; (10001460 <XMC_CCU4_SLICE_TrapConfig+0x38>)
1000144e:	4013      	ands	r3, r2
  }
  
  /* Configure exit mode */
  if (exit_mode == XMC_CCU4_SLICE_TRAP_EXIT_MODE_SW)
10001450:	2901      	cmp	r1, #1
10001452:	d1f7      	bne.n	10001444 <XMC_CCU4_SLICE_TrapConfig+0x1c>
  {
    tc |= (uint32_t) CCU4_CC4_TC_TRPSW_Msk;
10001454:	2280      	movs	r2, #128	; 0x80
10001456:	03d2      	lsls	r2, r2, #15
10001458:	4313      	orrs	r3, r2
1000145a:	e7f5      	b.n	10001448 <XMC_CCU4_SLICE_TrapConfig+0x20>
1000145c:	ffbfffff 	.word	0xffbfffff
10001460:	ffdfffff 	.word	0xffdfffff

10001464 <XMC_CCU4_SLICE_ConfigureStatusBitOverrideEvent>:

/* API to configure a slice Status Bit Override event */
void XMC_CCU4_SLICE_ConfigureStatusBitOverrideEvent(XMC_CCU4_SLICE_t *const slice,
                                                    const XMC_CCU4_SLICE_EVENT_CONFIG_t *const ev1_config,
                                                    const XMC_CCU4_SLICE_EVENT_CONFIG_t *const ev2_config)
{
10001464:	b510      	push	{r4, lr}
  slice->INS1 = ins;
#else
  ins = slice->INS;

  /* Configure the edge sensitivity for event 1 */
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_EDGE_CONFIG_MASK) << CCU4_CC4_INS_EV1EM_Pos);
10001466:	4b15      	ldr	r3, [pc, #84]	; (100014bc <XMC_CCU4_SLICE_ConfigureStatusBitOverrideEvent+0x58>)
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_INPUT_CONFIG_MASK) << CCU4_CC4_INS1_EV2IS_Pos);
  ins |= ((uint32_t) ev2_config->mapped_input) << CCU4_CC4_INS1_EV2IS_Pos;
  
  slice->INS1 = ins;
#else
  ins = slice->INS;
10001468:	6804      	ldr	r4, [r0, #0]

  /* Configure the edge sensitivity for event 1 */
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_EDGE_CONFIG_MASK) << CCU4_CC4_INS_EV1EM_Pos);
1000146a:	401c      	ands	r4, r3
  ins |= ((uint32_t) ev1_config->edge) << CCU4_CC4_INS_EV1EM_Pos;
1000146c:	784b      	ldrb	r3, [r1, #1]
1000146e:	049b      	lsls	r3, r3, #18
10001470:	4323      	orrs	r3, r4
  
  /* Configure the edge sensitivity for event 2 */
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_EDGE_CONFIG_MASK) << CCU4_CC4_INS_EV2EM_Pos);
10001472:	4c13      	ldr	r4, [pc, #76]	; (100014c0 <XMC_CCU4_SLICE_ConfigureStatusBitOverrideEvent+0x5c>)
10001474:	4023      	ands	r3, r4
  ins |= ((uint32_t) ev2_config->edge) << CCU4_CC4_INS_EV2EM_Pos;
10001476:	7854      	ldrb	r4, [r2, #1]
10001478:	0524      	lsls	r4, r4, #20
1000147a:	4323      	orrs	r3, r4
  
  /* Configure the level sensitivity for event 1 */
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_LEVEL_CONFIG_MASK) << CCU4_CC4_INS_EV1LM_Pos);
1000147c:	4c11      	ldr	r4, [pc, #68]	; (100014c4 <XMC_CCU4_SLICE_ConfigureStatusBitOverrideEvent+0x60>)
1000147e:	4023      	ands	r3, r4
  ins |= ((uint32_t) ev1_config->level) << CCU4_CC4_INS_EV1LM_Pos;
10001480:	788c      	ldrb	r4, [r1, #2]
10001482:	05e4      	lsls	r4, r4, #23
10001484:	4323      	orrs	r3, r4
  
  /* Configure the level sensitivity for event 2 */
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_LEVEL_CONFIG_MASK) << CCU4_CC4_INS_EV2LM_Pos);
10001486:	4c10      	ldr	r4, [pc, #64]	; (100014c8 <XMC_CCU4_SLICE_ConfigureStatusBitOverrideEvent+0x64>)
10001488:	4023      	ands	r3, r4
  ins |= ((uint32_t) ev2_config->level) << CCU4_CC4_INS_EV2LM_Pos;
1000148a:	7894      	ldrb	r4, [r2, #2]
1000148c:	0624      	lsls	r4, r4, #24
1000148e:	4323      	orrs	r3, r4
  
  /* Configure the debounce filter for event 1 */
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_FILTER_CONFIG_MASK) << CCU4_CC4_INS_LPF1M_Pos);
10001490:	4c0e      	ldr	r4, [pc, #56]	; (100014cc <XMC_CCU4_SLICE_ConfigureStatusBitOverrideEvent+0x68>)
10001492:	4023      	ands	r3, r4
  ins |= ((uint32_t) ev1_config->duration) << CCU4_CC4_INS_LPF1M_Pos;
10001494:	78cc      	ldrb	r4, [r1, #3]
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_FILTER_CONFIG_MASK) << CCU4_CC4_INS_LPF2M_Pos);
  ins |= ((uint32_t) ev2_config->duration) << CCU4_CC4_INS_LPF2M_Pos;
  
  /* Next, the input for Event1 */
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_INPUT_CONFIG_MASK) << CCU4_CC4_INS_EV1IS_Pos);
  ins |= ((uint32_t) ev1_config->mapped_input) << CCU4_CC4_INS_EV1IS_Pos;
10001496:	7809      	ldrb	r1, [r1, #0]
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_LEVEL_CONFIG_MASK) << CCU4_CC4_INS_EV2LM_Pos);
  ins |= ((uint32_t) ev2_config->level) << CCU4_CC4_INS_EV2LM_Pos;
  
  /* Configure the debounce filter for event 1 */
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_FILTER_CONFIG_MASK) << CCU4_CC4_INS_LPF1M_Pos);
  ins |= ((uint32_t) ev1_config->duration) << CCU4_CC4_INS_LPF1M_Pos;
10001498:	06e4      	lsls	r4, r4, #27
1000149a:	4323      	orrs	r3, r4

  /* Configure the debounce filter for event 2 */
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_FILTER_CONFIG_MASK) << CCU4_CC4_INS_LPF2M_Pos);
1000149c:	4c0c      	ldr	r4, [pc, #48]	; (100014d0 <XMC_CCU4_SLICE_ConfigureStatusBitOverrideEvent+0x6c>)
  ins |= ((uint32_t) ev2_config->duration) << CCU4_CC4_INS_LPF2M_Pos;
  
  /* Next, the input for Event1 */
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_INPUT_CONFIG_MASK) << CCU4_CC4_INS_EV1IS_Pos);
  ins |= ((uint32_t) ev1_config->mapped_input) << CCU4_CC4_INS_EV1IS_Pos;
1000149e:	0109      	lsls	r1, r1, #4
  /* Configure the debounce filter for event 1 */
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_FILTER_CONFIG_MASK) << CCU4_CC4_INS_LPF1M_Pos);
  ins |= ((uint32_t) ev1_config->duration) << CCU4_CC4_INS_LPF1M_Pos;

  /* Configure the debounce filter for event 2 */
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_FILTER_CONFIG_MASK) << CCU4_CC4_INS_LPF2M_Pos);
100014a0:	4023      	ands	r3, r4
  ins |= ((uint32_t) ev2_config->duration) << CCU4_CC4_INS_LPF2M_Pos;
100014a2:	78d4      	ldrb	r4, [r2, #3]
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_INPUT_CONFIG_MASK) << CCU4_CC4_INS_EV1IS_Pos);
  ins |= ((uint32_t) ev1_config->mapped_input) << CCU4_CC4_INS_EV1IS_Pos;

  /* Finally, the input for Event2 */
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_INPUT_CONFIG_MASK) << CCU4_CC4_INS_EV2IS_Pos);
  ins |= ((uint32_t) ev2_config->mapped_input) << CCU4_CC4_INS_EV2IS_Pos;
100014a4:	7812      	ldrb	r2, [r2, #0]
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_FILTER_CONFIG_MASK) << CCU4_CC4_INS_LPF1M_Pos);
  ins |= ((uint32_t) ev1_config->duration) << CCU4_CC4_INS_LPF1M_Pos;

  /* Configure the debounce filter for event 2 */
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_FILTER_CONFIG_MASK) << CCU4_CC4_INS_LPF2M_Pos);
  ins |= ((uint32_t) ev2_config->duration) << CCU4_CC4_INS_LPF2M_Pos;
100014a6:	0764      	lsls	r4, r4, #29
100014a8:	4323      	orrs	r3, r4
  
  /* Next, the input for Event1 */
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_INPUT_CONFIG_MASK) << CCU4_CC4_INS_EV1IS_Pos);
100014aa:	24f0      	movs	r4, #240	; 0xf0
100014ac:	43a3      	bics	r3, r4
  ins |= ((uint32_t) ev1_config->mapped_input) << CCU4_CC4_INS_EV1IS_Pos;
100014ae:	430b      	orrs	r3, r1

  /* Finally, the input for Event2 */
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_INPUT_CONFIG_MASK) << CCU4_CC4_INS_EV2IS_Pos);
100014b0:	4908      	ldr	r1, [pc, #32]	; (100014d4 <XMC_CCU4_SLICE_ConfigureStatusBitOverrideEvent+0x70>)
  ins |= ((uint32_t) ev2_config->mapped_input) << CCU4_CC4_INS_EV2IS_Pos;
100014b2:	0212      	lsls	r2, r2, #8
  /* Next, the input for Event1 */
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_INPUT_CONFIG_MASK) << CCU4_CC4_INS_EV1IS_Pos);
  ins |= ((uint32_t) ev1_config->mapped_input) << CCU4_CC4_INS_EV1IS_Pos;

  /* Finally, the input for Event2 */
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_INPUT_CONFIG_MASK) << CCU4_CC4_INS_EV2IS_Pos);
100014b4:	400b      	ands	r3, r1
  ins |= ((uint32_t) ev2_config->mapped_input) << CCU4_CC4_INS_EV2IS_Pos;
100014b6:	4313      	orrs	r3, r2
  
  slice->INS = ins;
100014b8:	6003      	str	r3, [r0, #0]
#endif
}
100014ba:	bd10      	pop	{r4, pc}
100014bc:	fff3ffff 	.word	0xfff3ffff
100014c0:	ffcfffff 	.word	0xffcfffff
100014c4:	ff7fffff 	.word	0xff7fffff
100014c8:	feffffff 	.word	0xfeffffff
100014cc:	e7ffffff 	.word	0xe7ffffff
100014d0:	9fffffff 	.word	0x9fffffff
100014d4:	fffff0ff 	.word	0xfffff0ff

100014d8 <XMC_CCU4_SLICE_ConfigureEvent>:

/* API to configure a slice trigger event */
void XMC_CCU4_SLICE_ConfigureEvent(XMC_CCU4_SLICE_t *const slice,
                                   const XMC_CCU4_SLICE_EVENT_t event,
                                   const XMC_CCU4_SLICE_EVENT_CONFIG_t *const config)
{
100014d8:	b5f0      	push	{r4, r5, r6, r7, lr}
             ((config->level == XMC_CCU4_SLICE_EVENT_LEVEL_SENSITIVITY_ACTIVE_HIGH) ||\
              (config->level == XMC_CCU4_SLICE_EVENT_LEVEL_SENSITIVITY_ACTIVE_LOW)));
  XMC_ASSERT("XMC_CCU4_SLICE_ConfigureEvent:Invalid Debounce Period", 
             XMC_CCU4_SLICE_CHECK_EVENT_FILTER(config->duration));
  /* Calculate offset with reference to event */
  offset = ((uint8_t) event) - 1U;
100014da:	1e4e      	subs	r6, r1, #1
100014dc:	b2f6      	uxtb	r6, r6

#else
  ins = slice->INS;
  
  /* First, configure the edge sensitivity */
  pos = ((uint8_t) CCU4_CC4_INS_EV0EM_Pos) + (uint8_t)(offset << 1U);
100014de:	0074      	lsls	r4, r6, #1
100014e0:	b2e4      	uxtb	r4, r4
100014e2:	1c25      	adds	r5, r4, #0
100014e4:	3510      	adds	r5, #16
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_EDGE_CONFIG_MASK) << pos);
100014e6:	b2ed      	uxtb	r5, r5

/* API to configure a slice trigger event */
void XMC_CCU4_SLICE_ConfigureEvent(XMC_CCU4_SLICE_t *const slice,
                                   const XMC_CCU4_SLICE_EVENT_t event,
                                   const XMC_CCU4_SLICE_EVENT_CONFIG_t *const config)
{
100014e8:	4647      	mov	r7, r8
#else
  ins = slice->INS;
  
  /* First, configure the edge sensitivity */
  pos = ((uint8_t) CCU4_CC4_INS_EV0EM_Pos) + (uint8_t)(offset << 1U);
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_EDGE_CONFIG_MASK) << pos);
100014ea:	46ac      	mov	ip, r5

/* API to configure a slice trigger event */
void XMC_CCU4_SLICE_ConfigureEvent(XMC_CCU4_SLICE_t *const slice,
                                   const XMC_CCU4_SLICE_EVENT_t event,
                                   const XMC_CCU4_SLICE_EVENT_CONFIG_t *const config)
{
100014ec:	b480      	push	{r7}
#else
  ins = slice->INS;
  
  /* First, configure the edge sensitivity */
  pos = ((uint8_t) CCU4_CC4_INS_EV0EM_Pos) + (uint8_t)(offset << 1U);
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_EDGE_CONFIG_MASK) << pos);
100014ee:	2503      	movs	r5, #3
100014f0:	4667      	mov	r7, ip
100014f2:	46a8      	mov	r8, r5
100014f4:	40bd      	lsls	r5, r7
  ins |= ((uint32_t) config->mapped_input) << pos;

  slice->INS1 = ins;

#else
  ins = slice->INS;
100014f6:	6803      	ldr	r3, [r0, #0]
  pos = ((uint8_t) CCU4_CC4_INS_EV0EM_Pos) + (uint8_t)(offset << 1U);
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_EDGE_CONFIG_MASK) << pos);
  ins |= ((uint32_t) config->edge) << pos;
  
  /* Next, the level */
  pos = ((uint8_t) CCU4_CC4_INS_EV0LM_Pos) + offset;
100014f8:	3115      	adds	r1, #21
#else
  ins = slice->INS;
  
  /* First, configure the edge sensitivity */
  pos = ((uint8_t) CCU4_CC4_INS_EV0EM_Pos) + (uint8_t)(offset << 1U);
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_EDGE_CONFIG_MASK) << pos);
100014fa:	43ab      	bics	r3, r5
  ins |= ((uint32_t) config->edge) << pos;
100014fc:	7855      	ldrb	r5, [r2, #1]
  
  /* Next, the level */
  pos = ((uint8_t) CCU4_CC4_INS_EV0LM_Pos) + offset;
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_LEVEL_CONFIG_MASK) << pos);
100014fe:	b2c9      	uxtb	r1, r1
  ins = slice->INS;
  
  /* First, configure the edge sensitivity */
  pos = ((uint8_t) CCU4_CC4_INS_EV0EM_Pos) + (uint8_t)(offset << 1U);
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_EDGE_CONFIG_MASK) << pos);
  ins |= ((uint32_t) config->edge) << pos;
10001500:	40bd      	lsls	r5, r7
10001502:	432b      	orrs	r3, r5
  
  /* Next, the level */
  pos = ((uint8_t) CCU4_CC4_INS_EV0LM_Pos) + offset;
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_LEVEL_CONFIG_MASK) << pos);
10001504:	2501      	movs	r5, #1
10001506:	408d      	lsls	r5, r1
10001508:	43ab      	bics	r3, r5
  ins |= ((uint32_t) config->level) << pos;
1000150a:	7895      	ldrb	r5, [r2, #2]
  
  /* Next, the debounce filter */
  pos = ((uint8_t) CCU4_CC4_INS_LPF0M_Pos) + (uint8_t)(offset << 1U);
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_FILTER_CONFIG_MASK) << pos);
1000150c:	4647      	mov	r7, r8
  ins |= ((uint32_t) config->edge) << pos;
  
  /* Next, the level */
  pos = ((uint8_t) CCU4_CC4_INS_EV0LM_Pos) + offset;
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_LEVEL_CONFIG_MASK) << pos);
  ins |= ((uint32_t) config->level) << pos;
1000150e:	408d      	lsls	r5, r1
  
  /* Next, the debounce filter */
  pos = ((uint8_t) CCU4_CC4_INS_LPF0M_Pos) + (uint8_t)(offset << 1U);
10001510:	3419      	adds	r4, #25
  ins |= ((uint32_t) config->edge) << pos;
  
  /* Next, the level */
  pos = ((uint8_t) CCU4_CC4_INS_EV0LM_Pos) + offset;
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_LEVEL_CONFIG_MASK) << pos);
  ins |= ((uint32_t) config->level) << pos;
10001512:	432b      	orrs	r3, r5
  
  /* Next, the debounce filter */
  pos = ((uint8_t) CCU4_CC4_INS_LPF0M_Pos) + (uint8_t)(offset << 1U);
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_FILTER_CONFIG_MASK) << pos);
  ins |= ((uint32_t) config->duration) << pos;
10001514:	78d5      	ldrb	r5, [r2, #3]
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_LEVEL_CONFIG_MASK) << pos);
  ins |= ((uint32_t) config->level) << pos;
  
  /* Next, the debounce filter */
  pos = ((uint8_t) CCU4_CC4_INS_LPF0M_Pos) + (uint8_t)(offset << 1U);
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_FILTER_CONFIG_MASK) << pos);
10001516:	b2e4      	uxtb	r4, r4
10001518:	40a7      	lsls	r7, r4
  ins |= ((uint32_t) config->duration) << pos;
1000151a:	40a5      	lsls	r5, r4

  /* Finally the input */
  pos = ((uint8_t) CCU4_CC4_INS_EV0IS_Pos) + (uint8_t)(offset << 2U);
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_INPUT_CONFIG_MASK) << pos);
1000151c:	240f      	movs	r4, #15
  pos = ((uint8_t) CCU4_CC4_INS_LPF0M_Pos) + (uint8_t)(offset << 1U);
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_FILTER_CONFIG_MASK) << pos);
  ins |= ((uint32_t) config->duration) << pos;

  /* Finally the input */
  pos = ((uint8_t) CCU4_CC4_INS_EV0IS_Pos) + (uint8_t)(offset << 2U);
1000151e:	00b6      	lsls	r6, r6, #2
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_INPUT_CONFIG_MASK) << pos);
10001520:	b2f1      	uxtb	r1, r6
  ins |= ((uint32_t) config->mapped_input) << pos;
10001522:	7812      	ldrb	r2, [r2, #0]
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_FILTER_CONFIG_MASK) << pos);
  ins |= ((uint32_t) config->duration) << pos;

  /* Finally the input */
  pos = ((uint8_t) CCU4_CC4_INS_EV0IS_Pos) + (uint8_t)(offset << 2U);
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_INPUT_CONFIG_MASK) << pos);
10001524:	408c      	lsls	r4, r1
  ins |= ((uint32_t) config->mapped_input) << pos;
10001526:	408a      	lsls	r2, r1
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_LEVEL_CONFIG_MASK) << pos);
  ins |= ((uint32_t) config->level) << pos;
  
  /* Next, the debounce filter */
  pos = ((uint8_t) CCU4_CC4_INS_LPF0M_Pos) + (uint8_t)(offset << 1U);
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_FILTER_CONFIG_MASK) << pos);
10001528:	43bb      	bics	r3, r7
  ins |= ((uint32_t) config->duration) << pos;
1000152a:	432b      	orrs	r3, r5

  /* Finally the input */
  pos = ((uint8_t) CCU4_CC4_INS_EV0IS_Pos) + (uint8_t)(offset << 2U);
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_INPUT_CONFIG_MASK) << pos);
1000152c:	43a3      	bics	r3, r4
  ins |= ((uint32_t) config->mapped_input) << pos;
1000152e:	4313      	orrs	r3, r2

  slice->INS = ins;
10001530:	6003      	str	r3, [r0, #0]
#endif
}
10001532:	bc04      	pop	{r2}
10001534:	4690      	mov	r8, r2
10001536:	bdf0      	pop	{r4, r5, r6, r7, pc}

10001538 <XMC_CCU4_SLICE_SetInterruptNode>:

  XMC_ASSERT("XMC_CCU4_SLICE_SetInterruptNode:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_SetInterruptNode:Invalid SR ID ", XMC_CCU4_SLICE_CHECK_SR_ID(sr));
  XMC_ASSERT("XMC_CCU4_SLICE_SetInterruptNode:Invalid event", XMC_CCU4_SLICE_CHECK_INTERRUPT(event));
  
  srs = slice->SRS;
10001538:	23a8      	movs	r3, #168	; 0xa8

/* Binds a capcom event to an NVIC node  */
void XMC_CCU4_SLICE_SetInterruptNode(XMC_CCU4_SLICE_t *const slice,
                                     const XMC_CCU4_SLICE_IRQ_ID_t event,
                                     const XMC_CCU4_SLICE_SR_ID_t sr)
{
1000153a:	b530      	push	{r4, r5, lr}

  XMC_ASSERT("XMC_CCU4_SLICE_SetInterruptNode:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_SetInterruptNode:Invalid SR ID ", XMC_CCU4_SLICE_CHECK_SR_ID(sr));
  XMC_ASSERT("XMC_CCU4_SLICE_SetInterruptNode:Invalid event", XMC_CCU4_SLICE_CHECK_INTERRUPT(event));
  
  srs = slice->SRS;
1000153c:	58c5      	ldr	r5, [r0, r3]
1000153e:	2909      	cmp	r1, #9
10001540:	d80b      	bhi.n	1000155a <XMC_CCU4_SLICE_SetInterruptNode+0x22>
10001542:	4b07      	ldr	r3, [pc, #28]	; (10001560 <XMC_CCU4_SLICE_SetInterruptNode+0x28>)
10001544:	0089      	lsls	r1, r1, #2
10001546:	58cc      	ldr	r4, [r1, r3]
10001548:	43e3      	mvns	r3, r4
1000154a:	4c06      	ldr	r4, [pc, #24]	; (10001564 <XMC_CCU4_SLICE_SetInterruptNode+0x2c>)
1000154c:	5909      	ldr	r1, [r1, r4]
      pos  = CCU4_CC4_SRS_E2SR_Pos;
      break;
  }
  
  srs &= ~mask; 
  srs |= (uint32_t)sr << pos;
1000154e:	408a      	lsls	r2, r1
      mask = ((uint32_t) CCU4_CC4_SRS_E2SR_Msk);
      pos  = CCU4_CC4_SRS_E2SR_Pos;
      break;
  }
  
  srs &= ~mask; 
10001550:	402b      	ands	r3, r5
  srs |= (uint32_t)sr << pos;
10001552:	431a      	orrs	r2, r3
  slice->SRS = srs;
10001554:	23a8      	movs	r3, #168	; 0xa8
10001556:	50c2      	str	r2, [r0, r3]
}
10001558:	bd30      	pop	{r4, r5, pc}

  XMC_ASSERT("XMC_CCU4_SLICE_SetInterruptNode:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_SetInterruptNode:Invalid SR ID ", XMC_CCU4_SLICE_CHECK_SR_ID(sr));
  XMC_ASSERT("XMC_CCU4_SLICE_SetInterruptNode:Invalid event", XMC_CCU4_SLICE_CHECK_INTERRUPT(event));
  
  srs = slice->SRS;
1000155a:	210c      	movs	r1, #12
1000155c:	4b02      	ldr	r3, [pc, #8]	; (10001568 <XMC_CCU4_SLICE_SetInterruptNode+0x30>)
1000155e:	e7f6      	b.n	1000154e <XMC_CCU4_SLICE_SetInterruptNode+0x16>
10001560:	10004580 	.word	0x10004580
10001564:	100045a8 	.word	0x100045a8
10001568:	ffffcfff 	.word	0xffffcfff

1000156c <XMC_GPIO_SetHardwareControl>:
  port->IOCR[(uint32_t)pin >> 2U] &= ~(uint32_t)((uint32_t)PORT_IOCR_PC_Msk << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U)));
  port->IOCR[(uint32_t)pin >> 2U] |= (uint32_t)mode << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U));
}

void XMC_GPIO_SetHardwareControl(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_HWCTRL_t hwctrl)
{
1000156c:	b510      	push	{r4, lr}
  XMC_ASSERT("XMC_GPIO_SetHardwareControl: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_SetHardwareControl: Invalid hwctrl", XMC_GPIO_CHECK_HWCTRL(hwctrl));

  port->HWSEL &= ~(uint32_t)((uint32_t)PORT_HWSEL_Msk << ((uint32_t)pin << 1U));
1000156e:	2403      	movs	r4, #3
10001570:	0049      	lsls	r1, r1, #1
  port->HWSEL |= (uint32_t)hwctrl << ((uint32_t)pin << 1U);
10001572:	408a      	lsls	r2, r1
void XMC_GPIO_SetHardwareControl(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_HWCTRL_t hwctrl)
{
  XMC_ASSERT("XMC_GPIO_SetHardwareControl: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_SetHardwareControl: Invalid hwctrl", XMC_GPIO_CHECK_HWCTRL(hwctrl));

  port->HWSEL &= ~(uint32_t)((uint32_t)PORT_HWSEL_Msk << ((uint32_t)pin << 1U));
10001574:	408c      	lsls	r4, r1
  port->HWSEL |= (uint32_t)hwctrl << ((uint32_t)pin << 1U);
10001576:	1c11      	adds	r1, r2, #0
void XMC_GPIO_SetHardwareControl(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_HWCTRL_t hwctrl)
{
  XMC_ASSERT("XMC_GPIO_SetHardwareControl: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_SetHardwareControl: Invalid hwctrl", XMC_GPIO_CHECK_HWCTRL(hwctrl));

  port->HWSEL &= ~(uint32_t)((uint32_t)PORT_HWSEL_Msk << ((uint32_t)pin << 1U));
10001578:	6f43      	ldr	r3, [r0, #116]	; 0x74
1000157a:	43a3      	bics	r3, r4
1000157c:	6743      	str	r3, [r0, #116]	; 0x74
  port->HWSEL |= (uint32_t)hwctrl << ((uint32_t)pin << 1U);
1000157e:	6f43      	ldr	r3, [r0, #116]	; 0x74
10001580:	4319      	orrs	r1, r3
10001582:	6741      	str	r1, [r0, #116]	; 0x74
}
10001584:	bd10      	pop	{r4, pc}
10001586:	46c0      	nop			; (mov r8, r8)

10001588 <__aeabi_uidiv>:
 * API IMPLEMENTATION - aeabi routines
 **********************************************************************************************************************/
/* This function performs unsigned integer division */
uint32_t __aeabi_uidiv(uint32_t dividend, uint32_t divisor)
{
  MATH->DIVCON  = XMC_MATH_UNSIGNED_DIVISION;
10001588:	2204      	movs	r2, #4
1000158a:	4b03      	ldr	r3, [pc, #12]	; (10001598 <__aeabi_uidiv+0x10>)
1000158c:	635a      	str	r2, [r3, #52]	; 0x34
  MATH->DVD     = dividend;
1000158e:	6218      	str	r0, [r3, #32]
  MATH->DVS     = divisor;
10001590:	6259      	str	r1, [r3, #36]	; 0x24

  return ((uint32_t) MATH->QUOT);
10001592:	6a98      	ldr	r0, [r3, #40]	; 0x28
}
10001594:	4770      	bx	lr
10001596:	46c0      	nop			; (mov r8, r8)
10001598:	40030000 	.word	0x40030000

1000159c <__aeabi_uidivmod>:
/* This function performs unsigned integer division modulo */
uint64_t __aeabi_uidivmod(uint32_t dividend, uint32_t divisor)
{
  uint64_t remainder;

  MATH->DIVCON  = XMC_MATH_UNSIGNED_DIVISION;
1000159c:	2204      	movs	r2, #4
1000159e:	4b03      	ldr	r3, [pc, #12]	; (100015ac <__aeabi_uidivmod+0x10>)
100015a0:	635a      	str	r2, [r3, #52]	; 0x34
  MATH->DVD     = dividend;
100015a2:	6218      	str	r0, [r3, #32]
  MATH->DVS     = divisor;
100015a4:	6259      	str	r1, [r3, #36]	; 0x24

  remainder = ((uint64_t) MATH->RMD) << 32U;
100015a6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
  return (remainder | MATH->QUOT);
100015a8:	6a98      	ldr	r0, [r3, #40]	; 0x28
}
100015aa:	4770      	bx	lr
100015ac:	40030000 	.word	0x40030000

100015b0 <XMC_UART_CH_Init>:
/*********************************************************************************************************************
 * API IMPLEMENTATION
 *********************************************************************************************************************/

void XMC_UART_CH_Init(XMC_USIC_CH_t *channel, const XMC_UART_CH_CONFIG_t *const config)
{
100015b0:	b570      	push	{r4, r5, r6, lr}
100015b2:	1c0d      	adds	r5, r1, #0
100015b4:	1c04      	adds	r4, r0, #0
  uint32_t oversampling = XMC_UART_CH_OVERSAMPLING;

  /* USIC channel switched on*/
  XMC_USIC_CH_Enable(channel);
100015b6:	f000 f84f 	bl	10001658 <XMC_USIC_CH_Enable>
  
  if(config->oversampling != 0U)
100015ba:	79ea      	ldrb	r2, [r5, #7]
100015bc:	2a00      	cmp	r2, #0
100015be:	d026      	beq.n	1000160e <XMC_UART_CH_Init+0x5e>
100015c0:	0856      	lsrs	r6, r2, #1
100015c2:	3601      	adds	r6, #1
100015c4:	0236      	lsls	r6, r6, #8
  {
    oversampling = (uint32_t)config->oversampling;
  }
  
  /* Configure baud rate */
  (void)XMC_USIC_CH_SetBaudrate(channel, config->baudrate, oversampling);
100015c6:	1c20      	adds	r0, r4, #0
100015c8:	6829      	ldr	r1, [r5, #0]
100015ca:	f000 f85f 	bl	1000168c <XMC_USIC_CH_SetBaudrate>
   * i.e. the 0 level is signaled during the complete bit time
   * Sampling point set equal to the half of the oversampling period
   * Enable Sample Majority Decision 
   * Enable Transfer Status BUSY
   */
  channel->PCR_ASCMode = (uint32_t)(((config->stop_bits - 1UL) << USIC_CH_PCR_ASCMode_STPB_Pos) |
100015ce:	79aa      	ldrb	r2, [r5, #6]
100015d0:	1e53      	subs	r3, r2, #1
100015d2:	005a      	lsls	r2, r3, #1
100015d4:	4b13      	ldr	r3, [pc, #76]	; (10001624 <XMC_UART_CH_Init+0x74>)
100015d6:	4313      	orrs	r3, r2
  /* Set passive data level, high
     Set word length. Data bits - 1
     If frame length is > 0, frame_lemgth-1; else, FLE = WLE (Data bits - 1)
     Transmission Mode: The shift control signal is considered active if it
     is at 1-level. This is the setting to be programmed to allow data transfers */
  channel->SCTR = (uint32_t)((((uint32_t)config->data_bits - 1UL) << USIC_CH_SCTR_WLE_Pos) |
100015d8:	2281      	movs	r2, #129	; 0x81
   * i.e. the 0 level is signaled during the complete bit time
   * Sampling point set equal to the half of the oversampling period
   * Enable Sample Majority Decision 
   * Enable Transfer Status BUSY
   */
  channel->PCR_ASCMode = (uint32_t)(((config->stop_bits - 1UL) << USIC_CH_PCR_ASCMode_STPB_Pos) |
100015da:	4333      	orrs	r3, r6
100015dc:	63e3      	str	r3, [r4, #60]	; 0x3c
  /* Set passive data level, high
     Set word length. Data bits - 1
     If frame length is > 0, frame_lemgth-1; else, FLE = WLE (Data bits - 1)
     Transmission Mode: The shift control signal is considered active if it
     is at 1-level. This is the setting to be programmed to allow data transfers */
  channel->SCTR = (uint32_t)((((uint32_t)config->data_bits - 1UL) << USIC_CH_SCTR_WLE_Pos) |
100015de:	792b      	ldrb	r3, [r5, #4]
100015e0:	0052      	lsls	r2, r2, #1
100015e2:	3b01      	subs	r3, #1
100015e4:	061b      	lsls	r3, r3, #24
100015e6:	4313      	orrs	r3, r2
100015e8:	6363      	str	r3, [r4, #52]	; 0x34
                             ((0x1UL << USIC_CH_SCTR_TRM_Pos) | USIC_CH_SCTR_PDL_Msk));

  if (config->frame_length != 0U)
100015ea:	796b      	ldrb	r3, [r5, #5]
100015ec:	2b00      	cmp	r3, #0
100015ee:	d112      	bne.n	10001616 <XMC_UART_CH_Init+0x66>
  {
    channel->SCTR |= (uint32_t)(((uint32_t)config->frame_length - 1UL) << USIC_CH_SCTR_FLE_Pos);
  }
  else
  {
    channel->SCTR |= (uint32_t)(((uint32_t)config->data_bits - 1UL) << USIC_CH_SCTR_FLE_Pos);
100015f0:	792a      	ldrb	r2, [r5, #4]
100015f2:	6b61      	ldr	r1, [r4, #52]	; 0x34
100015f4:	1e53      	subs	r3, r2, #1
100015f6:	041b      	lsls	r3, r3, #16
100015f8:	430b      	orrs	r3, r1
100015fa:	6363      	str	r3, [r4, #52]	; 0x34
  }

  /* Enable transfer buffer */
  channel->TCSR = (0x1UL << USIC_CH_TCSR_TDEN_Pos) |
100015fc:	23a0      	movs	r3, #160	; 0xa0
100015fe:	00db      	lsls	r3, r3, #3
10001600:	63a3      	str	r3, [r4, #56]	; 0x38
                  USIC_CH_TCSR_TDSSM_Msk;

  /* Clear protocol status */
  channel->PSCR = 0xFFFFFFFFUL;
10001602:	2301      	movs	r3, #1
10001604:	425b      	negs	r3, r3
10001606:	64e3      	str	r3, [r4, #76]	; 0x4c

  /* Set parity settings */
  channel->CCR = (uint32_t)config->parity_mode;
10001608:	892b      	ldrh	r3, [r5, #8]
1000160a:	6423      	str	r3, [r4, #64]	; 0x40
}
1000160c:	bd70      	pop	{r4, r5, r6, pc}
1000160e:	2690      	movs	r6, #144	; 0x90
 * API IMPLEMENTATION
 *********************************************************************************************************************/

void XMC_UART_CH_Init(XMC_USIC_CH_t *channel, const XMC_UART_CH_CONFIG_t *const config)
{
  uint32_t oversampling = XMC_UART_CH_OVERSAMPLING;
10001610:	2210      	movs	r2, #16
10001612:	0136      	lsls	r6, r6, #4
10001614:	e7d7      	b.n	100015c6 <XMC_UART_CH_Init+0x16>
  channel->SCTR = (uint32_t)((((uint32_t)config->data_bits - 1UL) << USIC_CH_SCTR_WLE_Pos) |
                             ((0x1UL << USIC_CH_SCTR_TRM_Pos) | USIC_CH_SCTR_PDL_Msk));

  if (config->frame_length != 0U)
  {
    channel->SCTR |= (uint32_t)(((uint32_t)config->frame_length - 1UL) << USIC_CH_SCTR_FLE_Pos);
10001616:	6b62      	ldr	r2, [r4, #52]	; 0x34
10001618:	3b01      	subs	r3, #1
1000161a:	041b      	lsls	r3, r3, #16
1000161c:	4313      	orrs	r3, r2
1000161e:	6363      	str	r3, [r4, #52]	; 0x34
10001620:	e7ec      	b.n	100015fc <XMC_UART_CH_Init+0x4c>
10001622:	46c0      	nop			; (mov r8, r8)
10001624:	00030001 	.word	0x00030001

10001628 <XMC_UART_CH_Transmit>:
}

void XMC_UART_CH_Transmit(XMC_USIC_CH_t *const channel, const uint16_t data)
{
  /* Check FIFO size */
  if ((channel->TBCTR & USIC_CH_TBCTR_SIZE_Msk) == 0UL)
10001628:	2384      	movs	r3, #132	; 0x84
1000162a:	005b      	lsls	r3, r3, #1
1000162c:	58c2      	ldr	r2, [r0, r3]
1000162e:	23e0      	movs	r3, #224	; 0xe0
10001630:	04db      	lsls	r3, r3, #19
10001632:	421a      	tst	r2, r3
10001634:	d10b      	bne.n	1000164e <XMC_UART_CH_Transmit+0x26>
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetDataOutputMode() \n\n\n
 */
__STATIC_INLINE XMC_USIC_CH_TBUF_STATUS_t XMC_USIC_CH_GetTransmitBufferStatus(XMC_USIC_CH_t *const channel)
{
  return (XMC_USIC_CH_TBUF_STATUS_t)(channel->TCSR & USIC_CH_TCSR_TDV_Msk);
10001636:	227f      	movs	r2, #127	; 0x7f
10001638:	6b83      	ldr	r3, [r0, #56]	; 0x38
1000163a:	4393      	bics	r3, r2
  {
    /* Wait till the Transmit Buffer is free for transmission */
    while(XMC_USIC_CH_GetTransmitBufferStatus(channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
1000163c:	b2db      	uxtb	r3, r3
1000163e:	2b80      	cmp	r3, #128	; 0x80
10001640:	d0fa      	beq.n	10001638 <XMC_UART_CH_Transmit+0x10>
 * \par<b>Related APIs:</b><BR>
 * XMC_UART_CH_DisableEvent(),  XMC_UART_CH_GetStatusFlag()\n\n\n
 */
__STATIC_INLINE void XMC_UART_CH_ClearStatusFlag(XMC_USIC_CH_t *const channel, const uint32_t flag)
{
  channel->PSCR = flag;
10001642:	2380      	movs	r3, #128	; 0x80
10001644:	019b      	lsls	r3, r3, #6
10001646:	64c3      	str	r3, [r0, #76]	; 0x4c
  
    /* Clear the Transmit Buffer indication flag */
    XMC_UART_CH_ClearStatusFlag(channel, (uint32_t)XMC_UART_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION);
  
    /*Transmit data */
    channel->TBUF[0U] = data;
10001648:	2380      	movs	r3, #128	; 0x80
1000164a:	50c1      	str	r1, [r0, r3]
  }
  else
  {
    channel->IN[0U] = data;
  }
}
1000164c:	4770      	bx	lr
    /*Transmit data */
    channel->TBUF[0U] = data;
  }
  else
  {
    channel->IN[0U] = data;
1000164e:	23c0      	movs	r3, #192	; 0xc0
10001650:	005b      	lsls	r3, r3, #1
10001652:	50c1      	str	r1, [r0, r3]
10001654:	e7fa      	b.n	1000164c <XMC_UART_CH_Transmit+0x24>
10001656:	46c0      	nop			; (mov r8, r8)

10001658 <XMC_USIC_CH_Enable>:

void XMC_USIC_CH_Enable(XMC_USIC_CH_t *const channel)
{
  XMC_ASSERT("XMC_USIC_CH_Enable: channel not valid", XMC_USIC_IsChannelValid(channel));

  if ((channel == XMC_USIC0_CH0) || (channel == XMC_USIC0_CH1))
10001658:	2390      	movs	r3, #144	; 0x90
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

void XMC_USIC_CH_Enable(XMC_USIC_CH_t *const channel)
{
1000165a:	b510      	push	{r4, lr}
  XMC_ASSERT("XMC_USIC_CH_Enable: channel not valid", XMC_USIC_IsChannelValid(channel));

  if ((channel == XMC_USIC0_CH0) || (channel == XMC_USIC0_CH1))
1000165c:	05db      	lsls	r3, r3, #23
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

void XMC_USIC_CH_Enable(XMC_USIC_CH_t *const channel)
{
1000165e:	1e04      	subs	r4, r0, #0
  XMC_ASSERT("XMC_USIC_CH_Enable: channel not valid", XMC_USIC_IsChannelValid(channel));

  if ((channel == XMC_USIC0_CH0) || (channel == XMC_USIC0_CH1))
10001660:	429c      	cmp	r4, r3
10001662:	d00d      	beq.n	10001680 <XMC_USIC_CH_Enable+0x28>
10001664:	4b08      	ldr	r3, [pc, #32]	; (10001688 <XMC_USIC_CH_Enable+0x30>)
10001666:	4298      	cmp	r0, r3
10001668:	d00a      	beq.n	10001680 <XMC_USIC_CH_Enable+0x28>
  {
    XMC_ASSERT("USIC module not available", 0U/*Always*/);
  }

  /* USIC channel switched on*/
  channel->KSCFG = (USIC_CH_KSCFG_MODEN_Msk | USIC_CH_KSCFG_BPMODEN_Msk);
1000166a:	2303      	movs	r3, #3
  while ((channel->KSCFG & USIC_CH_KSCFG_MODEN_Msk) == 0U)
1000166c:	2201      	movs	r2, #1
  {
    XMC_ASSERT("USIC module not available", 0U/*Always*/);
  }

  /* USIC channel switched on*/
  channel->KSCFG = (USIC_CH_KSCFG_MODEN_Msk | USIC_CH_KSCFG_BPMODEN_Msk);
1000166e:	60e3      	str	r3, [r4, #12]
  while ((channel->KSCFG & USIC_CH_KSCFG_MODEN_Msk) == 0U)
10001670:	68e3      	ldr	r3, [r4, #12]
10001672:	421a      	tst	r2, r3
10001674:	d0fc      	beq.n	10001670 <XMC_USIC_CH_Enable+0x18>
  {
    /* Wait till the channel is enabled */
  }

  /* Set USIC channel in IDLE mode */
  channel->CCR &= (uint32_t)~USIC_CH_CCR_MODE_Msk;
10001676:	220f      	movs	r2, #15
10001678:	6c23      	ldr	r3, [r4, #64]	; 0x40
1000167a:	4393      	bics	r3, r2
1000167c:	6423      	str	r3, [r4, #64]	; 0x40
}
1000167e:	bd10      	pop	{r4, pc}
void XMC_USIC_Enable(XMC_USIC_t *const usic)
{
  if (usic == USIC0)
  {
#if defined(CLOCK_GATING_SUPPORTED)
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_USIC0);
10001680:	2008      	movs	r0, #8
10001682:	f7ff fd75 	bl	10001170 <XMC_SCU_CLOCK_UngatePeripheralClock>
10001686:	e7f0      	b.n	1000166a <XMC_USIC_CH_Enable+0x12>
10001688:	48000200 	.word	0x48000200

1000168c <XMC_USIC_CH_SetBaudrate>:
{
  channel->KSCFG = (uint32_t)((channel->KSCFG & (~USIC_CH_KSCFG_MODEN_Msk)) | USIC_CH_KSCFG_BPMODEN_Msk);
}

XMC_USIC_CH_STATUS_t XMC_USIC_CH_SetBaudrate(XMC_USIC_CH_t *const channel, uint32_t rate, uint32_t oversampling)
{
1000168c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000168e:	465f      	mov	r7, fp
10001690:	4656      	mov	r6, sl
10001692:	464d      	mov	r5, r9
10001694:	4644      	mov	r4, r8
10001696:	b4f0      	push	{r4, r5, r6, r7}
                    
    status = XMC_USIC_CH_STATUS_OK;
  }
  else 
  {
    status = XMC_USIC_CH_STATUS_ERROR;
10001698:	2301      	movs	r3, #1
{
  channel->KSCFG = (uint32_t)((channel->KSCFG & (~USIC_CH_KSCFG_MODEN_Msk)) | USIC_CH_KSCFG_BPMODEN_Msk);
}

XMC_USIC_CH_STATUS_t XMC_USIC_CH_SetBaudrate(XMC_USIC_CH_t *const channel, uint32_t rate, uint32_t oversampling)
{
1000169a:	b083      	sub	sp, #12
  
  uint32_t pdiv_frac;
  uint32_t pdiv_frac_min;

  /* The rate and peripheral clock are divided by 100 to be able to use only 32bit arithmetic */
  if ((rate >= 100U) && (oversampling != 0U))
1000169c:	2963      	cmp	r1, #99	; 0x63
1000169e:	d901      	bls.n	100016a4 <XMC_USIC_CH_SetBaudrate+0x18>
100016a0:	2a00      	cmp	r2, #0
100016a2:	d107      	bne.n	100016b4 <XMC_USIC_CH_SetBaudrate+0x28>
  {
    status = XMC_USIC_CH_STATUS_ERROR;
  }
  
  return status;
}
100016a4:	1c18      	adds	r0, r3, #0
100016a6:	b003      	add	sp, #12
100016a8:	bc3c      	pop	{r2, r3, r4, r5}
100016aa:	4690      	mov	r8, r2
100016ac:	4699      	mov	r9, r3
100016ae:	46a2      	mov	sl, r4
100016b0:	46ab      	mov	fp, r5
100016b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
100016b4:	1c17      	adds	r7, r2, #0
100016b6:	1c0c      	adds	r4, r1, #0
100016b8:	9201      	str	r2, [sp, #4]
100016ba:	9000      	str	r0, [sp, #0]
  uint32_t pdiv_frac_min;

  /* The rate and peripheral clock are divided by 100 to be able to use only 32bit arithmetic */
  if ((rate >= 100U) && (oversampling != 0U))
  {
    peripheral_clock = XMC_SCU_CLOCK_GetPeripheralClockFrequency() / 100U;
100016bc:	f7ff fe02 	bl	100012c4 <XMC_SCU_CLOCK_GetPeripheralClockFrequency>
100016c0:	2164      	movs	r1, #100	; 0x64
100016c2:	f7ff ff61 	bl	10001588 <__aeabi_uidiv>
    rate = rate / 100U;
100016c6:	2164      	movs	r1, #100	; 0x64
  uint32_t pdiv_frac_min;

  /* The rate and peripheral clock are divided by 100 to be able to use only 32bit arithmetic */
  if ((rate >= 100U) && (oversampling != 0U))
  {
    peripheral_clock = XMC_SCU_CLOCK_GetPeripheralClockFrequency() / 100U;
100016c8:	1c06      	adds	r6, r0, #0
    rate = rate / 100U;
100016ca:	1c20      	adds	r0, r4, #0
100016cc:	f7ff ff5c 	bl	10001588 <__aeabi_uidiv>

    clock_divider_min = 1U;
    pdiv_int_min = 1U;
    pdiv_frac_min = 0x3ffU;
100016d0:	4b17      	ldr	r3, [pc, #92]	; (10001730 <XMC_USIC_CH_SetBaudrate+0xa4>)
100016d2:	4347      	muls	r7, r0
100016d4:	4699      	mov	r9, r3
  {
    peripheral_clock = XMC_SCU_CLOCK_GetPeripheralClockFrequency() / 100U;
    rate = rate / 100U;

    clock_divider_min = 1U;
    pdiv_int_min = 1U;
100016d6:	2301      	movs	r3, #1
    pdiv_frac_min = 0x3ffU;

    for(clock_divider = 1023U; clock_divider > 0U; --clock_divider)
100016d8:	464c      	mov	r4, r9
  {
    peripheral_clock = XMC_SCU_CLOCK_GetPeripheralClockFrequency() / 100U;
    rate = rate / 100U;

    clock_divider_min = 1U;
    pdiv_int_min = 1U;
100016da:	469a      	mov	sl, r3
  if ((rate >= 100U) && (oversampling != 0U))
  {
    peripheral_clock = XMC_SCU_CLOCK_GetPeripheralClockFrequency() / 100U;
    rate = rate / 100U;

    clock_divider_min = 1U;
100016dc:	469b      	mov	fp, r3
    {
      pdiv = ((peripheral_clock * clock_divider) / (rate * oversampling));
      pdiv_int = pdiv >> 10U;
      pdiv_frac = pdiv & 0x3ffU;

      if ((pdiv_int < 1024U) && (pdiv_frac < pdiv_frac_min))
100016de:	46c8      	mov	r8, r9
100016e0:	02b5      	lsls	r5, r6, #10
100016e2:	1bad      	subs	r5, r5, r6
    pdiv_int_min = 1U;
    pdiv_frac_min = 0x3ffU;

    for(clock_divider = 1023U; clock_divider > 0U; --clock_divider)
    {
      pdiv = ((peripheral_clock * clock_divider) / (rate * oversampling));
100016e4:	1c28      	adds	r0, r5, #0
100016e6:	1c39      	adds	r1, r7, #0
100016e8:	f7ff ff4e 	bl	10001588 <__aeabi_uidiv>
      pdiv_int = pdiv >> 10U;
100016ec:	0a83      	lsrs	r3, r0, #10
      pdiv_frac = pdiv & 0x3ffU;

      if ((pdiv_int < 1024U) && (pdiv_frac < pdiv_frac_min))
100016ee:	4543      	cmp	r3, r8
100016f0:	d806      	bhi.n	10001700 <XMC_USIC_CH_SetBaudrate+0x74>

    for(clock_divider = 1023U; clock_divider > 0U; --clock_divider)
    {
      pdiv = ((peripheral_clock * clock_divider) / (rate * oversampling));
      pdiv_int = pdiv >> 10U;
      pdiv_frac = pdiv & 0x3ffU;
100016f2:	0580      	lsls	r0, r0, #22
100016f4:	0d80      	lsrs	r0, r0, #22

      if ((pdiv_int < 1024U) && (pdiv_frac < pdiv_frac_min))
100016f6:	4548      	cmp	r0, r9
100016f8:	d202      	bcs.n	10001700 <XMC_USIC_CH_SetBaudrate+0x74>
100016fa:	4681      	mov	r9, r0
100016fc:	469a      	mov	sl, r3
100016fe:	46a3      	mov	fp, r4

    clock_divider_min = 1U;
    pdiv_int_min = 1U;
    pdiv_frac_min = 0x3ffU;

    for(clock_divider = 1023U; clock_divider > 0U; --clock_divider)
10001700:	3c01      	subs	r4, #1
10001702:	1bad      	subs	r5, r5, r6
10001704:	2c00      	cmp	r4, #0
10001706:	d1ed      	bne.n	100016e4 <XMC_USIC_CH_SetBaudrate+0x58>
        pdiv_int_min = pdiv_int;
        clock_divider_min = clock_divider;
      }
    }

    channel->FDR = XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_FRACTIONAL |
10001708:	2380      	movs	r3, #128	; 0x80
1000170a:	465a      	mov	r2, fp
1000170c:	9800      	ldr	r0, [sp, #0]
1000170e:	021b      	lsls	r3, r3, #8
10001710:	4313      	orrs	r3, r2
10001712:	6103      	str	r3, [r0, #16]

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
10001714:	9a01      	ldr	r2, [sp, #4]
    }

    channel->FDR = XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_FRACTIONAL |
                   (clock_divider_min << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
10001716:	6941      	ldr	r1, [r0, #20]
10001718:	4b06      	ldr	r3, [pc, #24]	; (10001734 <XMC_USIC_CH_SetBaudrate+0xa8>)
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
1000171a:	3a01      	subs	r2, #1
1000171c:	0292      	lsls	r2, r2, #10
    }

    channel->FDR = XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_FRACTIONAL |
                   (clock_divider_min << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
1000171e:	400b      	ands	r3, r1
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
10001720:	4313      	orrs	r3, r2
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
                   ((pdiv_int_min - 1U) << USIC_CH_BRG_PDIV_Pos);
10001722:	4652      	mov	r2, sl
10001724:	3a01      	subs	r2, #1
10001726:	0412      	lsls	r2, r2, #16

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
10001728:	4313      	orrs	r3, r2
    }

    channel->FDR = XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_FRACTIONAL |
                   (clock_divider_min << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
1000172a:	6143      	str	r3, [r0, #20]
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
                   ((pdiv_int_min - 1U) << USIC_CH_BRG_PDIV_Pos);
                    
    status = XMC_USIC_CH_STATUS_OK;
1000172c:	2300      	movs	r3, #0
1000172e:	e7b9      	b.n	100016a4 <XMC_USIC_CH_SetBaudrate+0x18>
10001730:	000003ff 	.word	0x000003ff
10001734:	fc0080ef 	.word	0xfc0080ef

10001738 <XMC_USIC_CH_TXFIFO_Configure>:

void XMC_USIC_CH_TXFIFO_Configure(XMC_USIC_CH_t *const channel,
                                  const uint32_t data_pointer,
                                  const XMC_USIC_CH_FIFO_SIZE_t size,
                                  const uint32_t limit)
{
10001738:	b570      	push	{r4, r5, r6, lr}
  /* Disable FIFO */
  channel->TBCTR &= (uint32_t)~USIC_CH_TBCTR_SIZE_Msk;
1000173a:	2584      	movs	r5, #132	; 0x84
1000173c:	006d      	lsls	r5, r5, #1
1000173e:	5946      	ldr	r6, [r0, r5]
10001740:	4c06      	ldr	r4, [pc, #24]	; (1000175c <XMC_USIC_CH_TXFIFO_Configure+0x24>)
  channel->TBCTR = (uint32_t)(channel->TBCTR & (uint32_t)~(USIC_CH_TBCTR_LIMIT_Msk |
                                                           USIC_CH_TBCTR_DPTR_Msk |
                                                           USIC_CH_TBCTR_SIZE_Msk)) |
                   (uint32_t)((limit << USIC_CH_TBCTR_LIMIT_Pos) |
                   (data_pointer << USIC_CH_TBCTR_DPTR_Pos) |
                   ((uint32_t)size << USIC_CH_TBCTR_SIZE_Pos));
10001742:	0612      	lsls	r2, r2, #24
                                  const uint32_t data_pointer,
                                  const XMC_USIC_CH_FIFO_SIZE_t size,
                                  const uint32_t limit)
{
  /* Disable FIFO */
  channel->TBCTR &= (uint32_t)~USIC_CH_TBCTR_SIZE_Msk;
10001744:	4034      	ands	r4, r6
10001746:	5144      	str	r4, [r0, r5]
  /* LOF = 0, A standard transmit buffer event occurs when the filling level equals the limit value and gets
   * lower due to transmission of a data word
   * STBTEN = 0, the trigger of the standard transmit buffer event is based on the transition of the fill level
   *  from equal to below the limit, not the fact being below
   */
  channel->TBCTR = (uint32_t)(channel->TBCTR & (uint32_t)~(USIC_CH_TBCTR_LIMIT_Msk |
10001748:	5946      	ldr	r6, [r0, r5]
1000174a:	4c05      	ldr	r4, [pc, #20]	; (10001760 <XMC_USIC_CH_TXFIFO_Configure+0x28>)
                                                           USIC_CH_TBCTR_DPTR_Msk |
                                                           USIC_CH_TBCTR_SIZE_Msk)) |
                   (uint32_t)((limit << USIC_CH_TBCTR_LIMIT_Pos) |
1000174c:	021b      	lsls	r3, r3, #8
  /* LOF = 0, A standard transmit buffer event occurs when the filling level equals the limit value and gets
   * lower due to transmission of a data word
   * STBTEN = 0, the trigger of the standard transmit buffer event is based on the transition of the fill level
   *  from equal to below the limit, not the fact being below
   */
  channel->TBCTR = (uint32_t)(channel->TBCTR & (uint32_t)~(USIC_CH_TBCTR_LIMIT_Msk |
1000174e:	4034      	ands	r4, r6
10001750:	4321      	orrs	r1, r4
10001752:	430a      	orrs	r2, r1
                                                           USIC_CH_TBCTR_DPTR_Msk |
                                                           USIC_CH_TBCTR_SIZE_Msk)) |
10001754:	4313      	orrs	r3, r2
  /* LOF = 0, A standard transmit buffer event occurs when the filling level equals the limit value and gets
   * lower due to transmission of a data word
   * STBTEN = 0, the trigger of the standard transmit buffer event is based on the transition of the fill level
   *  from equal to below the limit, not the fact being below
   */
  channel->TBCTR = (uint32_t)(channel->TBCTR & (uint32_t)~(USIC_CH_TBCTR_LIMIT_Msk |
10001756:	5143      	str	r3, [r0, r5]
                                                           USIC_CH_TBCTR_DPTR_Msk |
                                                           USIC_CH_TBCTR_SIZE_Msk)) |
                   (uint32_t)((limit << USIC_CH_TBCTR_LIMIT_Pos) |
                   (data_pointer << USIC_CH_TBCTR_DPTR_Pos) |
                   ((uint32_t)size << USIC_CH_TBCTR_SIZE_Pos));
}
10001758:	bd70      	pop	{r4, r5, r6, pc}
1000175a:	46c0      	nop			; (mov r8, r8)
1000175c:	f8ffffff 	.word	0xf8ffffff
10001760:	f8ffc0c0 	.word	0xf8ffc0c0

10001764 <XMC_USIC_CH_RXFIFO_Configure>:

void XMC_USIC_CH_RXFIFO_Configure(XMC_USIC_CH_t *const channel,
                                  const uint32_t data_pointer,
                                  const XMC_USIC_CH_FIFO_SIZE_t size,
                                  const uint32_t limit)
{
10001764:	b570      	push	{r4, r5, r6, lr}
  /* Disable FIFO */
  channel->RBCTR &= (uint32_t)~USIC_CH_RBCTR_SIZE_Msk;
10001766:	2686      	movs	r6, #134	; 0x86
10001768:	0076      	lsls	r6, r6, #1
1000176a:	5985      	ldr	r5, [r0, r6]
1000176c:	4c07      	ldr	r4, [pc, #28]	; (1000178c <XMC_USIC_CH_RXFIFO_Configure+0x28>)
  channel->RBCTR = (uint32_t)((channel->RBCTR & (uint32_t)~(USIC_CH_RBCTR_LIMIT_Msk |
                                                            USIC_CH_RBCTR_DPTR_Msk |
                                                            USIC_CH_RBCTR_LOF_Msk)) |
                   ((limit << USIC_CH_RBCTR_LIMIT_Pos) |
                   (data_pointer << USIC_CH_RBCTR_DPTR_Pos) |
                   ((uint32_t)size << USIC_CH_RBCTR_SIZE_Pos) |
1000176e:	0612      	lsls	r2, r2, #24
                                  const uint32_t data_pointer,
                                  const XMC_USIC_CH_FIFO_SIZE_t size,
                                  const uint32_t limit)
{
  /* Disable FIFO */
  channel->RBCTR &= (uint32_t)~USIC_CH_RBCTR_SIZE_Msk;
10001770:	402c      	ands	r4, r5
10001772:	5184      	str	r4, [r0, r6]

  /* LOF = 1, A standard receive buffer event occurs when the filling level equals the limit value and gets bigger
   *  due to the reception of a new data word
   */
  channel->RBCTR = (uint32_t)((channel->RBCTR & (uint32_t)~(USIC_CH_RBCTR_LIMIT_Msk |
10001774:	5984      	ldr	r4, [r0, r6]
10001776:	4d06      	ldr	r5, [pc, #24]	; (10001790 <XMC_USIC_CH_RXFIFO_Configure+0x2c>)
                                                            USIC_CH_RBCTR_DPTR_Msk |
                                                            USIC_CH_RBCTR_LOF_Msk)) |
                   ((limit << USIC_CH_RBCTR_LIMIT_Pos) |
10001778:	021b      	lsls	r3, r3, #8
  channel->RBCTR &= (uint32_t)~USIC_CH_RBCTR_SIZE_Msk;

  /* LOF = 1, A standard receive buffer event occurs when the filling level equals the limit value and gets bigger
   *  due to the reception of a new data word
   */
  channel->RBCTR = (uint32_t)((channel->RBCTR & (uint32_t)~(USIC_CH_RBCTR_LIMIT_Msk |
1000177a:	4025      	ands	r5, r4
1000177c:	2480      	movs	r4, #128	; 0x80
1000177e:	0564      	lsls	r4, r4, #21
10001780:	432c      	orrs	r4, r5
10001782:	4321      	orrs	r1, r4
10001784:	430a      	orrs	r2, r1
10001786:	4313      	orrs	r3, r2
10001788:	5183      	str	r3, [r0, r6]
                                                            USIC_CH_RBCTR_LOF_Msk)) |
                   ((limit << USIC_CH_RBCTR_LIMIT_Pos) |
                   (data_pointer << USIC_CH_RBCTR_DPTR_Pos) |
                   ((uint32_t)size << USIC_CH_RBCTR_SIZE_Pos) |
                   (uint32_t)USIC_CH_RBCTR_LOF_Msk));
}
1000178a:	bd70      	pop	{r4, r5, r6, pc}
1000178c:	f8ffffff 	.word	0xf8ffffff
10001790:	efffc0c0 	.word	0xefffc0c0

10001794 <XMC_USIC_CH_SetInterruptNodePointer>:
}

void XMC_USIC_CH_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
                                         const XMC_USIC_CH_INTERRUPT_NODE_POINTER_t interrupt_node,
                                         const uint32_t service_request)
{
10001794:	b510      	push	{r4, lr}
  channel->INPR = (uint32_t)((channel->INPR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
10001796:	2407      	movs	r4, #7
10001798:	408c      	lsls	r4, r1
                  (service_request << (uint32_t)interrupt_node));
1000179a:	408a      	lsls	r2, r1

void XMC_USIC_CH_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
                                         const XMC_USIC_CH_INTERRUPT_NODE_POINTER_t interrupt_node,
                                         const uint32_t service_request)
{
  channel->INPR = (uint32_t)((channel->INPR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
1000179c:	6983      	ldr	r3, [r0, #24]
1000179e:	43a3      	bics	r3, r4
100017a0:	4313      	orrs	r3, r2
100017a2:	6183      	str	r3, [r0, #24]
                  (service_request << (uint32_t)interrupt_node));
}
100017a4:	bd10      	pop	{r4, pc}
100017a6:	46c0      	nop			; (mov r8, r8)

100017a8 <XMC_VADC_GLOBAL_Init>:
   * Please refer to the XMC1000 Errata sheet V1.4 released 2014-06 Errata ID : ADC_AI.003 Additonal bit to enable ADC
   * function
   */

#if defined (COMPARATOR)
  COMPARATOR->ORCCTRL = (uint32_t)0xFF;
100017a8:	22ff      	movs	r2, #255	; 0xff
}


/* API to initialize global resources */
void XMC_VADC_GLOBAL_Init(XMC_VADC_GLOBAL_t *const global_ptr, const XMC_VADC_GLOBAL_CONFIG_t *config)
{
100017aa:	b538      	push	{r3, r4, r5, lr}
100017ac:	1c0d      	adds	r5, r1, #0
100017ae:	1c04      	adds	r4, r0, #0
   * Please refer to the XMC1000 Errata sheet V1.4 released 2014-06 Errata ID : ADC_AI.003 Additonal bit to enable ADC
   * function
   */

#if defined (COMPARATOR)
  COMPARATOR->ORCCTRL = (uint32_t)0xFF;
100017b0:	4b0d      	ldr	r3, [pc, #52]	; (100017e8 <XMC_VADC_GLOBAL_Init+0x40>)
#endif

#if defined(CLOCK_GATING_SUPPORTED)
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_VADC);
100017b2:	2001      	movs	r0, #1
   * Please refer to the XMC1000 Errata sheet V1.4 released 2014-06 Errata ID : ADC_AI.003 Additonal bit to enable ADC
   * function
   */

#if defined (COMPARATOR)
  COMPARATOR->ORCCTRL = (uint32_t)0xFF;
100017b4:	601a      	str	r2, [r3, #0]
#endif

#if defined(CLOCK_GATING_SUPPORTED)
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_VADC);
100017b6:	f7ff fcdb 	bl	10001170 <XMC_SCU_CLOCK_UngatePeripheralClock>
  XMC_ASSERT("XMC_VADC_GLOBAL_Init:Wrong Module Pointer", (global_ptr == VADC))

  /* Enable the VADC module*/
  XMC_VADC_GLOBAL_EnableModule();

  global_ptr->CLC = (uint32_t)(config->clc);
100017ba:	696b      	ldr	r3, [r5, #20]
100017bc:	6023      	str	r3, [r4, #0]

  /* Clock configuration */

#if (XMC_VADC_GROUP_AVAILABLE == 1U)
  global_ptr->GLOBCFG  = (uint32_t)(config->clock_config.globcfg | (uint32_t)(VADC_GLOBCFG_DIVWC_Msk));
100017be:	2380      	movs	r3, #128	; 0x80
100017c0:	686a      	ldr	r2, [r5, #4]
100017c2:	021b      	lsls	r3, r3, #8
100017c4:	4313      	orrs	r3, r2
100017c6:	2280      	movs	r2, #128	; 0x80
100017c8:	50a3      	str	r3, [r4, r2]
#endif

  /* ICLASS-0 configuration */
  global_ptr->GLOBICLASS[0] = (uint32_t)(config->class0.globiclass);
100017ca:	23a0      	movs	r3, #160	; 0xa0
100017cc:	68aa      	ldr	r2, [r5, #8]
100017ce:	50e2      	str	r2, [r4, r3]

  /* ICLASS-1 configuration */
  global_ptr->GLOBICLASS[1] = (uint32_t)(config->class1.globiclass);
100017d0:	68ea      	ldr	r2, [r5, #12]
100017d2:	3304      	adds	r3, #4
100017d4:	50e2      	str	r2, [r4, r3]


  /*Result generation related configuration */
  global_ptr->GLOBRCR = (uint32_t)(config->globrcr);
100017d6:	692a      	ldr	r2, [r5, #16]
100017d8:	33dd      	adds	r3, #221	; 0xdd
100017da:	33ff      	adds	r3, #255	; 0xff
100017dc:	50e2      	str	r2, [r4, r3]

#if (XMC_VADC_BOUNDARY_AVAILABLE == 1U)

  /* Boundaries */
  global_ptr->GLOBBOUND = (uint32_t)(config->globbound);
100017de:	682a      	ldr	r2, [r5, #0]
100017e0:	3bc9      	subs	r3, #201	; 0xc9
100017e2:	3bff      	subs	r3, #255	; 0xff
100017e4:	50e2      	str	r2, [r4, r3]

  /* From the Errata sheet of XMC1100 V1.7*/
  XMC_VADC_CONV_ENABLE_FOR_XMC11 = 1U;
#endif

}
100017e6:	bd38      	pop	{r3, r4, r5, pc}
100017e8:	40010500 	.word	0x40010500

100017ec <XMC_VADC_GLOBAL_StartupCalibration>:
  VADC_G_TypeDef *group_ptr;
#endif
  
  XMC_ASSERT("XMC_VADC_GLOBAL_StartupCalibration:Wrong Module Pointer", (global_ptr == VADC))

  global_ptr->GLOBCFG |= (uint32_t)VADC_GLOBCFG_SUCAL_Msk;
100017ec:	2380      	movs	r3, #128	; 0x80
100017ee:	2180      	movs	r1, #128	; 0x80
100017f0:	58c2      	ldr	r2, [r0, r3]
100017f2:	0609      	lsls	r1, r1, #24
100017f4:	430a      	orrs	r2, r1
100017f6:	50c2      	str	r2, [r0, r3]
#if (XMC_VADC_GROUP_AVAILABLE == 1U)
  /* Loop until all active groups finish calibration */
  for(i=0U; i<XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
  {
    group_ptr = g_xmc_vadc_group_array[i];
    if ( (group_ptr->ARBCFG) & (uint32_t)VADC_G_ARBCFG_ANONS_Msk)
100017f8:	4a0c      	ldr	r2, [pc, #48]	; (1000182c <XMC_VADC_GLOBAL_StartupCalibration+0x40>)
100017fa:	58d1      	ldr	r1, [r2, r3]
100017fc:	23c0      	movs	r3, #192	; 0xc0
100017fe:	029b      	lsls	r3, r3, #10
10001800:	4219      	tst	r1, r3
10001802:	d005      	beq.n	10001810 <XMC_VADC_GLOBAL_StartupCalibration+0x24>
    {
      /* This group is active. Loop until it finishes calibration */
      while((group_ptr->ARBCFG) & (uint32_t)VADC_G_ARBCFG_CAL_Msk)
10001804:	2180      	movs	r1, #128	; 0x80
10001806:	2080      	movs	r0, #128	; 0x80
10001808:	0549      	lsls	r1, r1, #21
1000180a:	5813      	ldr	r3, [r2, r0]
1000180c:	420b      	tst	r3, r1
1000180e:	d1fc      	bne.n	1000180a <XMC_VADC_GLOBAL_StartupCalibration+0x1e>
#if (XMC_VADC_GROUP_AVAILABLE == 1U)
  /* Loop until all active groups finish calibration */
  for(i=0U; i<XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
  {
    group_ptr = g_xmc_vadc_group_array[i];
    if ( (group_ptr->ARBCFG) & (uint32_t)VADC_G_ARBCFG_ANONS_Msk)
10001810:	2380      	movs	r3, #128	; 0x80
10001812:	4a07      	ldr	r2, [pc, #28]	; (10001830 <XMC_VADC_GLOBAL_StartupCalibration+0x44>)
10001814:	58d1      	ldr	r1, [r2, r3]
10001816:	23c0      	movs	r3, #192	; 0xc0
10001818:	029b      	lsls	r3, r3, #10
1000181a:	4219      	tst	r1, r3
1000181c:	d005      	beq.n	1000182a <XMC_VADC_GLOBAL_StartupCalibration+0x3e>
    {
      /* This group is active. Loop until it finishes calibration */
      while((group_ptr->ARBCFG) & (uint32_t)VADC_G_ARBCFG_CAL_Msk)
1000181e:	2180      	movs	r1, #128	; 0x80
10001820:	2080      	movs	r0, #128	; 0x80
10001822:	0549      	lsls	r1, r1, #21
10001824:	5813      	ldr	r3, [r2, r0]
10001826:	420b      	tst	r3, r1
10001828:	d1fc      	bne.n	10001824 <XMC_VADC_GLOBAL_StartupCalibration+0x38>
         XMC_VADC_SHS_START_UP_CAL_ACTIVE )
  {
    /* NOP */
  }
#endif
}
1000182a:	4770      	bx	lr
1000182c:	48030400 	.word	0x48030400
10001830:	48030800 	.word	0x48030800

10001834 <XMC_VADC_GROUP_Init>:
    sample_time      = (uint32_t) config.sampling_phase_emux_channel;
    conv_mode        = (XMC_VADC_CONVMODE_t)config.conversion_mode_emux;
  }

  /* Determine the class */
  conv_class  = group_ptr->ICLASS[set_num];
10001834:	23a0      	movs	r3, #160	; 0xa0
10001836:	58c2      	ldr	r2, [r0, r3]
10001838:	469c      	mov	ip, r3

  /* Program the class register */
  conv_class &= ~(conv_mode_mask);
1000183a:	4b30      	ldr	r3, [pc, #192]	; (100018fc <XMC_VADC_GROUP_Init+0xc8>)
}

/* API to initialize an instance of group of VADC hardware */
#if (XMC_VADC_GROUP_AVAILABLE == 1U)  
void XMC_VADC_GROUP_Init( XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_GROUP_CONFIG_t *config)
{
1000183c:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Determine the class */
  conv_class  = group_ptr->ICLASS[set_num];

  /* Program the class register */
  conv_class &= ~(conv_mode_mask);
1000183e:	401a      	ands	r2, r3
10001840:	1c14      	adds	r4, r2, #0
  conv_class |= (uint32_t)((uint32_t) conv_mode << conv_mode_pos);
  conv_class &= ~(sample_time_mask);
10001842:	271f      	movs	r7, #31
10001844:	794a      	ldrb	r2, [r1, #5]

  /* Determine the class */
  conv_class  = group_ptr->ICLASS[set_num];

  /* Program the class register */
  conv_class &= ~(conv_mode_mask);
10001846:	4d2e      	ldr	r5, [pc, #184]	; (10001900 <XMC_VADC_GROUP_Init+0xcc>)
10001848:	0752      	lsls	r2, r2, #29
  conv_class |= (uint32_t)((uint32_t) conv_mode << conv_mode_pos);
1000184a:	0d52      	lsrs	r2, r2, #21
1000184c:	4322      	orrs	r2, r4
1000184e:	790c      	ldrb	r4, [r1, #4]
  conv_class &= ~(sample_time_mask);
10001850:	43ba      	bics	r2, r7
10001852:	06e4      	lsls	r4, r4, #27
  {
    conv_mode_pos    = (uint32_t) VADC_G_ICLASS_CMS_Pos;
    conv_mode_mask   = (uint32_t) VADC_G_ICLASS_CMS_Msk;
    sample_time_pos  = (uint32_t) VADC_G_ICLASS_STCS_Pos;
    sample_time_mask = (uint32_t) VADC_G_ICLASS_STCS_Msk;
    sample_time      = (uint32_t) config.sample_time_std_conv;
10001854:	0ee4      	lsrs	r4, r4, #27

  /* Program the class register */
  conv_class &= ~(conv_mode_mask);
  conv_class |= (uint32_t)((uint32_t) conv_mode << conv_mode_pos);
  conv_class &= ~(sample_time_mask);
  conv_class |= (uint32_t)(sample_time <<  sample_time_pos);
10001856:	4322      	orrs	r2, r4
  group_ptr->ICLASS[set_num] = conv_class;
10001858:	4664      	mov	r4, ip
1000185a:	5102      	str	r2, [r0, r4]
    sample_time      = (uint32_t) config.sampling_phase_emux_channel;
    conv_mode        = (XMC_VADC_CONVMODE_t)config.conversion_mode_emux;
  }

  /* Determine the class */
  conv_class  = group_ptr->ICLASS[set_num];
1000185c:	5902      	ldr	r2, [r0, r4]

  /* Program the class register */
  conv_class &= ~(conv_mode_mask);
  conv_class |= (uint32_t)((uint32_t) conv_mode << conv_mode_pos);
  conv_class &= ~(sample_time_mask);
1000185e:	4e29      	ldr	r6, [pc, #164]	; (10001904 <XMC_VADC_GROUP_Init+0xd0>)

  /* Determine the class */
  conv_class  = group_ptr->ICLASS[set_num];

  /* Program the class register */
  conv_class &= ~(conv_mode_mask);
10001860:	402a      	ands	r2, r5
10001862:	1c14      	adds	r4, r2, #0
10001864:	79ca      	ldrb	r2, [r1, #7]
  group_ptr->BOUND = config->g_bound;

  /* External mux configuration */
  XMC_VADC_GROUP_ExternalMuxControlInit(group_ptr,config->emux_config);

}
10001866:	0752      	lsls	r2, r2, #29
  /* Determine the class */
  conv_class  = group_ptr->ICLASS[set_num];

  /* Program the class register */
  conv_class &= ~(conv_mode_mask);
  conv_class |= (uint32_t)((uint32_t) conv_mode << conv_mode_pos);
10001868:	0952      	lsrs	r2, r2, #5
1000186a:	4322      	orrs	r2, r4
1000186c:	798c      	ldrb	r4, [r1, #6]
  conv_class &= ~(sample_time_mask);
1000186e:	4032      	ands	r2, r6
10001870:	06e4      	lsls	r4, r4, #27
  conv_class |= (uint32_t)(sample_time <<  sample_time_pos);
10001872:	0ae4      	lsrs	r4, r4, #11
10001874:	4322      	orrs	r2, r4
  group_ptr->ICLASS[set_num] = conv_class;
10001876:	4664      	mov	r4, ip
10001878:	5102      	str	r2, [r0, r4]
    sample_time      = (uint32_t) config.sampling_phase_emux_channel;
    conv_mode        = (XMC_VADC_CONVMODE_t)config.conversion_mode_emux;
  }

  /* Determine the class */
  conv_class  = group_ptr->ICLASS[set_num];
1000187a:	3404      	adds	r4, #4
1000187c:	5902      	ldr	r2, [r0, r4]

  /* Program the class register */
  conv_class &= ~(conv_mode_mask);
1000187e:	401a      	ands	r2, r3
10001880:	7a4b      	ldrb	r3, [r1, #9]
10001882:	075b      	lsls	r3, r3, #29
  conv_class |= (uint32_t)((uint32_t) conv_mode << conv_mode_pos);
10001884:	0d5b      	lsrs	r3, r3, #21
10001886:	4313      	orrs	r3, r2
10001888:	7a0a      	ldrb	r2, [r1, #8]
  conv_class &= ~(sample_time_mask);
1000188a:	43bb      	bics	r3, r7
1000188c:	06d2      	lsls	r2, r2, #27
  {
    conv_mode_pos    = (uint32_t) VADC_G_ICLASS_CMS_Pos;
    conv_mode_mask   = (uint32_t) VADC_G_ICLASS_CMS_Msk;
    sample_time_pos  = (uint32_t) VADC_G_ICLASS_STCS_Pos;
    sample_time_mask = (uint32_t) VADC_G_ICLASS_STCS_Msk;
    sample_time      = (uint32_t) config.sample_time_std_conv;
1000188e:	0ed2      	lsrs	r2, r2, #27

  /* Program the class register */
  conv_class &= ~(conv_mode_mask);
  conv_class |= (uint32_t)((uint32_t) conv_mode << conv_mode_pos);
  conv_class &= ~(sample_time_mask);
  conv_class |= (uint32_t)(sample_time <<  sample_time_pos);
10001890:	4313      	orrs	r3, r2
  group_ptr->ICLASS[set_num] = conv_class;
10001892:	5103      	str	r3, [r0, r4]
    sample_time      = (uint32_t) config.sampling_phase_emux_channel;
    conv_mode        = (XMC_VADC_CONVMODE_t)config.conversion_mode_emux;
  }

  /* Determine the class */
  conv_class  = group_ptr->ICLASS[set_num];
10001894:	5903      	ldr	r3, [r0, r4]
10001896:	7a8a      	ldrb	r2, [r1, #10]

  /* Program the class register */
  conv_class &= ~(conv_mode_mask);
10001898:	401d      	ands	r5, r3
1000189a:	7acb      	ldrb	r3, [r1, #11]
1000189c:	06d2      	lsls	r2, r2, #27
1000189e:	075b      	lsls	r3, r3, #29
  conv_class |= (uint32_t)((uint32_t) conv_mode << conv_mode_pos);
100018a0:	095b      	lsrs	r3, r3, #5
100018a2:	432b      	orrs	r3, r5
  conv_class &= ~(sample_time_mask);
100018a4:	4033      	ands	r3, r6
  conv_class |= (uint32_t)(sample_time <<  sample_time_pos);
100018a6:	0ad2      	lsrs	r2, r2, #11
100018a8:	4313      	orrs	r3, r2
  group_ptr->ICLASS[set_num] = conv_class;
100018aa:	5103      	str	r3, [r0, r4]
  XMC_VADC_GROUP_InputClassInit(group_ptr, config->class0, XMC_VADC_GROUP_CONV_STD, 0U);
  XMC_VADC_GROUP_InputClassInit(group_ptr, config->class0, XMC_VADC_GROUP_CONV_EMUX, 0U);
  XMC_VADC_GROUP_InputClassInit(group_ptr, config->class1, XMC_VADC_GROUP_CONV_STD, 1U);
  XMC_VADC_GROUP_InputClassInit(group_ptr, config->class1, XMC_VADC_GROUP_CONV_EMUX, 1U);

  group_ptr->ARBCFG = config->g_arbcfg;
100018ac:	2380      	movs	r3, #128	; 0x80
100018ae:	690a      	ldr	r2, [r1, #16]
100018b0:	50c2      	str	r2, [r0, r3]

  group_ptr->BOUND = config->g_bound;
100018b2:	68ca      	ldr	r2, [r1, #12]
100018b4:	3338      	adds	r3, #56	; 0x38
100018b6:	50c2      	str	r2, [r0, r3]
100018b8:	78cb      	ldrb	r3, [r1, #3]
100018ba:	071d      	lsls	r5, r3, #28
100018bc:	06df      	lsls	r7, r3, #27
100018be:	069c      	lsls	r4, r3, #26
100018c0:	065b      	lsls	r3, r3, #25
100018c2:	0fda      	lsrs	r2, r3, #31
100018c4:	884b      	ldrh	r3, [r1, #2]
100018c6:	0fff      	lsrs	r7, r7, #31
100018c8:	059b      	lsls	r3, r3, #22
  uint32_t   emux_config;

  XMC_ASSERT("XMC_VADC_GROUP_ExternalMuxControlInit:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))

  emux_config = ((uint32_t)emux_cfg.starting_external_channel << (uint32_t)VADC_G_EMUXCTR_EMUXSET_Pos) |
              ((uint32_t)emux_cfg.connected_channel << (uint32_t)VADC_G_EMUXCTR_EMUXCH_Pos);
100018ca:	099e      	lsrs	r6, r3, #6
100018cc:	780b      	ldrb	r3, [r1, #0]
100018ce:	2180      	movs	r1, #128	; 0x80
100018d0:	075b      	lsls	r3, r3, #29
{
  uint32_t   emux_config;

  XMC_ASSERT("XMC_VADC_GROUP_ExternalMuxControlInit:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))

  emux_config = ((uint32_t)emux_cfg.starting_external_channel << (uint32_t)VADC_G_EMUXCTR_EMUXSET_Pos) |
100018d2:	0f5b      	lsrs	r3, r3, #29
100018d4:	4333      	orrs	r3, r6
              ((uint32_t)emux_cfg.connected_channel << (uint32_t)VADC_G_EMUXCTR_EMUXCH_Pos);

  group_ptr->EMUXCTR  = emux_config;
100018d6:	26f8      	movs	r6, #248	; 0xf8
100018d8:	0076      	lsls	r6, r6, #1
100018da:	5183      	str	r3, [r0, r6]
                ((uint32_t)emux_cfg.stce_usage << (uint32_t)VADC_G_EMUXCTR_EMXST_Pos);

#if (XMC_VADC_EMUX_CH_SEL_STYLE == 1U)
  emux_config |= ((uint32_t)emux_cfg.emux_channel_select_style << (uint32_t)VADC_G_EMUXCTR_EMXCSS_Pos);
#endif
  group_ptr->EMUXCTR  |= (emux_config | ((uint32_t)VADC_G_EMUXCTR_EMXWC_Msk)) ;
100018dc:	5983      	ldr	r3, [r0, r6]
100018de:	0609      	lsls	r1, r1, #24

  emux_config = ((uint32_t)emux_cfg.starting_external_channel << (uint32_t)VADC_G_EMUXCTR_EMUXSET_Pos) |
              ((uint32_t)emux_cfg.connected_channel << (uint32_t)VADC_G_EMUXCTR_EMUXCH_Pos);

  group_ptr->EMUXCTR  = emux_config;
  emux_config = ((uint32_t)emux_cfg.emux_coding << (uint32_t)VADC_G_EMUXCTR_EMXCOD_Pos)  |
100018e0:	073f      	lsls	r7, r7, #28
100018e2:	430b      	orrs	r3, r1
100018e4:	0fad      	lsrs	r5, r5, #30
100018e6:	433b      	orrs	r3, r7
                ((uint32_t)emux_cfg.emux_mode  << (uint32_t)VADC_G_EMUXCTR_EMUXMODE_Pos)|
100018e8:	06ad      	lsls	r5, r5, #26
100018ea:	0fe4      	lsrs	r4, r4, #31
100018ec:	432b      	orrs	r3, r5
                ((uint32_t)emux_cfg.stce_usage << (uint32_t)VADC_G_EMUXCTR_EMXST_Pos);
100018ee:	0764      	lsls	r4, r4, #29
100018f0:	4323      	orrs	r3, r4
100018f2:	1c19      	adds	r1, r3, #0

#if (XMC_VADC_EMUX_CH_SEL_STYLE == 1U)
  emux_config |= ((uint32_t)emux_cfg.emux_channel_select_style << (uint32_t)VADC_G_EMUXCTR_EMXCSS_Pos);
100018f4:	0793      	lsls	r3, r2, #30
#endif
  group_ptr->EMUXCTR  |= (emux_config | ((uint32_t)VADC_G_EMUXCTR_EMXWC_Msk)) ;
100018f6:	430b      	orrs	r3, r1
100018f8:	5183      	str	r3, [r0, r6]

  /* External mux configuration */
  XMC_VADC_GROUP_ExternalMuxControlInit(group_ptr,config->emux_config);

}
100018fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
100018fc:	fffff8ff 	.word	0xfffff8ff
10001900:	f8ffffff 	.word	0xf8ffffff
10001904:	ffe0ffff 	.word	0xffe0ffff

10001908 <XMC_VADC_GROUP_InputClassInit>:

/* API to program conversion characteristics */
void XMC_VADC_GROUP_InputClassInit(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_GROUP_CLASS_t config,
                                          const XMC_VADC_GROUP_CONV_t conv_type, const uint32_t set_num)
{
10001908:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* 
   * Obtain the mask and position macros of the parameters based on what is being requested - Standard channels vs
   * external mux channels.
   */
  if (XMC_VADC_GROUP_CONV_STD == conv_type)
1000190a:	2a00      	cmp	r2, #0
1000190c:	d017      	beq.n	1000193e <XMC_VADC_GROUP_InputClassInit+0x36>
  {
    conv_mode_pos    = (uint32_t) VADC_G_ICLASS_CME_Pos;
    conv_mode_mask   = (uint32_t) VADC_G_ICLASS_CME_Msk;
    sample_time_pos  = (uint32_t) VADC_G_ICLASS_STCE_Pos;
    sample_time_mask = (uint32_t) VADC_G_ICLASS_STCE_Msk;
    sample_time      = (uint32_t) config.sampling_phase_emux_channel;
1000190e:	02ca      	lsls	r2, r1, #11
    conv_mode        = (XMC_VADC_CONVMODE_t)config.conversion_mode_emux;
10001910:	0149      	lsls	r1, r1, #5
  {
    conv_mode_pos    = (uint32_t) VADC_G_ICLASS_CME_Pos;
    conv_mode_mask   = (uint32_t) VADC_G_ICLASS_CME_Msk;
    sample_time_pos  = (uint32_t) VADC_G_ICLASS_STCE_Pos;
    sample_time_mask = (uint32_t) VADC_G_ICLASS_STCE_Msk;
    sample_time      = (uint32_t) config.sampling_phase_emux_channel;
10001912:	0ed5      	lsrs	r5, r2, #27
    conv_mode        = (XMC_VADC_CONVMODE_t)config.conversion_mode_emux;
10001914:	0f4a      	lsrs	r2, r1, #29
10001916:	2118      	movs	r1, #24
10001918:	2610      	movs	r6, #16
1000191a:	468c      	mov	ip, r1
1000191c:	4f0d      	ldr	r7, [pc, #52]	; (10001954 <XMC_VADC_GROUP_InputClassInit+0x4c>)
1000191e:	4c0e      	ldr	r4, [pc, #56]	; (10001958 <XMC_VADC_GROUP_InputClassInit+0x50>)
10001920:	009b      	lsls	r3, r3, #2
10001922:	18c3      	adds	r3, r0, r3
  }

  /* Determine the class */
  conv_class  = group_ptr->ICLASS[set_num];
10001924:	20a0      	movs	r0, #160	; 0xa0
10001926:	5819      	ldr	r1, [r3, r0]

  /* Program the class register */
  conv_class &= ~(conv_mode_mask);
10001928:	400c      	ands	r4, r1
  conv_class |= (uint32_t)((uint32_t) conv_mode << conv_mode_pos);
1000192a:	4661      	mov	r1, ip
1000192c:	408a      	lsls	r2, r1
1000192e:	1c11      	adds	r1, r2, #0
  conv_class &= ~(sample_time_mask);
  conv_class |= (uint32_t)(sample_time <<  sample_time_pos);
10001930:	1c2a      	adds	r2, r5, #0
10001932:	40b2      	lsls	r2, r6
  /* Determine the class */
  conv_class  = group_ptr->ICLASS[set_num];

  /* Program the class register */
  conv_class &= ~(conv_mode_mask);
  conv_class |= (uint32_t)((uint32_t) conv_mode << conv_mode_pos);
10001934:	4321      	orrs	r1, r4
  conv_class &= ~(sample_time_mask);
10001936:	4039      	ands	r1, r7
  conv_class |= (uint32_t)(sample_time <<  sample_time_pos);
10001938:	4311      	orrs	r1, r2
  group_ptr->ICLASS[set_num] = conv_class;
1000193a:	5019      	str	r1, [r3, r0]
}
1000193c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  {
    conv_mode_pos    = (uint32_t) VADC_G_ICLASS_CMS_Pos;
    conv_mode_mask   = (uint32_t) VADC_G_ICLASS_CMS_Msk;
    sample_time_pos  = (uint32_t) VADC_G_ICLASS_STCS_Pos;
    sample_time_mask = (uint32_t) VADC_G_ICLASS_STCS_Msk;
    sample_time      = (uint32_t) config.sample_time_std_conv;
1000193e:	06ca      	lsls	r2, r1, #27
    conv_mode        = (XMC_VADC_CONVMODE_t)config.conversion_mode_standard;
10001940:	0549      	lsls	r1, r1, #21
  {
    conv_mode_pos    = (uint32_t) VADC_G_ICLASS_CMS_Pos;
    conv_mode_mask   = (uint32_t) VADC_G_ICLASS_CMS_Msk;
    sample_time_pos  = (uint32_t) VADC_G_ICLASS_STCS_Pos;
    sample_time_mask = (uint32_t) VADC_G_ICLASS_STCS_Msk;
    sample_time      = (uint32_t) config.sample_time_std_conv;
10001942:	0ed5      	lsrs	r5, r2, #27
10001944:	2720      	movs	r7, #32
    conv_mode        = (XMC_VADC_CONVMODE_t)config.conversion_mode_standard;
10001946:	0f4a      	lsrs	r2, r1, #29
10001948:	2108      	movs	r1, #8
1000194a:	2600      	movs	r6, #0
1000194c:	427f      	negs	r7, r7
1000194e:	468c      	mov	ip, r1
10001950:	4c02      	ldr	r4, [pc, #8]	; (1000195c <XMC_VADC_GROUP_InputClassInit+0x54>)
10001952:	e7e5      	b.n	10001920 <XMC_VADC_GROUP_InputClassInit+0x18>
10001954:	ffe0ffff 	.word	0xffe0ffff
10001958:	f8ffffff 	.word	0xf8ffffff
1000195c:	fffff8ff 	.word	0xfffff8ff

10001960 <XMC_VADC_GROUP_SetPowerMode>:
  uint32_t arbcfg;

  XMC_ASSERT("XMC_VADC_GROUP_SetPowerMode:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  XMC_ASSERT("XMC_VADC_GROUP_SetPowerMode:Wrong Power Mode", (power_mode <= XMC_VADC_GROUP_POWERMODE_NORMAL))

  arbcfg = group_ptr->ARBCFG;
10001960:	2280      	movs	r2, #128	; 0x80
  group_ptr->ICLASS[set_num] = conv_class;
}

/* API which sets the power mode of analog converter of a VADC group */
void XMC_VADC_GROUP_SetPowerMode(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_GROUP_POWERMODE_t power_mode)
{
10001962:	b510      	push	{r4, lr}
  XMC_ASSERT("XMC_VADC_GROUP_SetPowerMode:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  XMC_ASSERT("XMC_VADC_GROUP_SetPowerMode:Wrong Power Mode", (power_mode <= XMC_VADC_GROUP_POWERMODE_NORMAL))

  arbcfg = group_ptr->ARBCFG;

  arbcfg &= ~((uint32_t)VADC_G_ARBCFG_ANONC_Msk);
10001964:	2403      	movs	r4, #3
  uint32_t arbcfg;

  XMC_ASSERT("XMC_VADC_GROUP_SetPowerMode:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  XMC_ASSERT("XMC_VADC_GROUP_SetPowerMode:Wrong Power Mode", (power_mode <= XMC_VADC_GROUP_POWERMODE_NORMAL))

  arbcfg = group_ptr->ARBCFG;
10001966:	5883      	ldr	r3, [r0, r2]

  arbcfg &= ~((uint32_t)VADC_G_ARBCFG_ANONC_Msk);
10001968:	43a3      	bics	r3, r4
  arbcfg |= (uint32_t)power_mode;
1000196a:	4319      	orrs	r1, r3

  group_ptr->ARBCFG = arbcfg;
1000196c:	5081      	str	r1, [r0, r2]
}
1000196e:	bd10      	pop	{r4, pc}

10001970 <XMC_VADC_GROUP_SetSyncSlave>:
  #if (XMC_VADC_MULTIPLE_SLAVEGROUPS == 1U )

  /* Determine the coding of SYNCTR */
  if (slave_grp > master_grp)
  {
    master_grp = master_grp + 1U;
10001970:	4291      	cmp	r1, r2
10001972:	4192      	sbcs	r2, r2
10001974:	4252      	negs	r2, r2
10001976:	1889      	adds	r1, r1, r2
  }
  #endif
  
  /* Program SYNCTR */
  synctr = group_ptr->SYNCTR;
10001978:	22c0      	movs	r2, #192	; 0xc0
  group_ptr->ARBCFG = arbcfg;
}

/* API which programs a group as a slave group during sync conversions */
void XMC_VADC_GROUP_SetSyncSlave(XMC_VADC_GROUP_t *const group_ptr, uint32_t master_grp, uint32_t slave_grp)
{
1000197a:	b510      	push	{r4, lr}
  }
  #endif
  
  /* Program SYNCTR */
  synctr = group_ptr->SYNCTR;
  synctr   &= ~((uint32_t)VADC_G_SYNCTR_STSEL_Msk);
1000197c:	2403      	movs	r4, #3
    master_grp = master_grp + 1U;
  }
  #endif
  
  /* Program SYNCTR */
  synctr = group_ptr->SYNCTR;
1000197e:	5883      	ldr	r3, [r0, r2]
  synctr   &= ~((uint32_t)VADC_G_SYNCTR_STSEL_Msk);
10001980:	43a3      	bics	r3, r4
  synctr   |= master_grp;
10001982:	4319      	orrs	r1, r3
  group_ptr->SYNCTR = synctr;
10001984:	5081      	str	r1, [r0, r2]
}
10001986:	bd10      	pop	{r4, pc}

10001988 <XMC_VADC_GROUP_SetSyncMaster>:
{
  uint32_t synctr;

  XMC_ASSERT("XMC_VADC_GROUP_SetSyncMaster:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))

  synctr = group_ptr->SYNCTR;
10001988:	22c0      	movs	r2, #192	; 0xc0
  synctr   &= ~((uint32_t)VADC_G_SYNCTR_STSEL_Msk);
1000198a:	2103      	movs	r1, #3
{
  uint32_t synctr;

  XMC_ASSERT("XMC_VADC_GROUP_SetSyncMaster:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))

  synctr = group_ptr->SYNCTR;
1000198c:	5883      	ldr	r3, [r0, r2]
  synctr   &= ~((uint32_t)VADC_G_SYNCTR_STSEL_Msk);
1000198e:	438b      	bics	r3, r1
  group_ptr->SYNCTR = synctr;
10001990:	5083      	str	r3, [r0, r2]
}
10001992:	4770      	bx	lr

10001994 <XMC_VADC_GROUP_CheckSlaveReadiness>:
  XMC_ASSERT("XMC_VADC_GROUP_CheckSlaveReadiness:Wrong Slave group", ((slave_group >= 0) && (slave_group <= (XMC_VADC_MAXIMUM_NUM_GROUPS - 1))))

  master_grp_num =0;
  for(i=0; i<XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
  {
    if(g_xmc_vadc_group_array[i] == group_ptr)
10001994:	4b07      	ldr	r3, [pc, #28]	; (100019b4 <XMC_VADC_GROUP_CheckSlaveReadiness+0x20>)
10001996:	4298      	cmp	r0, r3
10001998:	d008      	beq.n	100019ac <XMC_VADC_GROUP_CheckSlaveReadiness+0x18>
1000199a:	2301      	movs	r3, #1
1000199c:	3103      	adds	r1, #3
1000199e:	408b      	lsls	r3, r1
100019a0:	1c19      	adds	r1, r3, #0

  if(slave_group < master_grp_num)
  {
    slave_group++;
  }
  group_ptr->SYNCTR |= (1U << (slave_group + XMC_VADC_SYNCTR_START_LOCATION));
100019a2:	22c0      	movs	r2, #192	; 0xc0
100019a4:	5883      	ldr	r3, [r0, r2]
100019a6:	4319      	orrs	r1, r3
100019a8:	5081      	str	r1, [r0, r2]
}
100019aa:	4770      	bx	lr
      master_grp_num = i;
    }
  }


  if(slave_group < master_grp_num)
100019ac:	2900      	cmp	r1, #0
100019ae:	d1f4      	bne.n	1000199a <XMC_VADC_GROUP_CheckSlaveReadiness+0x6>
100019b0:	3110      	adds	r1, #16
100019b2:	e7f6      	b.n	100019a2 <XMC_VADC_GROUP_CheckSlaveReadiness+0xe>
100019b4:	48030800 	.word	0x48030800

100019b8 <XMC_VADC_GLOBAL_SHS_EnableAcceleratedMode>:
  XMC_ASSERT("XMC_VADC_GLOBAL_SHS_EnableAcceleratedMode:Wrong SHS Pointer",
             (shs_ptr == (XMC_VADC_GLOBAL_SHS_t*)(void*)SHS0))
  XMC_ASSERT("XMC_VADC_GLOBAL_SHS_EnableAcceleratedMode:Wrong Index number",(group_num <= XMC_VADC_GROUP_INDEX_1))

  /* Set the converted to Accelerated mode from compatible mode*/
  if (group_num == XMC_VADC_GROUP_INDEX_0 )
100019b8:	2900      	cmp	r1, #0
100019ba:	d007      	beq.n	100019cc <XMC_VADC_GLOBAL_SHS_EnableAcceleratedMode+0x14>
  {
    shs_ptr->TIMCFG0 |= (uint32_t)SHS_TIMCFG0_AT_Msk;
  }
  else if (group_num == XMC_VADC_GROUP_INDEX_1 )
100019bc:	2901      	cmp	r1, #1
100019be:	d000      	beq.n	100019c2 <XMC_VADC_GLOBAL_SHS_EnableAcceleratedMode+0xa>
  }
  else
  {
    /* for MISRA*/
  }
}
100019c0:	4770      	bx	lr
  {
    shs_ptr->TIMCFG0 |= (uint32_t)SHS_TIMCFG0_AT_Msk;
  }
  else if (group_num == XMC_VADC_GROUP_INDEX_1 )
  {
    shs_ptr->TIMCFG1 |= (uint32_t)SHS_TIMCFG1_AT_Msk;
100019c2:	2384      	movs	r3, #132	; 0x84
100019c4:	58c2      	ldr	r2, [r0, r3]
100019c6:	4311      	orrs	r1, r2
100019c8:	50c1      	str	r1, [r0, r3]
100019ca:	e7f9      	b.n	100019c0 <XMC_VADC_GLOBAL_SHS_EnableAcceleratedMode+0x8>
  XMC_ASSERT("XMC_VADC_GLOBAL_SHS_EnableAcceleratedMode:Wrong Index number",(group_num <= XMC_VADC_GROUP_INDEX_1))

  /* Set the converted to Accelerated mode from compatible mode*/
  if (group_num == XMC_VADC_GROUP_INDEX_0 )
  {
    shs_ptr->TIMCFG0 |= (uint32_t)SHS_TIMCFG0_AT_Msk;
100019cc:	2280      	movs	r2, #128	; 0x80
100019ce:	2301      	movs	r3, #1
100019d0:	5881      	ldr	r1, [r0, r2]
100019d2:	430b      	orrs	r3, r1
100019d4:	5083      	str	r3, [r0, r2]
100019d6:	e7f3      	b.n	100019c0 <XMC_VADC_GLOBAL_SHS_EnableAcceleratedMode+0x8>

100019d8 <XMC_VADC_GROUP_QueueInit>:
}

#if (XMC_VADC_QUEUE_AVAILABLE == 1U)  
/* API to initialize queue request source */
void XMC_VADC_GROUP_QueueInit(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_QUEUE_CONFIG_t *config)
{
100019d8:	b570      	push	{r4, r5, r6, lr}
 *  XMC_VADC_GROUP_QueueEnableArbitrationSlot()<BR>
 */
__STATIC_INLINE void XMC_VADC_GROUP_QueueDisableArbitrationSlot(XMC_VADC_GROUP_t *const group_ptr)
{
  XMC_ASSERT("XMC_VADC_GROUP_QueueDisableArbitrationSlot:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr));
  group_ptr->ARBPR &= ~((uint32_t)VADC_G_ARBPR_ASEN0_Msk);
100019da:	2584      	movs	r5, #132	; 0x84
  XMC_VADC_GROUP_QueueDisableArbitrationSlot(group_ptr);
  
  reg = group_ptr->ARBPR;

  /* Request Source priority */
  reg &= ~((uint32_t)VADC_G_ARBPR_PRIO0_Msk);
100019dc:	2603      	movs	r6, #3
100019de:	5942      	ldr	r2, [r0, r5]
100019e0:	4b1b      	ldr	r3, [pc, #108]	; (10001a50 <XMC_VADC_GROUP_QueueInit+0x78>)
  reg |= (uint32_t) ((uint32_t)config->req_src_priority << VADC_G_ARBPR_PRIO0_Pos);
100019e2:	780c      	ldrb	r4, [r1, #0]
100019e4:	4013      	ands	r3, r2
100019e6:	5143      	str	r3, [r0, r5]
  XMC_ASSERT("XMC_VADC_GROUP_QueueInit:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))

  /* Disable arbitration slot of the queue request source */
  XMC_VADC_GROUP_QueueDisableArbitrationSlot(group_ptr);
  
  reg = group_ptr->ARBPR;
100019e8:	5943      	ldr	r3, [r0, r5]

  /* Request Source priority */
  reg &= ~((uint32_t)VADC_G_ARBPR_PRIO0_Msk);
100019ea:	43b3      	bics	r3, r6
100019ec:	1c1a      	adds	r2, r3, #0
  reg |= (uint32_t) ((uint32_t)config->req_src_priority << VADC_G_ARBPR_PRIO0_Pos);
100019ee:	0723      	lsls	r3, r4, #28
100019f0:	0f9b      	lsrs	r3, r3, #30
100019f2:	4313      	orrs	r3, r2

  /* Conversion Start mode */
  if (XMC_VADC_STARTMODE_WFS != (XMC_VADC_STARTMODE_t)config->conv_start_mode)
100019f4:	4034      	ands	r4, r6
100019f6:	d01c      	beq.n	10001a32 <XMC_VADC_GROUP_QueueInit+0x5a>
  {
    reg |= (uint32_t)(VADC_G_ARBPR_CSM0_Msk);
100019f8:	2208      	movs	r2, #8
100019fa:	4313      	orrs	r3, r2
  }

  group_ptr->ARBPR = reg;
100019fc:	5143      	str	r3, [r0, r5]


  group_ptr->QCTRL0 = (uint32_t)((config->qctrl0)|(uint32_t)(VADC_G_QCTRL0_XTWC_Msk)|
100019fe:	684a      	ldr	r2, [r1, #4]
10001a00:	4b14      	ldr	r3, [pc, #80]	; (10001a54 <XMC_VADC_GROUP_QueueInit+0x7c>)
10001a02:	4313      	orrs	r3, r2
10001a04:	2280      	movs	r2, #128	; 0x80
10001a06:	0052      	lsls	r2, r2, #1
10001a08:	5083      	str	r3, [r0, r2]
                                                    (uint32_t)(VADC_G_QCTRL0_TMWC_Msk)|
                                                    (uint32_t)(VADC_G_QCTRL0_GTWC_Msk));

  /* Gating mode */
  group_ptr->QMR0 = ((uint32_t)(config->qmr0) | (uint32_t)((uint32_t)XMC_VADC_GATEMODE_IGNORE << VADC_G_QMR0_ENGT_Pos));
10001a0a:	688b      	ldr	r3, [r1, #8]
10001a0c:	3aff      	subs	r2, #255	; 0xff
10001a0e:	4313      	orrs	r3, r2
10001a10:	3204      	adds	r2, #4
10001a12:	32ff      	adds	r2, #255	; 0xff
10001a14:	5083      	str	r3, [r0, r2]

  if (XMC_VADC_STARTMODE_CNR == (XMC_VADC_STARTMODE_t)(config->conv_start_mode) )
10001a16:	2c02      	cmp	r4, #2
10001a18:	d104      	bne.n	10001a24 <XMC_VADC_GROUP_QueueInit+0x4c>
  {
    group_ptr->QMR0 |= (uint32_t)((uint32_t)1 << VADC_G_QMR0_RPTDIS_Pos);
10001a1a:	2180      	movs	r1, #128	; 0x80
10001a1c:	5883      	ldr	r3, [r0, r2]
10001a1e:	0249      	lsls	r1, r1, #9
10001a20:	430b      	orrs	r3, r1
10001a22:	5083      	str	r3, [r0, r2]
 *  XMC_VADC_GROUP_QueueDisableArbitrationSlot()<BR>
 */
__STATIC_INLINE void XMC_VADC_GROUP_QueueEnableArbitrationSlot(XMC_VADC_GROUP_t *const group_ptr)
{
  XMC_ASSERT("XMC_VADC_GROUP_QueueEnableArbitrationSlot:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr));
  group_ptr->ARBPR |= (uint32_t)((uint32_t)1 << VADC_G_ARBPR_ASEN0_Pos);
10001a24:	2284      	movs	r2, #132	; 0x84
10001a26:	2180      	movs	r1, #128	; 0x80
10001a28:	5883      	ldr	r3, [r0, r2]
10001a2a:	0449      	lsls	r1, r1, #17
10001a2c:	430b      	orrs	r3, r1
10001a2e:	5083      	str	r3, [r0, r2]
  }
  /* Enable arbitration slot for the queue request source */
  XMC_VADC_GROUP_QueueEnableArbitrationSlot(group_ptr);

}
10001a30:	bd70      	pop	{r4, r5, r6, pc}
  if (XMC_VADC_STARTMODE_WFS != (XMC_VADC_STARTMODE_t)config->conv_start_mode)
  {
    reg |= (uint32_t)(VADC_G_ARBPR_CSM0_Msk);
  }

  group_ptr->ARBPR = reg;
10001a32:	5143      	str	r3, [r0, r5]


  group_ptr->QCTRL0 = (uint32_t)((config->qctrl0)|(uint32_t)(VADC_G_QCTRL0_XTWC_Msk)|
10001a34:	684a      	ldr	r2, [r1, #4]
10001a36:	4b07      	ldr	r3, [pc, #28]	; (10001a54 <XMC_VADC_GROUP_QueueInit+0x7c>)
10001a38:	4313      	orrs	r3, r2
10001a3a:	2280      	movs	r2, #128	; 0x80
10001a3c:	0052      	lsls	r2, r2, #1
10001a3e:	5083      	str	r3, [r0, r2]
                                                    (uint32_t)(VADC_G_QCTRL0_TMWC_Msk)|
                                                    (uint32_t)(VADC_G_QCTRL0_GTWC_Msk));

  /* Gating mode */
  group_ptr->QMR0 = ((uint32_t)(config->qmr0) | (uint32_t)((uint32_t)XMC_VADC_GATEMODE_IGNORE << VADC_G_QMR0_ENGT_Pos));
10001a40:	688b      	ldr	r3, [r1, #8]
10001a42:	3aff      	subs	r2, #255	; 0xff
10001a44:	4313      	orrs	r3, r2
10001a46:	3204      	adds	r2, #4
10001a48:	32ff      	adds	r2, #255	; 0xff
10001a4a:	5083      	str	r3, [r0, r2]
10001a4c:	e7ea      	b.n	10001a24 <XMC_VADC_GROUP_QueueInit+0x4c>
10001a4e:	46c0      	nop			; (mov r8, r8)
10001a50:	feffffff 	.word	0xfeffffff
10001a54:	80808000 	.word	0x80808000

10001a58 <XMC_VADC_GROUP_QueueSetReqSrcEventInterruptNode>:
  uint32_t sevnp;

  XMC_ASSERT("XMC_VADC_GROUP_QueueSetReqSrcEventInterruptNode:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  XMC_ASSERT("XMC_VADC_GROUP_QueueSetReqSrcEventInterruptNode:Wrong Service Request", ((sr)  <= XMC_VADC_SR_SHARED_SR3))

  sevnp = group_ptr->SEVNP;
10001a58:	22e0      	movs	r2, #224	; 0xe0
  return ch_num;
}

/* Select a Service Request line for the request source event */
void XMC_VADC_GROUP_QueueSetReqSrcEventInterruptNode(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_SR_t sr)
{
10001a5a:	b510      	push	{r4, lr}
  XMC_ASSERT("XMC_VADC_GROUP_QueueSetReqSrcEventInterruptNode:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  XMC_ASSERT("XMC_VADC_GROUP_QueueSetReqSrcEventInterruptNode:Wrong Service Request", ((sr)  <= XMC_VADC_SR_SHARED_SR3))

  sevnp = group_ptr->SEVNP;

  sevnp &= ~((uint32_t)VADC_G_SEVNP_SEV0NP_Msk);
10001a5c:	240f      	movs	r4, #15
  uint32_t sevnp;

  XMC_ASSERT("XMC_VADC_GROUP_QueueSetReqSrcEventInterruptNode:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  XMC_ASSERT("XMC_VADC_GROUP_QueueSetReqSrcEventInterruptNode:Wrong Service Request", ((sr)  <= XMC_VADC_SR_SHARED_SR3))

  sevnp = group_ptr->SEVNP;
10001a5e:	0052      	lsls	r2, r2, #1
10001a60:	5883      	ldr	r3, [r0, r2]

  sevnp &= ~((uint32_t)VADC_G_SEVNP_SEV0NP_Msk);
10001a62:	43a3      	bics	r3, r4
  sevnp |= (uint32_t)((uint32_t)sr << VADC_G_SEVNP_SEV0NP_Pos);
10001a64:	4319      	orrs	r1, r3

  group_ptr->SEVNP = sevnp;
10001a66:	5081      	str	r1, [r0, r2]

}
10001a68:	bd10      	pop	{r4, pc}
10001a6a:	46c0      	nop			; (mov r8, r8)

10001a6c <XMC_VADC_GROUP_ChannelInit>:

#if (XMC_VADC_GROUP_AVAILABLE ==1U)
/* API to initialize a channel unit */
void XMC_VADC_GROUP_ChannelInit(XMC_VADC_GROUP_t *const group_ptr, const uint32_t ch_num,
                                        const XMC_VADC_CHANNEL_CONFIG_t *config)
{
10001a6c:	b570      	push	{r4, r5, r6, lr}
  
  prio  = (uint32_t)config->channel_priority;

  /* Priority channel */
  ch_assign  = group_ptr->CHASS;
  ch_assign &= ~((uint32_t)((uint32_t)1 << ch_num));
10001a6e:	2401      	movs	r4, #1
  XMC_ASSERT("XMC_VADC_GROUP_ChannelInit:Wrong Channel Number", ((ch_num) < XMC_VADC_NUM_CHANNELS_PER_GROUP))
  
  prio  = (uint32_t)config->channel_priority;

  /* Priority channel */
  ch_assign  = group_ptr->CHASS;
10001a70:	2588      	movs	r5, #136	; 0x88
  ch_assign &= ~((uint32_t)((uint32_t)1 << ch_num));
10001a72:	408c      	lsls	r4, r1
  XMC_ASSERT("XMC_VADC_GROUP_ChannelInit:Wrong Channel Number", ((ch_num) < XMC_VADC_NUM_CHANNELS_PER_GROUP))
  
  prio  = (uint32_t)config->channel_priority;

  /* Priority channel */
  ch_assign  = group_ptr->CHASS;
10001a74:	5943      	ldr	r3, [r0, r5]
  ch_assign &= ~((uint32_t)((uint32_t)1 << ch_num));
10001a76:	43a3      	bics	r3, r4


  XMC_ASSERT("XMC_VADC_GROUP_ChannelInit:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  XMC_ASSERT("XMC_VADC_GROUP_ChannelInit:Wrong Channel Number", ((ch_num) < XMC_VADC_NUM_CHANNELS_PER_GROUP))
  
  prio  = (uint32_t)config->channel_priority;
10001a78:	7b14      	ldrb	r4, [r2, #12]

  /* Priority channel */
  ch_assign  = group_ptr->CHASS;
  ch_assign &= ~((uint32_t)((uint32_t)1 << ch_num));
  ch_assign |= (uint32_t)(prio << ch_num);
10001a7a:	408c      	lsls	r4, r1
10001a7c:	4323      	orrs	r3, r4
  group_ptr->CHASS = ch_assign;
10001a7e:	5143      	str	r3, [r0, r5]

  /* Alias channel */
  if (config->alias_channel >= (int32_t)0)
10001a80:	7b53      	ldrb	r3, [r2, #13]
10001a82:	b25c      	sxtb	r4, r3
10001a84:	2c00      	cmp	r4, #0
10001a86:	db0c      	blt.n	10001aa2 <XMC_VADC_GROUP_ChannelInit+0x36>
  {
    mask = (uint32_t)0;
    if ((uint32_t)1 == ch_num)
10001a88:	2901      	cmp	r1, #1
10001a8a:	d021      	beq.n	10001ad0 <XMC_VADC_GROUP_ChannelInit+0x64>
    {
      mask = VADC_G_ALIAS_ALIAS1_Pos;
      group_ptr->ALIAS &= ~(uint32_t)(VADC_G_ALIAS_ALIAS1_Msk);
    }
    else if ((uint32_t)0 == ch_num)
10001a8c:	2900      	cmp	r1, #0
10001a8e:	d017      	beq.n	10001ac0 <XMC_VADC_GROUP_ChannelInit+0x54>
10001a90:	1c1c      	adds	r4, r3, #0
10001a92:	2300      	movs	r3, #0
    {
      mask = VADC_G_ALIAS_ALIAS0_Pos;
      group_ptr->ALIAS &= ~(uint32_t)(VADC_G_ALIAS_ALIAS0_Msk);
    }

    group_ptr->ALIAS |= (uint32_t)(config->alias_channel << mask);
10001a94:	b264      	sxtb	r4, r4
10001a96:	409c      	lsls	r4, r3
10001a98:	26b0      	movs	r6, #176	; 0xb0
10001a9a:	1c23      	adds	r3, r4, #0
10001a9c:	5985      	ldr	r5, [r0, r6]
10001a9e:	432b      	orrs	r3, r5
10001aa0:	5183      	str	r3, [r0, r6]
  }

  group_ptr->BFL |= config->bfl;
10001aa2:	24c8      	movs	r4, #200	; 0xc8
10001aa4:	6855      	ldr	r5, [r2, #4]
10001aa6:	5903      	ldr	r3, [r0, r4]

#if (XMC_VADC_BOUNDARY_FLAG_SELECT == 1U)
  group_ptr->BFLC |= config->bflc;
#endif
  /* Program the CHCTR register */
  group_ptr->CHCTR[ch_num] = config->chctr;
10001aa8:	3180      	adds	r1, #128	; 0x80
    }

    group_ptr->ALIAS |= (uint32_t)(config->alias_channel << mask);
  }

  group_ptr->BFL |= config->bfl;
10001aaa:	432b      	orrs	r3, r5
10001aac:	5103      	str	r3, [r0, r4]

#if (XMC_VADC_BOUNDARY_FLAG_SELECT == 1U)
  group_ptr->BFLC |= config->bflc;
10001aae:	3408      	adds	r4, #8
10001ab0:	6895      	ldr	r5, [r2, #8]
10001ab2:	5903      	ldr	r3, [r0, r4]
#endif
  /* Program the CHCTR register */
  group_ptr->CHCTR[ch_num] = config->chctr;
10001ab4:	0089      	lsls	r1, r1, #2
  }

  group_ptr->BFL |= config->bfl;

#if (XMC_VADC_BOUNDARY_FLAG_SELECT == 1U)
  group_ptr->BFLC |= config->bflc;
10001ab6:	432b      	orrs	r3, r5
10001ab8:	5103      	str	r3, [r0, r4]
#endif
  /* Program the CHCTR register */
  group_ptr->CHCTR[ch_num] = config->chctr;
10001aba:	6813      	ldr	r3, [r2, #0]
10001abc:	500b      	str	r3, [r1, r0]

}
10001abe:	bd70      	pop	{r4, r5, r6, pc}
      group_ptr->ALIAS &= ~(uint32_t)(VADC_G_ALIAS_ALIAS1_Msk);
    }
    else if ((uint32_t)0 == ch_num)
    {
      mask = VADC_G_ALIAS_ALIAS0_Pos;
      group_ptr->ALIAS &= ~(uint32_t)(VADC_G_ALIAS_ALIAS0_Msk);
10001ac0:	24b0      	movs	r4, #176	; 0xb0
10001ac2:	251f      	movs	r5, #31
10001ac4:	5903      	ldr	r3, [r0, r4]
10001ac6:	43ab      	bics	r3, r5
10001ac8:	5103      	str	r3, [r0, r4]
10001aca:	7b54      	ldrb	r4, [r2, #13]
10001acc:	2300      	movs	r3, #0
10001ace:	e7e1      	b.n	10001a94 <XMC_VADC_GROUP_ChannelInit+0x28>
  {
    mask = (uint32_t)0;
    if ((uint32_t)1 == ch_num)
    {
      mask = VADC_G_ALIAS_ALIAS1_Pos;
      group_ptr->ALIAS &= ~(uint32_t)(VADC_G_ALIAS_ALIAS1_Msk);
10001ad0:	24b0      	movs	r4, #176	; 0xb0
10001ad2:	4b03      	ldr	r3, [pc, #12]	; (10001ae0 <XMC_VADC_GROUP_ChannelInit+0x74>)
10001ad4:	5905      	ldr	r5, [r0, r4]
10001ad6:	402b      	ands	r3, r5
10001ad8:	5103      	str	r3, [r0, r4]
10001ada:	7b54      	ldrb	r4, [r2, #13]
10001adc:	2308      	movs	r3, #8
10001ade:	e7d9      	b.n	10001a94 <XMC_VADC_GROUP_ChannelInit+0x28>
10001ae0:	ffffe0ff 	.word	0xffffe0ff

10001ae4 <XMC_VADC_GROUP_SetResultInterruptNode>:

/* API to select a service request line (NVIC Node) for result event of specified unit of result hardware */
void XMC_VADC_GROUP_SetResultInterruptNode(XMC_VADC_GROUP_t *const group_ptr,
                                           const uint32_t res_reg,
                                           const XMC_VADC_SR_t sr)
{
10001ae4:	b530      	push	{r4, r5, lr}

  XMC_ASSERT("XMC_VADC_GROUP_SetResultInterruptNode:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  XMC_ASSERT("XMC_VADC_GROUP_SetResultInterruptNode:Wrong Result Register", ((res_reg) < XMC_VADC_NUM_RESULT_REGISTERS))
  XMC_ASSERT("XMC_VADC_GROUP_SetResultInterruptNode:Wrong Service Request", ((sr)  <= XMC_VADC_SR_SHARED_SR3))

  if (res_reg <= 7U)
10001ae6:	2907      	cmp	r1, #7
10001ae8:	d90e      	bls.n	10001b08 <XMC_VADC_GROUP_SetResultInterruptNode+0x24>
    route_mask |= (uint32_t)((uint32_t)sr << (res_reg * (uint32_t)4));
    group_ptr->REVNP0 = route_mask;
  }
  else
  {
    route_mask = group_ptr->REVNP1;
10001aea:	25da      	movs	r5, #218	; 0xda
    route_mask &= ~((uint32_t)((uint32_t)15 << (( res_reg - (uint32_t)8) * (uint32_t)4) ));
10001aec:	4c08      	ldr	r4, [pc, #32]	; (10001b10 <XMC_VADC_GROUP_SetResultInterruptNode+0x2c>)
    route_mask |= (uint32_t)((uint32_t)sr << (res_reg * (uint32_t)4));
    group_ptr->REVNP0 = route_mask;
  }
  else
  {
    route_mask = group_ptr->REVNP1;
10001aee:	006d      	lsls	r5, r5, #1
    route_mask &= ~((uint32_t)((uint32_t)15 << (( res_reg - (uint32_t)8) * (uint32_t)4) ));
10001af0:	46a4      	mov	ip, r4
    route_mask |= (uint32_t)((uint32_t)sr << (res_reg * (uint32_t)4));
    group_ptr->REVNP0 = route_mask;
  }
  else
  {
    route_mask = group_ptr->REVNP1;
10001af2:	5943      	ldr	r3, [r0, r5]
    route_mask &= ~((uint32_t)((uint32_t)15 << (( res_reg - (uint32_t)8) * (uint32_t)4) ));
10001af4:	4461      	add	r1, ip
10001af6:	0089      	lsls	r1, r1, #2
10001af8:	240f      	movs	r4, #15
    route_mask |= (uint32_t)((uint32_t)sr << ((res_reg - (uint32_t)8) * (uint32_t)4));
10001afa:	408a      	lsls	r2, r1
    group_ptr->REVNP0 = route_mask;
  }
  else
  {
    route_mask = group_ptr->REVNP1;
    route_mask &= ~((uint32_t)((uint32_t)15 << (( res_reg - (uint32_t)8) * (uint32_t)4) ));
10001afc:	408c      	lsls	r4, r1
    route_mask |= (uint32_t)((uint32_t)sr << ((res_reg - (uint32_t)8) * (uint32_t)4));
10001afe:	1c11      	adds	r1, r2, #0
    group_ptr->REVNP0 = route_mask;
  }
  else
  {
    route_mask = group_ptr->REVNP1;
    route_mask &= ~((uint32_t)((uint32_t)15 << (( res_reg - (uint32_t)8) * (uint32_t)4) ));
10001b00:	43a3      	bics	r3, r4
    route_mask |= (uint32_t)((uint32_t)sr << ((res_reg - (uint32_t)8) * (uint32_t)4));
10001b02:	4319      	orrs	r1, r3
    group_ptr->REVNP1 = route_mask;
10001b04:	5141      	str	r1, [r0, r5]
  }
}
10001b06:	bd30      	pop	{r4, r5, pc}
  XMC_ASSERT("XMC_VADC_GROUP_SetResultInterruptNode:Wrong Result Register", ((res_reg) < XMC_VADC_NUM_RESULT_REGISTERS))
  XMC_ASSERT("XMC_VADC_GROUP_SetResultInterruptNode:Wrong Service Request", ((sr)  <= XMC_VADC_SR_SHARED_SR3))

  if (res_reg <= 7U)
  {
    route_mask  = group_ptr->REVNP0;
10001b08:	25d8      	movs	r5, #216	; 0xd8
10001b0a:	006d      	lsls	r5, r5, #1
10001b0c:	5943      	ldr	r3, [r0, r5]
10001b0e:	e7f2      	b.n	10001af6 <XMC_VADC_GROUP_SetResultInterruptNode+0x12>
10001b10:	3ffffff8 	.word	0x3ffffff8

10001b14 <_init>:
  }
}

/* Init */
void _init(void)
{}
10001b14:	4770      	bx	lr
10001b16:	46c0      	nop			; (mov r8, r8)

10001b18 <UART_Init>:
 *          UART_SUCCESS: for successful UART initialization.<BR>
 *          UART_STATUS_FAILURE  : If UART initialization fails.<BR>
 *
 */
UART_STATUS_t UART_Init(const UART_t *const handle)
{
10001b18:	b508      	push	{r3, lr}
  XMC_ASSERT("UART_Init : UART APP handle invalid", (((handle != NULL)&&
      (handle->config != NULL)) &&((handle->config->fptr_uart_config != NULL)&&
      (handle->runtime != NULL))))

  /*Initialize the multiplexers required for UART configuration*/
  status = handle->config->fptr_uart_config();
10001b1a:	6843      	ldr	r3, [r0, #4]
10001b1c:	685b      	ldr	r3, [r3, #4]
10001b1e:	4798      	blx	r3

  return status;
}
10001b20:	bd08      	pop	{r3, pc}
10001b22:	46c0      	nop			; (mov r8, r8)

10001b24 <UART_Transmit>:
 *          UART_STATUS_BUFFER_INVALID: Either if buffer is NULL or count is 0.<BR>
 *          UART_STATUS_MODE_MISMATCH: If the configured mode is invalid.<BR>
 *
 */
UART_STATUS_t UART_Transmit(const UART_t *const handle, uint8_t* data_ptr, uint32_t count)
{
10001b24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10001b26:	464f      	mov	r7, r9
10001b28:	4646      	mov	r6, r8
  UART_STATUS_t ret_stat = UART_STATUS_MODE_MISMATCH;

  switch(handle->config->transmit_mode)
10001b2a:	6844      	ldr	r4, [r0, #4]
 *          UART_STATUS_BUFFER_INVALID: Either if buffer is NULL or count is 0.<BR>
 *          UART_STATUS_MODE_MISMATCH: If the configured mode is invalid.<BR>
 *
 */
UART_STATUS_t UART_Transmit(const UART_t *const handle, uint8_t* data_ptr, uint32_t count)
{
10001b2c:	1c03      	adds	r3, r0, #0
  UART_STATUS_t ret_stat = UART_STATUS_MODE_MISMATCH;

  switch(handle->config->transmit_mode)
10001b2e:	2021      	movs	r0, #33	; 0x21
 *          UART_STATUS_BUFFER_INVALID: Either if buffer is NULL or count is 0.<BR>
 *          UART_STATUS_MODE_MISMATCH: If the configured mode is invalid.<BR>
 *
 */
UART_STATUS_t UART_Transmit(const UART_t *const handle, uint8_t* data_ptr, uint32_t count)
{
10001b30:	b4c0      	push	{r6, r7}
  UART_STATUS_t ret_stat = UART_STATUS_MODE_MISMATCH;

  switch(handle->config->transmit_mode)
10001b32:	5c20      	ldrb	r0, [r4, r0]
10001b34:	2802      	cmp	r0, #2
10001b36:	d004      	beq.n	10001b42 <UART_Transmit+0x1e>
 *          UART_STATUS_MODE_MISMATCH: If the configured mode is invalid.<BR>
 *
 */
UART_STATUS_t UART_Transmit(const UART_t *const handle, uint8_t* data_ptr, uint32_t count)
{
  UART_STATUS_t ret_stat = UART_STATUS_MODE_MISMATCH;
10001b38:	2004      	movs	r0, #4
#endif
  default:
    break;
  }
  return ret_stat;
}
10001b3a:	bc0c      	pop	{r2, r3}
10001b3c:	4690      	mov	r8, r2
10001b3e:	4699      	mov	r9, r3
10001b40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  uint32_t loc_index;

  XMC_ASSERT("UART_Transmit: UART APP handle invalid", (((handle != NULL)&&
            (handle->runtime != NULL))&&(handle->config != NULL)))

  if ((data_ptr != NULL) && (count > 0U))
10001b42:	2900      	cmp	r1, #0
10001b44:	d032      	beq.n	10001bac <UART_Transmit+0x88>
 * either TBUF or IN register is updated with the data.
 *
 */
static UART_STATUS_t UART_lStartTransmitPolling(const UART_t *const handle, uint8_t* data_ptr, uint32_t count)
{
  UART_STATUS_t ret_stat = UART_STATUS_BUFFER_INVALID;
10001b46:	3001      	adds	r0, #1
  uint32_t loc_index;

  XMC_ASSERT("UART_Transmit: UART APP handle invalid", (((handle != NULL)&&
            (handle->runtime != NULL))&&(handle->config != NULL)))

  if ((data_ptr != NULL) && (count > 0U))
10001b48:	2a00      	cmp	r2, #0
10001b4a:	d0f6      	beq.n	10001b3a <UART_Transmit+0x16>
  {
    ret_stat = UART_STATUS_BUSY;
    if (handle->runtime->tx_busy == false)
10001b4c:	689d      	ldr	r5, [r3, #8]
  XMC_ASSERT("UART_Transmit: UART APP handle invalid", (((handle != NULL)&&
            (handle->runtime != NULL))&&(handle->config != NULL)))

  if ((data_ptr != NULL) && (count > 0U))
  {
    ret_stat = UART_STATUS_BUSY;
10001b4e:	3801      	subs	r0, #1
    if (handle->runtime->tx_busy == false)
10001b50:	7e2e      	ldrb	r6, [r5, #24]
10001b52:	2e00      	cmp	r6, #0
10001b54:	d1f1      	bne.n	10001b3a <UART_Transmit+0x16>
    {
      handle->runtime->tx_busy = true;
10001b56:	3801      	subs	r0, #1
10001b58:	7628      	strb	r0, [r5, #24]
      if (handle->config->tx_fifo_size != XMC_USIC_CH_FIFO_DISABLED)
10001b5a:	3022      	adds	r0, #34	; 0x22
10001b5c:	5c27      	ldrb	r7, [r4, r0]
      {
        /*Clear the transmit FIFO*/
        XMC_USIC_CH_TXFIFO_Flush(handle->channel);
10001b5e:	6818      	ldr	r0, [r3, #0]
  {
    ret_stat = UART_STATUS_BUSY;
    if (handle->runtime->tx_busy == false)
    {
      handle->runtime->tx_busy = true;
      if (handle->config->tx_fifo_size != XMC_USIC_CH_FIFO_DISABLED)
10001b60:	2f00      	cmp	r7, #0
10001b62:	d004      	beq.n	10001b6e <UART_Transmit+0x4a>
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_GetLevel() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_TXFIFO_Flush(XMC_USIC_CH_t *const channel)
{
  channel->TRBSCR = (uint32_t)USIC_CH_TRBSCR_FLUSHTB_Msk;
10001b64:	2580      	movs	r5, #128	; 0x80
10001b66:	248c      	movs	r4, #140	; 0x8c
10001b68:	022d      	lsls	r5, r5, #8
10001b6a:	0064      	lsls	r4, r4, #1
10001b6c:	5105      	str	r5, [r0, r4]
10001b6e:	4690      	mov	r8, r2
10001b70:	1c1c      	adds	r4, r3, #0
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_IsEmpty(), XMC_USIC_CH_TXFIFO_Flush() \n\n\n
 */
__STATIC_INLINE bool XMC_USIC_CH_TXFIFO_IsFull(XMC_USIC_CH_t *const channel)
{
  return (bool)(channel->TRBSR & USIC_CH_TRBSR_TFULL_Msk);
10001b72:	268a      	movs	r6, #138	; 0x8a
10001b74:	1c3b      	adds	r3, r7, #0
10001b76:	2223      	movs	r2, #35	; 0x23
10001b78:	2780      	movs	r7, #128	; 0x80
10001b7a:	1c0d      	adds	r5, r1, #0
10001b7c:	4488      	add	r8, r1
10001b7e:	0076      	lsls	r6, r6, #1
10001b80:	017f      	lsls	r7, r7, #5
10001b82:	4691      	mov	r9, r2
10001b84:	e009      	b.n	10001b9a <UART_Transmit+0x76>
          /*Wait if transmit FIFO is full*/
          while (XMC_USIC_CH_TXFIFO_IsFull(handle->channel) == true)
          {
          }
        }
        XMC_UART_CH_Transmit(handle->channel, (uint16_t)data_ptr[loc_index]);
10001b86:	7829      	ldrb	r1, [r5, #0]
10001b88:	3501      	adds	r5, #1
10001b8a:	f7ff fd4d 	bl	10001628 <XMC_UART_CH_Transmit>
      {
        /*Clear the transmit FIFO*/
        XMC_USIC_CH_TXFIFO_Flush(handle->channel);
      }
      /*Loop through each byte*/
      for (loc_index = 0U; loc_index < count; loc_index++)
10001b8e:	4545      	cmp	r5, r8
10001b90:	d00e      	beq.n	10001bb0 <UART_Transmit+0x8c>
10001b92:	464a      	mov	r2, r9
10001b94:	6863      	ldr	r3, [r4, #4]
10001b96:	6820      	ldr	r0, [r4, #0]
10001b98:	5c9b      	ldrb	r3, [r3, r2]
      {
        /*If FIFO is enabled, FIFO filling status should be checked
         * to avoid overflow error*/
        if (handle->config->tx_fifo_size != XMC_USIC_CH_FIFO_DISABLED)
10001b9a:	2b00      	cmp	r3, #0
10001b9c:	d0f3      	beq.n	10001b86 <UART_Transmit+0x62>
10001b9e:	5983      	ldr	r3, [r0, r6]
        {
          /*Wait if transmit FIFO is full*/
          while (XMC_USIC_CH_TXFIFO_IsFull(handle->channel) == true)
10001ba0:	423b      	tst	r3, r7
10001ba2:	d0f0      	beq.n	10001b86 <UART_Transmit+0x62>
10001ba4:	5983      	ldr	r3, [r0, r6]
10001ba6:	423b      	tst	r3, r7
10001ba8:	d1f9      	bne.n	10001b9e <UART_Transmit+0x7a>
10001baa:	e7ec      	b.n	10001b86 <UART_Transmit+0x62>
 * either TBUF or IN register is updated with the data.
 *
 */
static UART_STATUS_t UART_lStartTransmitPolling(const UART_t *const handle, uint8_t* data_ptr, uint32_t count)
{
  UART_STATUS_t ret_stat = UART_STATUS_BUFFER_INVALID;
10001bac:	2003      	movs	r0, #3
10001bae:	e7c4      	b.n	10001b3a <UART_Transmit+0x16>
          }
        }
        XMC_UART_CH_Transmit(handle->channel, (uint16_t)data_ptr[loc_index]);
      }

      if (handle->config->tx_fifo_size != XMC_USIC_CH_FIFO_DISABLED)
10001bb0:	2323      	movs	r3, #35	; 0x23
10001bb2:	6862      	ldr	r2, [r4, #4]
10001bb4:	5cd3      	ldrb	r3, [r2, r3]
10001bb6:	2b00      	cmp	r3, #0
10001bb8:	d007      	beq.n	10001bca <UART_Transmit+0xa6>
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_Flush(), XMC_USIC_CH_TXFIFO_PutData() \n\n\n
 */
__STATIC_INLINE bool XMC_USIC_CH_TXFIFO_IsEmpty(XMC_USIC_CH_t *const channel)
{
  return (bool)(channel->TRBSR & USIC_CH_TRBSR_TEMPTY_Msk);
10001bba:	218a      	movs	r1, #138	; 0x8a
10001bbc:	2280      	movs	r2, #128	; 0x80
10001bbe:	6820      	ldr	r0, [r4, #0]
10001bc0:	0049      	lsls	r1, r1, #1
10001bc2:	0112      	lsls	r2, r2, #4
10001bc4:	5843      	ldr	r3, [r0, r1]
      {
        /*Wait till FIFO is empty*/
        while (XMC_USIC_CH_TXFIFO_IsEmpty(handle->channel) == false)
10001bc6:	4213      	tst	r3, r2
10001bc8:	d0fc      	beq.n	10001bc4 <UART_Transmit+0xa0>
        {
        }
      }
      ret_stat = UART_STATUS_SUCCESS;
      handle->runtime->tx_busy = false;
10001bca:	2200      	movs	r2, #0
10001bcc:	68a3      	ldr	r3, [r4, #8]
        /*Wait till FIFO is empty*/
        while (XMC_USIC_CH_TXFIFO_IsEmpty(handle->channel) == false)
        {
        }
      }
      ret_stat = UART_STATUS_SUCCESS;
10001bce:	2000      	movs	r0, #0
      handle->runtime->tx_busy = false;
10001bd0:	761a      	strb	r2, [r3, #24]
10001bd2:	e7b2      	b.n	10001b3a <UART_Transmit+0x16>

10001bd4 <COM_init>:
/**********************************************************************************************************************
 * API IMPLEMENTATION
 **********************************************************************************************************************/
/*Channel initialization function*/
UART_STATUS_t COM_init()
{
10001bd4:	b570      	push	{r4, r5, r6, lr}
  UART_STATUS_t status = UART_STATUS_SUCCESS;
  /*Configure Receive pin*/
  XMC_GPIO_Init((XMC_GPIO_PORT_t *)PORT0_BASE, 6U, &COM_rx_pin_config);
10001bd6:	4e1d      	ldr	r6, [pc, #116]	; (10001c4c <COM_init+0x78>)
  /* Initialize USIC channel in UART mode*/
  XMC_UART_CH_Init(XMC_UART0_CH1, &COM_channel_config);
10001bd8:	4c1d      	ldr	r4, [pc, #116]	; (10001c50 <COM_init+0x7c>)
/*Channel initialization function*/
UART_STATUS_t COM_init()
{
  UART_STATUS_t status = UART_STATUS_SUCCESS;
  /*Configure Receive pin*/
  XMC_GPIO_Init((XMC_GPIO_PORT_t *)PORT0_BASE, 6U, &COM_rx_pin_config);
10001bda:	1c30      	adds	r0, r6, #0
10001bdc:	4a1d      	ldr	r2, [pc, #116]	; (10001c54 <COM_init+0x80>)
10001bde:	2106      	movs	r1, #6
10001be0:	f7ff fa88 	bl	100010f4 <XMC_GPIO_Init>
  /* Initialize USIC channel in UART mode*/
  XMC_UART_CH_Init(XMC_UART0_CH1, &COM_channel_config);
10001be4:	1c20      	adds	r0, r4, #0
10001be6:	491c      	ldr	r1, [pc, #112]	; (10001c58 <COM_init+0x84>)
10001be8:	f7ff fce2 	bl	100015b0 <XMC_UART_CH_Init>
 * XMC_USIC_CH_EnableInputInversion(), XMC_USIC_CH_EnableInputDigitalFilter(), XMC_USIC_CH_EnableInputSync(),
 * XMC_USIC_CH_SetInputSamplingFreq()\n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetInputSource(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_INPUT_t input, const uint8_t source)
{
  channel->DXCR[input] = (uint32_t)((channel->DXCR[input] & (uint32_t)(~USIC_CH_DXCR_DSEL_Msk)) |
10001bec:	2207      	movs	r2, #7
10001bee:	2502      	movs	r5, #2
10001bf0:	69e3      	ldr	r3, [r4, #28]
  XMC_USIC_CH_SetInputSource(XMC_UART0_CH1, XMC_USIC_CH_INPUT_DX5, 0U);
  /* Invert output data */
  XMC_USIC_CH_SetDataOutputMode(XMC_UART0_CH1, XMC_USIC_CH_DATA_OUTPUT_MODE_INVERTED);

  /*Configure transmit FIFO*/
  XMC_USIC_CH_TXFIFO_Configure(XMC_UART0_CH1,
10001bf2:	1c20      	adds	r0, r4, #0
10001bf4:	4393      	bics	r3, r2
10001bf6:	432b      	orrs	r3, r5
10001bf8:	61e3      	str	r3, [r4, #28]
10001bfa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
10001bfc:	2110      	movs	r1, #16
10001bfe:	4393      	bics	r3, r2
10001c00:	62a3      	str	r3, [r4, #40]	; 0x28
10001c02:	6b23      	ldr	r3, [r4, #48]	; 0x30
10001c04:	4393      	bics	r3, r2
10001c06:	6323      	str	r3, [r4, #48]	; 0x30
 * XMC_USIC_CH_SetStartTransmisionMode() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetDataOutputMode(XMC_USIC_CH_t *const channel,
                                                   const XMC_USIC_CH_DATA_OUTPUT_MODE_t data_output_mode)
{
  channel->SCTR = (uint32_t)(channel->SCTR & (~USIC_CH_SCTR_DOCFG_Msk)) | (uint32_t)data_output_mode;
10001c08:	6b63      	ldr	r3, [r4, #52]	; 0x34
10001c0a:	32b9      	adds	r2, #185	; 0xb9
10001c0c:	4393      	bics	r3, r2
10001c0e:	3a80      	subs	r2, #128	; 0x80
10001c10:	4313      	orrs	r3, r2
10001c12:	6363      	str	r3, [r4, #52]	; 0x34
10001c14:	3a3c      	subs	r2, #60	; 0x3c
10001c16:	2301      	movs	r3, #1
10001c18:	f7ff fd8e 	bl	10001738 <XMC_USIC_CH_TXFIFO_Configure>
        16U,
        XMC_USIC_CH_FIFO_SIZE_16WORDS,
        1U);
  /*Configure receive FIFO*/
  XMC_USIC_CH_RXFIFO_Configure(XMC_UART0_CH1,
10001c1c:	1c20      	adds	r0, r4, #0
10001c1e:	2100      	movs	r1, #0
10001c20:	2204      	movs	r2, #4
10001c22:	230f      	movs	r3, #15
10001c24:	f7ff fd9e 	bl	10001764 <XMC_USIC_CH_RXFIFO_Configure>
 * \par<b>Related APIs:</b><BR>
 * XMC_UART_CH_Stop(), XMC_UART_CH_Transmit()\n\n\n
 */
__STATIC_INLINE void XMC_UART_CH_Start(XMC_USIC_CH_t *const channel)
{
  channel->CCR = (uint32_t)(((channel->CCR) & (~USIC_CH_CCR_MODE_Msk)) | (uint32_t)XMC_USIC_CH_OPERATING_MODE_UART);
10001c28:	220f      	movs	r2, #15
10001c2a:	6c23      	ldr	r3, [r4, #64]	; 0x40
        15U);
  /* Start UART */
  XMC_UART_CH_Start(XMC_UART0_CH1);

  /* Initialize UART TX pin */
  XMC_GPIO_Init((XMC_GPIO_PORT_t *)PORT0_BASE, 7U, &COM_tx_pin_config);
10001c2c:	1c30      	adds	r0, r6, #0
10001c2e:	4393      	bics	r3, r2
10001c30:	431d      	orrs	r5, r3
10001c32:	6425      	str	r5, [r4, #64]	; 0x40
10001c34:	2107      	movs	r1, #7
10001c36:	4a09      	ldr	r2, [pc, #36]	; (10001c5c <COM_init+0x88>)
10001c38:	f7ff fa5c 	bl	100010f4 <XMC_GPIO_Init>

  /*Set service request for UART protocol events*/
  XMC_USIC_CH_SetInterruptNodePointer(XMC_UART0_CH1, XMC_USIC_CH_INTERRUPT_NODE_POINTER_PROTOCOL,
10001c3c:	1c20      	adds	r0, r4, #0
10001c3e:	2110      	movs	r1, #16
10001c40:	2200      	movs	r2, #0
10001c42:	f7ff fda7 	bl	10001794 <XMC_USIC_CH_SetInterruptNodePointer>
     0U);
  return status;
}
10001c46:	2000      	movs	r0, #0
10001c48:	bd70      	pop	{r4, r5, r6, pc}
10001c4a:	46c0      	nop			; (mov r8, r8)
10001c4c:	40040000 	.word	0x40040000
10001c50:	48000200 	.word	0x48000200
10001c54:	10004618 	.word	0x10004618
10001c58:	100045d0 	.word	0x100045d0
10001c5c:	10004604 	.word	0x10004604

10001c60 <PWM_CCU4_Init>:
  return version;
}

/* This function initializes the app */
PWM_CCU4_STATUS_t PWM_CCU4_Init(PWM_CCU4_t* handle_ptr)
{
10001c60:	b570      	push	{r4, r5, r6, lr}

  status = PWM_CCU4_STATUS_FAILURE;
  status_ccu4_global = GLOBAL_CCU4_STATUS_FAILURE;
  XMC_ASSERT("PWM_CCU4_Init:handle_ptr is NULL", (handle_ptr != NULL));

  if (PWM_CCU4_STATE_UNINITIALIZED == handle_ptr->state)
10001c62:	7f06      	ldrb	r6, [r0, #28]
    }

  }
  else
  {
    status = PWM_CCU4_STATUS_ALREADY_INITIALIZED;
10001c64:	2402      	movs	r4, #2

  status = PWM_CCU4_STATUS_FAILURE;
  status_ccu4_global = GLOBAL_CCU4_STATUS_FAILURE;
  XMC_ASSERT("PWM_CCU4_Init:handle_ptr is NULL", (handle_ptr != NULL));

  if (PWM_CCU4_STATE_UNINITIALIZED == handle_ptr->state)
10001c66:	2e00      	cmp	r6, #0
10001c68:	d001      	beq.n	10001c6e <PWM_CCU4_Init+0xe>
    status = PWM_CCU4_STATUS_ALREADY_INITIALIZED;
    XMC_DEBUG("PWM_CCU4_Init:PWM_CCU4_STATUS_ALREADY_INITIALIZED");
  }

  return (status);
} /* end of PWM_CCU4_Init() api */
10001c6a:	1c20      	adds	r0, r4, #0
10001c6c:	bd70      	pop	{r4, r5, r6, pc}
  XMC_ASSERT("PWM_CCU4_Init:handle_ptr is NULL", (handle_ptr != NULL));

  if (PWM_CCU4_STATE_UNINITIALIZED == handle_ptr->state)
  {
    /* Initialize consumed Apps */
    status_ccu4_global = GLOBAL_CCU4_Init(handle_ptr->config_ptr->global_ccu4_handle);
10001c6e:	6803      	ldr	r3, [r0, #0]
10001c70:	1c05      	adds	r5, r0, #0
10001c72:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
10001c74:	f000 f994 	bl	10001fa0 <GLOBAL_CCU4_Init>

    /* Initialize CCU4x_CC4y slice */
    if (GLOBAL_CCU4_STATUS_SUCCESS == status_ccu4_global)
10001c78:	2800      	cmp	r0, #0
10001c7a:	d002      	beq.n	10001c82 <PWM_CCU4_Init+0x22>
        status = PWM_CCU4_Start(handle_ptr);
      }
    }
    else
    {
      handle_ptr->state = PWM_CCU4_STATE_UNINITIALIZED;
10001c7c:	772e      	strb	r6, [r5, #28]
  PWM_CCU4_STATUS_t status;
  GLOBAL_CCU4_STATUS_t status_ccu4_global;
  uint32_t frequency_module;
  uint32_t prescalar;

  status = PWM_CCU4_STATUS_FAILURE;
10001c7e:	2401      	movs	r4, #1
10001c80:	e7f3      	b.n	10001c6a <PWM_CCU4_Init+0xa>
    if (GLOBAL_CCU4_STATUS_SUCCESS == status_ccu4_global)
    {
      XMC_DEBUG("PWM_CCU4_Init:Initilizing slice");

      /* Configure CCU4x_CC4y slice as timer */
      XMC_CCU4_SLICE_CompareInit(handle_ptr->ccu4_slice_ptr, handle_ptr->config_ptr->ccu4_cc4_slice_timer_ptr);
10001c82:	682b      	ldr	r3, [r5, #0]
10001c84:	68a8      	ldr	r0, [r5, #8]
10001c86:	6b99      	ldr	r1, [r3, #56]	; 0x38
10001c88:	f7ff fb44 	bl	10001314 <XMC_CCU4_SLICE_CompareInit>
      /* Set period match value of the timer  */
      XMC_CCU4_SLICE_SetTimerPeriodMatch(handle_ptr->ccu4_slice_ptr, handle_ptr->config_ptr->period_value);
10001c8c:	682b      	ldr	r3, [r5, #0]
10001c8e:	68a8      	ldr	r0, [r5, #8]
 *  XMC_CCU4_SLICE_GetTimerPeriodMatch().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_SetTimerPeriodMatch(XMC_CCU4_SLICE_t *const slice, const uint16_t period_val)
{
  XMC_ASSERT("XMC_CCU4_SLICE_SetTimerPeriodMatch:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->PRS = (uint32_t) period_val;
10001c90:	885a      	ldrh	r2, [r3, #2]
10001c92:	6342      	str	r2, [r0, #52]	; 0x34
 *  XMC_CCU4_SLICE_GetTimerPeriodMatch().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_SetTimerCompareMatch(XMC_CCU4_SLICE_t *const slice, const uint16_t compare_val)
{
  XMC_ASSERT("XMC_CCU4_SLICE_SetTimerCompareMatch:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->CRS = (uint32_t) compare_val;
10001c94:	889a      	ldrh	r2, [r3, #4]
10001c96:	63c2      	str	r2, [r0, #60]	; 0x3c

      /* Set timer compare match value for channel 1 */
      XMC_CCU4_SLICE_SetTimerCompareMatch(handle_ptr->ccu4_slice_ptr, (uint16_t) handle_ptr->config_ptr->compare_value);

      if (1U == handle_ptr->config_ptr->ccu4_cc4_slice_timer_ptr->mcm_enable)
10001c98:	6b9a      	ldr	r2, [r3, #56]	; 0x38
10001c9a:	78d2      	ldrb	r2, [r2, #3]
10001c9c:	4214      	tst	r4, r2
10001c9e:	d000      	beq.n	10001ca2 <PWM_CCU4_Init+0x42>
10001ca0:	e11c      	b.n	10001edc <PWM_CCU4_Init+0x27c>
        XMC_CCU4_SLICE_EnableCascadedShadowTransfer(handle_ptr->ccu4_slice_ptr);
      }
#endif

      /* Transfer value from shadow timer registers to actual timer registers */
      XMC_CCU4_EnableShadowTransfer(handle_ptr->ccu4_module_ptr, handle_ptr->shadow_txfr_msk);
10001ca2:	686a      	ldr	r2, [r5, #4]
 *  None.
 */
__STATIC_INLINE void XMC_CCU4_EnableShadowTransfer(XMC_CCU4_MODULE_t *const module, const uint32_t shadow_transfer_msk)
{
  XMC_ASSERT("XMC_CCU4_EnableShadowTransfer:Invalid Slice Pointer", XMC_CCU4_IsValidModule(module));
  module->GCSS = (uint32_t)shadow_transfer_msk;  
10001ca4:	6929      	ldr	r1, [r5, #16]
10001ca6:	6111      	str	r1, [r2, #16]
10001ca8:	6969      	ldr	r1, [r5, #20]
10001caa:	6111      	str	r1, [r2, #16]

static void PWM_CCU4_lConfigure_Events(PWM_CCU4_t* handle_ptr)
{

  /* Configure slice to a external event 0 */
  XMC_CCU4_SLICE_ConfigureEvent(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_EVENT_0,
10001cac:	695a      	ldr	r2, [r3, #20]
10001cae:	2101      	movs	r1, #1
10001cb0:	f7ff fc12 	bl	100014d8 <XMC_CCU4_SLICE_ConfigureEvent>
                                handle_ptr->config_ptr->event0_config_ptr);

  /* Configure slice to a external event 1 */
  XMC_CCU4_SLICE_ConfigureEvent(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_EVENT_1,
10001cb4:	682b      	ldr	r3, [r5, #0]
10001cb6:	68a8      	ldr	r0, [r5, #8]
10001cb8:	699a      	ldr	r2, [r3, #24]
10001cba:	2102      	movs	r1, #2
10001cbc:	f7ff fc0c 	bl	100014d8 <XMC_CCU4_SLICE_ConfigureEvent>
                                handle_ptr->config_ptr->event1_config_ptr);

  /* Configure slice to a external event 2 */
  XMC_CCU4_SLICE_ConfigureEvent(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_EVENT_2,
10001cc0:	682b      	ldr	r3, [r5, #0]
10001cc2:	2103      	movs	r1, #3
10001cc4:	69da      	ldr	r2, [r3, #28]
10001cc6:	68a8      	ldr	r0, [r5, #8]
10001cc8:	f7ff fc06 	bl	100014d8 <XMC_CCU4_SLICE_ConfigureEvent>
                                handle_ptr->config_ptr->event2_config_ptr);

  /* External signal controls start of the timer */
  if (XMC_CCU4_SLICE_EVENT_NONE != handle_ptr->config_ptr->ext_start_event)
10001ccc:	2320      	movs	r3, #32
10001cce:	682a      	ldr	r2, [r5, #0]
10001cd0:	5cd1      	ldrb	r1, [r2, r3]
10001cd2:	1c13      	adds	r3, r2, #0
10001cd4:	2900      	cmp	r1, #0
10001cd6:	d000      	beq.n	10001cda <PWM_CCU4_Init+0x7a>
10001cd8:	e0f9      	b.n	10001ece <PWM_CCU4_Init+0x26e>
    XMC_CCU4_SLICE_StartConfig(handle_ptr->ccu4_slice_ptr, handle_ptr->config_ptr->ext_start_event,
                               handle_ptr->config_ptr->ext_start_mode);
  }

  /* External signal can stop the timer */
  if (XMC_CCU4_SLICE_EVENT_NONE != handle_ptr->config_ptr->ext_stop_event)
10001cda:	2222      	movs	r2, #34	; 0x22
10001cdc:	5c99      	ldrb	r1, [r3, r2]
10001cde:	2900      	cmp	r1, #0
10001ce0:	d000      	beq.n	10001ce4 <PWM_CCU4_Init+0x84>
10001ce2:	e0ed      	b.n	10001ec0 <PWM_CCU4_Init+0x260>
    XMC_CCU4_SLICE_StopConfig(handle_ptr->ccu4_slice_ptr, handle_ptr->config_ptr->ext_stop_event,
                              handle_ptr->config_ptr->ext_stop_mode);
  }

  /* External signal can change the timer counting direction */
  if (XMC_CCU4_SLICE_EVENT_NONE != handle_ptr->config_ptr->ext_count_dir_event)
10001ce4:	2224      	movs	r2, #36	; 0x24
10001ce6:	5c99      	ldrb	r1, [r3, r2]
10001ce8:	2900      	cmp	r1, #0
10001cea:	d000      	beq.n	10001cee <PWM_CCU4_Init+0x8e>
10001cec:	e0e3      	b.n	10001eb6 <PWM_CCU4_Init+0x256>
  {
    XMC_CCU4_SLICE_DirectionConfig(handle_ptr->ccu4_slice_ptr, handle_ptr->config_ptr->ext_count_dir_event);
  }
  /* External signal can stop the timer and the timer value remains same */
  if (XMC_CCU4_SLICE_EVENT_NONE != handle_ptr->config_ptr->ext_gate_event)
10001cee:	2225      	movs	r2, #37	; 0x25
10001cf0:	5c99      	ldrb	r1, [r3, r2]
10001cf2:	2900      	cmp	r1, #0
10001cf4:	d000      	beq.n	10001cf8 <PWM_CCU4_Init+0x98>
10001cf6:	e0d9      	b.n	10001eac <PWM_CCU4_Init+0x24c>
  {
    XMC_CCU4_SLICE_GateConfig(handle_ptr->ccu4_slice_ptr, handle_ptr->config_ptr->ext_gate_event);
  }
  /* Timer increments on external signal */
  if (XMC_CCU4_SLICE_EVENT_NONE != handle_ptr->config_ptr->ext_count_event)
10001cf8:	2226      	movs	r2, #38	; 0x26
10001cfa:	5c99      	ldrb	r1, [r3, r2]
10001cfc:	2900      	cmp	r1, #0
10001cfe:	d000      	beq.n	10001d02 <PWM_CCU4_Init+0xa2>
10001d00:	e0cf      	b.n	10001ea2 <PWM_CCU4_Init+0x242>
  {
    XMC_CCU4_SLICE_CountConfig(handle_ptr->ccu4_slice_ptr, handle_ptr->config_ptr->ext_count_event);
  }
  /* Timer gets loaded with compare register value or period register value on external signal */
  if (XMC_CCU4_SLICE_EVENT_NONE != handle_ptr->config_ptr->ext_load_event)
10001d02:	2227      	movs	r2, #39	; 0x27
10001d04:	5c99      	ldrb	r1, [r3, r2]
10001d06:	2900      	cmp	r1, #0
10001d08:	d000      	beq.n	10001d0c <PWM_CCU4_Init+0xac>
10001d0a:	e0c5      	b.n	10001e98 <PWM_CCU4_Init+0x238>
  {
    XMC_CCU4_SLICE_LoadConfig(handle_ptr->ccu4_slice_ptr, handle_ptr->config_ptr->ext_load_event);
  }
  /* External signal PWM signal (ST bit) output gets modulated by external signal */
  if (XMC_CCU4_SLICE_EVENT_NONE != handle_ptr->config_ptr->ext_mod_event)
10001d0c:	2228      	movs	r2, #40	; 0x28
10001d0e:	5c99      	ldrb	r1, [r3, r2]
10001d10:	2900      	cmp	r1, #0
10001d12:	d000      	beq.n	10001d16 <PWM_CCU4_Init+0xb6>
10001d14:	e0b7      	b.n	10001e86 <PWM_CCU4_Init+0x226>
    XMC_CCU4_SLICE_ModulationConfig(handle_ptr->ccu4_slice_ptr, handle_ptr->config_ptr->ext_mod_event,
                                    handle_ptr->config_ptr->ext_mod_mode, handle_ptr->config_ptr->ext_mod_sync);
  }

  /* PWM signal (ST bit) output gets modulated by external signal */
  if (XMC_CCU4_SLICE_EVENT_2 == handle_ptr->config_ptr->ext_trap_event)
10001d16:	222e      	movs	r2, #46	; 0x2e
10001d18:	5c9a      	ldrb	r2, [r3, r2]
10001d1a:	2a03      	cmp	r2, #3
10001d1c:	d100      	bne.n	10001d20 <PWM_CCU4_Init+0xc0>
10001d1e:	e0e4      	b.n	10001eea <PWM_CCU4_Init+0x28a>
    if ((bool) true == handle_ptr->config_ptr->ext_trap_enable)
    {
      XMC_CCU4_SLICE_EnableTrap(handle_ptr->ccu4_slice_ptr);
    }
  }
  if ((XMC_CCU4_SLICE_EVENT_1 == handle_ptr->config_ptr->ext_override_edge_event) && (XMC_CCU4_SLICE_EVENT_2
10001d20:	222b      	movs	r2, #43	; 0x2b
10001d22:	5c9a      	ldrb	r2, [r3, r2]
10001d24:	2a02      	cmp	r2, #2
10001d26:	d048      	beq.n	10001dba <PWM_CCU4_Init+0x15a>
static void PWM_CCU4_lInit_Interrupt(PWM_CCU4_t* handle_ptr)
{

  /* Enable events. Bind event to corresponding service request node.Enable Interrupts. The user may choose to 
   disable the interrupts by LLD calls. */
  if ((bool) true == handle_ptr->config_ptr->int_per_match)
10001d28:	799a      	ldrb	r2, [r3, #6]
10001d2a:	2a00      	cmp	r2, #0
10001d2c:	d168      	bne.n	10001e00 <PWM_CCU4_Init+0x1a0>
    XMC_CCU4_SLICE_SetInterruptNode(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH,
                                    handle_ptr->config_ptr->sr_per_match);
    XMC_CCU4_SLICE_EnableEvent(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH);
  }

  if ((bool) true == handle_ptr->config_ptr->int_cmp_match_up)
10001d2e:	79da      	ldrb	r2, [r3, #7]
10001d30:	2a00      	cmp	r2, #0
10001d32:	d158      	bne.n	10001de6 <PWM_CCU4_Init+0x186>
    XMC_CCU4_SLICE_SetInterruptNode(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_UP,
                                    handle_ptr->config_ptr->sr_cmp_match_up);
    XMC_CCU4_SLICE_EnableEvent(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_UP);
  }

  if ((bool) true == handle_ptr->config_ptr->int_cmp_match_down)
10001d34:	7a1a      	ldrb	r2, [r3, #8]
10001d36:	2a00      	cmp	r2, #0
10001d38:	d000      	beq.n	10001d3c <PWM_CCU4_Init+0xdc>
10001d3a:	e097      	b.n	10001e6c <PWM_CCU4_Init+0x20c>
    XMC_CCU4_SLICE_SetInterruptNode(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_DOWN,
                                    handle_ptr->config_ptr->sr_cmp_match_down);
    XMC_CCU4_SLICE_EnableEvent(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_DOWN);
  }

  if ((bool) true == handle_ptr->config_ptr->int_one_match_down)
10001d3c:	7a5a      	ldrb	r2, [r3, #9]
10001d3e:	2a00      	cmp	r2, #0
10001d40:	d000      	beq.n	10001d44 <PWM_CCU4_Init+0xe4>
10001d42:	e086      	b.n	10001e52 <PWM_CCU4_Init+0x1f2>
    XMC_CCU4_SLICE_SetInterruptNode(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_ONE_MATCH,
                                    handle_ptr->config_ptr->sr_one_match_down);
    XMC_CCU4_SLICE_EnableEvent(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_ONE_MATCH);
  }

  if ((bool) true == handle_ptr->config_ptr->int_e0)
10001d44:	7a9a      	ldrb	r2, [r3, #10]
10001d46:	2a00      	cmp	r2, #0
10001d48:	d175      	bne.n	10001e36 <PWM_CCU4_Init+0x1d6>
    XMC_CCU4_SLICE_SetInterruptNode(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_EVENT0,
                                    handle_ptr->config_ptr->sr_e0);
    XMC_CCU4_SLICE_EnableEvent(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_EVENT0);
  }

  if ((bool) true == handle_ptr->config_ptr->int_e1)
10001d4a:	7ada      	ldrb	r2, [r3, #11]
10001d4c:	2a00      	cmp	r2, #0
10001d4e:	d164      	bne.n	10001e1a <PWM_CCU4_Init+0x1ba>
    XMC_CCU4_SLICE_SetInterruptNode(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_EVENT1,
                                    handle_ptr->config_ptr->sr_e1);
    XMC_CCU4_SLICE_EnableEvent(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_EVENT1);
  }

  if ((bool) true == handle_ptr->config_ptr->int_e2)
10001d50:	7b1a      	ldrb	r2, [r3, #12]
10001d52:	2a00      	cmp	r2, #0
10001d54:	d00c      	beq.n	10001d70 <PWM_CCU4_Init+0x110>
  {
    XMC_DEBUG("PWM_CCU4_Init: Interrupt event 2 enable");
    XMC_CCU4_SLICE_SetInterruptNode(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_EVENT2,
10001d56:	7cda      	ldrb	r2, [r3, #19]
10001d58:	68a8      	ldr	r0, [r5, #8]
10001d5a:	210a      	movs	r1, #10
10001d5c:	f7ff fbec 	bl	10001538 <XMC_CCU4_SLICE_SetInterruptNode>
__STATIC_INLINE void XMC_CCU4_SLICE_EnableEvent(XMC_CCU4_SLICE_t *const slice,
                                                const XMC_CCU4_SLICE_IRQ_ID_t event)
{
  XMC_ASSERT("XMC_CCU4_SLICE_EnableEvent:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_EnableEvent:Invalid SR event", XMC_CCU4_SLICE_CHECK_INTERRUPT(event));
  slice->INTE |= ((uint32_t) 1) << ((uint32_t) event);
10001d60:	22a4      	movs	r2, #164	; 0xa4
10001d62:	2080      	movs	r0, #128	; 0x80
                                    handle_ptr->config_ptr->sr_e2);
    XMC_CCU4_SLICE_EnableEvent(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_EVENT2);
10001d64:	68a9      	ldr	r1, [r5, #8]
10001d66:	00c0      	lsls	r0, r0, #3
10001d68:	588b      	ldr	r3, [r1, r2]
10001d6a:	4303      	orrs	r3, r0
10001d6c:	508b      	str	r3, [r1, r2]
10001d6e:	682b      	ldr	r3, [r5, #0]

      /* Enable the interrupts */
      PWM_CCU4_lInit_Interrupt(handle_ptr);

      /*Initializes the GPIO*/
      if ((bool) true == handle_ptr->config_ptr->gpio_ch_out_enable)
10001d70:	223c      	movs	r2, #60	; 0x3c
10001d72:	5c9a      	ldrb	r2, [r3, r2]
10001d74:	2a00      	cmp	r2, #0
10001d76:	d12e      	bne.n	10001dd6 <PWM_CCU4_Init+0x176>
      {
        XMC_GPIO_Init(handle_ptr->config_ptr->gpio_ch_out_ptr, handle_ptr->config_ptr->gpio_ch_out_pin,
                      handle_ptr->config_ptr->gpio_ch_out_config_ptr);
      }

      frequency_module = handle_ptr->config_ptr->global_ccu4_handle->module_frequency;
10001d78:	6cda      	ldr	r2, [r3, #76]	; 0x4c
      prescalar = (uint32_t) handle_ptr->config_ptr->ccu4_cc4_slice_timer_ptr->prescaler_initval;
      frequency_module = frequency_module / ((uint32_t) 1 << prescalar);
      handle_ptr->frequency_tclk = frequency_module;

      handle_ptr->state = PWM_CCU4_STATE_INITIALIZED;
      status = PWM_CCU4_STATUS_SUCCESS;
10001d7a:	2400      	movs	r4, #0
      {
        XMC_GPIO_Init(handle_ptr->config_ptr->gpio_ch_out_ptr, handle_ptr->config_ptr->gpio_ch_out_pin,
                      handle_ptr->config_ptr->gpio_ch_out_config_ptr);
      }

      frequency_module = handle_ptr->config_ptr->global_ccu4_handle->module_frequency;
10001d7c:	6811      	ldr	r1, [r2, #0]
      prescalar = (uint32_t) handle_ptr->config_ptr->ccu4_cc4_slice_timer_ptr->prescaler_initval;
10001d7e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
10001d80:	7912      	ldrb	r2, [r2, #4]
10001d82:	0712      	lsls	r2, r2, #28
      frequency_module = frequency_module / ((uint32_t) 1 << prescalar);
10001d84:	0f12      	lsrs	r2, r2, #28
10001d86:	40d1      	lsrs	r1, r2
      handle_ptr->frequency_tclk = frequency_module;

      handle_ptr->state = PWM_CCU4_STATE_INITIALIZED;
10001d88:	2201      	movs	r2, #1
      }

      frequency_module = handle_ptr->config_ptr->global_ccu4_handle->module_frequency;
      prescalar = (uint32_t) handle_ptr->config_ptr->ccu4_cc4_slice_timer_ptr->prescaler_initval;
      frequency_module = frequency_module / ((uint32_t) 1 << prescalar);
      handle_ptr->frequency_tclk = frequency_module;
10001d8a:	6229      	str	r1, [r5, #32]

      handle_ptr->state = PWM_CCU4_STATE_INITIALIZED;
10001d8c:	772a      	strb	r2, [r5, #28]
      status = PWM_CCU4_STATUS_SUCCESS;

      /* Start the PWM generation if start at initialization is enabled */
      if ((bool) true == handle_ptr->config_ptr->start_control)
10001d8e:	7819      	ldrb	r1, [r3, #0]
10001d90:	2900      	cmp	r1, #0
10001d92:	d100      	bne.n	10001d96 <PWM_CCU4_Init+0x136>
10001d94:	e769      	b.n	10001c6a <PWM_CCU4_Init+0xa>
__STATIC_INLINE void XMC_CCU4_EnableClock(XMC_CCU4_MODULE_t *const module, const uint8_t slice_number)
{
  XMC_ASSERT("XMC_CCU4_EnableClock:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
  XMC_ASSERT("XMC_CCU4_EnableClock:Invalid Slice Number", (slice_number < 4U));

  module->GIDLC |= ((uint32_t) 1) << slice_number;
10001d96:	1c16      	adds	r6, r2, #0
10001d98:	7b69      	ldrb	r1, [r5, #13]
  status = PWM_CCU4_STATUS_FAILURE;
  XMC_ASSERT("PWM_CCU4_Start:handle_ptr NULL", (handle_ptr != NULL));
  if ((PWM_CCU4_STATE_INITIALIZED == handle_ptr->state) || (PWM_CCU4_STATE_STOPPED == handle_ptr->state))
  {
    /* clear IDLE mode for the slice; Start timer */
    XMC_CCU4_EnableClock(handle_ptr->ccu4_module_ptr, handle_ptr->slice_number);
10001d9a:	686c      	ldr	r4, [r5, #4]
10001d9c:	408e      	lsls	r6, r1
10001d9e:	1c31      	adds	r1, r6, #0
10001da0:	68e0      	ldr	r0, [r4, #12]
10001da2:	4301      	orrs	r1, r0
10001da4:	60e1      	str	r1, [r4, #12]

    if (XMC_CCU4_SLICE_EVENT_NONE == handle_ptr->config_ptr->ext_start_event)
10001da6:	2120      	movs	r1, #32
10001da8:	5c5b      	ldrb	r3, [r3, r1]
10001daa:	2b00      	cmp	r3, #0
10001dac:	d101      	bne.n	10001db2 <PWM_CCU4_Init+0x152>
    {
      XMC_CCU4_SLICE_StartTimer(handle_ptr->ccu4_slice_ptr);
10001dae:	68ab      	ldr	r3, [r5, #8]
 *  XMC_CCU4_SLICE_StopTimer().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_StartTimer(XMC_CCU4_SLICE_t *const slice)
{
  XMC_ASSERT("XMC_CCU4_SLICE_StartTimer:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->TCSET = CCU4_CC4_TCSET_TRBS_Msk;
10001db0:	60da      	str	r2, [r3, #12]
    }

    handle_ptr->state = PWM_CCU4_STATE_RUNNING;
10001db2:	2302      	movs	r3, #2
      status = PWM_CCU4_STATUS_SUCCESS;

      /* Start the PWM generation if start at initialization is enabled */
      if ((bool) true == handle_ptr->config_ptr->start_control)
      {
        status = PWM_CCU4_Start(handle_ptr);
10001db4:	2400      	movs	r4, #0
    if (XMC_CCU4_SLICE_EVENT_NONE == handle_ptr->config_ptr->ext_start_event)
    {
      XMC_CCU4_SLICE_StartTimer(handle_ptr->ccu4_slice_ptr);
    }

    handle_ptr->state = PWM_CCU4_STATE_RUNNING;
10001db6:	772b      	strb	r3, [r5, #28]
10001db8:	e757      	b.n	10001c6a <PWM_CCU4_Init+0xa>
    {
      XMC_CCU4_SLICE_EnableTrap(handle_ptr->ccu4_slice_ptr);
    }
  }
  if ((XMC_CCU4_SLICE_EVENT_1 == handle_ptr->config_ptr->ext_override_edge_event) && (XMC_CCU4_SLICE_EVENT_2
      == handle_ptr->config_ptr->ext_override_level_event))
10001dba:	322a      	adds	r2, #42	; 0x2a
    if ((bool) true == handle_ptr->config_ptr->ext_trap_enable)
    {
      XMC_CCU4_SLICE_EnableTrap(handle_ptr->ccu4_slice_ptr);
    }
  }
  if ((XMC_CCU4_SLICE_EVENT_1 == handle_ptr->config_ptr->ext_override_edge_event) && (XMC_CCU4_SLICE_EVENT_2
10001dbc:	5c9a      	ldrb	r2, [r3, r2]
10001dbe:	2a03      	cmp	r2, #3
10001dc0:	d1b2      	bne.n	10001d28 <PWM_CCU4_Init+0xc8>
      == handle_ptr->config_ptr->ext_override_level_event))
  {
    XMC_CCU4_SLICE_ConfigureStatusBitOverrideEvent(handle_ptr->ccu4_slice_ptr,
10001dc2:	6999      	ldr	r1, [r3, #24]
10001dc4:	69da      	ldr	r2, [r3, #28]
10001dc6:	68a8      	ldr	r0, [r5, #8]
10001dc8:	f7ff fb4c 	bl	10001464 <XMC_CCU4_SLICE_ConfigureStatusBitOverrideEvent>
                                                   handle_ptr->config_ptr->event1_config_ptr,
                                                   handle_ptr->config_ptr->event2_config_ptr);
    XMC_CCU4_SLICE_StatusBitOverrideConfig(handle_ptr->ccu4_slice_ptr);
10001dcc:	68a8      	ldr	r0, [r5, #8]
10001dce:	f7ff fb25 	bl	1000141c <XMC_CCU4_SLICE_StatusBitOverrideConfig>
10001dd2:	682b      	ldr	r3, [r5, #0]
10001dd4:	e7a8      	b.n	10001d28 <PWM_CCU4_Init+0xc8>
      PWM_CCU4_lInit_Interrupt(handle_ptr);

      /*Initializes the GPIO*/
      if ((bool) true == handle_ptr->config_ptr->gpio_ch_out_enable)
      {
        XMC_GPIO_Init(handle_ptr->config_ptr->gpio_ch_out_ptr, handle_ptr->config_ptr->gpio_ch_out_pin,
10001dd6:	2244      	movs	r2, #68	; 0x44
10001dd8:	6c18      	ldr	r0, [r3, #64]	; 0x40
10001dda:	5c99      	ldrb	r1, [r3, r2]
10001ddc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
10001dde:	f7ff f989 	bl	100010f4 <XMC_GPIO_Init>
10001de2:	682b      	ldr	r3, [r5, #0]
10001de4:	e7c8      	b.n	10001d78 <PWM_CCU4_Init+0x118>
  }

  if ((bool) true == handle_ptr->config_ptr->int_cmp_match_up)
  {
    XMC_DEBUG("PWM_CCU4_Init: Interrupt compare match up enable");
    XMC_CCU4_SLICE_SetInterruptNode(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_UP,
10001de6:	7b9a      	ldrb	r2, [r3, #14]
10001de8:	68a8      	ldr	r0, [r5, #8]
10001dea:	2102      	movs	r1, #2
10001dec:	f7ff fba4 	bl	10001538 <XMC_CCU4_SLICE_SetInterruptNode>
__STATIC_INLINE void XMC_CCU4_SLICE_EnableEvent(XMC_CCU4_SLICE_t *const slice,
                                                const XMC_CCU4_SLICE_IRQ_ID_t event)
{
  XMC_ASSERT("XMC_CCU4_SLICE_EnableEvent:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_EnableEvent:Invalid SR event", XMC_CCU4_SLICE_CHECK_INTERRUPT(event));
  slice->INTE |= ((uint32_t) 1) << ((uint32_t) event);
10001df0:	22a4      	movs	r2, #164	; 0xa4
10001df2:	2304      	movs	r3, #4
                                    handle_ptr->config_ptr->sr_cmp_match_up);
    XMC_CCU4_SLICE_EnableEvent(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_UP);
10001df4:	68a9      	ldr	r1, [r5, #8]
10001df6:	5888      	ldr	r0, [r1, r2]
10001df8:	4303      	orrs	r3, r0
10001dfa:	508b      	str	r3, [r1, r2]
10001dfc:	682b      	ldr	r3, [r5, #0]
10001dfe:	e799      	b.n	10001d34 <PWM_CCU4_Init+0xd4>
  /* Enable events. Bind event to corresponding service request node.Enable Interrupts. The user may choose to 
   disable the interrupts by LLD calls. */
  if ((bool) true == handle_ptr->config_ptr->int_per_match)
  {
    XMC_DEBUG("PWM_CCU4_Init: Interrupt period match enable");
    XMC_CCU4_SLICE_SetInterruptNode(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH,
10001e00:	7b5a      	ldrb	r2, [r3, #13]
10001e02:	68a8      	ldr	r0, [r5, #8]
10001e04:	2100      	movs	r1, #0
10001e06:	f7ff fb97 	bl	10001538 <XMC_CCU4_SLICE_SetInterruptNode>
10001e0a:	22a4      	movs	r2, #164	; 0xa4
10001e0c:	2301      	movs	r3, #1
                                    handle_ptr->config_ptr->sr_per_match);
    XMC_CCU4_SLICE_EnableEvent(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH);
10001e0e:	68a9      	ldr	r1, [r5, #8]
10001e10:	5888      	ldr	r0, [r1, r2]
10001e12:	4303      	orrs	r3, r0
10001e14:	508b      	str	r3, [r1, r2]
10001e16:	682b      	ldr	r3, [r5, #0]
10001e18:	e789      	b.n	10001d2e <PWM_CCU4_Init+0xce>
  }

  if ((bool) true == handle_ptr->config_ptr->int_e1)
  {
    XMC_DEBUG("PWM_CCU4_Init: Interrupt event 1 enable");
    XMC_CCU4_SLICE_SetInterruptNode(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_EVENT1,
10001e1a:	7c9a      	ldrb	r2, [r3, #18]
10001e1c:	68a8      	ldr	r0, [r5, #8]
10001e1e:	2109      	movs	r1, #9
10001e20:	f7ff fb8a 	bl	10001538 <XMC_CCU4_SLICE_SetInterruptNode>
10001e24:	22a4      	movs	r2, #164	; 0xa4
10001e26:	2080      	movs	r0, #128	; 0x80
                                    handle_ptr->config_ptr->sr_e1);
    XMC_CCU4_SLICE_EnableEvent(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_EVENT1);
10001e28:	68a9      	ldr	r1, [r5, #8]
10001e2a:	0080      	lsls	r0, r0, #2
10001e2c:	588b      	ldr	r3, [r1, r2]
10001e2e:	4303      	orrs	r3, r0
10001e30:	508b      	str	r3, [r1, r2]
10001e32:	682b      	ldr	r3, [r5, #0]
10001e34:	e78c      	b.n	10001d50 <PWM_CCU4_Init+0xf0>
  }

  if ((bool) true == handle_ptr->config_ptr->int_e0)
  {
    XMC_DEBUG("PWM_CCU4_Init: Interrupt event 0 enable");
    XMC_CCU4_SLICE_SetInterruptNode(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_EVENT0,
10001e36:	7c5a      	ldrb	r2, [r3, #17]
10001e38:	68a8      	ldr	r0, [r5, #8]
10001e3a:	2108      	movs	r1, #8
10001e3c:	f7ff fb7c 	bl	10001538 <XMC_CCU4_SLICE_SetInterruptNode>
10001e40:	22a4      	movs	r2, #164	; 0xa4
10001e42:	2080      	movs	r0, #128	; 0x80
                                    handle_ptr->config_ptr->sr_e0);
    XMC_CCU4_SLICE_EnableEvent(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_EVENT0);
10001e44:	68a9      	ldr	r1, [r5, #8]
10001e46:	0040      	lsls	r0, r0, #1
10001e48:	588b      	ldr	r3, [r1, r2]
10001e4a:	4303      	orrs	r3, r0
10001e4c:	508b      	str	r3, [r1, r2]
10001e4e:	682b      	ldr	r3, [r5, #0]
10001e50:	e77b      	b.n	10001d4a <PWM_CCU4_Init+0xea>
  }

  if ((bool) true == handle_ptr->config_ptr->int_one_match_down)
  {
    XMC_DEBUG("PWM_CCU4_Init: Interrupt one match enable");
    XMC_CCU4_SLICE_SetInterruptNode(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_ONE_MATCH,
10001e52:	7c1a      	ldrb	r2, [r3, #16]
10001e54:	68a8      	ldr	r0, [r5, #8]
10001e56:	2101      	movs	r1, #1
10001e58:	f7ff fb6e 	bl	10001538 <XMC_CCU4_SLICE_SetInterruptNode>
10001e5c:	22a4      	movs	r2, #164	; 0xa4
10001e5e:	2302      	movs	r3, #2
                                    handle_ptr->config_ptr->sr_one_match_down);
    XMC_CCU4_SLICE_EnableEvent(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_ONE_MATCH);
10001e60:	68a9      	ldr	r1, [r5, #8]
10001e62:	5888      	ldr	r0, [r1, r2]
10001e64:	4303      	orrs	r3, r0
10001e66:	508b      	str	r3, [r1, r2]
10001e68:	682b      	ldr	r3, [r5, #0]
10001e6a:	e76b      	b.n	10001d44 <PWM_CCU4_Init+0xe4>
  }

  if ((bool) true == handle_ptr->config_ptr->int_cmp_match_down)
  {
    XMC_DEBUG("PWM_CCU4_Init: Interrupt compare match down enable");
    XMC_CCU4_SLICE_SetInterruptNode(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_DOWN,
10001e6c:	7bda      	ldrb	r2, [r3, #15]
10001e6e:	68a8      	ldr	r0, [r5, #8]
10001e70:	2103      	movs	r1, #3
10001e72:	f7ff fb61 	bl	10001538 <XMC_CCU4_SLICE_SetInterruptNode>
10001e76:	22a4      	movs	r2, #164	; 0xa4
10001e78:	2308      	movs	r3, #8
                                    handle_ptr->config_ptr->sr_cmp_match_down);
    XMC_CCU4_SLICE_EnableEvent(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_DOWN);
10001e7a:	68a9      	ldr	r1, [r5, #8]
10001e7c:	5888      	ldr	r0, [r1, r2]
10001e7e:	4303      	orrs	r3, r0
10001e80:	508b      	str	r3, [r1, r2]
10001e82:	682b      	ldr	r3, [r5, #0]
10001e84:	e75a      	b.n	10001d3c <PWM_CCU4_Init+0xdc>
    XMC_CCU4_SLICE_LoadConfig(handle_ptr->ccu4_slice_ptr, handle_ptr->config_ptr->ext_load_event);
  }
  /* External signal PWM signal (ST bit) output gets modulated by external signal */
  if (XMC_CCU4_SLICE_EVENT_NONE != handle_ptr->config_ptr->ext_mod_event)
  {
    XMC_CCU4_SLICE_ModulationConfig(handle_ptr->ccu4_slice_ptr, handle_ptr->config_ptr->ext_mod_event,
10001e86:	202a      	movs	r0, #42	; 0x2a
10001e88:	3201      	adds	r2, #1
10001e8a:	5c9a      	ldrb	r2, [r3, r2]
10001e8c:	5c1b      	ldrb	r3, [r3, r0]
10001e8e:	68a8      	ldr	r0, [r5, #8]
10001e90:	f7ff fa86 	bl	100013a0 <XMC_CCU4_SLICE_ModulationConfig>
10001e94:	682b      	ldr	r3, [r5, #0]
10001e96:	e73e      	b.n	10001d16 <PWM_CCU4_Init+0xb6>
    XMC_CCU4_SLICE_CountConfig(handle_ptr->ccu4_slice_ptr, handle_ptr->config_ptr->ext_count_event);
  }
  /* Timer gets loaded with compare register value or period register value on external signal */
  if (XMC_CCU4_SLICE_EVENT_NONE != handle_ptr->config_ptr->ext_load_event)
  {
    XMC_CCU4_SLICE_LoadConfig(handle_ptr->ccu4_slice_ptr, handle_ptr->config_ptr->ext_load_event);
10001e98:	68a8      	ldr	r0, [r5, #8]
10001e9a:	f7ff fa77 	bl	1000138c <XMC_CCU4_SLICE_LoadConfig>
10001e9e:	682b      	ldr	r3, [r5, #0]
10001ea0:	e734      	b.n	10001d0c <PWM_CCU4_Init+0xac>
    XMC_CCU4_SLICE_GateConfig(handle_ptr->ccu4_slice_ptr, handle_ptr->config_ptr->ext_gate_event);
  }
  /* Timer increments on external signal */
  if (XMC_CCU4_SLICE_EVENT_NONE != handle_ptr->config_ptr->ext_count_event)
  {
    XMC_CCU4_SLICE_CountConfig(handle_ptr->ccu4_slice_ptr, handle_ptr->config_ptr->ext_count_event);
10001ea2:	68a8      	ldr	r0, [r5, #8]
10001ea4:	f7ff fa9c 	bl	100013e0 <XMC_CCU4_SLICE_CountConfig>
10001ea8:	682b      	ldr	r3, [r5, #0]
10001eaa:	e72a      	b.n	10001d02 <PWM_CCU4_Init+0xa2>
    XMC_CCU4_SLICE_DirectionConfig(handle_ptr->ccu4_slice_ptr, handle_ptr->config_ptr->ext_count_dir_event);
  }
  /* External signal can stop the timer and the timer value remains same */
  if (XMC_CCU4_SLICE_EVENT_NONE != handle_ptr->config_ptr->ext_gate_event)
  {
    XMC_CCU4_SLICE_GateConfig(handle_ptr->ccu4_slice_ptr, handle_ptr->config_ptr->ext_gate_event);
10001eac:	68a8      	ldr	r0, [r5, #8]
10001eae:	f7ff faa1 	bl	100013f4 <XMC_CCU4_SLICE_GateConfig>
10001eb2:	682b      	ldr	r3, [r5, #0]
10001eb4:	e720      	b.n	10001cf8 <PWM_CCU4_Init+0x98>
  }

  /* External signal can change the timer counting direction */
  if (XMC_CCU4_SLICE_EVENT_NONE != handle_ptr->config_ptr->ext_count_dir_event)
  {
    XMC_CCU4_SLICE_DirectionConfig(handle_ptr->ccu4_slice_ptr, handle_ptr->config_ptr->ext_count_dir_event);
10001eb6:	68a8      	ldr	r0, [r5, #8]
10001eb8:	f7ff faa6 	bl	10001408 <XMC_CCU4_SLICE_DirectionConfig>
10001ebc:	682b      	ldr	r3, [r5, #0]
10001ebe:	e716      	b.n	10001cee <PWM_CCU4_Init+0x8e>
  }

  /* External signal can stop the timer */
  if (XMC_CCU4_SLICE_EVENT_NONE != handle_ptr->config_ptr->ext_stop_event)
  {
    XMC_CCU4_SLICE_StopConfig(handle_ptr->ccu4_slice_ptr, handle_ptr->config_ptr->ext_stop_event,
10001ec0:	3201      	adds	r2, #1
10001ec2:	5c9a      	ldrb	r2, [r3, r2]
10001ec4:	68a8      	ldr	r0, [r5, #8]
10001ec6:	f7ff fa51 	bl	1000136c <XMC_CCU4_SLICE_StopConfig>
10001eca:	682b      	ldr	r3, [r5, #0]
10001ecc:	e70a      	b.n	10001ce4 <PWM_CCU4_Init+0x84>
                                handle_ptr->config_ptr->event2_config_ptr);

  /* External signal controls start of the timer */
  if (XMC_CCU4_SLICE_EVENT_NONE != handle_ptr->config_ptr->ext_start_event)
  {
    XMC_CCU4_SLICE_StartConfig(handle_ptr->ccu4_slice_ptr, handle_ptr->config_ptr->ext_start_event,
10001ece:	2221      	movs	r2, #33	; 0x21
10001ed0:	68a8      	ldr	r0, [r5, #8]
10001ed2:	5c9a      	ldrb	r2, [r3, r2]
10001ed4:	f7ff fa36 	bl	10001344 <XMC_CCU4_SLICE_StartConfig>
10001ed8:	682b      	ldr	r3, [r5, #0]
10001eda:	e6fe      	b.n	10001cda <PWM_CCU4_Init+0x7a>
      /* Set timer compare match value for channel 1 */
      XMC_CCU4_SLICE_SetTimerCompareMatch(handle_ptr->ccu4_slice_ptr, (uint16_t) handle_ptr->config_ptr->compare_value);

      if (1U == handle_ptr->config_ptr->ccu4_cc4_slice_timer_ptr->mcm_enable)
      {
        XMC_CCU4_SetMultiChannelShadowTransferMode(handle_ptr->ccu4_module_ptr,
10001edc:	6b59      	ldr	r1, [r3, #52]	; 0x34
10001ede:	6868      	ldr	r0, [r5, #4]
10001ee0:	f7ff fa10 	bl	10001304 <XMC_CCU4_SetMultiChannelShadowTransferMode>
10001ee4:	68a8      	ldr	r0, [r5, #8]
10001ee6:	682b      	ldr	r3, [r5, #0]
10001ee8:	e6db      	b.n	10001ca2 <PWM_CCU4_Init+0x42>
  }

  /* PWM signal (ST bit) output gets modulated by external signal */
  if (XMC_CCU4_SLICE_EVENT_2 == handle_ptr->config_ptr->ext_trap_event)
  {
    XMC_CCU4_SLICE_TrapConfig(handle_ptr->ccu4_slice_ptr, handle_ptr->config_ptr->ext_trap_exit,
10001eea:	322d      	adds	r2, #45	; 0x2d
10001eec:	5c99      	ldrb	r1, [r3, r2]
10001eee:	3a01      	subs	r2, #1
10001ef0:	5c9a      	ldrb	r2, [r3, r2]
10001ef2:	68a8      	ldr	r0, [r5, #8]
10001ef4:	f7ff fa98 	bl	10001428 <XMC_CCU4_SLICE_TrapConfig>
                              handle_ptr->config_ptr->ext_trap_sync);

    if ((bool) true == handle_ptr->config_ptr->ext_trap_enable)
10001ef8:	232d      	movs	r3, #45	; 0x2d
10001efa:	682a      	ldr	r2, [r5, #0]
10001efc:	5cd2      	ldrb	r2, [r2, r3]
10001efe:	682b      	ldr	r3, [r5, #0]
10001f00:	2a00      	cmp	r2, #0
10001f02:	d100      	bne.n	10001f06 <PWM_CCU4_Init+0x2a6>
10001f04:	e70c      	b.n	10001d20 <PWM_CCU4_Init+0xc0>
 *  XMC_CCU4_SLICE_SetInput().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_EnableTrap(XMC_CCU4_SLICE_t *const slice)
{
  XMC_ASSERT("XMC_CCU4_SLICE_EnableTrap:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->TC |= (uint32_t) CCU4_CC4_TC_TRAPE_Msk;
10001f06:	2080      	movs	r0, #128	; 0x80
    {
      XMC_CCU4_SLICE_EnableTrap(handle_ptr->ccu4_slice_ptr);
10001f08:	68a9      	ldr	r1, [r5, #8]
10001f0a:	0280      	lsls	r0, r0, #10
10001f0c:	694a      	ldr	r2, [r1, #20]
10001f0e:	4302      	orrs	r2, r0
10001f10:	614a      	str	r2, [r1, #20]
10001f12:	e705      	b.n	10001d20 <PWM_CCU4_Init+0xc0>

10001f14 <INTERRUPT_Init>:

/*
 * API to initialize the INTERRUPT APP
 */
INTERRUPT_STATUS_t INTERRUPT_Init(const INTERRUPT_t *const handler)
{
10001f14:	b5f0      	push	{r4, r5, r6, r7, lr}
    INTERRUPT_Enable(handler);
  }
#endif

#if(UC_FAMILY == XMC1)
  NVIC_SetPriority(handler->node, handler->priority);
10001f16:	7802      	ldrb	r2, [r0, #0]
10001f18:	7843      	ldrb	r3, [r0, #1]
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
10001f1a:	b251      	sxtb	r1, r2
10001f1c:	2900      	cmp	r1, #0
10001f1e:	db22      	blt.n	10001f66 <INTERRUPT_Init+0x52>
10001f20:	4c1d      	ldr	r4, [pc, #116]	; (10001f98 <INTERRUPT_Init+0x84>)
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10001f22:	2503      	movs	r5, #3
10001f24:	46a4      	mov	ip, r4
10001f26:	24ff      	movs	r4, #255	; 0xff
10001f28:	26c0      	movs	r6, #192	; 0xc0
10001f2a:	b2d2      	uxtb	r2, r2
10001f2c:	0889      	lsrs	r1, r1, #2
10001f2e:	4015      	ands	r5, r2
10001f30:	00ed      	lsls	r5, r5, #3
10001f32:	0089      	lsls	r1, r1, #2
10001f34:	4461      	add	r1, ip
10001f36:	46a4      	mov	ip, r4
10001f38:	40ac      	lsls	r4, r5
10001f3a:	00b6      	lsls	r6, r6, #2
10001f3c:	598f      	ldr	r7, [r1, r6]
10001f3e:	43a7      	bics	r7, r4
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
10001f40:	019c      	lsls	r4, r3, #6
10001f42:	4663      	mov	r3, ip
10001f44:	401c      	ands	r4, r3
10001f46:	1c23      	adds	r3, r4, #0
10001f48:	40ab      	lsls	r3, r5
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10001f4a:	433b      	orrs	r3, r7
10001f4c:	518b      	str	r3, [r1, r6]
#if (UC_SERIES == XMC14)
  XMC_SCU_SetInterruptControl((uint8_t)handler->node, (XMC_SCU_IRQCTRL_t)((handler->node << 8) | handler->irqctrl));
#endif

  /* Enable the interrupt if enable_at_init is enabled */
  if (handler->enable_at_init == true)
10001f4e:	7883      	ldrb	r3, [r0, #2]
10001f50:	2b00      	cmp	r3, #0
10001f52:	d006      	beq.n	10001f62 <INTERRUPT_Init+0x4e>
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
10001f54:	231f      	movs	r3, #31
10001f56:	401a      	ands	r2, r3
10001f58:	3b1e      	subs	r3, #30
10001f5a:	4093      	lsls	r3, r2
10001f5c:	1c1a      	adds	r2, r3, #0
10001f5e:	4b0e      	ldr	r3, [pc, #56]	; (10001f98 <INTERRUPT_Init+0x84>)
10001f60:	601a      	str	r2, [r3, #0]
    INTERRUPT_Enable(handler);
  }
#endif

  return (INTERRUPT_STATUS_SUCCESS);
}
10001f62:	2000      	movs	r0, #0
10001f64:	bdf0      	pop	{r4, r5, r6, r7, pc}
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10001f66:	2403      	movs	r4, #3
10001f68:	210f      	movs	r1, #15
10001f6a:	b2d2      	uxtb	r2, r2
10001f6c:	4011      	ands	r1, r2
10001f6e:	4022      	ands	r2, r4
10001f70:	34fc      	adds	r4, #252	; 0xfc
10001f72:	1c25      	adds	r5, r4, #0
10001f74:	4809      	ldr	r0, [pc, #36]	; (10001f9c <INTERRUPT_Init+0x88>)
10001f76:	00d2      	lsls	r2, r2, #3
10001f78:	4684      	mov	ip, r0
10001f7a:	4095      	lsls	r5, r2
10001f7c:	3908      	subs	r1, #8
10001f7e:	0889      	lsrs	r1, r1, #2
10001f80:	0089      	lsls	r1, r1, #2
10001f82:	4461      	add	r1, ip
10001f84:	69c8      	ldr	r0, [r1, #28]
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
10001f86:	019b      	lsls	r3, r3, #6
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10001f88:	43a8      	bics	r0, r5
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
10001f8a:	4023      	ands	r3, r4
10001f8c:	4093      	lsls	r3, r2
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10001f8e:	1c02      	adds	r2, r0, #0
10001f90:	431a      	orrs	r2, r3
10001f92:	61ca      	str	r2, [r1, #28]
10001f94:	e7e5      	b.n	10001f62 <INTERRUPT_Init+0x4e>
10001f96:	46c0      	nop			; (mov r8, r8)
10001f98:	e000e100 	.word	0xe000e100
10001f9c:	e000ed00 	.word	0xe000ed00

10001fa0 <GLOBAL_CCU4_Init>:
  return version;
}

/* Initializes the slice with the generated configuration */
GLOBAL_CCU4_STATUS_t GLOBAL_CCU4_Init(GLOBAL_CCU4_t* handle)
{
10001fa0:	b510      	push	{r4, lr}
  XMC_ASSERT("GLOBAL_CCU4_Init:NULL handler", (NULL != handle));

  if (false == handle->is_initialized)
10001fa2:	7b43      	ldrb	r3, [r0, #13]
10001fa4:	2b00      	cmp	r3, #0
10001fa6:	d10c      	bne.n	10001fc2 <GLOBAL_CCU4_Init+0x22>
10001fa8:	1c04      	adds	r4, r0, #0
  {
    /* Enable CCU4 module */
    XMC_CCU4_Init(handle->module_ptr,handle->mcs_action);
10001faa:	7b01      	ldrb	r1, [r0, #12]
10001fac:	6880      	ldr	r0, [r0, #8]
10001fae:	f7ff f98f 	bl	100012d0 <XMC_CCU4_Init>
 * XMC_CCU4_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU4_StartPrescaler(XMC_CCU4_MODULE_t *const module)
{
  XMC_ASSERT("XMC_CCU4_StartPrescaler:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
  module->GIDLC |= (uint32_t) CCU4_GIDLC_SPRB_Msk;
10001fb2:	2180      	movs	r1, #128	; 0x80
    /* Start the prescaler */
    XMC_CCU4_StartPrescaler(handle->module_ptr);
10001fb4:	68a2      	ldr	r2, [r4, #8]
10001fb6:	0049      	lsls	r1, r1, #1
10001fb8:	68d3      	ldr	r3, [r2, #12]
10001fba:	430b      	orrs	r3, r1
10001fbc:	60d3      	str	r3, [r2, #12]
    /* Restricts multiple initializations */
    handle->is_initialized = true;
10001fbe:	2301      	movs	r3, #1
10001fc0:	7363      	strb	r3, [r4, #13]
  }

  return (GLOBAL_CCU4_STATUS_SUCCESS);
}
10001fc2:	2000      	movs	r0, #0
10001fc4:	bd10      	pop	{r4, pc}
10001fc6:	46c0      	nop			; (mov r8, r8)

10001fc8 <GLOBAL_ADC_Init>:
/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/**
 * This function initializes all instances of the ADC Global APP and low level app.
 */
GLOBAL_ADC_STATUS_t GLOBAL_ADC_Init(GLOBAL_ADC_t *const handle_ptr)
{
10001fc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10001fca:	464f      	mov	r7, r9
10001fcc:	4646      	mov	r6, r8
10001fce:	b4c0      	push	{r6, r7}
  XMC_ASSERT("GLOBAL_ADC_Init:Invalid handle_ptr", (handle_ptr != NULL))
#if (XMC_VADC_GROUP_AVAILABLE == 1U)
  uint32_t group_index;
#endif

  if (GLOBAL_ADC_UNINITIALIZED == handle_ptr->init_state)
10001fd0:	7e03      	ldrb	r3, [r0, #24]
10001fd2:	2b02      	cmp	r3, #2
10001fd4:	d004      	beq.n	10001fe0 <GLOBAL_ADC_Init+0x18>
    	XMC_VADC_GLOBAL_StartupCalibration(handle_ptr->module_ptr);
    }
    handle_ptr->init_state = GLOBAL_ADC_SUCCESS;
  }
  return (handle_ptr->init_state);
}
10001fd6:	1c18      	adds	r0, r3, #0
10001fd8:	bc0c      	pop	{r2, r3}
10001fda:	4690      	mov	r8, r2
10001fdc:	4699      	mov	r9, r3
10001fde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10001fe0:	1c04      	adds	r4, r0, #0
#endif

  if (GLOBAL_ADC_UNINITIALIZED == handle_ptr->init_state)
  {  
    /* Initialize an instance of Global hardware */
    XMC_VADC_GLOBAL_Init(handle_ptr->module_ptr, handle_ptr->global_config_handle);
10001fe2:	68c0      	ldr	r0, [r0, #12]
10001fe4:	68a1      	ldr	r1, [r4, #8]
10001fe6:	f7ff fbdf 	bl	100017a8 <XMC_VADC_GLOBAL_Init>

__STATIC_INLINE void XMC_VADC_GLOBAL_DisablePostCalibration(XMC_VADC_GLOBAL_t *const global_ptr, uint32_t group_number)
{
  XMC_ASSERT("XMC_VADC_GLOBAL_DisablePostCalibration:Wrong Module Pointer", (global_ptr == VADC))

  global_ptr->GLOBCFG |= (uint32_t)((uint32_t)1 << ((uint32_t)VADC_GLOBCFG_DPCAL0_Pos + group_number));
10001fea:	2380      	movs	r3, #128	; 0x80
10001fec:	4698      	mov	r8, r3
10001fee:	3b7f      	subs	r3, #127	; 0x7f
10001ff0:	1c25      	adds	r5, r4, #0

    /* Initialize all the Groups */
#if (XMC_VADC_GROUP_AVAILABLE == 1U)
    for(group_index = (uint32_t)0; group_index < XMC_VADC_MAXIMUM_NUM_GROUPS; group_index++)
10001ff2:	2600      	movs	r6, #0
10001ff4:	4699      	mov	r9, r3

#if(XMC_VADC_SHS_AVAILABLE == 1U)
      XMC_VADC_GLOBAL_SHS_EnableAcceleratedMode(handle_ptr->global_shs_ptr, (XMC_VADC_GROUP_INDEX_t)group_index);
#endif

      handle_ptr->group_ptrs_array[group_index]->state = GLOBAL_ADC_SUCCESS;
10001ff6:	2700      	movs	r7, #0
    /* Initialize all the Groups */
#if (XMC_VADC_GROUP_AVAILABLE == 1U)
    for(group_index = (uint32_t)0; group_index < XMC_VADC_MAXIMUM_NUM_GROUPS; group_index++)
    {
      /*Initialize Group*/
      XMC_VADC_GROUP_Init(handle_ptr->group_ptrs_array[group_index]->group_handle,
10001ff8:	682b      	ldr	r3, [r5, #0]
10001ffa:	cb03      	ldmia	r3!, {r0, r1}
10001ffc:	f7ff fc1a 	bl	10001834 <XMC_VADC_GROUP_Init>
    		            handle_ptr->group_ptrs_array[group_index]->group_config_handle);

      /* Switch on the converter of the Group[group_index]*/
      XMC_VADC_GROUP_SetPowerMode(handle_ptr->group_ptrs_array[group_index]->group_handle,
10002000:	682b      	ldr	r3, [r5, #0]
10002002:	2103      	movs	r1, #3
10002004:	6818      	ldr	r0, [r3, #0]
10002006:	f7ff fcab 	bl	10001960 <XMC_VADC_GROUP_SetPowerMode>
                                  XMC_VADC_GROUP_POWERMODE_NORMAL);

      /* Disable the post calibration option for the respective group*/
      if ((bool)false == handle_ptr->group_ptrs_array[group_index]->post_calibration)
1000200a:	682b      	ldr	r3, [r5, #0]
1000200c:	7a1b      	ldrb	r3, [r3, #8]
1000200e:	2b00      	cmp	r3, #0
10002010:	d10a      	bne.n	10002028 <GLOBAL_ADC_Init+0x60>
10002012:	4643      	mov	r3, r8
      {
        XMC_VADC_GLOBAL_DisablePostCalibration(handle_ptr->module_ptr,group_index);
10002014:	68e1      	ldr	r1, [r4, #12]
10002016:	4648      	mov	r0, r9
10002018:	58ca      	ldr	r2, [r1, r3]
1000201a:	1c33      	adds	r3, r6, #0
1000201c:	3310      	adds	r3, #16
1000201e:	4098      	lsls	r0, r3
10002020:	1c03      	adds	r3, r0, #0
10002022:	4313      	orrs	r3, r2
10002024:	4642      	mov	r2, r8
10002026:	508b      	str	r3, [r1, r2]
      }

#if(XMC_VADC_SHS_AVAILABLE == 1U)
      XMC_VADC_GLOBAL_SHS_EnableAcceleratedMode(handle_ptr->global_shs_ptr, (XMC_VADC_GROUP_INDEX_t)group_index);
10002028:	b2f1      	uxtb	r1, r6
1000202a:	6920      	ldr	r0, [r4, #16]
1000202c:	f7ff fcc4 	bl	100019b8 <XMC_VADC_GLOBAL_SHS_EnableAcceleratedMode>
#endif

      handle_ptr->group_ptrs_array[group_index]->state = GLOBAL_ADC_SUCCESS;
10002030:	cd08      	ldmia	r5!, {r3}
10002032:	725f      	strb	r7, [r3, #9]
    /* Initialize an instance of Global hardware */
    XMC_VADC_GLOBAL_Init(handle_ptr->module_ptr, handle_ptr->global_config_handle);

    /* Initialize all the Groups */
#if (XMC_VADC_GROUP_AVAILABLE == 1U)
    for(group_index = (uint32_t)0; group_index < XMC_VADC_MAXIMUM_NUM_GROUPS; group_index++)
10002034:	2e01      	cmp	r6, #1
10002036:	d116      	bne.n	10002066 <GLOBAL_ADC_Init+0x9e>
#endif

      handle_ptr->group_ptrs_array[group_index]->state = GLOBAL_ADC_SUCCESS;
    }
#if(XMC_VADC_SHS_AVAILABLE == 1U)
    XMC_VADC_GLOBAL_SHS_SetClockDivider(handle_ptr->global_shs_ptr, (uint8_t) GLOBAL_ADC_DIVS_VALUE);
10002038:	6923      	ldr	r3, [r4, #16]
  XMC_ASSERT("XMC_VADC_GLOBAL_SHS_SetClockDivider:Wrong SHS Pointer",
             (shs_ptr == (XMC_VADC_GLOBAL_SHS_t*)(void*)SHS0))
  XMC_ASSERT("XMC_VADC_GLOBAL_SHS_SetClockDivider:Wrong divide factor selected",
             (divs_value < (uint32_t)0x10))

  shs_ptr->SHSCFG =  (shs_ptr->SHSCFG & (~(uint32_t)SHS_SHSCFG_DIVS_Msk)) | (uint32_t)SHS_SHSCFG_SCWC_Msk;
1000203a:	4a0e      	ldr	r2, [pc, #56]	; (10002074 <GLOBAL_ADC_Init+0xac>)
1000203c:	6c19      	ldr	r1, [r3, #64]	; 0x40
1000203e:	400a      	ands	r2, r1
10002040:	2180      	movs	r1, #128	; 0x80
10002042:	0209      	lsls	r1, r1, #8
10002044:	430a      	orrs	r2, r1
10002046:	641a      	str	r2, [r3, #64]	; 0x40
  shs_ptr->SHSCFG |=  ((uint32_t)divs_value << SHS_SHSCFG_DIVS_Pos) | (uint32_t)SHS_SHSCFG_SCWC_Msk;
10002048:	6c1a      	ldr	r2, [r3, #64]	; 0x40
1000204a:	430a      	orrs	r2, r1
1000204c:	641a      	str	r2, [r3, #64]	; 0x40
                                                            const XMC_VADC_GLOBAL_SHS_AREF_t aref)
 {
  XMC_ASSERT("XMC_VADC_GLOBAL_SHS_StepperInit:Wrong SHS Pointer",
             (shs_ptr == (XMC_VADC_GLOBAL_SHS_t*)(void*)SHS0))

  shs_ptr->SHSCFG |=  (shs_ptr->SHSCFG & (uint32_t)~SHS_SHSCFG_AREF_Msk) | (uint32_t)aref;  
1000204e:	6c18      	ldr	r0, [r3, #64]	; 0x40
10002050:	4a09      	ldr	r2, [pc, #36]	; (10002078 <GLOBAL_ADC_Init+0xb0>)
10002052:	6c19      	ldr	r1, [r3, #64]	; 0x40
10002054:	4002      	ands	r2, r0
10002056:	430a      	orrs	r2, r1
10002058:	641a      	str	r2, [r3, #64]	; 0x40
#endif
#endif /* _XMC_VADC_GROUP_AVAILABLE_ */
#if(XMC_VADC_SHS_AVAILABLE == 1U)
    XMC_VADC_GLOBAL_SHS_SetAnalogReference(handle_ptr->global_shs_ptr, GLOBAL_ADC_AREF_VALUE);
#endif
    if((bool)true == handle_ptr->enable_startup_calibration)
1000205a:	7e63      	ldrb	r3, [r4, #25]
1000205c:	2b00      	cmp	r3, #0
1000205e:	d104      	bne.n	1000206a <GLOBAL_ADC_Init+0xa2>
    {
    	XMC_VADC_GLOBAL_StartupCalibration(handle_ptr->module_ptr);
    }
    handle_ptr->init_state = GLOBAL_ADC_SUCCESS;
10002060:	2300      	movs	r3, #0
10002062:	7623      	strb	r3, [r4, #24]
10002064:	e7b7      	b.n	10001fd6 <GLOBAL_ADC_Init+0xe>
10002066:	2601      	movs	r6, #1
10002068:	e7c6      	b.n	10001ff8 <GLOBAL_ADC_Init+0x30>
#if(XMC_VADC_SHS_AVAILABLE == 1U)
    XMC_VADC_GLOBAL_SHS_SetAnalogReference(handle_ptr->global_shs_ptr, GLOBAL_ADC_AREF_VALUE);
#endif
    if((bool)true == handle_ptr->enable_startup_calibration)
    {
    	XMC_VADC_GLOBAL_StartupCalibration(handle_ptr->module_ptr);
1000206a:	68e0      	ldr	r0, [r4, #12]
1000206c:	f7ff fbbe 	bl	100017ec <XMC_VADC_GLOBAL_StartupCalibration>
10002070:	e7f6      	b.n	10002060 <GLOBAL_ADC_Init+0x98>
10002072:	46c0      	nop			; (mov r8, r8)
10002074:	ffff7ff0 	.word	0xffff7ff0
10002078:	fffff3ff 	.word	0xfffff3ff

1000207c <DIGITAL_IO_Init>:
* @param handler Pointer pointing to APP data structure.
* @return DIGITAL_IO_STATUS_t DIGITAL_IO APP status.
*/

DIGITAL_IO_STATUS_t DIGITAL_IO_Init(const DIGITAL_IO_t *const handler)
{
1000207c:	b510      	push	{r4, lr}
1000207e:	1c04      	adds	r4, r0, #0
  XMC_ASSERT("DIGITAL_IO_Init: handler null pointer", handler != NULL);

  /* Initializes input / output characteristics */
  XMC_GPIO_Init(handler->gpio_port, handler->gpio_pin, &handler->gpio_config);
10002080:	7b01      	ldrb	r1, [r0, #12]
10002082:	1d02      	adds	r2, r0, #4
10002084:	6800      	ldr	r0, [r0, #0]
10002086:	f7ff f835 	bl	100010f4 <XMC_GPIO_Init>

  /*Configure hardware port control*/
  XMC_GPIO_SetHardwareControl(handler->gpio_port, handler->gpio_pin, handler->hwctrl);
1000208a:	6820      	ldr	r0, [r4, #0]
1000208c:	7b21      	ldrb	r1, [r4, #12]
1000208e:	7b62      	ldrb	r2, [r4, #13]
10002090:	f7ff fa6c 	bl	1000156c <XMC_GPIO_SetHardwareControl>

  return (DIGITAL_IO_STATUS_OK);
}
10002094:	2000      	movs	r0, #0
10002096:	bd10      	pop	{r4, pc}

10002098 <SystemCoreSetup>:
};
 
void SystemCoreSetup(void)
{

}
10002098:	4770      	bx	lr
1000209a:	46c0      	nop			; (mov r8, r8)

1000209c <CLOCK_XMC1_Init>:
  CLOCK_XMC1_STATUS_t loss_ext_clock_event_status = CLOCK_XMC1_STATUS_SUCCESS;
  CLOCK_XMC1_STATUS_t dco1_out_sync_status = CLOCK_XMC1_STATUS_SUCCESS;

  XMC_ASSERT("CLOCK_XMC1_Init: CLOCK_XMC1 APP handle pointer uninitialized", (handle != NULL));

  if (handle->init_status == false)
1000209c:	7803      	ldrb	r3, [r0, #0]
1000209e:	2b00      	cmp	r3, #0
100020a0:	d101      	bne.n	100020a6 <CLOCK_XMC1_Init+0xa>
#endif
    status = (CLOCK_XMC1_STATUS_t)(((uint32_t)loci_event_status) | ((uint32_t)stdbyclkfail_status) |
    		                       ((uint32_t)loss_ext_clock_event_status) | ((uint32_t)dco1_out_sync_status));
    if (CLOCK_XMC1_STATUS_SUCCESS == status)
    {
      handle->init_status = true;
100020a2:	3301      	adds	r3, #1
100020a4:	7003      	strb	r3, [r0, #0]
    }
  }
  return (status);
}
100020a6:	2000      	movs	r0, #0
100020a8:	4770      	bx	lr
100020aa:	46c0      	nop			; (mov r8, r8)

100020ac <SystemCoreClockSetup>:

/**********************************************************************************************************************
* API IMPLEMENTATION
**********************************************************************************************************************/
void SystemCoreClockSetup(void)
{
100020ac:	b530      	push	{r4, r5, lr}
100020ae:	b085      	sub	sp, #20
/* LOCAL DATA STRUCTURES */
const XMC_SCU_CLOCK_CONFIG_t CLOCK_XMC1_0_CONFIG =
100020b0:	a801      	add	r0, sp, #4
100020b2:	1c02      	adds	r2, r0, #0
100020b4:	4b03      	ldr	r3, [pc, #12]	; (100020c4 <SystemCoreClockSetup+0x18>)
100020b6:	cb32      	ldmia	r3!, {r1, r4, r5}
100020b8:	c232      	stmia	r2!, {r1, r4, r5}
  .idiv = 1U,  /**< 8 Bit integer divider */

};

  /* Configure FDIV, IDIV, PCLKSEL dividers*/
  XMC_SCU_CLOCK_Init(&CLOCK_XMC1_0_CONFIG);
100020ba:	f7ff f8e3 	bl	10001284 <XMC_SCU_CLOCK_Init>
}
100020be:	b005      	add	sp, #20
100020c0:	bd30      	pop	{r4, r5, pc}
100020c2:	46c0      	nop			; (mov r8, r8)
100020c4:	100047c0 	.word	0x100047c0

100020c8 <ADC_MEASUREMENT_ADV_Init>:
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/* Initialization routine to call ADC LLD API's */
ADC_MEASUREMENT_ADV_STATUS_t ADC_MEASUREMENT_ADV_Init(const ADC_MEASUREMENT_ADV_t *const handle_ptr)
{
100020c8:	b5f0      	push	{r4, r5, r6, r7, lr}
100020ca:	465f      	mov	r7, fp
100020cc:	4656      	mov	r6, sl
100020ce:	464d      	mov	r5, r9
100020d0:	4644      	mov	r4, r8
100020d2:	b4f0      	push	{r4, r5, r6, r7}
#ifdef ADC_MEASUREMENT_ADV_SHS_GAIN_NON_DEFAULT
  uint8_t channel_number;
#endif
  bool arbitration_status = (bool)false;

  if (ADC_MEASUREMENT_ADV_STATUS_UNINITIALIZED == *handle_ptr->init_state)
100020d4:	6903      	ldr	r3, [r0, #16]
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/* Initialization routine to call ADC LLD API's */
ADC_MEASUREMENT_ADV_STATUS_t ADC_MEASUREMENT_ADV_Init(const ADC_MEASUREMENT_ADV_t *const handle_ptr)
{
100020d6:	b083      	sub	sp, #12
#ifdef ADC_MEASUREMENT_ADV_SHS_GAIN_NON_DEFAULT
  uint8_t channel_number;
#endif
  bool arbitration_status = (bool)false;

  if (ADC_MEASUREMENT_ADV_STATUS_UNINITIALIZED == *handle_ptr->init_state)
100020d8:	781b      	ldrb	r3, [r3, #0]
100020da:	2b02      	cmp	r3, #2
100020dc:	d007      	beq.n	100020ee <ADC_MEASUREMENT_ADV_Init+0x26>
#endif

    *handle_ptr->init_state = status;
  }
  return (*handle_ptr->init_state);
}
100020de:	1c18      	adds	r0, r3, #0
100020e0:	b003      	add	sp, #12
100020e2:	bc3c      	pop	{r2, r3, r4, r5}
100020e4:	4690      	mov	r8, r2
100020e6:	4699      	mov	r9, r3
100020e8:	46a2      	mov	sl, r4
100020ea:	46ab      	mov	fp, r5
100020ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
100020ee:	1c04      	adds	r4, r0, #0
#endif
  arbitration_status = (bool)false;

  /* To check if the arbiter is already enabled. Before checking this ensure that clock and reset states are correct */
#if defined(CLOCK_GATING_SUPPORTED) && defined(ADC_MEASUREMENT_ADV_CHECK_CLOCK_GATING)
  clock_reset_check = !XMC_SCU_CLOCK_IsPeripheralClockGated(XMC_SCU_PERIPHERAL_CLOCK_VADC);
100020f0:	2001      	movs	r0, #1
100020f2:	f7ff f855 	bl	100011a0 <XMC_SCU_CLOCK_IsPeripheralClockGated>
#ifdef ADC_MEASUREMENT_ADV_QUEUE_USED
  #ifdef ADC_MEASUREMENT_ADV_SCAN_USED
      else
  #endif
      {
        arbitration_status = XMC_VADC_GROUP_QueueIsArbitrationSlotEnabled(group_ptrs[handle_ptr->group_index]);
100020f6:	7d63      	ldrb	r3, [r4, #21]
100020f8:	4e76      	ldr	r6, [pc, #472]	; (100022d4 <ADC_MEASUREMENT_ADV_Init+0x20c>)
100020fa:	009b      	lsls	r3, r3, #2
100020fc:	58f5      	ldr	r5, [r6, r3]
  clock_reset_check = !XMC_SCU_CLOCK_IsPeripheralClockGated(XMC_SCU_PERIPHERAL_CLOCK_VADC);
#endif
#ifdef PERIPHERAL_RESET_SUPPORTED
  clock_reset_check |= !XMC_SCU_RESET_IsPeripheralResetAsserted(XMC_SCU_PERIPHERAL_RESET_VADC);
#endif
  if(clock_reset_check != (bool)false)
100020fe:	2800      	cmp	r0, #0
10002100:	d000      	beq.n	10002104 <ADC_MEASUREMENT_ADV_Init+0x3c>
10002102:	e0bd      	b.n	10002280 <ADC_MEASUREMENT_ADV_Init+0x1b8>
 */
__STATIC_INLINE bool XMC_VADC_GROUP_QueueIsArbitrationSlotEnabled(XMC_VADC_GROUP_t *const group_ptr)
{
  XMC_ASSERT("XMC_VADC_GROUP_QueueIsArbitrationSlotEnabled:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))

  return ((group_ptr->ARBPR & (uint32_t)VADC_G_ARBPR_ASEN0_Msk) >> VADC_G_ARBPR_ASEN0_Pos);
10002104:	2384      	movs	r3, #132	; 0x84
10002106:	58eb      	ldr	r3, [r5, r3]
10002108:	01db      	lsls	r3, r3, #7
1000210a:	0fdb      	lsrs	r3, r3, #31
1000210c:	4699      	mov	r9, r3
                                                           uint8_t group_index)
{
  ADC_MEASUREMENT_ADV_STATUS_t status;

  /*Initialization of APP 'GLOBAL_ADC'*/
  status = (ADC_MEASUREMENT_ADV_STATUS_t) GLOBAL_ADC_Init(ADC_MEASUREMENT_ADV_GLOBAL_HANDLE);
1000210e:	4872      	ldr	r0, [pc, #456]	; (100022d8 <ADC_MEASUREMENT_ADV_Init+0x210>)
10002110:	68e7      	ldr	r7, [r4, #12]
10002112:	f7ff ff59 	bl	10001fc8 <GLOBAL_ADC_Init>

  /*Class Configuration*/
  XMC_VADC_GROUP_InputClassInit(group_ptrs[group_index],handle_ptr->iclass_config_handle,
10002116:	7dbb      	ldrb	r3, [r7, #22]
10002118:	2200      	movs	r2, #0
1000211a:	68f9      	ldr	r1, [r7, #12]
                                                           uint8_t group_index)
{
  ADC_MEASUREMENT_ADV_STATUS_t status;

  /*Initialization of APP 'GLOBAL_ADC'*/
  status = (ADC_MEASUREMENT_ADV_STATUS_t) GLOBAL_ADC_Init(ADC_MEASUREMENT_ADV_GLOBAL_HANDLE);
1000211c:	4680      	mov	r8, r0

  /*Class Configuration*/
  XMC_VADC_GROUP_InputClassInit(group_ptrs[group_index],handle_ptr->iclass_config_handle,
1000211e:	1c28      	adds	r0, r5, #0
10002120:	f7ff fbf2 	bl	10001908 <XMC_VADC_GROUP_InputClassInit>
                                XMC_VADC_GROUP_CONV_STD,handle_ptr->iclass_num);

  /* Initialize the Queue hardware */
  XMC_VADC_GROUP_QueueInit(group_ptrs[group_index],handle_ptr->queue_config_handle);
10002124:	1c28      	adds	r0, r5, #0
10002126:	6939      	ldr	r1, [r7, #16]
10002128:	f7ff fc56 	bl	100019d8 <XMC_VADC_GROUP_QueueInit>

  /* Configure the gating mode for queue*/
  XMC_VADC_GROUP_QueueSetGatingMode(group_ptrs[group_index], handle_ptr->gating_mode);
1000212c:	7d3b      	ldrb	r3, [r7, #20]
{
  XMC_ASSERT("XMC_VADC_GROUP_QueueSetGatingMode:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  XMC_ASSERT("XMC_VADC_GROUP_QueueSetGatingMode:Wrong mode selected", (mode_sel <= XMC_VADC_GATEMODE_ACTIVELOW))

  /* Clear the existing gate configuration */
  group_ptr->QMR0 &= (uint32_t)(~((uint32_t) VADC_G_QMR0_ENGT_Msk));
1000212e:	2003      	movs	r0, #3
10002130:	469c      	mov	ip, r3
10002132:	2382      	movs	r3, #130	; 0x82
10002134:	005b      	lsls	r3, r3, #1
10002136:	58e9      	ldr	r1, [r5, r3]
10002138:	4381      	bics	r1, r0
1000213a:	50e9      	str	r1, [r5, r3]
  /* Set the new gating mode */
  group_ptr->QMR0 |= (uint32_t)((uint32_t)mode_sel << VADC_G_QMR0_ENGT_Pos);
1000213c:	4661      	mov	r1, ip
1000213e:	58ea      	ldr	r2, [r5, r3]
10002140:	430a      	orrs	r2, r1
10002142:	50ea      	str	r2, [r5, r3]

  /*Interrupt Configuration*/
  if ((bool)true == handle_ptr->rs_intr_handle.interrupt_enable)
10002144:	7a3b      	ldrb	r3, [r7, #8]
10002146:	2b00      	cmp	r3, #0
10002148:	d16d      	bne.n	10002226 <ADC_MEASUREMENT_ADV_Init+0x15e>

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
__STATIC_INLINE void ADC_MEASUREMENT_ADV_lDisableArbitration(const ADC_MEASUREMENT_ADV_t *const handle_ptr,
                                                             bool arbitration_status)
{
  if(arbitration_status == (bool)false)
1000214a:	464b      	mov	r3, r9
1000214c:	2b00      	cmp	r3, #0
1000214e:	d107      	bne.n	10002160 <ADC_MEASUREMENT_ADV_Init+0x98>
 *  XMC_VADC_GROUP_QueueEnableArbitrationSlot()<BR>
 */
__STATIC_INLINE void XMC_VADC_GROUP_QueueDisableArbitrationSlot(XMC_VADC_GROUP_t *const group_ptr)
{
  XMC_ASSERT("XMC_VADC_GROUP_QueueDisableArbitrationSlot:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr));
  group_ptr->ARBPR &= ~((uint32_t)VADC_G_ARBPR_ASEN0_Msk);
10002150:	2284      	movs	r2, #132	; 0x84
#ifdef ADC_MEASUREMENT_ADV_QUEUE_USED
  #ifdef ADC_MEASUREMENT_ADV_SCAN_USED
      else
  #endif
      {
        XMC_VADC_GROUP_QueueDisableArbitrationSlot(group_ptrs[handle_ptr->group_index]);
10002152:	7d63      	ldrb	r3, [r4, #21]
10002154:	009b      	lsls	r3, r3, #2
10002156:	58f1      	ldr	r1, [r6, r3]
10002158:	4b60      	ldr	r3, [pc, #384]	; (100022dc <ADC_MEASUREMENT_ADV_Init+0x214>)
1000215a:	5888      	ldr	r0, [r1, r2]
1000215c:	4003      	ands	r3, r0
1000215e:	508b      	str	r3, [r1, r2]
{
  int32_t group_index;

  for (group_index = (int32_t)XMC_VADC_MAXIMUM_NUM_GROUPS - (int32_t)1; group_index >= (int32_t)0  ; group_index--)
  {
    XMC_VADC_GROUP_SetPowerMode(group_ptrs[group_index],XMC_VADC_GROUP_POWERMODE_OFF);
10002160:	485f      	ldr	r0, [pc, #380]	; (100022e0 <ADC_MEASUREMENT_ADV_Init+0x218>)
10002162:	2100      	movs	r1, #0
10002164:	f7ff fbfc 	bl	10001960 <XMC_VADC_GROUP_SetPowerMode>
10002168:	485e      	ldr	r0, [pc, #376]	; (100022e4 <ADC_MEASUREMENT_ADV_Init+0x21c>)
1000216a:	2100      	movs	r1, #0
1000216c:	f7ff fbf8 	bl	10001960 <XMC_VADC_GROUP_SetPowerMode>
  }

  for (group_index = (int32_t)XMC_VADC_MAXIMUM_NUM_GROUPS - (int32_t)1; group_index > (int32_t)0  ; group_index--)
  {
    XMC_VADC_GROUP_SetSyncSlave(group_ptrs[group_index], (uint32_t)0, (uint32_t)group_index);
10002170:	2201      	movs	r2, #1
10002172:	485b      	ldr	r0, [pc, #364]	; (100022e0 <ADC_MEASUREMENT_ADV_Init+0x218>)
10002174:	2100      	movs	r1, #0
10002176:	f7ff fbfb 	bl	10001970 <XMC_VADC_GROUP_SetSyncSlave>

    XMC_VADC_GROUP_CheckSlaveReadiness(group_ptrs[0U], (uint32_t)group_index);
1000217a:	2101      	movs	r1, #1
1000217c:	4859      	ldr	r0, [pc, #356]	; (100022e4 <ADC_MEASUREMENT_ADV_Init+0x21c>)
1000217e:	f7ff fc09 	bl	10001994 <XMC_VADC_GROUP_CheckSlaveReadiness>
  }

  XMC_VADC_GROUP_SetSyncMaster(group_ptrs[0U]);
10002182:	4858      	ldr	r0, [pc, #352]	; (100022e4 <ADC_MEASUREMENT_ADV_Init+0x21c>)
10002184:	f7ff fc00 	bl	10001988 <XMC_VADC_GROUP_SetSyncMaster>

  XMC_VADC_GROUP_SetPowerMode(group_ptrs[0U],XMC_VADC_GROUP_POWERMODE_NORMAL);
10002188:	4856      	ldr	r0, [pc, #344]	; (100022e4 <ADC_MEASUREMENT_ADV_Init+0x21c>)
1000218a:	2103      	movs	r1, #3
1000218c:	f7ff fbe8 	bl	10001960 <XMC_VADC_GROUP_SetPowerMode>
#ifdef ADC_MEASUREMENT_ADV_MUX_USED
  #ifdef ADC_MEASUREMENT_ADV_MUX_NOT_ALL_USED
    if (handle_ptr->event_config != NULL)
  #endif
    {
      (handle_ptr->event_config)();
10002190:	68a3      	ldr	r3, [r4, #8]
10002192:	4798      	blx	r3
    }
#endif

    total_number_of_channels = (uint8_t)handle_ptr->total_number_of_channels;
10002194:	7de3      	ldrb	r3, [r4, #23]
    for (ch_num = (uint8_t)0; ch_num < (uint8_t)total_number_of_channels; ch_num++)
10002196:	2b00      	cmp	r3, #0
10002198:	d01f      	beq.n	100021da <ADC_MEASUREMENT_ADV_Init+0x112>
1000219a:	1e5f      	subs	r7, r3, #1
1000219c:	b2ff      	uxtb	r7, r7
1000219e:	3701      	adds	r7, #1
100021a0:	00bb      	lsls	r3, r7, #2
100021a2:	4699      	mov	r9, r3
100021a4:	2500      	movs	r5, #0
    {
      indexed = handle_ptr->channel_array[ch_num];
100021a6:	6823      	ldr	r3, [r4, #0]
100021a8:	595f      	ldr	r7, [r3, r5]
100021aa:	3504      	adds	r5, #4

      /* Initialize for configured channels*/
      XMC_VADC_GROUP_ChannelInit(group_ptrs[indexed->group_index],(uint32_t)indexed->ch_num, indexed->ch_handle);
100021ac:	7a3b      	ldrb	r3, [r7, #8]
100021ae:	7a79      	ldrb	r1, [r7, #9]
100021b0:	009b      	lsls	r3, r3, #2
100021b2:	58f0      	ldr	r0, [r6, r3]
100021b4:	683a      	ldr	r2, [r7, #0]
100021b6:	f7ff fc59 	bl	10001a6c <XMC_VADC_GROUP_ChannelInit>
__STATIC_INLINE void XMC_VADC_GROUP_ResultInit(XMC_VADC_GROUP_t *const group_ptr,
                                               const uint32_t res_reg_num,
                                               const XMC_VADC_RESULT_CONFIG_t *config)
{
  XMC_ASSERT("XMC_VADC_GROUP_ResultInit:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  group_ptr->RCR[res_reg_num] = config->g_rcr;
100021ba:	20a0      	movs	r0, #160	; 0xa0
100021bc:	0080      	lsls	r0, r0, #2
100021be:	4684      	mov	ip, r0
      XMC_VADC_GROUP_ResultInit(group_ptrs[indexed->group_index], (uint32_t)indexed->result_fifo_tail_number,
                                indexed->res_handle[ADC_MEASUREMENT_ADV_TAIL_RESULT_REG_CONFIG]);
  }
#endif
      /* Initialize for configured result registers For FIFO Head configuration*/
      XMC_VADC_GROUP_ResultInit(group_ptrs[indexed->group_index], (uint32_t)indexed->ch_handle->result_reg_number,
100021c0:	7a3b      	ldrb	r3, [r7, #8]
100021c2:	6879      	ldr	r1, [r7, #4]
100021c4:	009b      	lsls	r3, r3, #2
100021c6:	58f2      	ldr	r2, [r6, r3]
100021c8:	683b      	ldr	r3, [r7, #0]
100021ca:	6809      	ldr	r1, [r1, #0]
100021cc:	789b      	ldrb	r3, [r3, #2]
100021ce:	071b      	lsls	r3, r3, #28
100021d0:	0e9b      	lsrs	r3, r3, #26
100021d2:	4463      	add	r3, ip
100021d4:	5099      	str	r1, [r3, r2]
      (handle_ptr->event_config)();
    }
#endif

    total_number_of_channels = (uint8_t)handle_ptr->total_number_of_channels;
    for (ch_num = (uint8_t)0; ch_num < (uint8_t)total_number_of_channels; ch_num++)
100021d6:	454d      	cmp	r5, r9
100021d8:	d1e5      	bne.n	100021a6 <ADC_MEASUREMENT_ADV_Init+0xde>
    {
      NVIC_EnableIRQ((IRQn_Type)handle_ptr->local_scan_handle->rs_intr_handle.node_id);
    }
#endif
#ifdef ADC_MEASUREMENT_ADV_LOCAL_QUEUE_USED
    if (((bool)true == handle_ptr->local_queue_handle->rs_intr_handle.interrupt_enable) &&
100021da:	68e3      	ldr	r3, [r4, #12]
100021dc:	7a1a      	ldrb	r2, [r3, #8]
100021de:	2a00      	cmp	r2, #0
100021e0:	d002      	beq.n	100021e8 <ADC_MEASUREMENT_ADV_Init+0x120>
100021e2:	7d22      	ldrb	r2, [r4, #20]
100021e4:	2a03      	cmp	r2, #3
100021e6:	d06a      	beq.n	100022be <ADC_MEASUREMENT_ADV_Init+0x1f6>
/* Local function to insert the queue entries into the hardware.*/
__STATIC_INLINE void ADC_MEASUREMENT_ADV_lQueueInsertEntries(const ADC_MEASUREMENT_ADV_t *const handle_ptr)
{
  uint32_t entry_index;

  XMC_VADC_GROUP_t *queue_group_ptr = group_ptrs[handle_ptr->group_index];
100021e8:	7d63      	ldrb	r3, [r4, #21]
  const XMC_VADC_QUEUE_ENTRY_t **const entries_array = handle_ptr->local_queue_entries;
100021ea:	6862      	ldr	r2, [r4, #4]
/* Local function to insert the queue entries into the hardware.*/
__STATIC_INLINE void ADC_MEASUREMENT_ADV_lQueueInsertEntries(const ADC_MEASUREMENT_ADV_t *const handle_ptr)
{
  uint32_t entry_index;

  XMC_VADC_GROUP_t *queue_group_ptr = group_ptrs[handle_ptr->group_index];
100021ec:	009b      	lsls	r3, r3, #2
100021ee:	58f0      	ldr	r0, [r6, r3]
  const XMC_VADC_QUEUE_ENTRY_t **const entries_array = handle_ptr->local_queue_entries;

  for(entry_index = 0; entry_index < handle_ptr->total_number_of_entries; entry_index++)
100021f0:	7da3      	ldrb	r3, [r4, #22]
100021f2:	2b00      	cmp	r3, #0
100021f4:	d00c      	beq.n	10002210 <ADC_MEASUREMENT_ADV_Init+0x148>
__STATIC_INLINE void XMC_VADC_GROUP_QueueInsertChannel(XMC_VADC_GROUP_t *const group_ptr,
                                                       const XMC_VADC_QUEUE_ENTRY_t entry)
{
  XMC_ASSERT("XMC_VADC_GROUP_QueueInsertChannel:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  /* Insert the channel physically and get the length of the queue*/
  group_ptr->QINR0 = entry.qinr0;
100021f6:	2588      	movs	r5, #136	; 0x88
100021f8:	2300      	movs	r3, #0
100021fa:	006d      	lsls	r5, r5, #1
100021fc:	ca02      	ldmia	r2!, {r1}
100021fe:	3301      	adds	r3, #1
10002200:	6809      	ldr	r1, [r1, #0]
10002202:	5141      	str	r1, [r0, r5]
10002204:	7da1      	ldrb	r1, [r4, #22]
10002206:	428b      	cmp	r3, r1
10002208:	d3f8      	bcc.n	100021fc <ADC_MEASUREMENT_ADV_Init+0x134>
1000220a:	7d63      	ldrb	r3, [r4, #21]
1000220c:	009b      	lsls	r3, r3, #2
1000220e:	58f0      	ldr	r0, [r6, r3]
 *  XMC_VADC_GROUP_QueueDisableArbitrationSlot()<BR>
 */
__STATIC_INLINE void XMC_VADC_GROUP_QueueEnableArbitrationSlot(XMC_VADC_GROUP_t *const group_ptr)
{
  XMC_ASSERT("XMC_VADC_GROUP_QueueEnableArbitrationSlot:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr));
  group_ptr->ARBPR |= (uint32_t)((uint32_t)1 << VADC_G_ARBPR_ASEN0_Pos);
10002210:	2284      	movs	r2, #132	; 0x84
10002212:	2180      	movs	r1, #128	; 0x80
10002214:	5883      	ldr	r3, [r0, r2]
10002216:	0449      	lsls	r1, r1, #17
10002218:	430b      	orrs	r3, r1
1000221a:	5083      	str	r3, [r0, r2]
    {
      ADC_MEASUREMENT_ADV_StartADC(handle_ptr);
    }
#endif

    *handle_ptr->init_state = status;
1000221c:	4642      	mov	r2, r8
1000221e:	6923      	ldr	r3, [r4, #16]
10002220:	701a      	strb	r2, [r3, #0]
10002222:	4643      	mov	r3, r8
10002224:	e75b      	b.n	100020de <ADC_MEASUREMENT_ADV_Init+0x16>

  /*Interrupt Configuration*/
  if ((bool)true == handle_ptr->rs_intr_handle.interrupt_enable)
  {
#if (UC_FAMILY == XMC1)
    NVIC_SetPriority((IRQn_Type)handle_ptr->rs_intr_handle.node_id, handle_ptr->rs_intr_handle.priority);
10002226:	6839      	ldr	r1, [r7, #0]
10002228:	b2cb      	uxtb	r3, r1
1000222a:	469a      	mov	sl, r3
1000222c:	687b      	ldr	r3, [r7, #4]
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
1000222e:	4652      	mov	r2, sl
10002230:	9301      	str	r3, [sp, #4]
10002232:	466b      	mov	r3, sp
10002234:	70da      	strb	r2, [r3, #3]
10002236:	b252      	sxtb	r2, r2
10002238:	2a00      	cmp	r2, #0
1000223a:	db24      	blt.n	10002286 <ADC_MEASUREMENT_ADV_Init+0x1be>
1000223c:	4b2a      	ldr	r3, [pc, #168]	; (100022e8 <ADC_MEASUREMENT_ADV_Init+0x220>)
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
1000223e:	0892      	lsrs	r2, r2, #2
10002240:	469c      	mov	ip, r3
10002242:	23c0      	movs	r3, #192	; 0xc0
10002244:	0092      	lsls	r2, r2, #2
10002246:	4462      	add	r2, ip
10002248:	009b      	lsls	r3, r3, #2
1000224a:	469c      	mov	ip, r3
1000224c:	58d3      	ldr	r3, [r2, r3]
1000224e:	4008      	ands	r0, r1
10002250:	469a      	mov	sl, r3
10002252:	23ff      	movs	r3, #255	; 0xff
10002254:	1c19      	adds	r1, r3, #0
10002256:	00c0      	lsls	r0, r0, #3
10002258:	4081      	lsls	r1, r0
1000225a:	469b      	mov	fp, r3
1000225c:	4653      	mov	r3, sl
1000225e:	438b      	bics	r3, r1
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
10002260:	4659      	mov	r1, fp
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10002262:	469a      	mov	sl, r3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
10002264:	9b01      	ldr	r3, [sp, #4]
10002266:	019b      	lsls	r3, r3, #6
10002268:	400b      	ands	r3, r1
1000226a:	4083      	lsls	r3, r0
1000226c:	1c18      	adds	r0, r3, #0
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
1000226e:	4653      	mov	r3, sl
10002270:	4318      	orrs	r0, r3
10002272:	4663      	mov	r3, ip
10002274:	50d0      	str	r0, [r2, r3]
    XMC_SCU_SetInterruptControl(handle_ptr->rs_intr_handle.node_id,
                                ((handle_ptr->rs_intr_handle.node_id << 8) | handle_ptr->rs_intr_handle.irqctrl));
#endif

    /* Connect RS Events to NVIC nodes */
    XMC_VADC_GROUP_QueueSetReqSrcEventInterruptNode(group_ptrs[group_index], (XMC_VADC_SR_t)handle_ptr->srv_req_node);
10002276:	7d79      	ldrb	r1, [r7, #21]
10002278:	1c28      	adds	r0, r5, #0
1000227a:	f7ff fbed 	bl	10001a58 <XMC_VADC_GROUP_QueueSetReqSrcEventInterruptNode>
1000227e:	e764      	b.n	1000214a <ADC_MEASUREMENT_ADV_Init+0x82>
  bool arbitration_status;

#if !defined(CLOCK_GATING_SUPPORTED) || !defined(ADC_MEASUREMENT_ADV_CHECK_CLOCK_GATING)
  clock_reset_check = (bool)false;
#endif
  arbitration_status = (bool)false;
10002280:	2300      	movs	r3, #0
10002282:	4699      	mov	r9, r3
10002284:	e743      	b.n	1000210e <ADC_MEASUREMENT_ADV_Init+0x46>
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10002286:	4653      	mov	r3, sl
10002288:	220f      	movs	r2, #15
1000228a:	401a      	ands	r2, r3
1000228c:	4b17      	ldr	r3, [pc, #92]	; (100022ec <ADC_MEASUREMENT_ADV_Init+0x224>)
1000228e:	3a08      	subs	r2, #8
10002290:	469c      	mov	ip, r3
10002292:	0892      	lsrs	r2, r2, #2
10002294:	0092      	lsls	r2, r2, #2
10002296:	4494      	add	ip, r2
10002298:	4663      	mov	r3, ip
1000229a:	22ff      	movs	r2, #255	; 0xff
1000229c:	69d9      	ldr	r1, [r3, #28]
1000229e:	4653      	mov	r3, sl
100022a0:	4018      	ands	r0, r3
100022a2:	1c13      	adds	r3, r2, #0
100022a4:	00c0      	lsls	r0, r0, #3
100022a6:	4083      	lsls	r3, r0
100022a8:	4399      	bics	r1, r3
100022aa:	468a      	mov	sl, r1
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
100022ac:	9b01      	ldr	r3, [sp, #4]
100022ae:	0199      	lsls	r1, r3, #6
100022b0:	400a      	ands	r2, r1
100022b2:	4082      	lsls	r2, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
100022b4:	4653      	mov	r3, sl
100022b6:	4313      	orrs	r3, r2
100022b8:	4662      	mov	r2, ip
100022ba:	61d3      	str	r3, [r2, #28]
100022bc:	e7db      	b.n	10002276 <ADC_MEASUREMENT_ADV_Init+0x1ae>
#endif
#ifdef ADC_MEASUREMENT_ADV_LOCAL_QUEUE_USED
    if (((bool)true == handle_ptr->local_queue_handle->rs_intr_handle.interrupt_enable) &&
        (ADC_MEASUREMENT_ADV_REQUEST_SOURCE_LOCAL_QUEUE == handle_ptr->req_src))
    {
      NVIC_EnableIRQ((IRQn_Type)handle_ptr->local_queue_handle->rs_intr_handle.node_id);
100022be:	681b      	ldr	r3, [r3, #0]
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
100022c0:	061a      	lsls	r2, r3, #24
100022c2:	d491      	bmi.n	100021e8 <ADC_MEASUREMENT_ADV_Init+0x120>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
100022c4:	221f      	movs	r2, #31
100022c6:	4013      	ands	r3, r2
100022c8:	3a1e      	subs	r2, #30
100022ca:	409a      	lsls	r2, r3
100022cc:	1c13      	adds	r3, r2, #0
100022ce:	4a06      	ldr	r2, [pc, #24]	; (100022e8 <ADC_MEASUREMENT_ADV_Init+0x220>)
100022d0:	6013      	str	r3, [r2, #0]
100022d2:	e789      	b.n	100021e8 <ADC_MEASUREMENT_ADV_Init+0x120>
100022d4:	100047cc 	.word	0x100047cc
100022d8:	200005c0 	.word	0x200005c0
100022dc:	feffffff 	.word	0xfeffffff
100022e0:	48030800 	.word	0x48030800
100022e4:	48030400 	.word	0x48030400
100022e8:	e000e100 	.word	0xe000e100
100022ec:	e000ed00 	.word	0xe000ed00

100022f0 <VOLT_CURR_TEMP_event_config>:

/* This function would be called in the ADC_MEASUREMENT_Init() to initialize the SR lines of the
 * Result event/channel event.
 */
static void VOLT_CURR_TEMP_event_config(void)
{
100022f0:	b508      	push	{r3, lr}

	/* Result Event Node Mux Configuration for Temperature (Group-1 channel-7 Result_Register-10)*/
	XMC_VADC_GROUP_SetResultInterruptNode(VADC_G1, 10U, XMC_VADC_SR_GROUP_SR1);
100022f2:	4803      	ldr	r0, [pc, #12]	; (10002300 <VOLT_CURR_TEMP_event_config+0x10>)
100022f4:	210a      	movs	r1, #10
100022f6:	2201      	movs	r2, #1
100022f8:	f7ff fbf4 	bl	10001ae4 <XMC_VADC_GROUP_SetResultInterruptNode>

}
100022fc:	bd08      	pop	{r3, pc}
100022fe:	46c0      	nop			; (mov r8, r8)
10002300:	48030800 	.word	0x48030800

10002304 <ACOMP_event_config>:

/* This function would be called in the ADC_MEASUREMENT_Init() to initialize the SR lines of the
 * Result event/channel event.
 */
static void ACOMP_event_config(void)
{
10002304:	b508      	push	{r3, lr}

	/* Result Event Node Mux Configuration for VRef (Group-0 channel-0 Result_Register-9)*/
	XMC_VADC_GROUP_SetResultInterruptNode(VADC_G0, 9U, XMC_VADC_SR_GROUP_SR1);
10002306:	4803      	ldr	r0, [pc, #12]	; (10002314 <ACOMP_event_config+0x10>)
10002308:	2109      	movs	r1, #9
1000230a:	2201      	movs	r2, #1
1000230c:	f7ff fbea 	bl	10001ae4 <XMC_VADC_GROUP_SetResultInterruptNode>

}
10002310:	bd08      	pop	{r3, pc}
10002312:	46c0      	nop			; (mov r8, r8)
10002314:	48030400 	.word	0x48030400

10002318 <DAVE_Init>:
 * @param[in]  None
 *
 * @return  DAVE_STATUS_t <BR>
 ******************************************************************************/
DAVE_STATUS_t DAVE_Init(void)
{
10002318:	b508      	push	{r3, lr}
  DAVE_STATUS_t init_status;
  
  init_status = DAVE_STATUS_SUCCESS;
     /** @Initialization of APPs Init Functions */
     init_status = (DAVE_STATUS_t)CLOCK_XMC1_Init(&CLOCK_XMC1_0);
1000231a:	482a      	ldr	r0, [pc, #168]	; (100023c4 <DAVE_Init+0xac>)
1000231c:	f7ff febe 	bl	1000209c <CLOCK_XMC1_Init>

  if (init_status == DAVE_STATUS_SUCCESS)
10002320:	2800      	cmp	r0, #0
10002322:	d000      	beq.n	10002326 <DAVE_Init+0xe>
  {
	 /**  Initialization of DIGITAL_IO APP instance DOWN_LED */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&DOWN_LED); 
   }  
  return init_status;
} /**  End of function DAVE_Init */
10002324:	bd08      	pop	{r3, pc}
     init_status = (DAVE_STATUS_t)CLOCK_XMC1_Init(&CLOCK_XMC1_0);

  if (init_status == DAVE_STATUS_SUCCESS)
  {
	 /**  Initialization of UART APP instance COM */
	 init_status = (DAVE_STATUS_t)UART_Init(&COM); 
10002326:	4828      	ldr	r0, [pc, #160]	; (100023c8 <DAVE_Init+0xb0>)
10002328:	f7ff fbf6 	bl	10001b18 <UART_Init>
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
1000232c:	2800      	cmp	r0, #0
1000232e:	d1f9      	bne.n	10002324 <DAVE_Init+0xc>
  {
	 /**  Initialization of INTERRUPT APP instance TASK_20MS */
	 init_status = (DAVE_STATUS_t)INTERRUPT_Init(&TASK_20MS); 
10002330:	4826      	ldr	r0, [pc, #152]	; (100023cc <DAVE_Init+0xb4>)
10002332:	f7ff fdef 	bl	10001f14 <INTERRUPT_Init>
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
10002336:	2800      	cmp	r0, #0
10002338:	d1f4      	bne.n	10002324 <DAVE_Init+0xc>
  {
	 /**  Initialization of INTERRUPT APP instance ACOMP_1MS */
	 init_status = (DAVE_STATUS_t)INTERRUPT_Init(&ACOMP_1MS); 
1000233a:	4825      	ldr	r0, [pc, #148]	; (100023d0 <DAVE_Init+0xb8>)
1000233c:	f7ff fdea 	bl	10001f14 <INTERRUPT_Init>
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
10002340:	2800      	cmp	r0, #0
10002342:	d1ef      	bne.n	10002324 <DAVE_Init+0xc>
  {
	 /**  Initialization of ADC_MEASUREMENT_ADV APP instance VOLT_CURR_TEMP */
	 init_status = (DAVE_STATUS_t)ADC_MEASUREMENT_ADV_Init(&VOLT_CURR_TEMP); 
10002344:	4823      	ldr	r0, [pc, #140]	; (100023d4 <DAVE_Init+0xbc>)
10002346:	f7ff febf 	bl	100020c8 <ADC_MEASUREMENT_ADV_Init>
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
1000234a:	2800      	cmp	r0, #0
1000234c:	d1ea      	bne.n	10002324 <DAVE_Init+0xc>
  {
	 /**  Initialization of ADC_MEASUREMENT_ADV APP instance ACOMP */
	 init_status = (DAVE_STATUS_t)ADC_MEASUREMENT_ADV_Init(&ACOMP); 
1000234e:	4822      	ldr	r0, [pc, #136]	; (100023d8 <DAVE_Init+0xc0>)
10002350:	f7ff feba 	bl	100020c8 <ADC_MEASUREMENT_ADV_Init>
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
10002354:	2800      	cmp	r0, #0
10002356:	d1e5      	bne.n	10002324 <DAVE_Init+0xc>
  {
	 /**  Initialization of DIGITAL_IO APP instance JMP4 */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&JMP4); 
10002358:	4820      	ldr	r0, [pc, #128]	; (100023dc <DAVE_Init+0xc4>)
1000235a:	f7ff fe8f 	bl	1000207c <DIGITAL_IO_Init>
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
1000235e:	2800      	cmp	r0, #0
10002360:	d1e0      	bne.n	10002324 <DAVE_Init+0xc>
  {
	 /**  Initialization of DIGITAL_IO APP instance JMP3 */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&JMP3); 
10002362:	481f      	ldr	r0, [pc, #124]	; (100023e0 <DAVE_Init+0xc8>)
10002364:	f7ff fe8a 	bl	1000207c <DIGITAL_IO_Init>
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
10002368:	2800      	cmp	r0, #0
1000236a:	d1db      	bne.n	10002324 <DAVE_Init+0xc>
  {
	 /**  Initialization of DIGITAL_IO APP instance JMP2 */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&JMP2); 
1000236c:	481d      	ldr	r0, [pc, #116]	; (100023e4 <DAVE_Init+0xcc>)
1000236e:	f7ff fe85 	bl	1000207c <DIGITAL_IO_Init>
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
10002372:	2800      	cmp	r0, #0
10002374:	d1d6      	bne.n	10002324 <DAVE_Init+0xc>
  {
	 /**  Initialization of DIGITAL_IO APP instance JMP1 */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&JMP1); 
10002376:	481c      	ldr	r0, [pc, #112]	; (100023e8 <DAVE_Init+0xd0>)
10002378:	f7ff fe80 	bl	1000207c <DIGITAL_IO_Init>
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
1000237c:	2800      	cmp	r0, #0
1000237e:	d1d1      	bne.n	10002324 <DAVE_Init+0xc>
  {
	 /**  Initialization of DIGITAL_IO APP instance CLAMP */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&CLAMP); 
10002380:	481a      	ldr	r0, [pc, #104]	; (100023ec <DAVE_Init+0xd4>)
10002382:	f7ff fe7b 	bl	1000207c <DIGITAL_IO_Init>
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
10002386:	2800      	cmp	r0, #0
10002388:	d1cc      	bne.n	10002324 <DAVE_Init+0xc>
  {
	 /**  Initialization of DIGITAL_IO APP instance UP_LED */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&UP_LED); 
1000238a:	4819      	ldr	r0, [pc, #100]	; (100023f0 <DAVE_Init+0xd8>)
1000238c:	f7ff fe76 	bl	1000207c <DIGITAL_IO_Init>
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
10002390:	2800      	cmp	r0, #0
10002392:	d1c7      	bne.n	10002324 <DAVE_Init+0xc>
  {
	 /**  Initialization of DIGITAL_IO APP instance G_LED */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&G_LED); 
10002394:	4817      	ldr	r0, [pc, #92]	; (100023f4 <DAVE_Init+0xdc>)
10002396:	f7ff fe71 	bl	1000207c <DIGITAL_IO_Init>
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
1000239a:	2800      	cmp	r0, #0
1000239c:	d1c2      	bne.n	10002324 <DAVE_Init+0xc>
  {
	 /**  Initialization of DIGITAL_IO APP instance R_LED */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&R_LED); 
1000239e:	4816      	ldr	r0, [pc, #88]	; (100023f8 <DAVE_Init+0xe0>)
100023a0:	f7ff fe6c 	bl	1000207c <DIGITAL_IO_Init>
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
100023a4:	2800      	cmp	r0, #0
100023a6:	d1bd      	bne.n	10002324 <DAVE_Init+0xc>
  {
	 /**  Initialization of PWM_CCU4 APP instance PULSE_250US */
	 init_status = (DAVE_STATUS_t)PWM_CCU4_Init(&PULSE_250US); 
100023a8:	4814      	ldr	r0, [pc, #80]	; (100023fc <DAVE_Init+0xe4>)
100023aa:	f7ff fc59 	bl	10001c60 <PWM_CCU4_Init>
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
100023ae:	2800      	cmp	r0, #0
100023b0:	d1b8      	bne.n	10002324 <DAVE_Init+0xc>
  {
	 /**  Initialization of PWM_CCU4 APP instance PULSE_5MS */
	 init_status = (DAVE_STATUS_t)PWM_CCU4_Init(&PULSE_5MS); 
100023b2:	4813      	ldr	r0, [pc, #76]	; (10002400 <DAVE_Init+0xe8>)
100023b4:	f7ff fc54 	bl	10001c60 <PWM_CCU4_Init>
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
100023b8:	2800      	cmp	r0, #0
100023ba:	d1b3      	bne.n	10002324 <DAVE_Init+0xc>
  {
	 /**  Initialization of DIGITAL_IO APP instance DOWN_LED */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&DOWN_LED); 
100023bc:	4811      	ldr	r0, [pc, #68]	; (10002404 <DAVE_Init+0xec>)
100023be:	f7ff fe5d 	bl	1000207c <DIGITAL_IO_Init>
100023c2:	e7af      	b.n	10002324 <DAVE_Init+0xc>
100023c4:	20000644 	.word	0x20000644
100023c8:	20000548 	.word	0x20000548
100023cc:	100046ec 	.word	0x100046ec
100023d0:	100046e8 	.word	0x100046e8
100023d4:	1000489c 	.word	0x1000489c
100023d8:	100048d8 	.word	0x100048d8
100023dc:	100047b0 	.word	0x100047b0
100023e0:	100047a0 	.word	0x100047a0
100023e4:	10004790 	.word	0x10004790
100023e8:	10004780 	.word	0x10004780
100023ec:	10004750 	.word	0x10004750
100023f0:	10004760 	.word	0x10004760
100023f4:	10004740 	.word	0x10004740
100023f8:	10004770 	.word	0x10004770
100023fc:	2000057c 	.word	0x2000057c
10002400:	20000554 	.word	0x20000554
10002404:	10004730 	.word	0x10004730

10002408 <main>:
	}
	return;
}

int main(void)
{
10002408:	b5f0      	push	{r4, r5, r6, r7, lr}
1000240a:	465f      	mov	r7, fp
1000240c:	4656      	mov	r6, sl
1000240e:	464d      	mov	r5, r9
10002410:	4644      	mov	r4, r8
10002412:	b4f0      	push	{r4, r5, r6, r7}
10002414:	b089      	sub	sp, #36	; 0x24
  DAVE_STATUS_t status;
  uint32_t send_redundant;

  status = DAVE_Init();           /* Initialization of DAVE APPs  */
10002416:	f7ff ff7f 	bl	10002318 <DAVE_Init>

  if(status != DAVE_STATUS_SUCCESS)
1000241a:	2800      	cmp	r0, #0
1000241c:	d000      	beq.n	10002420 <main+0x18>
1000241e:	e0ec      	b.n	100025fa <main+0x1f2>
10002420:	4b76      	ldr	r3, [pc, #472]	; (100025fc <main+0x1f4>)
10002422:	4e77      	ldr	r6, [pc, #476]	; (10002600 <main+0x1f8>)
10002424:	681a      	ldr	r2, [r3, #0]
10002426:	7b1b      	ldrb	r3, [r3, #12]
10002428:	9200      	str	r2, [sp, #0]
1000242a:	9302      	str	r3, [sp, #8]
1000242c:	4b75      	ldr	r3, [pc, #468]	; (10002604 <main+0x1fc>)
1000242e:	4c76      	ldr	r4, [pc, #472]	; (10002608 <main+0x200>)
10002430:	681a      	ldr	r2, [r3, #0]
10002432:	7b1b      	ldrb	r3, [r3, #12]
10002434:	9201      	str	r2, [sp, #4]
10002436:	4a75      	ldr	r2, [pc, #468]	; (1000260c <main+0x204>)
10002438:	9303      	str	r3, [sp, #12]
1000243a:	4692      	mov	sl, r2
1000243c:	4a74      	ldr	r2, [pc, #464]	; (10002610 <main+0x208>)
1000243e:	4b75      	ldr	r3, [pc, #468]	; (10002614 <main+0x20c>)
10002440:	4690      	mov	r8, r2
10002442:	4a75      	ldr	r2, [pc, #468]	; (10002618 <main+0x210>)
10002444:	4f75      	ldr	r7, [pc, #468]	; (1000261c <main+0x214>)
10002446:	4691      	mov	r9, r2
10002448:	4a75      	ldr	r2, [pc, #468]	; (10002620 <main+0x218>)
1000244a:	4693      	mov	fp, r2
1000244c:	681a      	ldr	r2, [r3, #0]

__STATIC_INLINE void XMC_GPIO_SetOutputLow(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
  XMC_ASSERT("XMC_GPIO_SetOutputLow: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = 0x10000U << pin;
1000244e:	7b1b      	ldrb	r3, [r3, #12]
10002450:	9206      	str	r2, [sp, #24]
10002452:	2280      	movs	r2, #128	; 0x80
10002454:	0252      	lsls	r2, r2, #9
10002456:	409a      	lsls	r2, r3
10002458:	9207      	str	r2, [sp, #28]
1000245a:	2380      	movs	r3, #128	; 0x80
1000245c:	9a02      	ldr	r2, [sp, #8]
1000245e:	025b      	lsls	r3, r3, #9
10002460:	4093      	lsls	r3, r2

void check_threshold (uint32_t value, uint32_t threshold, uint32_t hysteresis_offset, volatile uint32_t* status)
{
	if ( ( value > threshold + hysteresis_offset) && ( *status == 0 ) )
	{
		*status = 1;
10002462:	2501      	movs	r5, #1
10002464:	9304      	str	r3, [sp, #16]

__STATIC_INLINE void XMC_GPIO_SetOutputHigh(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
  XMC_ASSERT("XMC_GPIO_SetOutputHigh: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = (uint32_t)0x1U << pin;
10002466:	1c2b      	adds	r3, r5, #0
10002468:	9a03      	ldr	r2, [sp, #12]
1000246a:	4093      	lsls	r3, r2
1000246c:	9305      	str	r3, [sp, #20]
1000246e:	e03f      	b.n	100024f0 <main+0xe8>
#define VREF_VALUE_MV       2480


void check_threshold (uint32_t value, uint32_t threshold, uint32_t hysteresis_offset, volatile uint32_t* status)
{
	if ( ( value > threshold + hysteresis_offset) && ( *status == 0 ) )
10002470:	4653      	mov	r3, sl
10002472:	681b      	ldr	r3, [r3, #0]
10002474:	2b00      	cmp	r3, #0
10002476:	d101      	bne.n	1000247c <main+0x74>
	{
		*status = 1;
10002478:	4653      	mov	r3, sl
1000247a:	601d      	str	r5, [r3, #0]
  /* Placeholder for user application code. The while loop below can be replaced with user application code. */
  while(1U)
  {
		/* Check for overvoltage, -current, temperature situations */
		check_threshold (g_voltage_average, VOLTAGE_MAX, VOLTAGE_HYSTERESIS, &g_overvoltage_detected);
		check_threshold (g_current_average, CURRENT_MAX, CURRENT_HYSTERESIS, &g_overcurrent_detected);
1000247c:	4b69      	ldr	r3, [pc, #420]	; (10002624 <main+0x21c>)
1000247e:	6818      	ldr	r0, [r3, #0]
10002480:	f000 fabe 	bl	10002a00 <__aeabi_f2uiz>
#define VREF_VALUE_MV       2480


void check_threshold (uint32_t value, uint32_t threshold, uint32_t hysteresis_offset, volatile uint32_t* status)
{
	if ( ( value > threshold + hysteresis_offset) && ( *status == 0 ) )
10002484:	4b68      	ldr	r3, [pc, #416]	; (10002628 <main+0x220>)
10002486:	4298      	cmp	r0, r3
10002488:	d94a      	bls.n	10002520 <main+0x118>
1000248a:	6833      	ldr	r3, [r6, #0]
1000248c:	2b00      	cmp	r3, #0
1000248e:	d100      	bne.n	10002492 <main+0x8a>
	{
		*status = 1;
10002490:	6035      	str	r5, [r6, #0]
  while(1U)
  {
		/* Check for overvoltage, -current, temperature situations */
		check_threshold (g_voltage_average, VOLTAGE_MAX, VOLTAGE_HYSTERESIS, &g_overvoltage_detected);
		check_threshold (g_current_average, CURRENT_MAX, CURRENT_HYSTERESIS, &g_overcurrent_detected);
		check_threshold (g_temperature_average, TEMP_MAX, TEMP_HYSTERESIS, &g_overtemperature_detected);
10002492:	4b66      	ldr	r3, [pc, #408]	; (1000262c <main+0x224>)
10002494:	6818      	ldr	r0, [r3, #0]
10002496:	f000 fab3 	bl	10002a00 <__aeabi_f2uiz>
#define VREF_VALUE_MV       2480


void check_threshold (uint32_t value, uint32_t threshold, uint32_t hysteresis_offset, volatile uint32_t* status)
{
	if ( ( value > threshold + hysteresis_offset) && ( *status == 0 ) )
1000249a:	2882      	cmp	r0, #130	; 0x82
1000249c:	d94e      	bls.n	1000253c <main+0x134>
1000249e:	4643      	mov	r3, r8
100024a0:	681b      	ldr	r3, [r3, #0]
100024a2:	2b00      	cmp	r3, #0
100024a4:	d101      	bne.n	100024aa <main+0xa2>
	{
		*status = 1;
100024a6:	4643      	mov	r3, r8
100024a8:	601d      	str	r5, [r3, #0]
		/* Check for overvoltage, -current, temperature situations */
		check_threshold (g_voltage_average, VOLTAGE_MAX, VOLTAGE_HYSTERESIS, &g_overvoltage_detected);
		check_threshold (g_current_average, CURRENT_MAX, CURRENT_HYSTERESIS, &g_overcurrent_detected);
		check_threshold (g_temperature_average, TEMP_MAX, TEMP_HYSTERESIS, &g_overtemperature_detected);

		g_critical_detected = g_overvoltage_detected | g_overcurrent_detected | g_overtemperature_detected | g_clamp;
100024aa:	4642      	mov	r2, r8
100024ac:	4653      	mov	r3, sl
100024ae:	681b      	ldr	r3, [r3, #0]
100024b0:	6830      	ldr	r0, [r6, #0]
100024b2:	6811      	ldr	r1, [r2, #0]
100024b4:	4a5e      	ldr	r2, [pc, #376]	; (10002630 <main+0x228>)
100024b6:	4303      	orrs	r3, r0
100024b8:	7812      	ldrb	r2, [r2, #0]
100024ba:	430b      	orrs	r3, r1
100024bc:	4313      	orrs	r3, r2
100024be:	464a      	mov	r2, r9
100024c0:	6013      	str	r3, [r2, #0]

		if ( g_critical_detected )
100024c2:	6813      	ldr	r3, [r2, #0]
100024c4:	2b00      	cmp	r3, #0
100024c6:	d043      	beq.n	10002550 <main+0x148>
100024c8:	1c2b      	adds	r3, r5, #0
100024ca:	9a02      	ldr	r2, [sp, #8]
100024cc:	4093      	lsls	r3, r2
100024ce:	9a00      	ldr	r2, [sp, #0]
100024d0:	6053      	str	r3, [r2, #4]
		{
//			DIGITAL_IO_SetOutputHigh(&CLAMP);
			DIGITAL_IO_SetOutputHigh(&G_LED); /*Micrium:*/ led_b=1;
100024d2:	4b58      	ldr	r3, [pc, #352]	; (10002634 <main+0x22c>)

__STATIC_INLINE void XMC_GPIO_SetOutputLow(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
  XMC_ASSERT("XMC_GPIO_SetOutputLow: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = 0x10000U << pin;
100024d4:	9a03      	ldr	r2, [sp, #12]
100024d6:	701d      	strb	r5, [r3, #0]
100024d8:	2380      	movs	r3, #128	; 0x80
100024da:	025b      	lsls	r3, r3, #9
100024dc:	4093      	lsls	r3, r2
100024de:	9a01      	ldr	r2, [sp, #4]
100024e0:	6053      	str	r3, [r2, #4]
			DIGITAL_IO_SetOutputLow(&R_LED);  /*Micrium:*/ led_r=0;
100024e2:	2300      	movs	r3, #0
100024e4:	4a54      	ldr	r2, [pc, #336]	; (10002638 <main+0x230>)
100024e6:	7013      	strb	r3, [r2, #0]
			DIGITAL_IO_SetOutputLow(&CLAMP);
			DIGITAL_IO_SetOutputLow(&G_LED);  /*Micrium:*/ led_b=0;
			DIGITAL_IO_SetOutputHigh(&R_LED); /*Micrium:*/ led_r=1;
		}

		if (counter_20ms >= 5)
100024e8:	465b      	mov	r3, fp
100024ea:	681b      	ldr	r3, [r3, #0]
100024ec:	2b04      	cmp	r3, #4
100024ee:	d840      	bhi.n	10002572 <main+0x16a>

  /* Placeholder for user application code. The while loop below can be replaced with user application code. */
  while(1U)
  {
		/* Check for overvoltage, -current, temperature situations */
		check_threshold (g_voltage_average, VOLTAGE_MAX, VOLTAGE_HYSTERESIS, &g_overvoltage_detected);
100024f0:	4b52      	ldr	r3, [pc, #328]	; (1000263c <main+0x234>)
100024f2:	6818      	ldr	r0, [r3, #0]
100024f4:	f000 fa84 	bl	10002a00 <__aeabi_f2uiz>
#define VREF_VALUE_MV       2480


void check_threshold (uint32_t value, uint32_t threshold, uint32_t hysteresis_offset, volatile uint32_t* status)
{
	if ( ( value > threshold + hysteresis_offset) && ( *status == 0 ) )
100024f8:	4b51      	ldr	r3, [pc, #324]	; (10002640 <main+0x238>)
100024fa:	4298      	cmp	r0, r3
100024fc:	d8b8      	bhi.n	10002470 <main+0x68>
	{
		*status = 1;
	}
	if ( ( value < threshold - hysteresis_offset) && ( *status == 1 ) )
100024fe:	4b51      	ldr	r3, [pc, #324]	; (10002644 <main+0x23c>)
10002500:	4298      	cmp	r0, r3
10002502:	d8bb      	bhi.n	1000247c <main+0x74>
10002504:	4653      	mov	r3, sl
10002506:	681b      	ldr	r3, [r3, #0]
10002508:	2b01      	cmp	r3, #1
1000250a:	d1b7      	bne.n	1000247c <main+0x74>
	{
		*status = 0;
1000250c:	4653      	mov	r3, sl
1000250e:	2200      	movs	r2, #0
10002510:	601a      	str	r2, [r3, #0]
  /* Placeholder for user application code. The while loop below can be replaced with user application code. */
  while(1U)
  {
		/* Check for overvoltage, -current, temperature situations */
		check_threshold (g_voltage_average, VOLTAGE_MAX, VOLTAGE_HYSTERESIS, &g_overvoltage_detected);
		check_threshold (g_current_average, CURRENT_MAX, CURRENT_HYSTERESIS, &g_overcurrent_detected);
10002512:	4b44      	ldr	r3, [pc, #272]	; (10002624 <main+0x21c>)
10002514:	6818      	ldr	r0, [r3, #0]
10002516:	f000 fa73 	bl	10002a00 <__aeabi_f2uiz>
#define VREF_VALUE_MV       2480


void check_threshold (uint32_t value, uint32_t threshold, uint32_t hysteresis_offset, volatile uint32_t* status)
{
	if ( ( value > threshold + hysteresis_offset) && ( *status == 0 ) )
1000251a:	4b43      	ldr	r3, [pc, #268]	; (10002628 <main+0x220>)
1000251c:	4298      	cmp	r0, r3
1000251e:	d8b4      	bhi.n	1000248a <main+0x82>
	{
		*status = 1;
	}
	if ( ( value < threshold - hysteresis_offset) && ( *status == 1 ) )
10002520:	4b49      	ldr	r3, [pc, #292]	; (10002648 <main+0x240>)
10002522:	4298      	cmp	r0, r3
10002524:	d8b5      	bhi.n	10002492 <main+0x8a>
10002526:	6833      	ldr	r3, [r6, #0]
10002528:	2b01      	cmp	r3, #1
1000252a:	d1b2      	bne.n	10002492 <main+0x8a>
	{
		*status = 0;
1000252c:	2300      	movs	r3, #0
1000252e:	6033      	str	r3, [r6, #0]
  while(1U)
  {
		/* Check for overvoltage, -current, temperature situations */
		check_threshold (g_voltage_average, VOLTAGE_MAX, VOLTAGE_HYSTERESIS, &g_overvoltage_detected);
		check_threshold (g_current_average, CURRENT_MAX, CURRENT_HYSTERESIS, &g_overcurrent_detected);
		check_threshold (g_temperature_average, TEMP_MAX, TEMP_HYSTERESIS, &g_overtemperature_detected);
10002530:	4b3e      	ldr	r3, [pc, #248]	; (1000262c <main+0x224>)
10002532:	6818      	ldr	r0, [r3, #0]
10002534:	f000 fa64 	bl	10002a00 <__aeabi_f2uiz>
#define VREF_VALUE_MV       2480


void check_threshold (uint32_t value, uint32_t threshold, uint32_t hysteresis_offset, volatile uint32_t* status)
{
	if ( ( value > threshold + hysteresis_offset) && ( *status == 0 ) )
10002538:	2882      	cmp	r0, #130	; 0x82
1000253a:	d8b0      	bhi.n	1000249e <main+0x96>
	{
		*status = 1;
	}
	if ( ( value < threshold - hysteresis_offset) && ( *status == 1 ) )
1000253c:	2859      	cmp	r0, #89	; 0x59
1000253e:	d8b4      	bhi.n	100024aa <main+0xa2>
10002540:	4643      	mov	r3, r8
10002542:	681b      	ldr	r3, [r3, #0]
10002544:	2b01      	cmp	r3, #1
10002546:	d1b0      	bne.n	100024aa <main+0xa2>
	{
		*status = 0;
10002548:	4643      	mov	r3, r8
1000254a:	2200      	movs	r2, #0
1000254c:	601a      	str	r2, [r3, #0]
1000254e:	e7ac      	b.n	100024aa <main+0xa2>
10002550:	9a06      	ldr	r2, [sp, #24]
10002552:	9907      	ldr	r1, [sp, #28]
10002554:	6051      	str	r1, [r2, #4]
10002556:	9a00      	ldr	r2, [sp, #0]
10002558:	9904      	ldr	r1, [sp, #16]
1000255a:	6051      	str	r1, [r2, #4]
			DIGITAL_IO_SetOutputLow(&R_LED);  /*Micrium:*/ led_r=0;
		}
		else
		{
			DIGITAL_IO_SetOutputLow(&CLAMP);
			DIGITAL_IO_SetOutputLow(&G_LED);  /*Micrium:*/ led_b=0;
1000255c:	4a35      	ldr	r2, [pc, #212]	; (10002634 <main+0x22c>)
1000255e:	7013      	strb	r3, [r2, #0]

__STATIC_INLINE void XMC_GPIO_SetOutputHigh(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
  XMC_ASSERT("XMC_GPIO_SetOutputHigh: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = (uint32_t)0x1U << pin;
10002560:	9b01      	ldr	r3, [sp, #4]
10002562:	9a05      	ldr	r2, [sp, #20]
10002564:	605a      	str	r2, [r3, #4]
			DIGITAL_IO_SetOutputHigh(&R_LED); /*Micrium:*/ led_r=1;
10002566:	4b34      	ldr	r3, [pc, #208]	; (10002638 <main+0x230>)
10002568:	701d      	strb	r5, [r3, #0]
		}

		if (counter_20ms >= 5)
1000256a:	465b      	mov	r3, fp
1000256c:	681b      	ldr	r3, [r3, #0]
1000256e:	2b04      	cmp	r3, #4
10002570:	d9be      	bls.n	100024f0 <main+0xe8>
		{
			counter_20ms = 0;
10002572:	465b      	mov	r3, fp
10002574:	2500      	movs	r5, #0
10002576:	601d      	str	r5, [r3, #0]
			if (g_voltage < g_voltage_out_max)
10002578:	4b34      	ldr	r3, [pc, #208]	; (1000264c <main+0x244>)
1000257a:	6818      	ldr	r0, [r3, #0]
1000257c:	4b34      	ldr	r3, [pc, #208]	; (10002650 <main+0x248>)
1000257e:	6819      	ldr	r1, [r3, #0]
10002580:	f000 fa16 	bl	100029b0 <__aeabi_fcmplt>
10002584:	4b33      	ldr	r3, [pc, #204]	; (10002654 <main+0x24c>)
10002586:	681a      	ldr	r2, [r3, #0]

__STATIC_INLINE void XMC_GPIO_SetOutputLow(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
  XMC_ASSERT("XMC_GPIO_SetOutputLow: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = 0x10000U << pin;
10002588:	7b1b      	ldrb	r3, [r3, #12]
1000258a:	2800      	cmp	r0, #0
1000258c:	d01a      	beq.n	100025c4 <main+0x1bc>
1000258e:	2180      	movs	r1, #128	; 0x80
10002590:	0249      	lsls	r1, r1, #9
10002592:	4099      	lsls	r1, r3
10002594:	6051      	str	r1, [r2, #4]

__STATIC_INLINE void XMC_GPIO_SetOutputHigh(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
  XMC_ASSERT("XMC_GPIO_SetOutputHigh: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = (uint32_t)0x1U << pin;
10002596:	2201      	movs	r2, #1
10002598:	1c10      	adds	r0, r2, #0
			{
				/* Power Up */
				DIGITAL_IO_SetOutputLow(&UP_LED); led_up = 0;
1000259a:	4b2f      	ldr	r3, [pc, #188]	; (10002658 <main+0x250>)
1000259c:	701d      	strb	r5, [r3, #0]
1000259e:	4b2f      	ldr	r3, [pc, #188]	; (1000265c <main+0x254>)
				DIGITAL_IO_SetOutputHigh(&DOWN_LED); led_down = 1;
100025a0:	3505      	adds	r5, #5
100025a2:	6819      	ldr	r1, [r3, #0]
100025a4:	7b1b      	ldrb	r3, [r3, #12]
100025a6:	4098      	lsls	r0, r3
100025a8:	4b2d      	ldr	r3, [pc, #180]	; (10002660 <main+0x258>)
100025aa:	6048      	str	r0, [r1, #4]
100025ac:	701a      	strb	r2, [r3, #0]
				send_redundant = 5;
				while (send_redundant-- > 0)
					while(UART_Transmit(&COM, (uint8_t *)"8", 1));/* Send 38h / 56d / 00111000b
100025ae:	1c20      	adds	r0, r4, #0
100025b0:	492c      	ldr	r1, [pc, #176]	; (10002664 <main+0x25c>)
100025b2:	2201      	movs	r2, #1
100025b4:	f7ff fab6 	bl	10001b24 <UART_Transmit>
100025b8:	2800      	cmp	r0, #0
100025ba:	d1f8      	bne.n	100025ae <main+0x1a6>
100025bc:	3d01      	subs	r5, #1
			{
				/* Power Up */
				DIGITAL_IO_SetOutputLow(&UP_LED); led_up = 0;
				DIGITAL_IO_SetOutputHigh(&DOWN_LED); led_down = 1;
				send_redundant = 5;
				while (send_redundant-- > 0)
100025be:	2d00      	cmp	r5, #0
100025c0:	d1f5      	bne.n	100025ae <main+0x1a6>
100025c2:	e74a      	b.n	1000245a <main+0x52>
100025c4:	2101      	movs	r1, #1
100025c6:	1c0d      	adds	r5, r1, #0
100025c8:	409d      	lsls	r5, r3
																  */
			}
			else
			{
				/* Power Down */
				DIGITAL_IO_SetOutputHigh(&UP_LED); led_up = 1;
100025ca:	4b23      	ldr	r3, [pc, #140]	; (10002658 <main+0x250>)
100025cc:	6055      	str	r5, [r2, #4]
100025ce:	7019      	strb	r1, [r3, #0]

__STATIC_INLINE void XMC_GPIO_SetOutputLow(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
  XMC_ASSERT("XMC_GPIO_SetOutputLow: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = 0x10000U << pin;
100025d0:	2180      	movs	r1, #128	; 0x80
100025d2:	4b22      	ldr	r3, [pc, #136]	; (1000265c <main+0x254>)
100025d4:	0249      	lsls	r1, r1, #9
100025d6:	681a      	ldr	r2, [r3, #0]
100025d8:	7b1b      	ldrb	r3, [r3, #12]
				DIGITAL_IO_SetOutputLow(&DOWN_LED); led_down = 0;
100025da:	2505      	movs	r5, #5
100025dc:	4099      	lsls	r1, r3
100025de:	4b20      	ldr	r3, [pc, #128]	; (10002660 <main+0x258>)
100025e0:	6051      	str	r1, [r2, #4]
100025e2:	7018      	strb	r0, [r3, #0]
				send_redundant = 5;
				while (send_redundant-- > 0)
					while(UART_Transmit(&COM, (uint8_t *)"f", 1)); /* Send 66h / 102d / 01100110b
100025e4:	1c20      	adds	r0, r4, #0
100025e6:	1c39      	adds	r1, r7, #0
100025e8:	2201      	movs	r2, #1
100025ea:	f7ff fa9b 	bl	10001b24 <UART_Transmit>
100025ee:	2800      	cmp	r0, #0
100025f0:	d1f8      	bne.n	100025e4 <main+0x1dc>
100025f2:	3d01      	subs	r5, #1
			{
				/* Power Down */
				DIGITAL_IO_SetOutputHigh(&UP_LED); led_up = 1;
				DIGITAL_IO_SetOutputLow(&DOWN_LED); led_down = 0;
				send_redundant = 5;
				while (send_redundant-- > 0)
100025f4:	2d00      	cmp	r5, #0
100025f6:	d1f5      	bne.n	100025e4 <main+0x1dc>
100025f8:	e72f      	b.n	1000245a <main+0x52>
    XMC_DEBUG("DAVE APPs initialization failed\n");

    while(1U)
    {

    }
100025fa:	e7fe      	b.n	100025fa <main+0x1f2>
100025fc:	10004740 	.word	0x10004740
10002600:	20000688 	.word	0x20000688
10002604:	10004770 	.word	0x10004770
10002608:	20000548 	.word	0x20000548
1000260c:	20000658 	.word	0x20000658
10002610:	20000660 	.word	0x20000660
10002614:	10004750 	.word	0x10004750
10002618:	2000067c 	.word	0x2000067c
1000261c:	1000490c 	.word	0x1000490c
10002620:	2000068c 	.word	0x2000068c
10002624:	20000674 	.word	0x20000674
10002628:	00002ee0 	.word	0x00002ee0
1000262c:	20000668 	.word	0x20000668
10002630:	20000618 	.word	0x20000618
10002634:	200006a4 	.word	0x200006a4
10002638:	200006a6 	.word	0x200006a6
1000263c:	20000650 	.word	0x20000650
10002640:	00007148 	.word	0x00007148
10002644:	00006977 	.word	0x00006977
10002648:	0000270f 	.word	0x0000270f
1000264c:	2000064c 	.word	0x2000064c
10002650:	2000061c 	.word	0x2000061c
10002654:	10004760 	.word	0x10004760
10002658:	200006a7 	.word	0x200006a7
1000265c:	10004730 	.word	0x10004730
10002660:	200006a5 	.word	0x200006a5
10002664:	10004908 	.word	0x10004908

10002668 <VADC0_G1_1_IRQHandler>:
	const float Ref_ = 5000;
	float T1, T2;
	volatile static uint16_t ADC_voltage, ADC_current, ADC_temperature;
	float temperature_s;

	counter_20ms++;
10002668:	4a5f      	ldr	r2, [pc, #380]	; (100027e8 <VADC0_G1_1_IRQHandler+0x180>)
1000266a:	4960      	ldr	r1, [pc, #384]	; (100027ec <VADC0_G1_1_IRQHandler+0x184>)
1000266c:	6813      	ldr	r3, [r2, #0]
{
	return (current_average*((float)filter-1) + new_value)/filter;
}

void task_20ms(void)
{
1000266e:	b5f0      	push	{r4, r5, r6, r7, lr}
	const float Ref_ = 5000;
	float T1, T2;
	volatile static uint16_t ADC_voltage, ADC_current, ADC_temperature;
	float temperature_s;

	counter_20ms++;
10002670:	3301      	adds	r3, #1
10002672:	6013      	str	r3, [r2, #0]
{
  uint16_t result;
  extern XMC_VADC_GROUP_t *const group_ptrs[XMC_VADC_MAXIMUM_NUM_GROUPS];
  XMC_ASSERT("ADC_MEASUREMENT_ADV_GetResult:Invalid handle_ptr", (handle_ptr != NULL))

  result = XMC_VADC_GROUP_GetResult(group_ptrs[handle_ptr->group_index],
10002674:	7a0b      	ldrb	r3, [r1, #8]
10002676:	4a5e      	ldr	r2, [pc, #376]	; (100027f0 <VADC0_G1_1_IRQHandler+0x188>)
10002678:	009b      	lsls	r3, r3, #2
1000267a:	5898      	ldr	r0, [r3, r2]
                                    (uint32_t) handle_ptr->ch_handle->result_reg_number);
1000267c:	680b      	ldr	r3, [r1, #0]
                                                                const uint32_t res_reg)
{
  XMC_ASSERT("XMC_VADC_GROUP_GetResult:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  XMC_ASSERT("XMC_VADC_GROUP_GetResult:Wrong Result Register", ((res_reg) < XMC_VADC_NUM_RESULT_REGISTERS))

  return ((XMC_VADC_RESULT_SIZE_t)group_ptr->RES[res_reg]);
1000267e:	21c0      	movs	r1, #192	; 0xc0
10002680:	0089      	lsls	r1, r1, #2
10002682:	468c      	mov	ip, r1
{
	return (current_average*((float)filter-1) + new_value)/filter;
}

void task_20ms(void)
{
10002684:	b083      	sub	sp, #12
10002686:	9301      	str	r3, [sp, #4]
10002688:	789b      	ldrb	r3, [r3, #2]
1000268a:	495a      	ldr	r1, [pc, #360]	; (100027f4 <VADC0_G1_1_IRQHandler+0x18c>)
1000268c:	071b      	lsls	r3, r3, #28
1000268e:	0e9b      	lsrs	r3, r3, #26
10002690:	4463      	add	r3, ip
10002692:	581b      	ldr	r3, [r3, r0]
	float temperature_s;

	counter_20ms++;

	/* Read analog to digital converters */
	g_ADC_voltage     = ADC_MEASUREMENT_ADV_GetResult(&VOLT_CURR_TEMP_Voltage_handle) / 4; // 4-samples filter inside ADC_MEASUREMENT_ADV enabled
10002694:	4c58      	ldr	r4, [pc, #352]	; (100027f8 <VADC0_G1_1_IRQHandler+0x190>)
10002696:	b29b      	uxth	r3, r3
10002698:	089b      	lsrs	r3, r3, #2
1000269a:	6023      	str	r3, [r4, #0]
{
  uint16_t result;
  extern XMC_VADC_GROUP_t *const group_ptrs[XMC_VADC_MAXIMUM_NUM_GROUPS];
  XMC_ASSERT("ADC_MEASUREMENT_ADV_GetResult:Invalid handle_ptr", (handle_ptr != NULL))

  result = XMC_VADC_GROUP_GetResult(group_ptrs[handle_ptr->group_index],
1000269c:	7a0b      	ldrb	r3, [r1, #8]
	g_ADC_current     = ADC_MEASUREMENT_ADV_GetResult(&VOLT_CURR_TEMP_Current_handle) / 4; // 4-samples filter inside ADC_MEASUREMENT_ADV enabled
1000269e:	4d57      	ldr	r5, [pc, #348]	; (100027fc <VADC0_G1_1_IRQHandler+0x194>)
100026a0:	009b      	lsls	r3, r3, #2
100026a2:	5898      	ldr	r0, [r3, r2]
                                    (uint32_t) handle_ptr->ch_handle->result_reg_number);
100026a4:	680b      	ldr	r3, [r1, #0]
100026a6:	4956      	ldr	r1, [pc, #344]	; (10002800 <VADC0_G1_1_IRQHandler+0x198>)
100026a8:	9301      	str	r3, [sp, #4]
100026aa:	789b      	ldrb	r3, [r3, #2]
100026ac:	071b      	lsls	r3, r3, #28
100026ae:	0e9b      	lsrs	r3, r3, #26
100026b0:	4463      	add	r3, ip
100026b2:	581b      	ldr	r3, [r3, r0]
100026b4:	b29b      	uxth	r3, r3
100026b6:	089b      	lsrs	r3, r3, #2
100026b8:	602b      	str	r3, [r5, #0]
{
  uint16_t result;
  extern XMC_VADC_GROUP_t *const group_ptrs[XMC_VADC_MAXIMUM_NUM_GROUPS];
  XMC_ASSERT("ADC_MEASUREMENT_ADV_GetResult:Invalid handle_ptr", (handle_ptr != NULL))

  result = XMC_VADC_GROUP_GetResult(group_ptrs[handle_ptr->group_index],
100026ba:	7a0b      	ldrb	r3, [r1, #8]
100026bc:	009b      	lsls	r3, r3, #2
100026be:	589a      	ldr	r2, [r3, r2]
                                    (uint32_t) handle_ptr->ch_handle->result_reg_number);
100026c0:	680b      	ldr	r3, [r1, #0]
	temperature_s = temperature_s / Ntc_teiler;
	temperature_s = temperature_s - Ntc_offset;

	// TODO: Remove fixed temperature
	g_temperature = 40;
	if (g_temperature_average == 0)
100026c2:	2100      	movs	r1, #0
100026c4:	9301      	str	r3, [sp, #4]
100026c6:	789b      	ldrb	r3, [r3, #2]
100026c8:	071b      	lsls	r3, r3, #28
100026ca:	0e9b      	lsrs	r3, r3, #26
100026cc:	4463      	add	r3, ip
100026ce:	589b      	ldr	r3, [r3, r2]
	counter_20ms++;

	/* Read analog to digital converters */
	g_ADC_voltage     = ADC_MEASUREMENT_ADV_GetResult(&VOLT_CURR_TEMP_Voltage_handle) / 4; // 4-samples filter inside ADC_MEASUREMENT_ADV enabled
	g_ADC_current     = ADC_MEASUREMENT_ADV_GetResult(&VOLT_CURR_TEMP_Current_handle) / 4; // 4-samples filter inside ADC_MEASUREMENT_ADV enabled
	g_ADC_temperature = ADC_MEASUREMENT_ADV_GetResult(&VOLT_CURR_TEMP_Temperature_handle) / 4; // 4-samples filter inside ADC_MEASUREMENT_ADV enabled
100026d0:	4a4c      	ldr	r2, [pc, #304]	; (10002804 <VADC0_G1_1_IRQHandler+0x19c>)
100026d2:	b29b      	uxth	r3, r3
100026d4:	089b      	lsrs	r3, r3, #2
100026d6:	6013      	str	r3, [r2, #0]
	/* Temperature processing
	 *               (Adc_max_plus1 - Adc_wert)
	 *  Temperatur = -------------------------- - Ntc_Offset
	 *                    Ntc_Teiler
	 */
	ADC_temperature = g_ADC_temperature / 4;	// 12 bit --> 10bit
100026d8:	6813      	ldr	r3, [r2, #0]
100026da:	4a4b      	ldr	r2, [pc, #300]	; (10002808 <VADC0_G1_1_IRQHandler+0x1a0>)
100026dc:	089b      	lsrs	r3, r3, #2
100026de:	b29b      	uxth	r3, r3
100026e0:	8013      	strh	r3, [r2, #0]
	temperature_s = ads_max_plus1 - (float)ADC_temperature;
100026e2:	8813      	ldrh	r3, [r2, #0]
	temperature_s = temperature_s / Ntc_teiler;
	temperature_s = temperature_s - Ntc_offset;

	// TODO: Remove fixed temperature
	g_temperature = 40;
100026e4:	4f49      	ldr	r7, [pc, #292]	; (1000280c <VADC0_G1_1_IRQHandler+0x1a4>)
100026e6:	4b4a      	ldr	r3, [pc, #296]	; (10002810 <VADC0_G1_1_IRQHandler+0x1a8>)
	if (g_temperature_average == 0)
100026e8:	4e4a      	ldr	r6, [pc, #296]	; (10002814 <VADC0_G1_1_IRQHandler+0x1ac>)
	temperature_s = ads_max_plus1 - (float)ADC_temperature;
	temperature_s = temperature_s / Ntc_teiler;
	temperature_s = temperature_s - Ntc_offset;

	// TODO: Remove fixed temperature
	g_temperature = 40;
100026ea:	603b      	str	r3, [r7, #0]
	if (g_temperature_average == 0)
100026ec:	6830      	ldr	r0, [r6, #0]
100026ee:	f000 f959 	bl	100029a4 <__aeabi_fcmpeq>
100026f2:	2800      	cmp	r0, #0
100026f4:	d001      	beq.n	100026fa <VADC0_G1_1_IRQHandler+0x92>
		g_temperature_average = g_temperature;
100026f6:	683b      	ldr	r3, [r7, #0]
100026f8:	6033      	str	r3, [r6, #0]
	g_temperature_average = average_calc(g_temperature, g_temperature_average, 16);
100026fa:	683f      	ldr	r7, [r7, #0]
  }
}

float average_calc(float new_value, float current_average, uint16_t filter)
{
	return (current_average*((float)filter-1) + new_value)/filter;
100026fc:	4946      	ldr	r1, [pc, #280]	; (10002818 <VADC0_G1_1_IRQHandler+0x1b0>)

	// TODO: Remove fixed temperature
	g_temperature = 40;
	if (g_temperature_average == 0)
		g_temperature_average = g_temperature;
	g_temperature_average = average_calc(g_temperature, g_temperature_average, 16);
100026fe:	6830      	ldr	r0, [r6, #0]
  }
}

float average_calc(float new_value, float current_average, uint16_t filter)
{
	return (current_average*((float)filter-1) + new_value)/filter;
10002700:	f000 fd04 	bl	1000310c <__aeabi_fmul>
10002704:	1c01      	adds	r1, r0, #0
10002706:	1c38      	adds	r0, r7, #0
10002708:	f000 f992 	bl	10002a30 <__aeabi_fadd>
1000270c:	21f6      	movs	r1, #246	; 0xf6
1000270e:	0589      	lsls	r1, r1, #22
10002710:	f000 fcfc 	bl	1000310c <__aeabi_fmul>

	// TODO: Remove fixed temperature
	g_temperature = 40;
	if (g_temperature_average == 0)
		g_temperature_average = g_temperature;
	g_temperature_average = average_calc(g_temperature, g_temperature_average, 16);
10002714:	6030      	str	r0, [r6, #0]
	/* Voltage processing
	 *          (R1 + R2) * Ref * Adc_Wert
	 *   U_out = --------------------------
	 *           R2 * ADC_max_plus1
	 */
	ADC_voltage = g_ADC_voltage / 4;	// 12 bit --> 10bit
10002716:	6823      	ldr	r3, [r4, #0]
10002718:	4a40      	ldr	r2, [pc, #256]	; (1000281c <VADC0_G1_1_IRQHandler+0x1b4>)
1000271a:	089b      	lsrs	r3, r3, #2
1000271c:	b29b      	uxth	r3, r3
1000271e:	8013      	strh	r3, [r2, #0]

	T1 = (R1_ + R2_) * Ref_;
	T2 = R2_ * ads_max_plus1;
	g_voltage = ((float)ADC_voltage * T1) / T2;
10002720:	8810      	ldrh	r0, [r2, #0]
10002722:	b280      	uxth	r0, r0
10002724:	f000 ffc2 	bl	100036ac <__aeabi_ui2f>
10002728:	493d      	ldr	r1, [pc, #244]	; (10002820 <VADC0_G1_1_IRQHandler+0x1b8>)
1000272a:	f000 fcef 	bl	1000310c <__aeabi_fmul>
1000272e:	493d      	ldr	r1, [pc, #244]	; (10002824 <VADC0_G1_1_IRQHandler+0x1bc>)
10002730:	f000 fafa 	bl	10002d28 <__aeabi_fdiv>
10002734:	4e3c      	ldr	r6, [pc, #240]	; (10002828 <VADC0_G1_1_IRQHandler+0x1c0>)

	if (g_voltage_average == 0)
10002736:	4c3d      	ldr	r4, [pc, #244]	; (1000282c <VADC0_G1_1_IRQHandler+0x1c4>)
	 */
	ADC_voltage = g_ADC_voltage / 4;	// 12 bit --> 10bit

	T1 = (R1_ + R2_) * Ref_;
	T2 = R2_ * ads_max_plus1;
	g_voltage = ((float)ADC_voltage * T1) / T2;
10002738:	6030      	str	r0, [r6, #0]

	if (g_voltage_average == 0)
1000273a:	6820      	ldr	r0, [r4, #0]
1000273c:	2100      	movs	r1, #0
1000273e:	f000 f931 	bl	100029a4 <__aeabi_fcmpeq>
10002742:	2800      	cmp	r0, #0
10002744:	d001      	beq.n	1000274a <VADC0_G1_1_IRQHandler+0xe2>
		g_voltage_average = g_voltage;
10002746:	6833      	ldr	r3, [r6, #0]
10002748:	6023      	str	r3, [r4, #0]
	g_voltage_average = average_calc(g_voltage, g_voltage_average, 16);
1000274a:	6837      	ldr	r7, [r6, #0]
  }
}

float average_calc(float new_value, float current_average, uint16_t filter)
{
	return (current_average*((float)filter-1) + new_value)/filter;
1000274c:	4932      	ldr	r1, [pc, #200]	; (10002818 <VADC0_G1_1_IRQHandler+0x1b0>)
	T2 = R2_ * ads_max_plus1;
	g_voltage = ((float)ADC_voltage * T1) / T2;

	if (g_voltage_average == 0)
		g_voltage_average = g_voltage;
	g_voltage_average = average_calc(g_voltage, g_voltage_average, 16);
1000274e:	6820      	ldr	r0, [r4, #0]
  }
}

float average_calc(float new_value, float current_average, uint16_t filter)
{
	return (current_average*((float)filter-1) + new_value)/filter;
10002750:	f000 fcdc 	bl	1000310c <__aeabi_fmul>
10002754:	1c01      	adds	r1, r0, #0
10002756:	1c38      	adds	r0, r7, #0
10002758:	f000 f96a 	bl	10002a30 <__aeabi_fadd>
1000275c:	21f6      	movs	r1, #246	; 0xf6
1000275e:	0589      	lsls	r1, r1, #22
10002760:	f000 fcd4 	bl	1000310c <__aeabi_fmul>
	T2 = R2_ * ads_max_plus1;
	g_voltage = ((float)ADC_voltage * T1) / T2;

	if (g_voltage_average == 0)
		g_voltage_average = g_voltage;
	g_voltage_average = average_calc(g_voltage, g_voltage_average, 16);
10002764:	6020      	str	r0, [r4, #0]

	/* Current processing
	 *
	 */
	ADC_current = g_ADC_current / 4;	// 12 bit --> 10bit
10002766:	682b      	ldr	r3, [r5, #0]
10002768:	4a31      	ldr	r2, [pc, #196]	; (10002830 <VADC0_G1_1_IRQHandler+0x1c8>)
1000276a:	089b      	lsrs	r3, r3, #2
1000276c:	b29b      	uxth	r3, r3
1000276e:	8013      	strh	r3, [r2, #0]
	g_current =  4.38*ADC_current * 10000 / 826;
10002770:	8810      	ldrh	r0, [r2, #0]
10002772:	b280      	uxth	r0, r0
10002774:	f001 fda0 	bl	100042b8 <__aeabi_i2d>
10002778:	4a2e      	ldr	r2, [pc, #184]	; (10002834 <VADC0_G1_1_IRQHandler+0x1cc>)
1000277a:	4b2f      	ldr	r3, [pc, #188]	; (10002838 <VADC0_G1_1_IRQHandler+0x1d0>)
1000277c:	f001 fb02 	bl	10003d84 <__aeabi_dmul>
10002780:	2200      	movs	r2, #0
10002782:	4b2e      	ldr	r3, [pc, #184]	; (1000283c <VADC0_G1_1_IRQHandler+0x1d4>)
10002784:	f001 fafe 	bl	10003d84 <__aeabi_dmul>
10002788:	2200      	movs	r2, #0
1000278a:	4b2d      	ldr	r3, [pc, #180]	; (10002840 <VADC0_G1_1_IRQHandler+0x1d8>)
1000278c:	f000 ffd6 	bl	1000373c <__aeabi_ddiv>
10002790:	f001 fe22 	bl	100043d8 <__aeabi_d2f>
10002794:	4c2b      	ldr	r4, [pc, #172]	; (10002844 <VADC0_G1_1_IRQHandler+0x1dc>)
	if (g_current_average == 0)
10002796:	4d2c      	ldr	r5, [pc, #176]	; (10002848 <VADC0_G1_1_IRQHandler+0x1e0>)

	/* Current processing
	 *
	 */
	ADC_current = g_ADC_current / 4;	// 12 bit --> 10bit
	g_current =  4.38*ADC_current * 10000 / 826;
10002798:	6020      	str	r0, [r4, #0]
	if (g_current_average == 0)
1000279a:	6828      	ldr	r0, [r5, #0]
1000279c:	2100      	movs	r1, #0
1000279e:	f000 f901 	bl	100029a4 <__aeabi_fcmpeq>
100027a2:	2800      	cmp	r0, #0
100027a4:	d001      	beq.n	100027aa <VADC0_G1_1_IRQHandler+0x142>
		g_current_average = g_current;
100027a6:	6823      	ldr	r3, [r4, #0]
100027a8:	602b      	str	r3, [r5, #0]
	g_current_average = average_calc(g_current, g_current_average, 16);
100027aa:	6827      	ldr	r7, [r4, #0]
  }
}

float average_calc(float new_value, float current_average, uint16_t filter)
{
	return (current_average*((float)filter-1) + new_value)/filter;
100027ac:	491a      	ldr	r1, [pc, #104]	; (10002818 <VADC0_G1_1_IRQHandler+0x1b0>)
	 */
	ADC_current = g_ADC_current / 4;	// 12 bit --> 10bit
	g_current =  4.38*ADC_current * 10000 / 826;
	if (g_current_average == 0)
		g_current_average = g_current;
	g_current_average = average_calc(g_current, g_current_average, 16);
100027ae:	6828      	ldr	r0, [r5, #0]
  }
}

float average_calc(float new_value, float current_average, uint16_t filter)
{
	return (current_average*((float)filter-1) + new_value)/filter;
100027b0:	f000 fcac 	bl	1000310c <__aeabi_fmul>
100027b4:	1c01      	adds	r1, r0, #0
100027b6:	1c38      	adds	r0, r7, #0
100027b8:	f000 f93a 	bl	10002a30 <__aeabi_fadd>
100027bc:	21f6      	movs	r1, #246	; 0xf6
100027be:	0589      	lsls	r1, r1, #22
100027c0:	f000 fca4 	bl	1000310c <__aeabi_fmul>
	 */
	ADC_current = g_ADC_current / 4;	// 12 bit --> 10bit
	g_current =  4.38*ADC_current * 10000 / 826;
	if (g_current_average == 0)
		g_current_average = g_current;
	g_current_average = average_calc(g_current, g_current_average, 16);
100027c4:	6028      	str	r0, [r5, #0]

	/* Power processing
	 */
	g_P_out = g_voltage * g_current * 1E-6;
100027c6:	6830      	ldr	r0, [r6, #0]
100027c8:	6821      	ldr	r1, [r4, #0]
100027ca:	f000 fc9f 	bl	1000310c <__aeabi_fmul>
100027ce:	f001 fdaf 	bl	10004330 <__aeabi_f2d>
100027d2:	4a1e      	ldr	r2, [pc, #120]	; (1000284c <VADC0_G1_1_IRQHandler+0x1e4>)
100027d4:	4b1e      	ldr	r3, [pc, #120]	; (10002850 <VADC0_G1_1_IRQHandler+0x1e8>)
100027d6:	f001 fad5 	bl	10003d84 <__aeabi_dmul>
100027da:	f001 fdfd 	bl	100043d8 <__aeabi_d2f>
100027de:	4b1d      	ldr	r3, [pc, #116]	; (10002854 <VADC0_G1_1_IRQHandler+0x1ec>)
100027e0:	6018      	str	r0, [r3, #0]

	return;
}
100027e2:	b003      	add	sp, #12
100027e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
100027e6:	46c0      	nop			; (mov r8, r8)
100027e8:	2000068c 	.word	0x2000068c
100027ec:	10004864 	.word	0x10004864
100027f0:	100047cc 	.word	0x100047cc
100027f4:	100047dc 	.word	0x100047dc
100027f8:	20000690 	.word	0x20000690
100027fc:	200006a0 	.word	0x200006a0
10002800:	1000488c 	.word	0x1000488c
10002804:	20000698 	.word	0x20000698
10002808:	20000678 	.word	0x20000678
1000280c:	2000069c 	.word	0x2000069c
10002810:	42200000 	.word	0x42200000
10002814:	20000668 	.word	0x20000668
10002818:	41700000 	.word	0x41700000
1000281c:	2000065c 	.word	0x2000065c
10002820:	4a9f2630 	.word	0x4a9f2630
10002824:	472c0000 	.word	0x472c0000
10002828:	2000064c 	.word	0x2000064c
1000282c:	20000650 	.word	0x20000650
10002830:	20000654 	.word	0x20000654
10002834:	b851eb85 	.word	0xb851eb85
10002838:	4011851e 	.word	0x4011851e
1000283c:	40c38800 	.word	0x40c38800
10002840:	4089d000 	.word	0x4089d000
10002844:	2000066c 	.word	0x2000066c
10002848:	20000674 	.word	0x20000674
1000284c:	a0b5ed8d 	.word	0xa0b5ed8d
10002850:	3eb0c6f7 	.word	0x3eb0c6f7
10002854:	20000648 	.word	0x20000648

10002858 <VADC0_G0_1_IRQHandler>:

void ACOMP_ISR(void)
{
10002858:	b5f0      	push	{r4, r5, r6, r7, lr}
1000285a:	4647      	mov	r7, r8
1000285c:	b480      	push	{r7}
	static uint8_t startup_blank = 0;

	/* For the first 160ms (32*5ms) after startup ignore clamp */
	if (startup_blank < 32)
1000285e:	4b3c      	ldr	r3, [pc, #240]	; (10002950 <VADC0_G0_1_IRQHandler+0xf8>)

	return;
}

void ACOMP_ISR(void)
{
10002860:	b082      	sub	sp, #8
	static uint8_t startup_blank = 0;

	/* For the first 160ms (32*5ms) after startup ignore clamp */
	if (startup_blank < 32)
10002862:	781c      	ldrb	r4, [r3, #0]
10002864:	2c1f      	cmp	r4, #31
10002866:	d802      	bhi.n	1000286e <VADC0_G0_1_IRQHandler+0x16>
		startup_blank++;
10002868:	3401      	adds	r4, #1
1000286a:	b2e4      	uxtb	r4, r4
1000286c:	701c      	strb	r4, [r3, #0]
1000286e:	4939      	ldr	r1, [pc, #228]	; (10002954 <VADC0_G0_1_IRQHandler+0xfc>)
{
  uint16_t result;
  extern XMC_VADC_GROUP_t *const group_ptrs[XMC_VADC_MAXIMUM_NUM_GROUPS];
  XMC_ASSERT("ADC_MEASUREMENT_ADV_GetResult:Invalid handle_ptr", (handle_ptr != NULL))

  result = XMC_VADC_GROUP_GetResult(group_ptrs[handle_ptr->group_index],
10002870:	4a39      	ldr	r2, [pc, #228]	; (10002958 <VADC0_G0_1_IRQHandler+0x100>)
10002872:	7a0b      	ldrb	r3, [r1, #8]

	/* Read analog to digital converters */
	g_ADC_acomp = ADC_MEASUREMENT_ADV_GetResult(&ACOMP_ACOMP_handle)/4; // 4-samples filter inside ADC_MEASUREMENT_ADV enabled
10002874:	4d39      	ldr	r5, [pc, #228]	; (1000295c <VADC0_G0_1_IRQHandler+0x104>)
10002876:	009b      	lsls	r3, r3, #2
10002878:	5898      	ldr	r0, [r3, r2]
                                    (uint32_t) handle_ptr->ch_handle->result_reg_number);
1000287a:	680b      	ldr	r3, [r1, #0]
1000287c:	21c0      	movs	r1, #192	; 0xc0
1000287e:	0089      	lsls	r1, r1, #2
10002880:	468c      	mov	ip, r1
10002882:	9301      	str	r3, [sp, #4]
10002884:	789b      	ldrb	r3, [r3, #2]
10002886:	4936      	ldr	r1, [pc, #216]	; (10002960 <VADC0_G0_1_IRQHandler+0x108>)
10002888:	071b      	lsls	r3, r3, #28
1000288a:	0e9b      	lsrs	r3, r3, #26
1000288c:	4463      	add	r3, ip
1000288e:	581b      	ldr	r3, [r3, r0]
	g_ADC_vref  =ADC_MEASUREMENT_ADV_GetResult(&ACOMP_VRef_handle)/4; // 4-samples filter inside ADC_MEASUREMENT_ADV enabled
	g_ADC_vref_average = average_calc((float)g_ADC_vref, g_ADC_vref_average, 256);
10002890:	4e34      	ldr	r6, [pc, #208]	; (10002964 <VADC0_G0_1_IRQHandler+0x10c>)
	/* For the first 160ms (32*5ms) after startup ignore clamp */
	if (startup_blank < 32)
		startup_blank++;

	/* Read analog to digital converters */
	g_ADC_acomp = ADC_MEASUREMENT_ADV_GetResult(&ACOMP_ACOMP_handle)/4; // 4-samples filter inside ADC_MEASUREMENT_ADV enabled
10002892:	b29b      	uxth	r3, r3
10002894:	089b      	lsrs	r3, r3, #2
10002896:	602b      	str	r3, [r5, #0]
{
  uint16_t result;
  extern XMC_VADC_GROUP_t *const group_ptrs[XMC_VADC_MAXIMUM_NUM_GROUPS];
  XMC_ASSERT("ADC_MEASUREMENT_ADV_GetResult:Invalid handle_ptr", (handle_ptr != NULL))

  result = XMC_VADC_GROUP_GetResult(group_ptrs[handle_ptr->group_index],
10002898:	7a0b      	ldrb	r3, [r1, #8]
1000289a:	009b      	lsls	r3, r3, #2
1000289c:	589a      	ldr	r2, [r3, r2]
                                    (uint32_t) handle_ptr->ch_handle->result_reg_number);
1000289e:	680b      	ldr	r3, [r1, #0]
100028a0:	9301      	str	r3, [sp, #4]
100028a2:	789b      	ldrb	r3, [r3, #2]
100028a4:	071b      	lsls	r3, r3, #28
100028a6:	0e9b      	lsrs	r3, r3, #26
100028a8:	4463      	add	r3, ip
100028aa:	589b      	ldr	r3, [r3, r2]
	g_ADC_vref  =ADC_MEASUREMENT_ADV_GetResult(&ACOMP_VRef_handle)/4; // 4-samples filter inside ADC_MEASUREMENT_ADV enabled
100028ac:	4a2e      	ldr	r2, [pc, #184]	; (10002968 <VADC0_G0_1_IRQHandler+0x110>)
100028ae:	b29b      	uxth	r3, r3
100028b0:	089b      	lsrs	r3, r3, #2
100028b2:	6013      	str	r3, [r2, #0]
	g_ADC_vref_average = average_calc((float)g_ADC_vref, g_ADC_vref_average, 256);
100028b4:	6810      	ldr	r0, [r2, #0]
100028b6:	6833      	ldr	r3, [r6, #0]
100028b8:	4698      	mov	r8, r3
100028ba:	f000 fef7 	bl	100036ac <__aeabi_ui2f>
  }
}

float average_calc(float new_value, float current_average, uint16_t filter)
{
	return (current_average*((float)filter-1) + new_value)/filter;
100028be:	492b      	ldr	r1, [pc, #172]	; (1000296c <VADC0_G0_1_IRQHandler+0x114>)
		startup_blank++;

	/* Read analog to digital converters */
	g_ADC_acomp = ADC_MEASUREMENT_ADV_GetResult(&ACOMP_ACOMP_handle)/4; // 4-samples filter inside ADC_MEASUREMENT_ADV enabled
	g_ADC_vref  =ADC_MEASUREMENT_ADV_GetResult(&ACOMP_VRef_handle)/4; // 4-samples filter inside ADC_MEASUREMENT_ADV enabled
	g_ADC_vref_average = average_calc((float)g_ADC_vref, g_ADC_vref_average, 256);
100028c0:	1c07      	adds	r7, r0, #0
  }
}

float average_calc(float new_value, float current_average, uint16_t filter)
{
	return (current_average*((float)filter-1) + new_value)/filter;
100028c2:	4640      	mov	r0, r8
100028c4:	f000 fc22 	bl	1000310c <__aeabi_fmul>
100028c8:	1c01      	adds	r1, r0, #0
100028ca:	1c38      	adds	r0, r7, #0
100028cc:	f000 f8b0 	bl	10002a30 <__aeabi_fadd>
100028d0:	21ee      	movs	r1, #238	; 0xee
100028d2:	0589      	lsls	r1, r1, #22
100028d4:	f000 fc1a 	bl	1000310c <__aeabi_fmul>
		startup_blank++;

	/* Read analog to digital converters */
	g_ADC_acomp = ADC_MEASUREMENT_ADV_GetResult(&ACOMP_ACOMP_handle)/4; // 4-samples filter inside ADC_MEASUREMENT_ADV enabled
	g_ADC_vref  =ADC_MEASUREMENT_ADV_GetResult(&ACOMP_VRef_handle)/4; // 4-samples filter inside ADC_MEASUREMENT_ADV enabled
	g_ADC_vref_average = average_calc((float)g_ADC_vref, g_ADC_vref_average, 256);
100028d8:	6030      	str	r0, [r6, #0]

	g_acomp_mV = (float)g_ADC_acomp * VREF_VALUE_MV / g_ADC_vref_average;;
100028da:	6828      	ldr	r0, [r5, #0]
100028dc:	6835      	ldr	r5, [r6, #0]
100028de:	f000 fee5 	bl	100036ac <__aeabi_ui2f>
100028e2:	4923      	ldr	r1, [pc, #140]	; (10002970 <VADC0_G0_1_IRQHandler+0x118>)
100028e4:	f000 fc12 	bl	1000310c <__aeabi_fmul>
100028e8:	1c29      	adds	r1, r5, #0
100028ea:	f000 fa1d 	bl	10002d28 <__aeabi_fdiv>
100028ee:	4b21      	ldr	r3, [pc, #132]	; (10002974 <VADC0_G0_1_IRQHandler+0x11c>)
	g_acomp_mV_average = average_calc(g_acomp_mV, g_acomp_mV_average, 32);
100028f0:	4d21      	ldr	r5, [pc, #132]	; (10002978 <VADC0_G0_1_IRQHandler+0x120>)
	/* Read analog to digital converters */
	g_ADC_acomp = ADC_MEASUREMENT_ADV_GetResult(&ACOMP_ACOMP_handle)/4; // 4-samples filter inside ADC_MEASUREMENT_ADV enabled
	g_ADC_vref  =ADC_MEASUREMENT_ADV_GetResult(&ACOMP_VRef_handle)/4; // 4-samples filter inside ADC_MEASUREMENT_ADV enabled
	g_ADC_vref_average = average_calc((float)g_ADC_vref, g_ADC_vref_average, 256);

	g_acomp_mV = (float)g_ADC_acomp * VREF_VALUE_MV / g_ADC_vref_average;;
100028f2:	6018      	str	r0, [r3, #0]
	g_acomp_mV_average = average_calc(g_acomp_mV, g_acomp_mV_average, 32);
100028f4:	681e      	ldr	r6, [r3, #0]
  }
}

float average_calc(float new_value, float current_average, uint16_t filter)
{
	return (current_average*((float)filter-1) + new_value)/filter;
100028f6:	4921      	ldr	r1, [pc, #132]	; (1000297c <VADC0_G0_1_IRQHandler+0x124>)
	g_ADC_acomp = ADC_MEASUREMENT_ADV_GetResult(&ACOMP_ACOMP_handle)/4; // 4-samples filter inside ADC_MEASUREMENT_ADV enabled
	g_ADC_vref  =ADC_MEASUREMENT_ADV_GetResult(&ACOMP_VRef_handle)/4; // 4-samples filter inside ADC_MEASUREMENT_ADV enabled
	g_ADC_vref_average = average_calc((float)g_ADC_vref, g_ADC_vref_average, 256);

	g_acomp_mV = (float)g_ADC_acomp * VREF_VALUE_MV / g_ADC_vref_average;;
	g_acomp_mV_average = average_calc(g_acomp_mV, g_acomp_mV_average, 32);
100028f8:	6828      	ldr	r0, [r5, #0]
  }
}

float average_calc(float new_value, float current_average, uint16_t filter)
{
	return (current_average*((float)filter-1) + new_value)/filter;
100028fa:	f000 fc07 	bl	1000310c <__aeabi_fmul>
100028fe:	1c01      	adds	r1, r0, #0
10002900:	1c30      	adds	r0, r6, #0
10002902:	f000 f895 	bl	10002a30 <__aeabi_fadd>
10002906:	21f4      	movs	r1, #244	; 0xf4
10002908:	0589      	lsls	r1, r1, #22
1000290a:	f000 fbff 	bl	1000310c <__aeabi_fmul>
	g_ADC_acomp = ADC_MEASUREMENT_ADV_GetResult(&ACOMP_ACOMP_handle)/4; // 4-samples filter inside ADC_MEASUREMENT_ADV enabled
	g_ADC_vref  =ADC_MEASUREMENT_ADV_GetResult(&ACOMP_VRef_handle)/4; // 4-samples filter inside ADC_MEASUREMENT_ADV enabled
	g_ADC_vref_average = average_calc((float)g_ADC_vref, g_ADC_vref_average, 256);

	g_acomp_mV = (float)g_ADC_acomp * VREF_VALUE_MV / g_ADC_vref_average;;
	g_acomp_mV_average = average_calc(g_acomp_mV, g_acomp_mV_average, 32);
1000290e:	6028      	str	r0, [r5, #0]

	if (((g_acomp_mV_average > ACOMP_MAX + ACOMP_HYSTERESIS ) && (g_clamp == 0) && (startup_blank>=32)))
10002910:	6828      	ldr	r0, [r5, #0]
10002912:	491b      	ldr	r1, [pc, #108]	; (10002980 <VADC0_G0_1_IRQHandler+0x128>)
10002914:	f000 f860 	bl	100029d8 <__aeabi_fcmpgt>
10002918:	2800      	cmp	r0, #0
1000291a:	d003      	beq.n	10002924 <VADC0_G0_1_IRQHandler+0xcc>
1000291c:	4b19      	ldr	r3, [pc, #100]	; (10002984 <VADC0_G0_1_IRQHandler+0x12c>)
1000291e:	781a      	ldrb	r2, [r3, #0]
10002920:	2a00      	cmp	r2, #0
10002922:	d00d      	beq.n	10002940 <VADC0_G0_1_IRQHandler+0xe8>
	{
		// Upper boundary transition
		g_clamp = 1;
	}
	if ((g_acomp_mV_average < ACOMP_MAX - ACOMP_HYSTERESIS ) && (g_clamp == 1))
10002924:	6828      	ldr	r0, [r5, #0]
10002926:	4918      	ldr	r1, [pc, #96]	; (10002988 <VADC0_G0_1_IRQHandler+0x130>)
10002928:	f000 f842 	bl	100029b0 <__aeabi_fcmplt>
1000292c:	2800      	cmp	r0, #0
1000292e:	d003      	beq.n	10002938 <VADC0_G0_1_IRQHandler+0xe0>
10002930:	4b14      	ldr	r3, [pc, #80]	; (10002984 <VADC0_G0_1_IRQHandler+0x12c>)
10002932:	781a      	ldrb	r2, [r3, #0]
10002934:	2a01      	cmp	r2, #1
10002936:	d008      	beq.n	1000294a <VADC0_G0_1_IRQHandler+0xf2>
	{
		// Lower boundary transition
		g_clamp = 0;
	}
	return;
}
10002938:	b002      	add	sp, #8
1000293a:	bc04      	pop	{r2}
1000293c:	4690      	mov	r8, r2
1000293e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	g_ADC_vref_average = average_calc((float)g_ADC_vref, g_ADC_vref_average, 256);

	g_acomp_mV = (float)g_ADC_acomp * VREF_VALUE_MV / g_ADC_vref_average;;
	g_acomp_mV_average = average_calc(g_acomp_mV, g_acomp_mV_average, 32);

	if (((g_acomp_mV_average > ACOMP_MAX + ACOMP_HYSTERESIS ) && (g_clamp == 0) && (startup_blank>=32)))
10002940:	2c1f      	cmp	r4, #31
10002942:	d9ef      	bls.n	10002924 <VADC0_G0_1_IRQHandler+0xcc>
	{
		// Upper boundary transition
		g_clamp = 1;
10002944:	3201      	adds	r2, #1
10002946:	701a      	strb	r2, [r3, #0]
10002948:	e7ec      	b.n	10002924 <VADC0_G0_1_IRQHandler+0xcc>
	}
	if ((g_acomp_mV_average < ACOMP_MAX - ACOMP_HYSTERESIS ) && (g_clamp == 1))
	{
		// Lower boundary transition
		g_clamp = 0;
1000294a:	2200      	movs	r2, #0
1000294c:	701a      	strb	r2, [r3, #0]
1000294e:	e7f3      	b.n	10002938 <VADC0_G0_1_IRQHandler+0xe0>
10002950:	20000694 	.word	0x20000694
10002954:	100048f8 	.word	0x100048f8
10002958:	100047cc 	.word	0x100047cc
1000295c:	20000664 	.word	0x20000664
10002960:	10004880 	.word	0x10004880
10002964:	20000614 	.word	0x20000614
10002968:	20000670 	.word	0x20000670
1000296c:	437f0000 	.word	0x437f0000
10002970:	451b0000 	.word	0x451b0000
10002974:	20000684 	.word	0x20000684
10002978:	20000680 	.word	0x20000680
1000297c:	41f80000 	.word	0x41f80000
10002980:	45002000 	.word	0x45002000
10002984:	20000618 	.word	0x20000618
10002988:	44f3c000 	.word	0x44f3c000

1000298c <__aeabi_cfrcmple>:
1000298c:	4684      	mov	ip, r0
1000298e:	1c08      	adds	r0, r1, #0
10002990:	4661      	mov	r1, ip
10002992:	e7ff      	b.n	10002994 <__aeabi_cfcmpeq>

10002994 <__aeabi_cfcmpeq>:
10002994:	b51f      	push	{r0, r1, r2, r3, r4, lr}
10002996:	f000 fb73 	bl	10003080 <__lesf2>
1000299a:	2800      	cmp	r0, #0
1000299c:	d401      	bmi.n	100029a2 <__aeabi_cfcmpeq+0xe>
1000299e:	2100      	movs	r1, #0
100029a0:	42c8      	cmn	r0, r1
100029a2:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

100029a4 <__aeabi_fcmpeq>:
100029a4:	b510      	push	{r4, lr}
100029a6:	f000 faf7 	bl	10002f98 <__eqsf2>
100029aa:	4240      	negs	r0, r0
100029ac:	3001      	adds	r0, #1
100029ae:	bd10      	pop	{r4, pc}

100029b0 <__aeabi_fcmplt>:
100029b0:	b510      	push	{r4, lr}
100029b2:	f000 fb65 	bl	10003080 <__lesf2>
100029b6:	2800      	cmp	r0, #0
100029b8:	db01      	blt.n	100029be <__aeabi_fcmplt+0xe>
100029ba:	2000      	movs	r0, #0
100029bc:	bd10      	pop	{r4, pc}
100029be:	2001      	movs	r0, #1
100029c0:	bd10      	pop	{r4, pc}
100029c2:	46c0      	nop			; (mov r8, r8)

100029c4 <__aeabi_fcmple>:
100029c4:	b510      	push	{r4, lr}
100029c6:	f000 fb5b 	bl	10003080 <__lesf2>
100029ca:	2800      	cmp	r0, #0
100029cc:	dd01      	ble.n	100029d2 <__aeabi_fcmple+0xe>
100029ce:	2000      	movs	r0, #0
100029d0:	bd10      	pop	{r4, pc}
100029d2:	2001      	movs	r0, #1
100029d4:	bd10      	pop	{r4, pc}
100029d6:	46c0      	nop			; (mov r8, r8)

100029d8 <__aeabi_fcmpgt>:
100029d8:	b510      	push	{r4, lr}
100029da:	f000 fb07 	bl	10002fec <__gesf2>
100029de:	2800      	cmp	r0, #0
100029e0:	dc01      	bgt.n	100029e6 <__aeabi_fcmpgt+0xe>
100029e2:	2000      	movs	r0, #0
100029e4:	bd10      	pop	{r4, pc}
100029e6:	2001      	movs	r0, #1
100029e8:	bd10      	pop	{r4, pc}
100029ea:	46c0      	nop			; (mov r8, r8)

100029ec <__aeabi_fcmpge>:
100029ec:	b510      	push	{r4, lr}
100029ee:	f000 fafd 	bl	10002fec <__gesf2>
100029f2:	2800      	cmp	r0, #0
100029f4:	da01      	bge.n	100029fa <__aeabi_fcmpge+0xe>
100029f6:	2000      	movs	r0, #0
100029f8:	bd10      	pop	{r4, pc}
100029fa:	2001      	movs	r0, #1
100029fc:	bd10      	pop	{r4, pc}
100029fe:	46c0      	nop			; (mov r8, r8)

10002a00 <__aeabi_f2uiz>:
10002a00:	219e      	movs	r1, #158	; 0x9e
10002a02:	b510      	push	{r4, lr}
10002a04:	05c9      	lsls	r1, r1, #23
10002a06:	1c04      	adds	r4, r0, #0
10002a08:	f7ff fff0 	bl	100029ec <__aeabi_fcmpge>
10002a0c:	2800      	cmp	r0, #0
10002a0e:	d103      	bne.n	10002a18 <__aeabi_f2uiz+0x18>
10002a10:	1c20      	adds	r0, r4, #0
10002a12:	f000 fe2b 	bl	1000366c <__aeabi_f2iz>
10002a16:	bd10      	pop	{r4, pc}
10002a18:	219e      	movs	r1, #158	; 0x9e
10002a1a:	1c20      	adds	r0, r4, #0
10002a1c:	05c9      	lsls	r1, r1, #23
10002a1e:	f000 fca7 	bl	10003370 <__aeabi_fsub>
10002a22:	f000 fe23 	bl	1000366c <__aeabi_f2iz>
10002a26:	2380      	movs	r3, #128	; 0x80
10002a28:	061b      	lsls	r3, r3, #24
10002a2a:	469c      	mov	ip, r3
10002a2c:	4460      	add	r0, ip
10002a2e:	e7f2      	b.n	10002a16 <__aeabi_f2uiz+0x16>

10002a30 <__aeabi_fadd>:
10002a30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10002a32:	004a      	lsls	r2, r1, #1
10002a34:	0243      	lsls	r3, r0, #9
10002a36:	0044      	lsls	r4, r0, #1
10002a38:	024e      	lsls	r6, r1, #9
10002a3a:	0fc5      	lsrs	r5, r0, #31
10002a3c:	0e24      	lsrs	r4, r4, #24
10002a3e:	1c28      	adds	r0, r5, #0
10002a40:	099b      	lsrs	r3, r3, #6
10002a42:	0e12      	lsrs	r2, r2, #24
10002a44:	0fc9      	lsrs	r1, r1, #31
10002a46:	09b7      	lsrs	r7, r6, #6
10002a48:	428d      	cmp	r5, r1
10002a4a:	d040      	beq.n	10002ace <__aeabi_fadd+0x9e>
10002a4c:	1aa0      	subs	r0, r4, r2
10002a4e:	2800      	cmp	r0, #0
10002a50:	dc00      	bgt.n	10002a54 <__aeabi_fadd+0x24>
10002a52:	e084      	b.n	10002b5e <__aeabi_fadd+0x12e>
10002a54:	2a00      	cmp	r2, #0
10002a56:	d11c      	bne.n	10002a92 <__aeabi_fadd+0x62>
10002a58:	2f00      	cmp	r7, #0
10002a5a:	d15c      	bne.n	10002b16 <__aeabi_fadd+0xe6>
10002a5c:	075a      	lsls	r2, r3, #29
10002a5e:	d004      	beq.n	10002a6a <__aeabi_fadd+0x3a>
10002a60:	220f      	movs	r2, #15
10002a62:	401a      	ands	r2, r3
10002a64:	2a04      	cmp	r2, #4
10002a66:	d000      	beq.n	10002a6a <__aeabi_fadd+0x3a>
10002a68:	3304      	adds	r3, #4
10002a6a:	2280      	movs	r2, #128	; 0x80
10002a6c:	04d2      	lsls	r2, r2, #19
10002a6e:	401a      	ands	r2, r3
10002a70:	1c28      	adds	r0, r5, #0
10002a72:	2a00      	cmp	r2, #0
10002a74:	d024      	beq.n	10002ac0 <__aeabi_fadd+0x90>
10002a76:	3401      	adds	r4, #1
10002a78:	2cff      	cmp	r4, #255	; 0xff
10002a7a:	d100      	bne.n	10002a7e <__aeabi_fadd+0x4e>
10002a7c:	e07b      	b.n	10002b76 <__aeabi_fadd+0x146>
10002a7e:	019b      	lsls	r3, r3, #6
10002a80:	0a5b      	lsrs	r3, r3, #9
10002a82:	b2e4      	uxtb	r4, r4
10002a84:	025b      	lsls	r3, r3, #9
10002a86:	05e4      	lsls	r4, r4, #23
10002a88:	0a5b      	lsrs	r3, r3, #9
10002a8a:	4323      	orrs	r3, r4
10002a8c:	07c0      	lsls	r0, r0, #31
10002a8e:	4318      	orrs	r0, r3
10002a90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10002a92:	2cff      	cmp	r4, #255	; 0xff
10002a94:	d0e2      	beq.n	10002a5c <__aeabi_fadd+0x2c>
10002a96:	2280      	movs	r2, #128	; 0x80
10002a98:	04d2      	lsls	r2, r2, #19
10002a9a:	4317      	orrs	r7, r2
10002a9c:	2601      	movs	r6, #1
10002a9e:	281b      	cmp	r0, #27
10002aa0:	dc08      	bgt.n	10002ab4 <__aeabi_fadd+0x84>
10002aa2:	1c39      	adds	r1, r7, #0
10002aa4:	2220      	movs	r2, #32
10002aa6:	1c3e      	adds	r6, r7, #0
10002aa8:	40c1      	lsrs	r1, r0
10002aaa:	1a10      	subs	r0, r2, r0
10002aac:	4086      	lsls	r6, r0
10002aae:	1e77      	subs	r7, r6, #1
10002ab0:	41be      	sbcs	r6, r7
10002ab2:	430e      	orrs	r6, r1
10002ab4:	1b9b      	subs	r3, r3, r6
10002ab6:	015a      	lsls	r2, r3, #5
10002ab8:	d433      	bmi.n	10002b22 <__aeabi_fadd+0xf2>
10002aba:	1c28      	adds	r0, r5, #0
10002abc:	075a      	lsls	r2, r3, #29
10002abe:	d1cf      	bne.n	10002a60 <__aeabi_fadd+0x30>
10002ac0:	08db      	lsrs	r3, r3, #3
10002ac2:	2cff      	cmp	r4, #255	; 0xff
10002ac4:	d01e      	beq.n	10002b04 <__aeabi_fadd+0xd4>
10002ac6:	025b      	lsls	r3, r3, #9
10002ac8:	0a5b      	lsrs	r3, r3, #9
10002aca:	b2e4      	uxtb	r4, r4
10002acc:	e7da      	b.n	10002a84 <__aeabi_fadd+0x54>
10002ace:	1aa1      	subs	r1, r4, r2
10002ad0:	2900      	cmp	r1, #0
10002ad2:	dd57      	ble.n	10002b84 <__aeabi_fadd+0x154>
10002ad4:	2a00      	cmp	r2, #0
10002ad6:	d03a      	beq.n	10002b4e <__aeabi_fadd+0x11e>
10002ad8:	2cff      	cmp	r4, #255	; 0xff
10002ada:	d0bf      	beq.n	10002a5c <__aeabi_fadd+0x2c>
10002adc:	2280      	movs	r2, #128	; 0x80
10002ade:	04d2      	lsls	r2, r2, #19
10002ae0:	4317      	orrs	r7, r2
10002ae2:	2601      	movs	r6, #1
10002ae4:	291b      	cmp	r1, #27
10002ae6:	dd72      	ble.n	10002bce <__aeabi_fadd+0x19e>
10002ae8:	199b      	adds	r3, r3, r6
10002aea:	015a      	lsls	r2, r3, #5
10002aec:	d5e5      	bpl.n	10002aba <__aeabi_fadd+0x8a>
10002aee:	3401      	adds	r4, #1
10002af0:	2cff      	cmp	r4, #255	; 0xff
10002af2:	d100      	bne.n	10002af6 <__aeabi_fadd+0xc6>
10002af4:	e087      	b.n	10002c06 <__aeabi_fadd+0x1d6>
10002af6:	2101      	movs	r1, #1
10002af8:	4a8a      	ldr	r2, [pc, #552]	; (10002d24 <__aeabi_fadd+0x2f4>)
10002afa:	4019      	ands	r1, r3
10002afc:	4013      	ands	r3, r2
10002afe:	085b      	lsrs	r3, r3, #1
10002b00:	430b      	orrs	r3, r1
10002b02:	e7ab      	b.n	10002a5c <__aeabi_fadd+0x2c>
10002b04:	2b00      	cmp	r3, #0
10002b06:	d036      	beq.n	10002b76 <__aeabi_fadd+0x146>
10002b08:	2280      	movs	r2, #128	; 0x80
10002b0a:	03d2      	lsls	r2, r2, #15
10002b0c:	4313      	orrs	r3, r2
10002b0e:	025b      	lsls	r3, r3, #9
10002b10:	0a5b      	lsrs	r3, r3, #9
10002b12:	24ff      	movs	r4, #255	; 0xff
10002b14:	e7b6      	b.n	10002a84 <__aeabi_fadd+0x54>
10002b16:	3801      	subs	r0, #1
10002b18:	2800      	cmp	r0, #0
10002b1a:	d13f      	bne.n	10002b9c <__aeabi_fadd+0x16c>
10002b1c:	1bdb      	subs	r3, r3, r7
10002b1e:	015a      	lsls	r2, r3, #5
10002b20:	d5cb      	bpl.n	10002aba <__aeabi_fadd+0x8a>
10002b22:	019b      	lsls	r3, r3, #6
10002b24:	099e      	lsrs	r6, r3, #6
10002b26:	1c30      	adds	r0, r6, #0
10002b28:	f001 fce6 	bl	100044f8 <__clzsi2>
10002b2c:	3805      	subs	r0, #5
10002b2e:	4086      	lsls	r6, r0
10002b30:	4284      	cmp	r4, r0
10002b32:	dc23      	bgt.n	10002b7c <__aeabi_fadd+0x14c>
10002b34:	1b00      	subs	r0, r0, r4
10002b36:	241f      	movs	r4, #31
10002b38:	1c32      	adds	r2, r6, #0
10002b3a:	1c43      	adds	r3, r0, #1
10002b3c:	1a20      	subs	r0, r4, r0
10002b3e:	40da      	lsrs	r2, r3
10002b40:	4086      	lsls	r6, r0
10002b42:	1c13      	adds	r3, r2, #0
10002b44:	1e74      	subs	r4, r6, #1
10002b46:	41a6      	sbcs	r6, r4
10002b48:	2400      	movs	r4, #0
10002b4a:	4333      	orrs	r3, r6
10002b4c:	e786      	b.n	10002a5c <__aeabi_fadd+0x2c>
10002b4e:	2f00      	cmp	r7, #0
10002b50:	d100      	bne.n	10002b54 <__aeabi_fadd+0x124>
10002b52:	e783      	b.n	10002a5c <__aeabi_fadd+0x2c>
10002b54:	3901      	subs	r1, #1
10002b56:	2900      	cmp	r1, #0
10002b58:	d150      	bne.n	10002bfc <__aeabi_fadd+0x1cc>
10002b5a:	19db      	adds	r3, r3, r7
10002b5c:	e7c5      	b.n	10002aea <__aeabi_fadd+0xba>
10002b5e:	2800      	cmp	r0, #0
10002b60:	d120      	bne.n	10002ba4 <__aeabi_fadd+0x174>
10002b62:	1c62      	adds	r2, r4, #1
10002b64:	b2d2      	uxtb	r2, r2
10002b66:	2a01      	cmp	r2, #1
10002b68:	dd5e      	ble.n	10002c28 <__aeabi_fadd+0x1f8>
10002b6a:	1bde      	subs	r6, r3, r7
10002b6c:	0172      	lsls	r2, r6, #5
10002b6e:	d528      	bpl.n	10002bc2 <__aeabi_fadd+0x192>
10002b70:	1afe      	subs	r6, r7, r3
10002b72:	1c0d      	adds	r5, r1, #0
10002b74:	e7d7      	b.n	10002b26 <__aeabi_fadd+0xf6>
10002b76:	24ff      	movs	r4, #255	; 0xff
10002b78:	2300      	movs	r3, #0
10002b7a:	e783      	b.n	10002a84 <__aeabi_fadd+0x54>
10002b7c:	4b69      	ldr	r3, [pc, #420]	; (10002d24 <__aeabi_fadd+0x2f4>)
10002b7e:	1a24      	subs	r4, r4, r0
10002b80:	4033      	ands	r3, r6
10002b82:	e76b      	b.n	10002a5c <__aeabi_fadd+0x2c>
10002b84:	2900      	cmp	r1, #0
10002b86:	d158      	bne.n	10002c3a <__aeabi_fadd+0x20a>
10002b88:	1c62      	adds	r2, r4, #1
10002b8a:	b2d1      	uxtb	r1, r2
10002b8c:	2901      	cmp	r1, #1
10002b8e:	dd3c      	ble.n	10002c0a <__aeabi_fadd+0x1da>
10002b90:	2aff      	cmp	r2, #255	; 0xff
10002b92:	d037      	beq.n	10002c04 <__aeabi_fadd+0x1d4>
10002b94:	18fb      	adds	r3, r7, r3
10002b96:	085b      	lsrs	r3, r3, #1
10002b98:	1c14      	adds	r4, r2, #0
10002b9a:	e75f      	b.n	10002a5c <__aeabi_fadd+0x2c>
10002b9c:	2cff      	cmp	r4, #255	; 0xff
10002b9e:	d000      	beq.n	10002ba2 <__aeabi_fadd+0x172>
10002ba0:	e77c      	b.n	10002a9c <__aeabi_fadd+0x6c>
10002ba2:	e75b      	b.n	10002a5c <__aeabi_fadd+0x2c>
10002ba4:	2c00      	cmp	r4, #0
10002ba6:	d01e      	beq.n	10002be6 <__aeabi_fadd+0x1b6>
10002ba8:	2aff      	cmp	r2, #255	; 0xff
10002baa:	d023      	beq.n	10002bf4 <__aeabi_fadd+0x1c4>
10002bac:	2480      	movs	r4, #128	; 0x80
10002bae:	04e4      	lsls	r4, r4, #19
10002bb0:	4240      	negs	r0, r0
10002bb2:	4323      	orrs	r3, r4
10002bb4:	281b      	cmp	r0, #27
10002bb6:	dd5b      	ble.n	10002c70 <__aeabi_fadd+0x240>
10002bb8:	2301      	movs	r3, #1
10002bba:	1afb      	subs	r3, r7, r3
10002bbc:	1c14      	adds	r4, r2, #0
10002bbe:	1c0d      	adds	r5, r1, #0
10002bc0:	e7ad      	b.n	10002b1e <__aeabi_fadd+0xee>
10002bc2:	2e00      	cmp	r6, #0
10002bc4:	d1af      	bne.n	10002b26 <__aeabi_fadd+0xf6>
10002bc6:	2300      	movs	r3, #0
10002bc8:	2000      	movs	r0, #0
10002bca:	2400      	movs	r4, #0
10002bcc:	e778      	b.n	10002ac0 <__aeabi_fadd+0x90>
10002bce:	1c3a      	adds	r2, r7, #0
10002bd0:	40ca      	lsrs	r2, r1
10002bd2:	4694      	mov	ip, r2
10002bd4:	2220      	movs	r2, #32
10002bd6:	1c3e      	adds	r6, r7, #0
10002bd8:	1a51      	subs	r1, r2, r1
10002bda:	408e      	lsls	r6, r1
10002bdc:	4662      	mov	r2, ip
10002bde:	1e77      	subs	r7, r6, #1
10002be0:	41be      	sbcs	r6, r7
10002be2:	4316      	orrs	r6, r2
10002be4:	e780      	b.n	10002ae8 <__aeabi_fadd+0xb8>
10002be6:	2b00      	cmp	r3, #0
10002be8:	d03e      	beq.n	10002c68 <__aeabi_fadd+0x238>
10002bea:	43c0      	mvns	r0, r0
10002bec:	2800      	cmp	r0, #0
10002bee:	d0e4      	beq.n	10002bba <__aeabi_fadd+0x18a>
10002bf0:	2aff      	cmp	r2, #255	; 0xff
10002bf2:	d1df      	bne.n	10002bb4 <__aeabi_fadd+0x184>
10002bf4:	1c3b      	adds	r3, r7, #0
10002bf6:	24ff      	movs	r4, #255	; 0xff
10002bf8:	1c0d      	adds	r5, r1, #0
10002bfa:	e72f      	b.n	10002a5c <__aeabi_fadd+0x2c>
10002bfc:	2cff      	cmp	r4, #255	; 0xff
10002bfe:	d000      	beq.n	10002c02 <__aeabi_fadd+0x1d2>
10002c00:	e76f      	b.n	10002ae2 <__aeabi_fadd+0xb2>
10002c02:	e72b      	b.n	10002a5c <__aeabi_fadd+0x2c>
10002c04:	24ff      	movs	r4, #255	; 0xff
10002c06:	2300      	movs	r3, #0
10002c08:	e75a      	b.n	10002ac0 <__aeabi_fadd+0x90>
10002c0a:	2c00      	cmp	r4, #0
10002c0c:	d15a      	bne.n	10002cc4 <__aeabi_fadd+0x294>
10002c0e:	2b00      	cmp	r3, #0
10002c10:	d07f      	beq.n	10002d12 <__aeabi_fadd+0x2e2>
10002c12:	2f00      	cmp	r7, #0
10002c14:	d100      	bne.n	10002c18 <__aeabi_fadd+0x1e8>
10002c16:	e721      	b.n	10002a5c <__aeabi_fadd+0x2c>
10002c18:	19db      	adds	r3, r3, r7
10002c1a:	015a      	lsls	r2, r3, #5
10002c1c:	d400      	bmi.n	10002c20 <__aeabi_fadd+0x1f0>
10002c1e:	e74c      	b.n	10002aba <__aeabi_fadd+0x8a>
10002c20:	4a40      	ldr	r2, [pc, #256]	; (10002d24 <__aeabi_fadd+0x2f4>)
10002c22:	3401      	adds	r4, #1
10002c24:	4013      	ands	r3, r2
10002c26:	e719      	b.n	10002a5c <__aeabi_fadd+0x2c>
10002c28:	2c00      	cmp	r4, #0
10002c2a:	d115      	bne.n	10002c58 <__aeabi_fadd+0x228>
10002c2c:	2b00      	cmp	r3, #0
10002c2e:	d12f      	bne.n	10002c90 <__aeabi_fadd+0x260>
10002c30:	2f00      	cmp	r7, #0
10002c32:	d05d      	beq.n	10002cf0 <__aeabi_fadd+0x2c0>
10002c34:	1c3b      	adds	r3, r7, #0
10002c36:	1c0d      	adds	r5, r1, #0
10002c38:	e710      	b.n	10002a5c <__aeabi_fadd+0x2c>
10002c3a:	2c00      	cmp	r4, #0
10002c3c:	d121      	bne.n	10002c82 <__aeabi_fadd+0x252>
10002c3e:	2b00      	cmp	r3, #0
10002c40:	d053      	beq.n	10002cea <__aeabi_fadd+0x2ba>
10002c42:	43c9      	mvns	r1, r1
10002c44:	2900      	cmp	r1, #0
10002c46:	d004      	beq.n	10002c52 <__aeabi_fadd+0x222>
10002c48:	2aff      	cmp	r2, #255	; 0xff
10002c4a:	d04b      	beq.n	10002ce4 <__aeabi_fadd+0x2b4>
10002c4c:	291b      	cmp	r1, #27
10002c4e:	dd57      	ble.n	10002d00 <__aeabi_fadd+0x2d0>
10002c50:	2301      	movs	r3, #1
10002c52:	19db      	adds	r3, r3, r7
10002c54:	1c14      	adds	r4, r2, #0
10002c56:	e748      	b.n	10002aea <__aeabi_fadd+0xba>
10002c58:	2b00      	cmp	r3, #0
10002c5a:	d122      	bne.n	10002ca2 <__aeabi_fadd+0x272>
10002c5c:	2f00      	cmp	r7, #0
10002c5e:	d04a      	beq.n	10002cf6 <__aeabi_fadd+0x2c6>
10002c60:	1c3b      	adds	r3, r7, #0
10002c62:	1c0d      	adds	r5, r1, #0
10002c64:	24ff      	movs	r4, #255	; 0xff
10002c66:	e6f9      	b.n	10002a5c <__aeabi_fadd+0x2c>
10002c68:	1c3b      	adds	r3, r7, #0
10002c6a:	1c14      	adds	r4, r2, #0
10002c6c:	1c0d      	adds	r5, r1, #0
10002c6e:	e6f5      	b.n	10002a5c <__aeabi_fadd+0x2c>
10002c70:	1c1d      	adds	r5, r3, #0
10002c72:	2420      	movs	r4, #32
10002c74:	40c5      	lsrs	r5, r0
10002c76:	1a20      	subs	r0, r4, r0
10002c78:	4083      	lsls	r3, r0
10002c7a:	1e58      	subs	r0, r3, #1
10002c7c:	4183      	sbcs	r3, r0
10002c7e:	432b      	orrs	r3, r5
10002c80:	e79b      	b.n	10002bba <__aeabi_fadd+0x18a>
10002c82:	2aff      	cmp	r2, #255	; 0xff
10002c84:	d02e      	beq.n	10002ce4 <__aeabi_fadd+0x2b4>
10002c86:	2480      	movs	r4, #128	; 0x80
10002c88:	04e4      	lsls	r4, r4, #19
10002c8a:	4249      	negs	r1, r1
10002c8c:	4323      	orrs	r3, r4
10002c8e:	e7dd      	b.n	10002c4c <__aeabi_fadd+0x21c>
10002c90:	2f00      	cmp	r7, #0
10002c92:	d100      	bne.n	10002c96 <__aeabi_fadd+0x266>
10002c94:	e6e2      	b.n	10002a5c <__aeabi_fadd+0x2c>
10002c96:	1bda      	subs	r2, r3, r7
10002c98:	0150      	lsls	r0, r2, #5
10002c9a:	d53c      	bpl.n	10002d16 <__aeabi_fadd+0x2e6>
10002c9c:	1afb      	subs	r3, r7, r3
10002c9e:	1c0d      	adds	r5, r1, #0
10002ca0:	e6dc      	b.n	10002a5c <__aeabi_fadd+0x2c>
10002ca2:	24ff      	movs	r4, #255	; 0xff
10002ca4:	2f00      	cmp	r7, #0
10002ca6:	d100      	bne.n	10002caa <__aeabi_fadd+0x27a>
10002ca8:	e6d8      	b.n	10002a5c <__aeabi_fadd+0x2c>
10002caa:	2280      	movs	r2, #128	; 0x80
10002cac:	08db      	lsrs	r3, r3, #3
10002cae:	03d2      	lsls	r2, r2, #15
10002cb0:	4213      	tst	r3, r2
10002cb2:	d004      	beq.n	10002cbe <__aeabi_fadd+0x28e>
10002cb4:	08fe      	lsrs	r6, r7, #3
10002cb6:	4216      	tst	r6, r2
10002cb8:	d101      	bne.n	10002cbe <__aeabi_fadd+0x28e>
10002cba:	1c33      	adds	r3, r6, #0
10002cbc:	1c0d      	adds	r5, r1, #0
10002cbe:	00db      	lsls	r3, r3, #3
10002cc0:	24ff      	movs	r4, #255	; 0xff
10002cc2:	e6cb      	b.n	10002a5c <__aeabi_fadd+0x2c>
10002cc4:	2b00      	cmp	r3, #0
10002cc6:	d00d      	beq.n	10002ce4 <__aeabi_fadd+0x2b4>
10002cc8:	24ff      	movs	r4, #255	; 0xff
10002cca:	2f00      	cmp	r7, #0
10002ccc:	d100      	bne.n	10002cd0 <__aeabi_fadd+0x2a0>
10002cce:	e6c5      	b.n	10002a5c <__aeabi_fadd+0x2c>
10002cd0:	2280      	movs	r2, #128	; 0x80
10002cd2:	08db      	lsrs	r3, r3, #3
10002cd4:	03d2      	lsls	r2, r2, #15
10002cd6:	4213      	tst	r3, r2
10002cd8:	d0f1      	beq.n	10002cbe <__aeabi_fadd+0x28e>
10002cda:	08fe      	lsrs	r6, r7, #3
10002cdc:	4216      	tst	r6, r2
10002cde:	d1ee      	bne.n	10002cbe <__aeabi_fadd+0x28e>
10002ce0:	1c33      	adds	r3, r6, #0
10002ce2:	e7ec      	b.n	10002cbe <__aeabi_fadd+0x28e>
10002ce4:	1c3b      	adds	r3, r7, #0
10002ce6:	24ff      	movs	r4, #255	; 0xff
10002ce8:	e6b8      	b.n	10002a5c <__aeabi_fadd+0x2c>
10002cea:	1c3b      	adds	r3, r7, #0
10002cec:	1c14      	adds	r4, r2, #0
10002cee:	e6b5      	b.n	10002a5c <__aeabi_fadd+0x2c>
10002cf0:	1c23      	adds	r3, r4, #0
10002cf2:	2000      	movs	r0, #0
10002cf4:	e6e4      	b.n	10002ac0 <__aeabi_fadd+0x90>
10002cf6:	2380      	movs	r3, #128	; 0x80
10002cf8:	2000      	movs	r0, #0
10002cfa:	049b      	lsls	r3, r3, #18
10002cfc:	24ff      	movs	r4, #255	; 0xff
10002cfe:	e6df      	b.n	10002ac0 <__aeabi_fadd+0x90>
10002d00:	1c1e      	adds	r6, r3, #0
10002d02:	2420      	movs	r4, #32
10002d04:	40ce      	lsrs	r6, r1
10002d06:	1a61      	subs	r1, r4, r1
10002d08:	408b      	lsls	r3, r1
10002d0a:	1e59      	subs	r1, r3, #1
10002d0c:	418b      	sbcs	r3, r1
10002d0e:	4333      	orrs	r3, r6
10002d10:	e79f      	b.n	10002c52 <__aeabi_fadd+0x222>
10002d12:	1c3b      	adds	r3, r7, #0
10002d14:	e6a2      	b.n	10002a5c <__aeabi_fadd+0x2c>
10002d16:	1e13      	subs	r3, r2, #0
10002d18:	d000      	beq.n	10002d1c <__aeabi_fadd+0x2ec>
10002d1a:	e6ce      	b.n	10002aba <__aeabi_fadd+0x8a>
10002d1c:	2300      	movs	r3, #0
10002d1e:	2000      	movs	r0, #0
10002d20:	e6ce      	b.n	10002ac0 <__aeabi_fadd+0x90>
10002d22:	46c0      	nop			; (mov r8, r8)
10002d24:	fbffffff 	.word	0xfbffffff

10002d28 <__aeabi_fdiv>:
10002d28:	b5f0      	push	{r4, r5, r6, r7, lr}
10002d2a:	4656      	mov	r6, sl
10002d2c:	464d      	mov	r5, r9
10002d2e:	465f      	mov	r7, fp
10002d30:	4644      	mov	r4, r8
10002d32:	b4f0      	push	{r4, r5, r6, r7}
10002d34:	0243      	lsls	r3, r0, #9
10002d36:	0045      	lsls	r5, r0, #1
10002d38:	0fc7      	lsrs	r7, r0, #31
10002d3a:	b083      	sub	sp, #12
10002d3c:	468a      	mov	sl, r1
10002d3e:	0a5c      	lsrs	r4, r3, #9
10002d40:	0e2e      	lsrs	r6, r5, #24
10002d42:	46b9      	mov	r9, r7
10002d44:	d041      	beq.n	10002dca <__aeabi_fdiv+0xa2>
10002d46:	2eff      	cmp	r6, #255	; 0xff
10002d48:	d026      	beq.n	10002d98 <__aeabi_fdiv+0x70>
10002d4a:	2380      	movs	r3, #128	; 0x80
10002d4c:	041b      	lsls	r3, r3, #16
10002d4e:	4323      	orrs	r3, r4
10002d50:	00dc      	lsls	r4, r3, #3
10002d52:	2300      	movs	r3, #0
10002d54:	4698      	mov	r8, r3
10002d56:	469b      	mov	fp, r3
10002d58:	3e7f      	subs	r6, #127	; 0x7f
10002d5a:	4653      	mov	r3, sl
10002d5c:	025b      	lsls	r3, r3, #9
10002d5e:	0a5d      	lsrs	r5, r3, #9
10002d60:	4653      	mov	r3, sl
10002d62:	005a      	lsls	r2, r3, #1
10002d64:	0fdb      	lsrs	r3, r3, #31
10002d66:	0e12      	lsrs	r2, r2, #24
10002d68:	469a      	mov	sl, r3
10002d6a:	d039      	beq.n	10002de0 <__aeabi_fdiv+0xb8>
10002d6c:	2aff      	cmp	r2, #255	; 0xff
10002d6e:	d033      	beq.n	10002dd8 <__aeabi_fdiv+0xb0>
10002d70:	2380      	movs	r3, #128	; 0x80
10002d72:	041b      	lsls	r3, r3, #16
10002d74:	432b      	orrs	r3, r5
10002d76:	00dd      	lsls	r5, r3, #3
10002d78:	2300      	movs	r3, #0
10002d7a:	3a7f      	subs	r2, #127	; 0x7f
10002d7c:	4651      	mov	r1, sl
10002d7e:	1ab2      	subs	r2, r6, r2
10002d80:	4646      	mov	r6, r8
10002d82:	4079      	eors	r1, r7
10002d84:	1c08      	adds	r0, r1, #0
10002d86:	9201      	str	r2, [sp, #4]
10002d88:	431e      	orrs	r6, r3
10002d8a:	2e0f      	cmp	r6, #15
10002d8c:	d900      	bls.n	10002d90 <__aeabi_fdiv+0x68>
10002d8e:	e076      	b.n	10002e7e <__aeabi_fdiv+0x156>
10002d90:	4a7e      	ldr	r2, [pc, #504]	; (10002f8c <__aeabi_fdiv+0x264>)
10002d92:	00b6      	lsls	r6, r6, #2
10002d94:	5996      	ldr	r6, [r2, r6]
10002d96:	46b7      	mov	pc, r6
10002d98:	2c00      	cmp	r4, #0
10002d9a:	d130      	bne.n	10002dfe <__aeabi_fdiv+0xd6>
10002d9c:	2308      	movs	r3, #8
10002d9e:	4698      	mov	r8, r3
10002da0:	3b06      	subs	r3, #6
10002da2:	469b      	mov	fp, r3
10002da4:	e7d9      	b.n	10002d5a <__aeabi_fdiv+0x32>
10002da6:	2380      	movs	r3, #128	; 0x80
10002da8:	2100      	movs	r1, #0
10002daa:	03db      	lsls	r3, r3, #15
10002dac:	24ff      	movs	r4, #255	; 0xff
10002dae:	025b      	lsls	r3, r3, #9
10002db0:	05e4      	lsls	r4, r4, #23
10002db2:	0a5b      	lsrs	r3, r3, #9
10002db4:	07c9      	lsls	r1, r1, #31
10002db6:	4323      	orrs	r3, r4
10002db8:	430b      	orrs	r3, r1
10002dba:	1c18      	adds	r0, r3, #0
10002dbc:	b003      	add	sp, #12
10002dbe:	bc3c      	pop	{r2, r3, r4, r5}
10002dc0:	4690      	mov	r8, r2
10002dc2:	4699      	mov	r9, r3
10002dc4:	46a2      	mov	sl, r4
10002dc6:	46ab      	mov	fp, r5
10002dc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
10002dca:	2c00      	cmp	r4, #0
10002dcc:	d128      	bne.n	10002e20 <__aeabi_fdiv+0xf8>
10002dce:	2304      	movs	r3, #4
10002dd0:	4698      	mov	r8, r3
10002dd2:	3b03      	subs	r3, #3
10002dd4:	469b      	mov	fp, r3
10002dd6:	e7c0      	b.n	10002d5a <__aeabi_fdiv+0x32>
10002dd8:	2d00      	cmp	r5, #0
10002dda:	d11f      	bne.n	10002e1c <__aeabi_fdiv+0xf4>
10002ddc:	2302      	movs	r3, #2
10002dde:	e002      	b.n	10002de6 <__aeabi_fdiv+0xbe>
10002de0:	2d00      	cmp	r5, #0
10002de2:	d111      	bne.n	10002e08 <__aeabi_fdiv+0xe0>
10002de4:	2301      	movs	r3, #1
10002de6:	1ab2      	subs	r2, r6, r2
10002de8:	4650      	mov	r0, sl
10002dea:	4646      	mov	r6, r8
10002dec:	4078      	eors	r0, r7
10002dee:	9201      	str	r2, [sp, #4]
10002df0:	431e      	orrs	r6, r3
10002df2:	2e0f      	cmp	r6, #15
10002df4:	d827      	bhi.n	10002e46 <__aeabi_fdiv+0x11e>
10002df6:	4966      	ldr	r1, [pc, #408]	; (10002f90 <__aeabi_fdiv+0x268>)
10002df8:	00b6      	lsls	r6, r6, #2
10002dfa:	5989      	ldr	r1, [r1, r6]
10002dfc:	468f      	mov	pc, r1
10002dfe:	230c      	movs	r3, #12
10002e00:	4698      	mov	r8, r3
10002e02:	3b09      	subs	r3, #9
10002e04:	469b      	mov	fp, r3
10002e06:	e7a8      	b.n	10002d5a <__aeabi_fdiv+0x32>
10002e08:	1c28      	adds	r0, r5, #0
10002e0a:	f001 fb75 	bl	100044f8 <__clzsi2>
10002e0e:	2276      	movs	r2, #118	; 0x76
10002e10:	1f43      	subs	r3, r0, #5
10002e12:	4252      	negs	r2, r2
10002e14:	409d      	lsls	r5, r3
10002e16:	1a12      	subs	r2, r2, r0
10002e18:	2300      	movs	r3, #0
10002e1a:	e7af      	b.n	10002d7c <__aeabi_fdiv+0x54>
10002e1c:	2303      	movs	r3, #3
10002e1e:	e7ad      	b.n	10002d7c <__aeabi_fdiv+0x54>
10002e20:	1c20      	adds	r0, r4, #0
10002e22:	f001 fb69 	bl	100044f8 <__clzsi2>
10002e26:	1f43      	subs	r3, r0, #5
10002e28:	409c      	lsls	r4, r3
10002e2a:	2376      	movs	r3, #118	; 0x76
10002e2c:	425b      	negs	r3, r3
10002e2e:	1a1e      	subs	r6, r3, r0
10002e30:	2300      	movs	r3, #0
10002e32:	4698      	mov	r8, r3
10002e34:	469b      	mov	fp, r3
10002e36:	e790      	b.n	10002d5a <__aeabi_fdiv+0x32>
10002e38:	2500      	movs	r5, #0
10002e3a:	46d1      	mov	r9, sl
10002e3c:	469b      	mov	fp, r3
10002e3e:	465b      	mov	r3, fp
10002e40:	4648      	mov	r0, r9
10002e42:	2b02      	cmp	r3, #2
10002e44:	d16f      	bne.n	10002f26 <__aeabi_fdiv+0x1fe>
10002e46:	2101      	movs	r1, #1
10002e48:	24ff      	movs	r4, #255	; 0xff
10002e4a:	4001      	ands	r1, r0
10002e4c:	2300      	movs	r3, #0
10002e4e:	e7ae      	b.n	10002dae <__aeabi_fdiv+0x86>
10002e50:	237e      	movs	r3, #126	; 0x7e
10002e52:	9a01      	ldr	r2, [sp, #4]
10002e54:	425b      	negs	r3, r3
10002e56:	1a9b      	subs	r3, r3, r2
10002e58:	2b1b      	cmp	r3, #27
10002e5a:	dd6d      	ble.n	10002f38 <__aeabi_fdiv+0x210>
10002e5c:	2101      	movs	r1, #1
10002e5e:	464b      	mov	r3, r9
10002e60:	4019      	ands	r1, r3
10002e62:	2400      	movs	r4, #0
10002e64:	2300      	movs	r3, #0
10002e66:	e7a2      	b.n	10002dae <__aeabi_fdiv+0x86>
10002e68:	2380      	movs	r3, #128	; 0x80
10002e6a:	03db      	lsls	r3, r3, #15
10002e6c:	421c      	tst	r4, r3
10002e6e:	d149      	bne.n	10002f04 <__aeabi_fdiv+0x1dc>
10002e70:	2380      	movs	r3, #128	; 0x80
10002e72:	03db      	lsls	r3, r3, #15
10002e74:	4323      	orrs	r3, r4
10002e76:	025b      	lsls	r3, r3, #9
10002e78:	0a5b      	lsrs	r3, r3, #9
10002e7a:	1c39      	adds	r1, r7, #0
10002e7c:	e796      	b.n	10002dac <__aeabi_fdiv+0x84>
10002e7e:	0163      	lsls	r3, r4, #5
10002e80:	016d      	lsls	r5, r5, #5
10002e82:	42ab      	cmp	r3, r5
10002e84:	d337      	bcc.n	10002ef6 <__aeabi_fdiv+0x1ce>
10002e86:	4689      	mov	r9, r1
10002e88:	201a      	movs	r0, #26
10002e8a:	2101      	movs	r1, #1
10002e8c:	1b5b      	subs	r3, r3, r5
10002e8e:	2401      	movs	r4, #1
10002e90:	1c1e      	adds	r6, r3, #0
10002e92:	0049      	lsls	r1, r1, #1
10002e94:	005b      	lsls	r3, r3, #1
10002e96:	2e00      	cmp	r6, #0
10002e98:	db01      	blt.n	10002e9e <__aeabi_fdiv+0x176>
10002e9a:	42ab      	cmp	r3, r5
10002e9c:	d301      	bcc.n	10002ea2 <__aeabi_fdiv+0x17a>
10002e9e:	1b5b      	subs	r3, r3, r5
10002ea0:	4321      	orrs	r1, r4
10002ea2:	3801      	subs	r0, #1
10002ea4:	2800      	cmp	r0, #0
10002ea6:	d1f3      	bne.n	10002e90 <__aeabi_fdiv+0x168>
10002ea8:	1e58      	subs	r0, r3, #1
10002eaa:	4183      	sbcs	r3, r0
10002eac:	430b      	orrs	r3, r1
10002eae:	1c1d      	adds	r5, r3, #0
10002eb0:	9c01      	ldr	r4, [sp, #4]
10002eb2:	347f      	adds	r4, #127	; 0x7f
10002eb4:	2c00      	cmp	r4, #0
10002eb6:	ddcb      	ble.n	10002e50 <__aeabi_fdiv+0x128>
10002eb8:	076b      	lsls	r3, r5, #29
10002eba:	d004      	beq.n	10002ec6 <__aeabi_fdiv+0x19e>
10002ebc:	230f      	movs	r3, #15
10002ebe:	402b      	ands	r3, r5
10002ec0:	2b04      	cmp	r3, #4
10002ec2:	d000      	beq.n	10002ec6 <__aeabi_fdiv+0x19e>
10002ec4:	3504      	adds	r5, #4
10002ec6:	012b      	lsls	r3, r5, #4
10002ec8:	d504      	bpl.n	10002ed4 <__aeabi_fdiv+0x1ac>
10002eca:	9a01      	ldr	r2, [sp, #4]
10002ecc:	4b31      	ldr	r3, [pc, #196]	; (10002f94 <__aeabi_fdiv+0x26c>)
10002ece:	3280      	adds	r2, #128	; 0x80
10002ed0:	1c14      	adds	r4, r2, #0
10002ed2:	401d      	ands	r5, r3
10002ed4:	2cfe      	cmp	r4, #254	; 0xfe
10002ed6:	dd07      	ble.n	10002ee8 <__aeabi_fdiv+0x1c0>
10002ed8:	464b      	mov	r3, r9
10002eda:	2101      	movs	r1, #1
10002edc:	24ff      	movs	r4, #255	; 0xff
10002ede:	4019      	ands	r1, r3
10002ee0:	2300      	movs	r3, #0
10002ee2:	e764      	b.n	10002dae <__aeabi_fdiv+0x86>
10002ee4:	1c25      	adds	r5, r4, #0
10002ee6:	e7aa      	b.n	10002e3e <__aeabi_fdiv+0x116>
10002ee8:	2101      	movs	r1, #1
10002eea:	464a      	mov	r2, r9
10002eec:	01ab      	lsls	r3, r5, #6
10002eee:	0a5b      	lsrs	r3, r3, #9
10002ef0:	b2e4      	uxtb	r4, r4
10002ef2:	4011      	ands	r1, r2
10002ef4:	e75b      	b.n	10002dae <__aeabi_fdiv+0x86>
10002ef6:	9a01      	ldr	r2, [sp, #4]
10002ef8:	4689      	mov	r9, r1
10002efa:	3a01      	subs	r2, #1
10002efc:	9201      	str	r2, [sp, #4]
10002efe:	201b      	movs	r0, #27
10002f00:	2100      	movs	r1, #0
10002f02:	e7c4      	b.n	10002e8e <__aeabi_fdiv+0x166>
10002f04:	421d      	tst	r5, r3
10002f06:	d007      	beq.n	10002f18 <__aeabi_fdiv+0x1f0>
10002f08:	4323      	orrs	r3, r4
10002f0a:	025b      	lsls	r3, r3, #9
10002f0c:	0a5b      	lsrs	r3, r3, #9
10002f0e:	1c39      	adds	r1, r7, #0
10002f10:	e74c      	b.n	10002dac <__aeabi_fdiv+0x84>
10002f12:	2500      	movs	r5, #0
10002f14:	0263      	lsls	r3, r4, #9
10002f16:	d5ab      	bpl.n	10002e70 <__aeabi_fdiv+0x148>
10002f18:	2380      	movs	r3, #128	; 0x80
10002f1a:	03db      	lsls	r3, r3, #15
10002f1c:	432b      	orrs	r3, r5
10002f1e:	025b      	lsls	r3, r3, #9
10002f20:	0a5b      	lsrs	r3, r3, #9
10002f22:	4651      	mov	r1, sl
10002f24:	e742      	b.n	10002dac <__aeabi_fdiv+0x84>
10002f26:	2b03      	cmp	r3, #3
10002f28:	d025      	beq.n	10002f76 <__aeabi_fdiv+0x24e>
10002f2a:	2b01      	cmp	r3, #1
10002f2c:	d1c0      	bne.n	10002eb0 <__aeabi_fdiv+0x188>
10002f2e:	2101      	movs	r1, #1
10002f30:	2400      	movs	r4, #0
10002f32:	4001      	ands	r1, r0
10002f34:	2300      	movs	r3, #0
10002f36:	e73a      	b.n	10002dae <__aeabi_fdiv+0x86>
10002f38:	1c29      	adds	r1, r5, #0
10002f3a:	40d9      	lsrs	r1, r3
10002f3c:	1c2b      	adds	r3, r5, #0
10002f3e:	9a01      	ldr	r2, [sp, #4]
10002f40:	329e      	adds	r2, #158	; 0x9e
10002f42:	4093      	lsls	r3, r2
10002f44:	1e5d      	subs	r5, r3, #1
10002f46:	41ab      	sbcs	r3, r5
10002f48:	430b      	orrs	r3, r1
10002f4a:	075a      	lsls	r2, r3, #29
10002f4c:	d004      	beq.n	10002f58 <__aeabi_fdiv+0x230>
10002f4e:	220f      	movs	r2, #15
10002f50:	401a      	ands	r2, r3
10002f52:	2a04      	cmp	r2, #4
10002f54:	d000      	beq.n	10002f58 <__aeabi_fdiv+0x230>
10002f56:	3304      	adds	r3, #4
10002f58:	015a      	lsls	r2, r3, #5
10002f5a:	d505      	bpl.n	10002f68 <__aeabi_fdiv+0x240>
10002f5c:	464b      	mov	r3, r9
10002f5e:	2101      	movs	r1, #1
10002f60:	2401      	movs	r4, #1
10002f62:	4019      	ands	r1, r3
10002f64:	2300      	movs	r3, #0
10002f66:	e722      	b.n	10002dae <__aeabi_fdiv+0x86>
10002f68:	2101      	movs	r1, #1
10002f6a:	464a      	mov	r2, r9
10002f6c:	019b      	lsls	r3, r3, #6
10002f6e:	0a5b      	lsrs	r3, r3, #9
10002f70:	4011      	ands	r1, r2
10002f72:	2400      	movs	r4, #0
10002f74:	e71b      	b.n	10002dae <__aeabi_fdiv+0x86>
10002f76:	2380      	movs	r3, #128	; 0x80
10002f78:	2101      	movs	r1, #1
10002f7a:	464a      	mov	r2, r9
10002f7c:	03db      	lsls	r3, r3, #15
10002f7e:	432b      	orrs	r3, r5
10002f80:	025b      	lsls	r3, r3, #9
10002f82:	400a      	ands	r2, r1
10002f84:	0a5b      	lsrs	r3, r3, #9
10002f86:	1c11      	adds	r1, r2, #0
10002f88:	e710      	b.n	10002dac <__aeabi_fdiv+0x84>
10002f8a:	46c0      	nop			; (mov r8, r8)
10002f8c:	10004910 	.word	0x10004910
10002f90:	10004950 	.word	0x10004950
10002f94:	f7ffffff 	.word	0xf7ffffff

10002f98 <__eqsf2>:
10002f98:	0243      	lsls	r3, r0, #9
10002f9a:	b570      	push	{r4, r5, r6, lr}
10002f9c:	0042      	lsls	r2, r0, #1
10002f9e:	004c      	lsls	r4, r1, #1
10002fa0:	0a5d      	lsrs	r5, r3, #9
10002fa2:	0fc3      	lsrs	r3, r0, #31
10002fa4:	0248      	lsls	r0, r1, #9
10002fa6:	0e12      	lsrs	r2, r2, #24
10002fa8:	0a46      	lsrs	r6, r0, #9
10002faa:	0e24      	lsrs	r4, r4, #24
10002fac:	0fc9      	lsrs	r1, r1, #31
10002fae:	2aff      	cmp	r2, #255	; 0xff
10002fb0:	d005      	beq.n	10002fbe <__eqsf2+0x26>
10002fb2:	2cff      	cmp	r4, #255	; 0xff
10002fb4:	d008      	beq.n	10002fc8 <__eqsf2+0x30>
10002fb6:	2001      	movs	r0, #1
10002fb8:	42a2      	cmp	r2, r4
10002fba:	d00b      	beq.n	10002fd4 <__eqsf2+0x3c>
10002fbc:	bd70      	pop	{r4, r5, r6, pc}
10002fbe:	2001      	movs	r0, #1
10002fc0:	2d00      	cmp	r5, #0
10002fc2:	d1fb      	bne.n	10002fbc <__eqsf2+0x24>
10002fc4:	2cff      	cmp	r4, #255	; 0xff
10002fc6:	d1f6      	bne.n	10002fb6 <__eqsf2+0x1e>
10002fc8:	2001      	movs	r0, #1
10002fca:	2e00      	cmp	r6, #0
10002fcc:	d1f6      	bne.n	10002fbc <__eqsf2+0x24>
10002fce:	2001      	movs	r0, #1
10002fd0:	42a2      	cmp	r2, r4
10002fd2:	d1f3      	bne.n	10002fbc <__eqsf2+0x24>
10002fd4:	42b5      	cmp	r5, r6
10002fd6:	d1f1      	bne.n	10002fbc <__eqsf2+0x24>
10002fd8:	428b      	cmp	r3, r1
10002fda:	d005      	beq.n	10002fe8 <__eqsf2+0x50>
10002fdc:	2a00      	cmp	r2, #0
10002fde:	d1ed      	bne.n	10002fbc <__eqsf2+0x24>
10002fe0:	1c28      	adds	r0, r5, #0
10002fe2:	1e43      	subs	r3, r0, #1
10002fe4:	4198      	sbcs	r0, r3
10002fe6:	e7e9      	b.n	10002fbc <__eqsf2+0x24>
10002fe8:	2000      	movs	r0, #0
10002fea:	e7e7      	b.n	10002fbc <__eqsf2+0x24>

10002fec <__gesf2>:
10002fec:	b5f0      	push	{r4, r5, r6, r7, lr}
10002fee:	0243      	lsls	r3, r0, #9
10002ff0:	024d      	lsls	r5, r1, #9
10002ff2:	004a      	lsls	r2, r1, #1
10002ff4:	0044      	lsls	r4, r0, #1
10002ff6:	0a5e      	lsrs	r6, r3, #9
10002ff8:	0e24      	lsrs	r4, r4, #24
10002ffa:	0fc3      	lsrs	r3, r0, #31
10002ffc:	0a6d      	lsrs	r5, r5, #9
10002ffe:	0e12      	lsrs	r2, r2, #24
10003000:	0fc9      	lsrs	r1, r1, #31
10003002:	2cff      	cmp	r4, #255	; 0xff
10003004:	d00d      	beq.n	10003022 <__gesf2+0x36>
10003006:	2aff      	cmp	r2, #255	; 0xff
10003008:	d031      	beq.n	1000306e <__gesf2+0x82>
1000300a:	2c00      	cmp	r4, #0
1000300c:	d10d      	bne.n	1000302a <__gesf2+0x3e>
1000300e:	4277      	negs	r7, r6
10003010:	4177      	adcs	r7, r6
10003012:	2a00      	cmp	r2, #0
10003014:	d123      	bne.n	1000305e <__gesf2+0x72>
10003016:	2d00      	cmp	r5, #0
10003018:	d121      	bne.n	1000305e <__gesf2+0x72>
1000301a:	2000      	movs	r0, #0
1000301c:	2f00      	cmp	r7, #0
1000301e:	d10b      	bne.n	10003038 <__gesf2+0x4c>
10003020:	e007      	b.n	10003032 <__gesf2+0x46>
10003022:	2e00      	cmp	r6, #0
10003024:	d128      	bne.n	10003078 <__gesf2+0x8c>
10003026:	2aff      	cmp	r2, #255	; 0xff
10003028:	d021      	beq.n	1000306e <__gesf2+0x82>
1000302a:	2a00      	cmp	r2, #0
1000302c:	d005      	beq.n	1000303a <__gesf2+0x4e>
1000302e:	428b      	cmp	r3, r1
10003030:	d007      	beq.n	10003042 <__gesf2+0x56>
10003032:	4258      	negs	r0, r3
10003034:	2301      	movs	r3, #1
10003036:	4318      	orrs	r0, r3
10003038:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000303a:	2d00      	cmp	r5, #0
1000303c:	d0f9      	beq.n	10003032 <__gesf2+0x46>
1000303e:	428b      	cmp	r3, r1
10003040:	d1f7      	bne.n	10003032 <__gesf2+0x46>
10003042:	4294      	cmp	r4, r2
10003044:	dcf5      	bgt.n	10003032 <__gesf2+0x46>
10003046:	db04      	blt.n	10003052 <__gesf2+0x66>
10003048:	42ae      	cmp	r6, r5
1000304a:	d8f2      	bhi.n	10003032 <__gesf2+0x46>
1000304c:	2000      	movs	r0, #0
1000304e:	42ae      	cmp	r6, r5
10003050:	d2f2      	bcs.n	10003038 <__gesf2+0x4c>
10003052:	4258      	negs	r0, r3
10003054:	4143      	adcs	r3, r0
10003056:	2001      	movs	r0, #1
10003058:	425b      	negs	r3, r3
1000305a:	4318      	orrs	r0, r3
1000305c:	e7ec      	b.n	10003038 <__gesf2+0x4c>
1000305e:	2f00      	cmp	r7, #0
10003060:	d0e5      	beq.n	1000302e <__gesf2+0x42>
10003062:	4248      	negs	r0, r1
10003064:	4141      	adcs	r1, r0
10003066:	2001      	movs	r0, #1
10003068:	4249      	negs	r1, r1
1000306a:	4308      	orrs	r0, r1
1000306c:	e7e4      	b.n	10003038 <__gesf2+0x4c>
1000306e:	2d00      	cmp	r5, #0
10003070:	d102      	bne.n	10003078 <__gesf2+0x8c>
10003072:	2c00      	cmp	r4, #0
10003074:	d0cb      	beq.n	1000300e <__gesf2+0x22>
10003076:	e7da      	b.n	1000302e <__gesf2+0x42>
10003078:	2002      	movs	r0, #2
1000307a:	4240      	negs	r0, r0
1000307c:	e7dc      	b.n	10003038 <__gesf2+0x4c>
1000307e:	46c0      	nop			; (mov r8, r8)

10003080 <__lesf2>:
10003080:	0243      	lsls	r3, r0, #9
10003082:	b5f0      	push	{r4, r5, r6, r7, lr}
10003084:	0042      	lsls	r2, r0, #1
10003086:	004c      	lsls	r4, r1, #1
10003088:	0a5e      	lsrs	r6, r3, #9
1000308a:	0fc3      	lsrs	r3, r0, #31
1000308c:	0248      	lsls	r0, r1, #9
1000308e:	0e12      	lsrs	r2, r2, #24
10003090:	0a45      	lsrs	r5, r0, #9
10003092:	0e24      	lsrs	r4, r4, #24
10003094:	0fc9      	lsrs	r1, r1, #31
10003096:	2aff      	cmp	r2, #255	; 0xff
10003098:	d00f      	beq.n	100030ba <__lesf2+0x3a>
1000309a:	2cff      	cmp	r4, #255	; 0xff
1000309c:	d01a      	beq.n	100030d4 <__lesf2+0x54>
1000309e:	2a00      	cmp	r2, #0
100030a0:	d110      	bne.n	100030c4 <__lesf2+0x44>
100030a2:	4277      	negs	r7, r6
100030a4:	4177      	adcs	r7, r6
100030a6:	2c00      	cmp	r4, #0
100030a8:	d029      	beq.n	100030fe <__lesf2+0x7e>
100030aa:	2f00      	cmp	r7, #0
100030ac:	d017      	beq.n	100030de <__lesf2+0x5e>
100030ae:	4248      	negs	r0, r1
100030b0:	4141      	adcs	r1, r0
100030b2:	2001      	movs	r0, #1
100030b4:	4249      	negs	r1, r1
100030b6:	4308      	orrs	r0, r1
100030b8:	e00b      	b.n	100030d2 <__lesf2+0x52>
100030ba:	2002      	movs	r0, #2
100030bc:	2e00      	cmp	r6, #0
100030be:	d108      	bne.n	100030d2 <__lesf2+0x52>
100030c0:	2cff      	cmp	r4, #255	; 0xff
100030c2:	d007      	beq.n	100030d4 <__lesf2+0x54>
100030c4:	2c00      	cmp	r4, #0
100030c6:	d10a      	bne.n	100030de <__lesf2+0x5e>
100030c8:	2d00      	cmp	r5, #0
100030ca:	d108      	bne.n	100030de <__lesf2+0x5e>
100030cc:	4258      	negs	r0, r3
100030ce:	2301      	movs	r3, #1
100030d0:	4318      	orrs	r0, r3
100030d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
100030d4:	2002      	movs	r0, #2
100030d6:	2d00      	cmp	r5, #0
100030d8:	d1fb      	bne.n	100030d2 <__lesf2+0x52>
100030da:	2a00      	cmp	r2, #0
100030dc:	d0e1      	beq.n	100030a2 <__lesf2+0x22>
100030de:	428b      	cmp	r3, r1
100030e0:	d1f4      	bne.n	100030cc <__lesf2+0x4c>
100030e2:	42a2      	cmp	r2, r4
100030e4:	dcf2      	bgt.n	100030cc <__lesf2+0x4c>
100030e6:	db04      	blt.n	100030f2 <__lesf2+0x72>
100030e8:	42ae      	cmp	r6, r5
100030ea:	d8ef      	bhi.n	100030cc <__lesf2+0x4c>
100030ec:	2000      	movs	r0, #0
100030ee:	42ae      	cmp	r6, r5
100030f0:	d2ef      	bcs.n	100030d2 <__lesf2+0x52>
100030f2:	4258      	negs	r0, r3
100030f4:	4143      	adcs	r3, r0
100030f6:	2001      	movs	r0, #1
100030f8:	425b      	negs	r3, r3
100030fa:	4318      	orrs	r0, r3
100030fc:	e7e9      	b.n	100030d2 <__lesf2+0x52>
100030fe:	2d00      	cmp	r5, #0
10003100:	d1d3      	bne.n	100030aa <__lesf2+0x2a>
10003102:	2000      	movs	r0, #0
10003104:	2f00      	cmp	r7, #0
10003106:	d1e4      	bne.n	100030d2 <__lesf2+0x52>
10003108:	e7e0      	b.n	100030cc <__lesf2+0x4c>
1000310a:	46c0      	nop			; (mov r8, r8)

1000310c <__aeabi_fmul>:
1000310c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000310e:	465f      	mov	r7, fp
10003110:	4656      	mov	r6, sl
10003112:	464d      	mov	r5, r9
10003114:	4644      	mov	r4, r8
10003116:	b4f0      	push	{r4, r5, r6, r7}
10003118:	0245      	lsls	r5, r0, #9
1000311a:	0046      	lsls	r6, r0, #1
1000311c:	0fc4      	lsrs	r4, r0, #31
1000311e:	b083      	sub	sp, #12
10003120:	1c0f      	adds	r7, r1, #0
10003122:	0a6d      	lsrs	r5, r5, #9
10003124:	0e36      	lsrs	r6, r6, #24
10003126:	46a3      	mov	fp, r4
10003128:	d045      	beq.n	100031b6 <__aeabi_fmul+0xaa>
1000312a:	2eff      	cmp	r6, #255	; 0xff
1000312c:	d025      	beq.n	1000317a <__aeabi_fmul+0x6e>
1000312e:	2380      	movs	r3, #128	; 0x80
10003130:	041b      	lsls	r3, r3, #16
10003132:	431d      	orrs	r5, r3
10003134:	2300      	movs	r3, #0
10003136:	469a      	mov	sl, r3
10003138:	00ed      	lsls	r5, r5, #3
1000313a:	3e7f      	subs	r6, #127	; 0x7f
1000313c:	9301      	str	r3, [sp, #4]
1000313e:	027b      	lsls	r3, r7, #9
10003140:	0a5b      	lsrs	r3, r3, #9
10003142:	4698      	mov	r8, r3
10003144:	0078      	lsls	r0, r7, #1
10003146:	0ffb      	lsrs	r3, r7, #31
10003148:	0e00      	lsrs	r0, r0, #24
1000314a:	4699      	mov	r9, r3
1000314c:	d040      	beq.n	100031d0 <__aeabi_fmul+0xc4>
1000314e:	28ff      	cmp	r0, #255	; 0xff
10003150:	d038      	beq.n	100031c4 <__aeabi_fmul+0xb8>
10003152:	2380      	movs	r3, #128	; 0x80
10003154:	4642      	mov	r2, r8
10003156:	041b      	lsls	r3, r3, #16
10003158:	4313      	orrs	r3, r2
1000315a:	00db      	lsls	r3, r3, #3
1000315c:	4698      	mov	r8, r3
1000315e:	2300      	movs	r3, #0
10003160:	387f      	subs	r0, #127	; 0x7f
10003162:	464a      	mov	r2, r9
10003164:	9f01      	ldr	r7, [sp, #4]
10003166:	1830      	adds	r0, r6, r0
10003168:	4062      	eors	r2, r4
1000316a:	1c41      	adds	r1, r0, #1
1000316c:	431f      	orrs	r7, r3
1000316e:	2f0f      	cmp	r7, #15
10003170:	d869      	bhi.n	10003246 <__aeabi_fmul+0x13a>
10003172:	4e7d      	ldr	r6, [pc, #500]	; (10003368 <__aeabi_fmul+0x25c>)
10003174:	00bf      	lsls	r7, r7, #2
10003176:	59f6      	ldr	r6, [r6, r7]
10003178:	46b7      	mov	pc, r6
1000317a:	2d00      	cmp	r5, #0
1000317c:	d145      	bne.n	1000320a <__aeabi_fmul+0xfe>
1000317e:	2308      	movs	r3, #8
10003180:	9301      	str	r3, [sp, #4]
10003182:	3b06      	subs	r3, #6
10003184:	469a      	mov	sl, r3
10003186:	e7da      	b.n	1000313e <__aeabi_fmul+0x32>
10003188:	4693      	mov	fp, r2
1000318a:	4653      	mov	r3, sl
1000318c:	2b02      	cmp	r3, #2
1000318e:	d12f      	bne.n	100031f0 <__aeabi_fmul+0xe4>
10003190:	465b      	mov	r3, fp
10003192:	2401      	movs	r4, #1
10003194:	2500      	movs	r5, #0
10003196:	401c      	ands	r4, r3
10003198:	23ff      	movs	r3, #255	; 0xff
1000319a:	026d      	lsls	r5, r5, #9
1000319c:	05db      	lsls	r3, r3, #23
1000319e:	0a6d      	lsrs	r5, r5, #9
100031a0:	07e4      	lsls	r4, r4, #31
100031a2:	431d      	orrs	r5, r3
100031a4:	4325      	orrs	r5, r4
100031a6:	1c28      	adds	r0, r5, #0
100031a8:	b003      	add	sp, #12
100031aa:	bc3c      	pop	{r2, r3, r4, r5}
100031ac:	4690      	mov	r8, r2
100031ae:	4699      	mov	r9, r3
100031b0:	46a2      	mov	sl, r4
100031b2:	46ab      	mov	fp, r5
100031b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
100031b6:	2d00      	cmp	r5, #0
100031b8:	d12c      	bne.n	10003214 <__aeabi_fmul+0x108>
100031ba:	2304      	movs	r3, #4
100031bc:	9301      	str	r3, [sp, #4]
100031be:	3b03      	subs	r3, #3
100031c0:	469a      	mov	sl, r3
100031c2:	e7bc      	b.n	1000313e <__aeabi_fmul+0x32>
100031c4:	4643      	mov	r3, r8
100031c6:	425a      	negs	r2, r3
100031c8:	4153      	adcs	r3, r2
100031ca:	2203      	movs	r2, #3
100031cc:	1ad3      	subs	r3, r2, r3
100031ce:	e7c8      	b.n	10003162 <__aeabi_fmul+0x56>
100031d0:	4642      	mov	r2, r8
100031d2:	2301      	movs	r3, #1
100031d4:	2a00      	cmp	r2, #0
100031d6:	d0c4      	beq.n	10003162 <__aeabi_fmul+0x56>
100031d8:	4640      	mov	r0, r8
100031da:	f001 f98d 	bl	100044f8 <__clzsi2>
100031de:	4642      	mov	r2, r8
100031e0:	1f43      	subs	r3, r0, #5
100031e2:	409a      	lsls	r2, r3
100031e4:	2376      	movs	r3, #118	; 0x76
100031e6:	425b      	negs	r3, r3
100031e8:	1a18      	subs	r0, r3, r0
100031ea:	4690      	mov	r8, r2
100031ec:	2300      	movs	r3, #0
100031ee:	e7b8      	b.n	10003162 <__aeabi_fmul+0x56>
100031f0:	2b03      	cmp	r3, #3
100031f2:	d100      	bne.n	100031f6 <__aeabi_fmul+0xea>
100031f4:	e0ad      	b.n	10003352 <__aeabi_fmul+0x246>
100031f6:	2b01      	cmp	r3, #1
100031f8:	d000      	beq.n	100031fc <__aeabi_fmul+0xf0>
100031fa:	e08c      	b.n	10003316 <__aeabi_fmul+0x20a>
100031fc:	465b      	mov	r3, fp
100031fe:	4654      	mov	r4, sl
10003200:	401c      	ands	r4, r3
10003202:	b2e4      	uxtb	r4, r4
10003204:	2300      	movs	r3, #0
10003206:	2500      	movs	r5, #0
10003208:	e7c7      	b.n	1000319a <__aeabi_fmul+0x8e>
1000320a:	230c      	movs	r3, #12
1000320c:	9301      	str	r3, [sp, #4]
1000320e:	3b09      	subs	r3, #9
10003210:	469a      	mov	sl, r3
10003212:	e794      	b.n	1000313e <__aeabi_fmul+0x32>
10003214:	1c28      	adds	r0, r5, #0
10003216:	f001 f96f 	bl	100044f8 <__clzsi2>
1000321a:	2676      	movs	r6, #118	; 0x76
1000321c:	1f43      	subs	r3, r0, #5
1000321e:	409d      	lsls	r5, r3
10003220:	2300      	movs	r3, #0
10003222:	4276      	negs	r6, r6
10003224:	1a36      	subs	r6, r6, r0
10003226:	9301      	str	r3, [sp, #4]
10003228:	469a      	mov	sl, r3
1000322a:	e788      	b.n	1000313e <__aeabi_fmul+0x32>
1000322c:	2580      	movs	r5, #128	; 0x80
1000322e:	2400      	movs	r4, #0
10003230:	03ed      	lsls	r5, r5, #15
10003232:	23ff      	movs	r3, #255	; 0xff
10003234:	e7b1      	b.n	1000319a <__aeabi_fmul+0x8e>
10003236:	4645      	mov	r5, r8
10003238:	46cb      	mov	fp, r9
1000323a:	469a      	mov	sl, r3
1000323c:	e7a5      	b.n	1000318a <__aeabi_fmul+0x7e>
1000323e:	4645      	mov	r5, r8
10003240:	4693      	mov	fp, r2
10003242:	469a      	mov	sl, r3
10003244:	e7a1      	b.n	1000318a <__aeabi_fmul+0x7e>
10003246:	4643      	mov	r3, r8
10003248:	042c      	lsls	r4, r5, #16
1000324a:	0c1b      	lsrs	r3, r3, #16
1000324c:	469c      	mov	ip, r3
1000324e:	0c23      	lsrs	r3, r4, #16
10003250:	4644      	mov	r4, r8
10003252:	0426      	lsls	r6, r4, #16
10003254:	1c1c      	adds	r4, r3, #0
10003256:	0c36      	lsrs	r6, r6, #16
10003258:	0c2f      	lsrs	r7, r5, #16
1000325a:	4374      	muls	r4, r6
1000325c:	1c35      	adds	r5, r6, #0
1000325e:	4666      	mov	r6, ip
10003260:	437d      	muls	r5, r7
10003262:	4373      	muls	r3, r6
10003264:	4377      	muls	r7, r6
10003266:	18eb      	adds	r3, r5, r3
10003268:	0c26      	lsrs	r6, r4, #16
1000326a:	199e      	adds	r6, r3, r6
1000326c:	42b5      	cmp	r5, r6
1000326e:	d903      	bls.n	10003278 <__aeabi_fmul+0x16c>
10003270:	2380      	movs	r3, #128	; 0x80
10003272:	025b      	lsls	r3, r3, #9
10003274:	469c      	mov	ip, r3
10003276:	4467      	add	r7, ip
10003278:	0424      	lsls	r4, r4, #16
1000327a:	0433      	lsls	r3, r6, #16
1000327c:	0c24      	lsrs	r4, r4, #16
1000327e:	191b      	adds	r3, r3, r4
10003280:	019d      	lsls	r5, r3, #6
10003282:	1e6c      	subs	r4, r5, #1
10003284:	41a5      	sbcs	r5, r4
10003286:	0e9b      	lsrs	r3, r3, #26
10003288:	0c36      	lsrs	r6, r6, #16
1000328a:	432b      	orrs	r3, r5
1000328c:	19bd      	adds	r5, r7, r6
1000328e:	01ad      	lsls	r5, r5, #6
10003290:	431d      	orrs	r5, r3
10003292:	012b      	lsls	r3, r5, #4
10003294:	d504      	bpl.n	100032a0 <__aeabi_fmul+0x194>
10003296:	2301      	movs	r3, #1
10003298:	0868      	lsrs	r0, r5, #1
1000329a:	401d      	ands	r5, r3
1000329c:	4305      	orrs	r5, r0
1000329e:	1c08      	adds	r0, r1, #0
100032a0:	1c03      	adds	r3, r0, #0
100032a2:	337f      	adds	r3, #127	; 0x7f
100032a4:	2b00      	cmp	r3, #0
100032a6:	dd2c      	ble.n	10003302 <__aeabi_fmul+0x1f6>
100032a8:	0769      	lsls	r1, r5, #29
100032aa:	d004      	beq.n	100032b6 <__aeabi_fmul+0x1aa>
100032ac:	210f      	movs	r1, #15
100032ae:	4029      	ands	r1, r5
100032b0:	2904      	cmp	r1, #4
100032b2:	d000      	beq.n	100032b6 <__aeabi_fmul+0x1aa>
100032b4:	3504      	adds	r5, #4
100032b6:	0129      	lsls	r1, r5, #4
100032b8:	d503      	bpl.n	100032c2 <__aeabi_fmul+0x1b6>
100032ba:	4b2c      	ldr	r3, [pc, #176]	; (1000336c <__aeabi_fmul+0x260>)
100032bc:	401d      	ands	r5, r3
100032be:	1c03      	adds	r3, r0, #0
100032c0:	3380      	adds	r3, #128	; 0x80
100032c2:	2bfe      	cmp	r3, #254	; 0xfe
100032c4:	dd17      	ble.n	100032f6 <__aeabi_fmul+0x1ea>
100032c6:	2401      	movs	r4, #1
100032c8:	23ff      	movs	r3, #255	; 0xff
100032ca:	4014      	ands	r4, r2
100032cc:	2500      	movs	r5, #0
100032ce:	e764      	b.n	1000319a <__aeabi_fmul+0x8e>
100032d0:	2080      	movs	r0, #128	; 0x80
100032d2:	03c0      	lsls	r0, r0, #15
100032d4:	4205      	tst	r5, r0
100032d6:	d009      	beq.n	100032ec <__aeabi_fmul+0x1e0>
100032d8:	4643      	mov	r3, r8
100032da:	4203      	tst	r3, r0
100032dc:	d106      	bne.n	100032ec <__aeabi_fmul+0x1e0>
100032de:	4645      	mov	r5, r8
100032e0:	4305      	orrs	r5, r0
100032e2:	026d      	lsls	r5, r5, #9
100032e4:	0a6d      	lsrs	r5, r5, #9
100032e6:	464c      	mov	r4, r9
100032e8:	23ff      	movs	r3, #255	; 0xff
100032ea:	e756      	b.n	1000319a <__aeabi_fmul+0x8e>
100032ec:	4305      	orrs	r5, r0
100032ee:	026d      	lsls	r5, r5, #9
100032f0:	0a6d      	lsrs	r5, r5, #9
100032f2:	23ff      	movs	r3, #255	; 0xff
100032f4:	e751      	b.n	1000319a <__aeabi_fmul+0x8e>
100032f6:	2401      	movs	r4, #1
100032f8:	01ad      	lsls	r5, r5, #6
100032fa:	0a6d      	lsrs	r5, r5, #9
100032fc:	b2db      	uxtb	r3, r3
100032fe:	4014      	ands	r4, r2
10003300:	e74b      	b.n	1000319a <__aeabi_fmul+0x8e>
10003302:	237e      	movs	r3, #126	; 0x7e
10003304:	425b      	negs	r3, r3
10003306:	1a1b      	subs	r3, r3, r0
10003308:	2b1b      	cmp	r3, #27
1000330a:	dd07      	ble.n	1000331c <__aeabi_fmul+0x210>
1000330c:	2401      	movs	r4, #1
1000330e:	2300      	movs	r3, #0
10003310:	4014      	ands	r4, r2
10003312:	2500      	movs	r5, #0
10003314:	e741      	b.n	1000319a <__aeabi_fmul+0x8e>
10003316:	1c08      	adds	r0, r1, #0
10003318:	465a      	mov	r2, fp
1000331a:	e7c1      	b.n	100032a0 <__aeabi_fmul+0x194>
1000331c:	309e      	adds	r0, #158	; 0x9e
1000331e:	1c29      	adds	r1, r5, #0
10003320:	4085      	lsls	r5, r0
10003322:	40d9      	lsrs	r1, r3
10003324:	1e68      	subs	r0, r5, #1
10003326:	4185      	sbcs	r5, r0
10003328:	430d      	orrs	r5, r1
1000332a:	076b      	lsls	r3, r5, #29
1000332c:	d004      	beq.n	10003338 <__aeabi_fmul+0x22c>
1000332e:	230f      	movs	r3, #15
10003330:	402b      	ands	r3, r5
10003332:	2b04      	cmp	r3, #4
10003334:	d000      	beq.n	10003338 <__aeabi_fmul+0x22c>
10003336:	3504      	adds	r5, #4
10003338:	016b      	lsls	r3, r5, #5
1000333a:	d504      	bpl.n	10003346 <__aeabi_fmul+0x23a>
1000333c:	2401      	movs	r4, #1
1000333e:	2301      	movs	r3, #1
10003340:	4014      	ands	r4, r2
10003342:	2500      	movs	r5, #0
10003344:	e729      	b.n	1000319a <__aeabi_fmul+0x8e>
10003346:	2401      	movs	r4, #1
10003348:	01ad      	lsls	r5, r5, #6
1000334a:	0a6d      	lsrs	r5, r5, #9
1000334c:	4014      	ands	r4, r2
1000334e:	2300      	movs	r3, #0
10003350:	e723      	b.n	1000319a <__aeabi_fmul+0x8e>
10003352:	2380      	movs	r3, #128	; 0x80
10003354:	03db      	lsls	r3, r3, #15
10003356:	431d      	orrs	r5, r3
10003358:	2401      	movs	r4, #1
1000335a:	465b      	mov	r3, fp
1000335c:	026d      	lsls	r5, r5, #9
1000335e:	4023      	ands	r3, r4
10003360:	1c1c      	adds	r4, r3, #0
10003362:	0a6d      	lsrs	r5, r5, #9
10003364:	23ff      	movs	r3, #255	; 0xff
10003366:	e718      	b.n	1000319a <__aeabi_fmul+0x8e>
10003368:	10004990 	.word	0x10004990
1000336c:	f7ffffff 	.word	0xf7ffffff

10003370 <__aeabi_fsub>:
10003370:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10003372:	004a      	lsls	r2, r1, #1
10003374:	0243      	lsls	r3, r0, #9
10003376:	0044      	lsls	r4, r0, #1
10003378:	024d      	lsls	r5, r1, #9
1000337a:	0fc0      	lsrs	r0, r0, #31
1000337c:	0e24      	lsrs	r4, r4, #24
1000337e:	1c06      	adds	r6, r0, #0
10003380:	099b      	lsrs	r3, r3, #6
10003382:	0e12      	lsrs	r2, r2, #24
10003384:	0fc9      	lsrs	r1, r1, #31
10003386:	09ad      	lsrs	r5, r5, #6
10003388:	2aff      	cmp	r2, #255	; 0xff
1000338a:	d100      	bne.n	1000338e <__aeabi_fsub+0x1e>
1000338c:	e075      	b.n	1000347a <__aeabi_fsub+0x10a>
1000338e:	2701      	movs	r7, #1
10003390:	4079      	eors	r1, r7
10003392:	4288      	cmp	r0, r1
10003394:	d050      	beq.n	10003438 <__aeabi_fsub+0xc8>
10003396:	1aa0      	subs	r0, r4, r2
10003398:	2800      	cmp	r0, #0
1000339a:	dc00      	bgt.n	1000339e <__aeabi_fsub+0x2e>
1000339c:	e08f      	b.n	100034be <__aeabi_fsub+0x14e>
1000339e:	2a00      	cmp	r2, #0
100033a0:	d11e      	bne.n	100033e0 <__aeabi_fsub+0x70>
100033a2:	2d00      	cmp	r5, #0
100033a4:	d000      	beq.n	100033a8 <__aeabi_fsub+0x38>
100033a6:	e075      	b.n	10003494 <__aeabi_fsub+0x124>
100033a8:	075a      	lsls	r2, r3, #29
100033aa:	d004      	beq.n	100033b6 <__aeabi_fsub+0x46>
100033ac:	220f      	movs	r2, #15
100033ae:	401a      	ands	r2, r3
100033b0:	2a04      	cmp	r2, #4
100033b2:	d000      	beq.n	100033b6 <__aeabi_fsub+0x46>
100033b4:	3304      	adds	r3, #4
100033b6:	2280      	movs	r2, #128	; 0x80
100033b8:	2001      	movs	r0, #1
100033ba:	04d2      	lsls	r2, r2, #19
100033bc:	401a      	ands	r2, r3
100033be:	4030      	ands	r0, r6
100033c0:	2a00      	cmp	r2, #0
100033c2:	d032      	beq.n	1000342a <__aeabi_fsub+0xba>
100033c4:	3401      	adds	r4, #1
100033c6:	2cff      	cmp	r4, #255	; 0xff
100033c8:	d100      	bne.n	100033cc <__aeabi_fsub+0x5c>
100033ca:	e084      	b.n	100034d6 <__aeabi_fsub+0x166>
100033cc:	019b      	lsls	r3, r3, #6
100033ce:	0a5b      	lsrs	r3, r3, #9
100033d0:	b2e4      	uxtb	r4, r4
100033d2:	025b      	lsls	r3, r3, #9
100033d4:	05e4      	lsls	r4, r4, #23
100033d6:	0a5b      	lsrs	r3, r3, #9
100033d8:	4323      	orrs	r3, r4
100033da:	07c0      	lsls	r0, r0, #31
100033dc:	4318      	orrs	r0, r3
100033de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
100033e0:	2cff      	cmp	r4, #255	; 0xff
100033e2:	d0e1      	beq.n	100033a8 <__aeabi_fsub+0x38>
100033e4:	2280      	movs	r2, #128	; 0x80
100033e6:	04d2      	lsls	r2, r2, #19
100033e8:	4315      	orrs	r5, r2
100033ea:	281b      	cmp	r0, #27
100033ec:	dd7a      	ble.n	100034e4 <__aeabi_fsub+0x174>
100033ee:	2501      	movs	r5, #1
100033f0:	1b5b      	subs	r3, r3, r5
100033f2:	015a      	lsls	r2, r3, #5
100033f4:	d55d      	bpl.n	100034b2 <__aeabi_fsub+0x142>
100033f6:	019b      	lsls	r3, r3, #6
100033f8:	099f      	lsrs	r7, r3, #6
100033fa:	1c38      	adds	r0, r7, #0
100033fc:	f001 f87c 	bl	100044f8 <__clzsi2>
10003400:	3805      	subs	r0, #5
10003402:	4087      	lsls	r7, r0
10003404:	4284      	cmp	r4, r0
10003406:	dc69      	bgt.n	100034dc <__aeabi_fsub+0x16c>
10003408:	1b00      	subs	r0, r0, r4
1000340a:	241f      	movs	r4, #31
1000340c:	1c3a      	adds	r2, r7, #0
1000340e:	1c43      	adds	r3, r0, #1
10003410:	1a20      	subs	r0, r4, r0
10003412:	40da      	lsrs	r2, r3
10003414:	4087      	lsls	r7, r0
10003416:	1c13      	adds	r3, r2, #0
10003418:	1e7c      	subs	r4, r7, #1
1000341a:	41a7      	sbcs	r7, r4
1000341c:	2400      	movs	r4, #0
1000341e:	433b      	orrs	r3, r7
10003420:	e7c2      	b.n	100033a8 <__aeabi_fsub+0x38>
10003422:	1e13      	subs	r3, r2, #0
10003424:	d145      	bne.n	100034b2 <__aeabi_fsub+0x142>
10003426:	2300      	movs	r3, #0
10003428:	2000      	movs	r0, #0
1000342a:	08db      	lsrs	r3, r3, #3
1000342c:	2cff      	cmp	r4, #255	; 0xff
1000342e:	d028      	beq.n	10003482 <__aeabi_fsub+0x112>
10003430:	025b      	lsls	r3, r3, #9
10003432:	0a5b      	lsrs	r3, r3, #9
10003434:	b2e4      	uxtb	r4, r4
10003436:	e7cc      	b.n	100033d2 <__aeabi_fsub+0x62>
10003438:	1aa1      	subs	r1, r4, r2
1000343a:	2900      	cmp	r1, #0
1000343c:	dd5b      	ble.n	100034f6 <__aeabi_fsub+0x186>
1000343e:	2a00      	cmp	r2, #0
10003440:	d02e      	beq.n	100034a0 <__aeabi_fsub+0x130>
10003442:	2cff      	cmp	r4, #255	; 0xff
10003444:	d0b0      	beq.n	100033a8 <__aeabi_fsub+0x38>
10003446:	2280      	movs	r2, #128	; 0x80
10003448:	04d2      	lsls	r2, r2, #19
1000344a:	4315      	orrs	r5, r2
1000344c:	291b      	cmp	r1, #27
1000344e:	dc74      	bgt.n	1000353a <__aeabi_fsub+0x1ca>
10003450:	1c2f      	adds	r7, r5, #0
10003452:	2220      	movs	r2, #32
10003454:	40cf      	lsrs	r7, r1
10003456:	1a51      	subs	r1, r2, r1
10003458:	408d      	lsls	r5, r1
1000345a:	1e69      	subs	r1, r5, #1
1000345c:	418d      	sbcs	r5, r1
1000345e:	433d      	orrs	r5, r7
10003460:	195b      	adds	r3, r3, r5
10003462:	015a      	lsls	r2, r3, #5
10003464:	d525      	bpl.n	100034b2 <__aeabi_fsub+0x142>
10003466:	3401      	adds	r4, #1
10003468:	2cff      	cmp	r4, #255	; 0xff
1000346a:	d074      	beq.n	10003556 <__aeabi_fsub+0x1e6>
1000346c:	2101      	movs	r1, #1
1000346e:	4a7e      	ldr	r2, [pc, #504]	; (10003668 <__aeabi_fsub+0x2f8>)
10003470:	4019      	ands	r1, r3
10003472:	4013      	ands	r3, r2
10003474:	085b      	lsrs	r3, r3, #1
10003476:	430b      	orrs	r3, r1
10003478:	e796      	b.n	100033a8 <__aeabi_fsub+0x38>
1000347a:	2d00      	cmp	r5, #0
1000347c:	d000      	beq.n	10003480 <__aeabi_fsub+0x110>
1000347e:	e788      	b.n	10003392 <__aeabi_fsub+0x22>
10003480:	e785      	b.n	1000338e <__aeabi_fsub+0x1e>
10003482:	2b00      	cmp	r3, #0
10003484:	d027      	beq.n	100034d6 <__aeabi_fsub+0x166>
10003486:	2280      	movs	r2, #128	; 0x80
10003488:	03d2      	lsls	r2, r2, #15
1000348a:	4313      	orrs	r3, r2
1000348c:	025b      	lsls	r3, r3, #9
1000348e:	0a5b      	lsrs	r3, r3, #9
10003490:	24ff      	movs	r4, #255	; 0xff
10003492:	e79e      	b.n	100033d2 <__aeabi_fsub+0x62>
10003494:	3801      	subs	r0, #1
10003496:	2800      	cmp	r0, #0
10003498:	d0aa      	beq.n	100033f0 <__aeabi_fsub+0x80>
1000349a:	2cff      	cmp	r4, #255	; 0xff
1000349c:	d1a5      	bne.n	100033ea <__aeabi_fsub+0x7a>
1000349e:	e783      	b.n	100033a8 <__aeabi_fsub+0x38>
100034a0:	2d00      	cmp	r5, #0
100034a2:	d100      	bne.n	100034a6 <__aeabi_fsub+0x136>
100034a4:	e780      	b.n	100033a8 <__aeabi_fsub+0x38>
100034a6:	3901      	subs	r1, #1
100034a8:	2900      	cmp	r1, #0
100034aa:	d0d9      	beq.n	10003460 <__aeabi_fsub+0xf0>
100034ac:	2cff      	cmp	r4, #255	; 0xff
100034ae:	d1cd      	bne.n	1000344c <__aeabi_fsub+0xdc>
100034b0:	e77a      	b.n	100033a8 <__aeabi_fsub+0x38>
100034b2:	075a      	lsls	r2, r3, #29
100034b4:	d000      	beq.n	100034b8 <__aeabi_fsub+0x148>
100034b6:	e779      	b.n	100033ac <__aeabi_fsub+0x3c>
100034b8:	2001      	movs	r0, #1
100034ba:	4030      	ands	r0, r6
100034bc:	e7b5      	b.n	1000342a <__aeabi_fsub+0xba>
100034be:	2800      	cmp	r0, #0
100034c0:	d125      	bne.n	1000350e <__aeabi_fsub+0x19e>
100034c2:	1c62      	adds	r2, r4, #1
100034c4:	b2d2      	uxtb	r2, r2
100034c6:	2a01      	cmp	r2, #1
100034c8:	dd55      	ble.n	10003576 <__aeabi_fsub+0x206>
100034ca:	1b5f      	subs	r7, r3, r5
100034cc:	017a      	lsls	r2, r7, #5
100034ce:	d52d      	bpl.n	1000352c <__aeabi_fsub+0x1bc>
100034d0:	1aef      	subs	r7, r5, r3
100034d2:	1c0e      	adds	r6, r1, #0
100034d4:	e791      	b.n	100033fa <__aeabi_fsub+0x8a>
100034d6:	24ff      	movs	r4, #255	; 0xff
100034d8:	2300      	movs	r3, #0
100034da:	e77a      	b.n	100033d2 <__aeabi_fsub+0x62>
100034dc:	4b62      	ldr	r3, [pc, #392]	; (10003668 <__aeabi_fsub+0x2f8>)
100034de:	1a24      	subs	r4, r4, r0
100034e0:	403b      	ands	r3, r7
100034e2:	e761      	b.n	100033a8 <__aeabi_fsub+0x38>
100034e4:	1c29      	adds	r1, r5, #0
100034e6:	2220      	movs	r2, #32
100034e8:	40c1      	lsrs	r1, r0
100034ea:	1a10      	subs	r0, r2, r0
100034ec:	4085      	lsls	r5, r0
100034ee:	1e68      	subs	r0, r5, #1
100034f0:	4185      	sbcs	r5, r0
100034f2:	430d      	orrs	r5, r1
100034f4:	e77c      	b.n	100033f0 <__aeabi_fsub+0x80>
100034f6:	2900      	cmp	r1, #0
100034f8:	d146      	bne.n	10003588 <__aeabi_fsub+0x218>
100034fa:	1c62      	adds	r2, r4, #1
100034fc:	b2d1      	uxtb	r1, r2
100034fe:	2901      	cmp	r1, #1
10003500:	dd2b      	ble.n	1000355a <__aeabi_fsub+0x1ea>
10003502:	2aff      	cmp	r2, #255	; 0xff
10003504:	d026      	beq.n	10003554 <__aeabi_fsub+0x1e4>
10003506:	18eb      	adds	r3, r5, r3
10003508:	085b      	lsrs	r3, r3, #1
1000350a:	1c14      	adds	r4, r2, #0
1000350c:	e74c      	b.n	100033a8 <__aeabi_fsub+0x38>
1000350e:	2c00      	cmp	r4, #0
10003510:	d015      	beq.n	1000353e <__aeabi_fsub+0x1ce>
10003512:	2aff      	cmp	r2, #255	; 0xff
10003514:	d01a      	beq.n	1000354c <__aeabi_fsub+0x1dc>
10003516:	2480      	movs	r4, #128	; 0x80
10003518:	04e4      	lsls	r4, r4, #19
1000351a:	4240      	negs	r0, r0
1000351c:	4323      	orrs	r3, r4
1000351e:	281b      	cmp	r0, #27
10003520:	dd4d      	ble.n	100035be <__aeabi_fsub+0x24e>
10003522:	2301      	movs	r3, #1
10003524:	1aeb      	subs	r3, r5, r3
10003526:	1c14      	adds	r4, r2, #0
10003528:	1c0e      	adds	r6, r1, #0
1000352a:	e762      	b.n	100033f2 <__aeabi_fsub+0x82>
1000352c:	2f00      	cmp	r7, #0
1000352e:	d000      	beq.n	10003532 <__aeabi_fsub+0x1c2>
10003530:	e763      	b.n	100033fa <__aeabi_fsub+0x8a>
10003532:	2300      	movs	r3, #0
10003534:	2000      	movs	r0, #0
10003536:	2400      	movs	r4, #0
10003538:	e777      	b.n	1000342a <__aeabi_fsub+0xba>
1000353a:	2501      	movs	r5, #1
1000353c:	e790      	b.n	10003460 <__aeabi_fsub+0xf0>
1000353e:	2b00      	cmp	r3, #0
10003540:	d039      	beq.n	100035b6 <__aeabi_fsub+0x246>
10003542:	43c0      	mvns	r0, r0
10003544:	2800      	cmp	r0, #0
10003546:	d0ed      	beq.n	10003524 <__aeabi_fsub+0x1b4>
10003548:	2aff      	cmp	r2, #255	; 0xff
1000354a:	d1e8      	bne.n	1000351e <__aeabi_fsub+0x1ae>
1000354c:	1c2b      	adds	r3, r5, #0
1000354e:	24ff      	movs	r4, #255	; 0xff
10003550:	1c0e      	adds	r6, r1, #0
10003552:	e729      	b.n	100033a8 <__aeabi_fsub+0x38>
10003554:	24ff      	movs	r4, #255	; 0xff
10003556:	2300      	movs	r3, #0
10003558:	e767      	b.n	1000342a <__aeabi_fsub+0xba>
1000355a:	2c00      	cmp	r4, #0
1000355c:	d15a      	bne.n	10003614 <__aeabi_fsub+0x2a4>
1000355e:	2b00      	cmp	r3, #0
10003560:	d07f      	beq.n	10003662 <__aeabi_fsub+0x2f2>
10003562:	2d00      	cmp	r5, #0
10003564:	d100      	bne.n	10003568 <__aeabi_fsub+0x1f8>
10003566:	e71f      	b.n	100033a8 <__aeabi_fsub+0x38>
10003568:	195b      	adds	r3, r3, r5
1000356a:	015a      	lsls	r2, r3, #5
1000356c:	d5a1      	bpl.n	100034b2 <__aeabi_fsub+0x142>
1000356e:	4a3e      	ldr	r2, [pc, #248]	; (10003668 <__aeabi_fsub+0x2f8>)
10003570:	3401      	adds	r4, #1
10003572:	4013      	ands	r3, r2
10003574:	e718      	b.n	100033a8 <__aeabi_fsub+0x38>
10003576:	2c00      	cmp	r4, #0
10003578:	d115      	bne.n	100035a6 <__aeabi_fsub+0x236>
1000357a:	2b00      	cmp	r3, #0
1000357c:	d12f      	bne.n	100035de <__aeabi_fsub+0x26e>
1000357e:	2d00      	cmp	r5, #0
10003580:	d05e      	beq.n	10003640 <__aeabi_fsub+0x2d0>
10003582:	1c2b      	adds	r3, r5, #0
10003584:	1c0e      	adds	r6, r1, #0
10003586:	e70f      	b.n	100033a8 <__aeabi_fsub+0x38>
10003588:	2c00      	cmp	r4, #0
1000358a:	d121      	bne.n	100035d0 <__aeabi_fsub+0x260>
1000358c:	2b00      	cmp	r3, #0
1000358e:	d054      	beq.n	1000363a <__aeabi_fsub+0x2ca>
10003590:	43c9      	mvns	r1, r1
10003592:	2900      	cmp	r1, #0
10003594:	d004      	beq.n	100035a0 <__aeabi_fsub+0x230>
10003596:	2aff      	cmp	r2, #255	; 0xff
10003598:	d04c      	beq.n	10003634 <__aeabi_fsub+0x2c4>
1000359a:	291b      	cmp	r1, #27
1000359c:	dd58      	ble.n	10003650 <__aeabi_fsub+0x2e0>
1000359e:	2301      	movs	r3, #1
100035a0:	195b      	adds	r3, r3, r5
100035a2:	1c14      	adds	r4, r2, #0
100035a4:	e75d      	b.n	10003462 <__aeabi_fsub+0xf2>
100035a6:	2b00      	cmp	r3, #0
100035a8:	d123      	bne.n	100035f2 <__aeabi_fsub+0x282>
100035aa:	2d00      	cmp	r5, #0
100035ac:	d04b      	beq.n	10003646 <__aeabi_fsub+0x2d6>
100035ae:	1c2b      	adds	r3, r5, #0
100035b0:	1c0e      	adds	r6, r1, #0
100035b2:	24ff      	movs	r4, #255	; 0xff
100035b4:	e6f8      	b.n	100033a8 <__aeabi_fsub+0x38>
100035b6:	1c2b      	adds	r3, r5, #0
100035b8:	1c14      	adds	r4, r2, #0
100035ba:	1c0e      	adds	r6, r1, #0
100035bc:	e6f4      	b.n	100033a8 <__aeabi_fsub+0x38>
100035be:	1c1e      	adds	r6, r3, #0
100035c0:	2420      	movs	r4, #32
100035c2:	40c6      	lsrs	r6, r0
100035c4:	1a20      	subs	r0, r4, r0
100035c6:	4083      	lsls	r3, r0
100035c8:	1e58      	subs	r0, r3, #1
100035ca:	4183      	sbcs	r3, r0
100035cc:	4333      	orrs	r3, r6
100035ce:	e7a9      	b.n	10003524 <__aeabi_fsub+0x1b4>
100035d0:	2aff      	cmp	r2, #255	; 0xff
100035d2:	d02f      	beq.n	10003634 <__aeabi_fsub+0x2c4>
100035d4:	2480      	movs	r4, #128	; 0x80
100035d6:	04e4      	lsls	r4, r4, #19
100035d8:	4249      	negs	r1, r1
100035da:	4323      	orrs	r3, r4
100035dc:	e7dd      	b.n	1000359a <__aeabi_fsub+0x22a>
100035de:	2d00      	cmp	r5, #0
100035e0:	d100      	bne.n	100035e4 <__aeabi_fsub+0x274>
100035e2:	e6e1      	b.n	100033a8 <__aeabi_fsub+0x38>
100035e4:	1b5a      	subs	r2, r3, r5
100035e6:	0150      	lsls	r0, r2, #5
100035e8:	d400      	bmi.n	100035ec <__aeabi_fsub+0x27c>
100035ea:	e71a      	b.n	10003422 <__aeabi_fsub+0xb2>
100035ec:	1aeb      	subs	r3, r5, r3
100035ee:	1c0e      	adds	r6, r1, #0
100035f0:	e6da      	b.n	100033a8 <__aeabi_fsub+0x38>
100035f2:	24ff      	movs	r4, #255	; 0xff
100035f4:	2d00      	cmp	r5, #0
100035f6:	d100      	bne.n	100035fa <__aeabi_fsub+0x28a>
100035f8:	e6d6      	b.n	100033a8 <__aeabi_fsub+0x38>
100035fa:	2280      	movs	r2, #128	; 0x80
100035fc:	08db      	lsrs	r3, r3, #3
100035fe:	03d2      	lsls	r2, r2, #15
10003600:	4213      	tst	r3, r2
10003602:	d004      	beq.n	1000360e <__aeabi_fsub+0x29e>
10003604:	08ed      	lsrs	r5, r5, #3
10003606:	4215      	tst	r5, r2
10003608:	d101      	bne.n	1000360e <__aeabi_fsub+0x29e>
1000360a:	1c2b      	adds	r3, r5, #0
1000360c:	1c0e      	adds	r6, r1, #0
1000360e:	00db      	lsls	r3, r3, #3
10003610:	24ff      	movs	r4, #255	; 0xff
10003612:	e6c9      	b.n	100033a8 <__aeabi_fsub+0x38>
10003614:	2b00      	cmp	r3, #0
10003616:	d00d      	beq.n	10003634 <__aeabi_fsub+0x2c4>
10003618:	24ff      	movs	r4, #255	; 0xff
1000361a:	2d00      	cmp	r5, #0
1000361c:	d100      	bne.n	10003620 <__aeabi_fsub+0x2b0>
1000361e:	e6c3      	b.n	100033a8 <__aeabi_fsub+0x38>
10003620:	2280      	movs	r2, #128	; 0x80
10003622:	08db      	lsrs	r3, r3, #3
10003624:	03d2      	lsls	r2, r2, #15
10003626:	4213      	tst	r3, r2
10003628:	d0f1      	beq.n	1000360e <__aeabi_fsub+0x29e>
1000362a:	08ed      	lsrs	r5, r5, #3
1000362c:	4215      	tst	r5, r2
1000362e:	d1ee      	bne.n	1000360e <__aeabi_fsub+0x29e>
10003630:	1c2b      	adds	r3, r5, #0
10003632:	e7ec      	b.n	1000360e <__aeabi_fsub+0x29e>
10003634:	1c2b      	adds	r3, r5, #0
10003636:	24ff      	movs	r4, #255	; 0xff
10003638:	e6b6      	b.n	100033a8 <__aeabi_fsub+0x38>
1000363a:	1c2b      	adds	r3, r5, #0
1000363c:	1c14      	adds	r4, r2, #0
1000363e:	e6b3      	b.n	100033a8 <__aeabi_fsub+0x38>
10003640:	1c23      	adds	r3, r4, #0
10003642:	2000      	movs	r0, #0
10003644:	e6f1      	b.n	1000342a <__aeabi_fsub+0xba>
10003646:	2380      	movs	r3, #128	; 0x80
10003648:	2000      	movs	r0, #0
1000364a:	049b      	lsls	r3, r3, #18
1000364c:	24ff      	movs	r4, #255	; 0xff
1000364e:	e6ec      	b.n	1000342a <__aeabi_fsub+0xba>
10003650:	1c1f      	adds	r7, r3, #0
10003652:	2420      	movs	r4, #32
10003654:	40cf      	lsrs	r7, r1
10003656:	1a61      	subs	r1, r4, r1
10003658:	408b      	lsls	r3, r1
1000365a:	1e59      	subs	r1, r3, #1
1000365c:	418b      	sbcs	r3, r1
1000365e:	433b      	orrs	r3, r7
10003660:	e79e      	b.n	100035a0 <__aeabi_fsub+0x230>
10003662:	1c2b      	adds	r3, r5, #0
10003664:	e6a0      	b.n	100033a8 <__aeabi_fsub+0x38>
10003666:	46c0      	nop			; (mov r8, r8)
10003668:	fbffffff 	.word	0xfbffffff

1000366c <__aeabi_f2iz>:
1000366c:	0242      	lsls	r2, r0, #9
1000366e:	0a51      	lsrs	r1, r2, #9
10003670:	0042      	lsls	r2, r0, #1
10003672:	0fc3      	lsrs	r3, r0, #31
10003674:	0e12      	lsrs	r2, r2, #24
10003676:	2000      	movs	r0, #0
10003678:	2a7e      	cmp	r2, #126	; 0x7e
1000367a:	dd0d      	ble.n	10003698 <__aeabi_f2iz+0x2c>
1000367c:	2a9d      	cmp	r2, #157	; 0x9d
1000367e:	dc0c      	bgt.n	1000369a <__aeabi_f2iz+0x2e>
10003680:	2080      	movs	r0, #128	; 0x80
10003682:	0400      	lsls	r0, r0, #16
10003684:	4301      	orrs	r1, r0
10003686:	2a95      	cmp	r2, #149	; 0x95
10003688:	dc0a      	bgt.n	100036a0 <__aeabi_f2iz+0x34>
1000368a:	2096      	movs	r0, #150	; 0x96
1000368c:	1a82      	subs	r2, r0, r2
1000368e:	40d1      	lsrs	r1, r2
10003690:	1c0a      	adds	r2, r1, #0
10003692:	4258      	negs	r0, r3
10003694:	4042      	eors	r2, r0
10003696:	18d0      	adds	r0, r2, r3
10003698:	4770      	bx	lr
1000369a:	4a03      	ldr	r2, [pc, #12]	; (100036a8 <__aeabi_f2iz+0x3c>)
1000369c:	1898      	adds	r0, r3, r2
1000369e:	e7fb      	b.n	10003698 <__aeabi_f2iz+0x2c>
100036a0:	3a96      	subs	r2, #150	; 0x96
100036a2:	4091      	lsls	r1, r2
100036a4:	1c0a      	adds	r2, r1, #0
100036a6:	e7f4      	b.n	10003692 <__aeabi_f2iz+0x26>
100036a8:	7fffffff 	.word	0x7fffffff

100036ac <__aeabi_ui2f>:
100036ac:	b510      	push	{r4, lr}
100036ae:	1e04      	subs	r4, r0, #0
100036b0:	d035      	beq.n	1000371e <__aeabi_ui2f+0x72>
100036b2:	f000 ff21 	bl	100044f8 <__clzsi2>
100036b6:	219e      	movs	r1, #158	; 0x9e
100036b8:	1a09      	subs	r1, r1, r0
100036ba:	2996      	cmp	r1, #150	; 0x96
100036bc:	dc09      	bgt.n	100036d2 <__aeabi_ui2f+0x26>
100036be:	2808      	cmp	r0, #8
100036c0:	dd30      	ble.n	10003724 <__aeabi_ui2f+0x78>
100036c2:	1c02      	adds	r2, r0, #0
100036c4:	1c23      	adds	r3, r4, #0
100036c6:	3a08      	subs	r2, #8
100036c8:	4093      	lsls	r3, r2
100036ca:	025b      	lsls	r3, r3, #9
100036cc:	0a5b      	lsrs	r3, r3, #9
100036ce:	b2c8      	uxtb	r0, r1
100036d0:	e020      	b.n	10003714 <__aeabi_ui2f+0x68>
100036d2:	2999      	cmp	r1, #153	; 0x99
100036d4:	dd0c      	ble.n	100036f0 <__aeabi_ui2f+0x44>
100036d6:	2205      	movs	r2, #5
100036d8:	1c23      	adds	r3, r4, #0
100036da:	1a12      	subs	r2, r2, r0
100036dc:	40d3      	lsrs	r3, r2
100036de:	1c1a      	adds	r2, r3, #0
100036e0:	1c03      	adds	r3, r0, #0
100036e2:	331b      	adds	r3, #27
100036e4:	409c      	lsls	r4, r3
100036e6:	1c23      	adds	r3, r4, #0
100036e8:	1e5c      	subs	r4, r3, #1
100036ea:	41a3      	sbcs	r3, r4
100036ec:	4313      	orrs	r3, r2
100036ee:	1c1c      	adds	r4, r3, #0
100036f0:	2805      	cmp	r0, #5
100036f2:	dd01      	ble.n	100036f8 <__aeabi_ui2f+0x4c>
100036f4:	1f43      	subs	r3, r0, #5
100036f6:	409c      	lsls	r4, r3
100036f8:	4b0f      	ldr	r3, [pc, #60]	; (10003738 <__aeabi_ui2f+0x8c>)
100036fa:	4023      	ands	r3, r4
100036fc:	0762      	lsls	r2, r4, #29
100036fe:	d004      	beq.n	1000370a <__aeabi_ui2f+0x5e>
10003700:	220f      	movs	r2, #15
10003702:	4014      	ands	r4, r2
10003704:	2c04      	cmp	r4, #4
10003706:	d000      	beq.n	1000370a <__aeabi_ui2f+0x5e>
10003708:	3304      	adds	r3, #4
1000370a:	015a      	lsls	r2, r3, #5
1000370c:	d40e      	bmi.n	1000372c <__aeabi_ui2f+0x80>
1000370e:	019b      	lsls	r3, r3, #6
10003710:	0a5b      	lsrs	r3, r3, #9
10003712:	b2c8      	uxtb	r0, r1
10003714:	025b      	lsls	r3, r3, #9
10003716:	0a5b      	lsrs	r3, r3, #9
10003718:	05c0      	lsls	r0, r0, #23
1000371a:	4318      	orrs	r0, r3
1000371c:	bd10      	pop	{r4, pc}
1000371e:	2000      	movs	r0, #0
10003720:	2300      	movs	r3, #0
10003722:	e7f7      	b.n	10003714 <__aeabi_ui2f+0x68>
10003724:	0263      	lsls	r3, r4, #9
10003726:	0a5b      	lsrs	r3, r3, #9
10003728:	b2c8      	uxtb	r0, r1
1000372a:	e7f3      	b.n	10003714 <__aeabi_ui2f+0x68>
1000372c:	219f      	movs	r1, #159	; 0x9f
1000372e:	4a02      	ldr	r2, [pc, #8]	; (10003738 <__aeabi_ui2f+0x8c>)
10003730:	1a09      	subs	r1, r1, r0
10003732:	4013      	ands	r3, r2
10003734:	e7eb      	b.n	1000370e <__aeabi_ui2f+0x62>
10003736:	46c0      	nop			; (mov r8, r8)
10003738:	fbffffff 	.word	0xfbffffff

1000373c <__aeabi_ddiv>:
1000373c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000373e:	465f      	mov	r7, fp
10003740:	4656      	mov	r6, sl
10003742:	464d      	mov	r5, r9
10003744:	4644      	mov	r4, r8
10003746:	b4f0      	push	{r4, r5, r6, r7}
10003748:	030f      	lsls	r7, r1, #12
1000374a:	b087      	sub	sp, #28
1000374c:	4698      	mov	r8, r3
1000374e:	004d      	lsls	r5, r1, #1
10003750:	0b3b      	lsrs	r3, r7, #12
10003752:	0fcc      	lsrs	r4, r1, #31
10003754:	1c06      	adds	r6, r0, #0
10003756:	4692      	mov	sl, r2
10003758:	4681      	mov	r9, r0
1000375a:	469b      	mov	fp, r3
1000375c:	0d6d      	lsrs	r5, r5, #21
1000375e:	9401      	str	r4, [sp, #4]
10003760:	d06b      	beq.n	1000383a <__aeabi_ddiv+0xfe>
10003762:	4b66      	ldr	r3, [pc, #408]	; (100038fc <__aeabi_ddiv+0x1c0>)
10003764:	429d      	cmp	r5, r3
10003766:	d035      	beq.n	100037d4 <__aeabi_ddiv+0x98>
10003768:	2780      	movs	r7, #128	; 0x80
1000376a:	465b      	mov	r3, fp
1000376c:	037f      	lsls	r7, r7, #13
1000376e:	431f      	orrs	r7, r3
10003770:	00f3      	lsls	r3, r6, #3
10003772:	4699      	mov	r9, r3
10003774:	4b62      	ldr	r3, [pc, #392]	; (10003900 <__aeabi_ddiv+0x1c4>)
10003776:	00ff      	lsls	r7, r7, #3
10003778:	0f40      	lsrs	r0, r0, #29
1000377a:	469c      	mov	ip, r3
1000377c:	4307      	orrs	r7, r0
1000377e:	2300      	movs	r3, #0
10003780:	46bb      	mov	fp, r7
10003782:	2600      	movs	r6, #0
10003784:	4465      	add	r5, ip
10003786:	9300      	str	r3, [sp, #0]
10003788:	4642      	mov	r2, r8
1000378a:	0317      	lsls	r7, r2, #12
1000378c:	0050      	lsls	r0, r2, #1
1000378e:	0fd2      	lsrs	r2, r2, #31
10003790:	4653      	mov	r3, sl
10003792:	0b3f      	lsrs	r7, r7, #12
10003794:	0d40      	lsrs	r0, r0, #21
10003796:	4690      	mov	r8, r2
10003798:	d100      	bne.n	1000379c <__aeabi_ddiv+0x60>
1000379a:	e072      	b.n	10003882 <__aeabi_ddiv+0x146>
1000379c:	4a57      	ldr	r2, [pc, #348]	; (100038fc <__aeabi_ddiv+0x1c0>)
1000379e:	4290      	cmp	r0, r2
100037a0:	d067      	beq.n	10003872 <__aeabi_ddiv+0x136>
100037a2:	2380      	movs	r3, #128	; 0x80
100037a4:	035b      	lsls	r3, r3, #13
100037a6:	431f      	orrs	r7, r3
100037a8:	4653      	mov	r3, sl
100037aa:	4a55      	ldr	r2, [pc, #340]	; (10003900 <__aeabi_ddiv+0x1c4>)
100037ac:	0f5b      	lsrs	r3, r3, #29
100037ae:	00ff      	lsls	r7, r7, #3
100037b0:	431f      	orrs	r7, r3
100037b2:	4694      	mov	ip, r2
100037b4:	4653      	mov	r3, sl
100037b6:	2100      	movs	r1, #0
100037b8:	00db      	lsls	r3, r3, #3
100037ba:	4460      	add	r0, ip
100037bc:	4642      	mov	r2, r8
100037be:	4062      	eors	r2, r4
100037c0:	4692      	mov	sl, r2
100037c2:	1a2d      	subs	r5, r5, r0
100037c4:	430e      	orrs	r6, r1
100037c6:	2e0f      	cmp	r6, #15
100037c8:	d900      	bls.n	100037cc <__aeabi_ddiv+0x90>
100037ca:	e0a1      	b.n	10003910 <__aeabi_ddiv+0x1d4>
100037cc:	484d      	ldr	r0, [pc, #308]	; (10003904 <__aeabi_ddiv+0x1c8>)
100037ce:	00b6      	lsls	r6, r6, #2
100037d0:	5980      	ldr	r0, [r0, r6]
100037d2:	4687      	mov	pc, r0
100037d4:	465b      	mov	r3, fp
100037d6:	431e      	orrs	r6, r3
100037d8:	d000      	beq.n	100037dc <__aeabi_ddiv+0xa0>
100037da:	e076      	b.n	100038ca <__aeabi_ddiv+0x18e>
100037dc:	2300      	movs	r3, #0
100037de:	469b      	mov	fp, r3
100037e0:	4699      	mov	r9, r3
100037e2:	3302      	adds	r3, #2
100037e4:	2608      	movs	r6, #8
100037e6:	9300      	str	r3, [sp, #0]
100037e8:	e7ce      	b.n	10003788 <__aeabi_ddiv+0x4c>
100037ea:	4699      	mov	r9, r3
100037ec:	4643      	mov	r3, r8
100037ee:	46bb      	mov	fp, r7
100037f0:	9301      	str	r3, [sp, #4]
100037f2:	9100      	str	r1, [sp, #0]
100037f4:	9b00      	ldr	r3, [sp, #0]
100037f6:	2b02      	cmp	r3, #2
100037f8:	d16b      	bne.n	100038d2 <__aeabi_ddiv+0x196>
100037fa:	9b01      	ldr	r3, [sp, #4]
100037fc:	469a      	mov	sl, r3
100037fe:	2100      	movs	r1, #0
10003800:	4653      	mov	r3, sl
10003802:	2201      	movs	r2, #1
10003804:	2700      	movs	r7, #0
10003806:	4689      	mov	r9, r1
10003808:	401a      	ands	r2, r3
1000380a:	4b3c      	ldr	r3, [pc, #240]	; (100038fc <__aeabi_ddiv+0x1c0>)
1000380c:	2100      	movs	r1, #0
1000380e:	033f      	lsls	r7, r7, #12
10003810:	0d0c      	lsrs	r4, r1, #20
10003812:	0524      	lsls	r4, r4, #20
10003814:	0b3f      	lsrs	r7, r7, #12
10003816:	4327      	orrs	r7, r4
10003818:	4c3b      	ldr	r4, [pc, #236]	; (10003908 <__aeabi_ddiv+0x1cc>)
1000381a:	051b      	lsls	r3, r3, #20
1000381c:	4027      	ands	r7, r4
1000381e:	431f      	orrs	r7, r3
10003820:	007f      	lsls	r7, r7, #1
10003822:	07d2      	lsls	r2, r2, #31
10003824:	087f      	lsrs	r7, r7, #1
10003826:	4317      	orrs	r7, r2
10003828:	4648      	mov	r0, r9
1000382a:	1c39      	adds	r1, r7, #0
1000382c:	b007      	add	sp, #28
1000382e:	bc3c      	pop	{r2, r3, r4, r5}
10003830:	4690      	mov	r8, r2
10003832:	4699      	mov	r9, r3
10003834:	46a2      	mov	sl, r4
10003836:	46ab      	mov	fp, r5
10003838:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000383a:	4303      	orrs	r3, r0
1000383c:	d03e      	beq.n	100038bc <__aeabi_ddiv+0x180>
1000383e:	465b      	mov	r3, fp
10003840:	2b00      	cmp	r3, #0
10003842:	d100      	bne.n	10003846 <__aeabi_ddiv+0x10a>
10003844:	e19c      	b.n	10003b80 <__aeabi_ddiv+0x444>
10003846:	4658      	mov	r0, fp
10003848:	f000 fe56 	bl	100044f8 <__clzsi2>
1000384c:	2328      	movs	r3, #40	; 0x28
1000384e:	1c31      	adds	r1, r6, #0
10003850:	1a1b      	subs	r3, r3, r0
10003852:	1c02      	adds	r2, r0, #0
10003854:	465f      	mov	r7, fp
10003856:	40d9      	lsrs	r1, r3
10003858:	3a08      	subs	r2, #8
1000385a:	4097      	lsls	r7, r2
1000385c:	1c0b      	adds	r3, r1, #0
1000385e:	4096      	lsls	r6, r2
10003860:	433b      	orrs	r3, r7
10003862:	469b      	mov	fp, r3
10003864:	46b1      	mov	r9, r6
10003866:	2300      	movs	r3, #0
10003868:	4d28      	ldr	r5, [pc, #160]	; (1000390c <__aeabi_ddiv+0x1d0>)
1000386a:	2600      	movs	r6, #0
1000386c:	1a2d      	subs	r5, r5, r0
1000386e:	9300      	str	r3, [sp, #0]
10003870:	e78a      	b.n	10003788 <__aeabi_ddiv+0x4c>
10003872:	4652      	mov	r2, sl
10003874:	2103      	movs	r1, #3
10003876:	433a      	orrs	r2, r7
10003878:	d1a0      	bne.n	100037bc <__aeabi_ddiv+0x80>
1000387a:	2700      	movs	r7, #0
1000387c:	2300      	movs	r3, #0
1000387e:	2102      	movs	r1, #2
10003880:	e79c      	b.n	100037bc <__aeabi_ddiv+0x80>
10003882:	4652      	mov	r2, sl
10003884:	433a      	orrs	r2, r7
10003886:	d015      	beq.n	100038b4 <__aeabi_ddiv+0x178>
10003888:	2f00      	cmp	r7, #0
1000388a:	d100      	bne.n	1000388e <__aeabi_ddiv+0x152>
1000388c:	e185      	b.n	10003b9a <__aeabi_ddiv+0x45e>
1000388e:	1c38      	adds	r0, r7, #0
10003890:	f000 fe32 	bl	100044f8 <__clzsi2>
10003894:	1c02      	adds	r2, r0, #0
10003896:	2128      	movs	r1, #40	; 0x28
10003898:	4650      	mov	r0, sl
1000389a:	1a89      	subs	r1, r1, r2
1000389c:	1c13      	adds	r3, r2, #0
1000389e:	40c8      	lsrs	r0, r1
100038a0:	4651      	mov	r1, sl
100038a2:	3b08      	subs	r3, #8
100038a4:	4099      	lsls	r1, r3
100038a6:	409f      	lsls	r7, r3
100038a8:	1c0b      	adds	r3, r1, #0
100038aa:	4307      	orrs	r7, r0
100038ac:	4817      	ldr	r0, [pc, #92]	; (1000390c <__aeabi_ddiv+0x1d0>)
100038ae:	2100      	movs	r1, #0
100038b0:	1a80      	subs	r0, r0, r2
100038b2:	e783      	b.n	100037bc <__aeabi_ddiv+0x80>
100038b4:	2700      	movs	r7, #0
100038b6:	2300      	movs	r3, #0
100038b8:	2101      	movs	r1, #1
100038ba:	e77f      	b.n	100037bc <__aeabi_ddiv+0x80>
100038bc:	2300      	movs	r3, #0
100038be:	469b      	mov	fp, r3
100038c0:	4699      	mov	r9, r3
100038c2:	3301      	adds	r3, #1
100038c4:	2604      	movs	r6, #4
100038c6:	9300      	str	r3, [sp, #0]
100038c8:	e75e      	b.n	10003788 <__aeabi_ddiv+0x4c>
100038ca:	2303      	movs	r3, #3
100038cc:	260c      	movs	r6, #12
100038ce:	9300      	str	r3, [sp, #0]
100038d0:	e75a      	b.n	10003788 <__aeabi_ddiv+0x4c>
100038d2:	2b03      	cmp	r3, #3
100038d4:	d100      	bne.n	100038d8 <__aeabi_ddiv+0x19c>
100038d6:	e23c      	b.n	10003d52 <__aeabi_ddiv+0x616>
100038d8:	2b01      	cmp	r3, #1
100038da:	d000      	beq.n	100038de <__aeabi_ddiv+0x1a2>
100038dc:	e1bf      	b.n	10003c5e <__aeabi_ddiv+0x522>
100038de:	1c1a      	adds	r2, r3, #0
100038e0:	9b01      	ldr	r3, [sp, #4]
100038e2:	401a      	ands	r2, r3
100038e4:	2100      	movs	r1, #0
100038e6:	2300      	movs	r3, #0
100038e8:	2700      	movs	r7, #0
100038ea:	4689      	mov	r9, r1
100038ec:	e78e      	b.n	1000380c <__aeabi_ddiv+0xd0>
100038ee:	2300      	movs	r3, #0
100038f0:	2780      	movs	r7, #128	; 0x80
100038f2:	4699      	mov	r9, r3
100038f4:	2200      	movs	r2, #0
100038f6:	033f      	lsls	r7, r7, #12
100038f8:	4b00      	ldr	r3, [pc, #0]	; (100038fc <__aeabi_ddiv+0x1c0>)
100038fa:	e787      	b.n	1000380c <__aeabi_ddiv+0xd0>
100038fc:	000007ff 	.word	0x000007ff
10003900:	fffffc01 	.word	0xfffffc01
10003904:	100049d0 	.word	0x100049d0
10003908:	800fffff 	.word	0x800fffff
1000390c:	fffffc0d 	.word	0xfffffc0d
10003910:	45bb      	cmp	fp, r7
10003912:	d900      	bls.n	10003916 <__aeabi_ddiv+0x1da>
10003914:	e151      	b.n	10003bba <__aeabi_ddiv+0x47e>
10003916:	d100      	bne.n	1000391a <__aeabi_ddiv+0x1de>
10003918:	e14c      	b.n	10003bb4 <__aeabi_ddiv+0x478>
1000391a:	464a      	mov	r2, r9
1000391c:	9203      	str	r2, [sp, #12]
1000391e:	2200      	movs	r2, #0
10003920:	465c      	mov	r4, fp
10003922:	4690      	mov	r8, r2
10003924:	3d01      	subs	r5, #1
10003926:	0e18      	lsrs	r0, r3, #24
10003928:	023f      	lsls	r7, r7, #8
1000392a:	4338      	orrs	r0, r7
1000392c:	021b      	lsls	r3, r3, #8
1000392e:	9301      	str	r3, [sp, #4]
10003930:	0c03      	lsrs	r3, r0, #16
10003932:	4699      	mov	r9, r3
10003934:	0403      	lsls	r3, r0, #16
10003936:	0c1b      	lsrs	r3, r3, #16
10003938:	4649      	mov	r1, r9
1000393a:	1c06      	adds	r6, r0, #0
1000393c:	1c20      	adds	r0, r4, #0
1000393e:	1c1f      	adds	r7, r3, #0
10003940:	9300      	str	r3, [sp, #0]
10003942:	f7fd fe21 	bl	10001588 <__aeabi_uidiv>
10003946:	1c02      	adds	r2, r0, #0
10003948:	437a      	muls	r2, r7
1000394a:	9002      	str	r0, [sp, #8]
1000394c:	4649      	mov	r1, r9
1000394e:	1c20      	adds	r0, r4, #0
10003950:	1c17      	adds	r7, r2, #0
10003952:	f7fd fe23 	bl	1000159c <__aeabi_uidivmod>
10003956:	9b03      	ldr	r3, [sp, #12]
10003958:	0409      	lsls	r1, r1, #16
1000395a:	0c1b      	lsrs	r3, r3, #16
1000395c:	4319      	orrs	r1, r3
1000395e:	428f      	cmp	r7, r1
10003960:	d90c      	bls.n	1000397c <__aeabi_ddiv+0x240>
10003962:	9b02      	ldr	r3, [sp, #8]
10003964:	1989      	adds	r1, r1, r6
10003966:	3b01      	subs	r3, #1
10003968:	428e      	cmp	r6, r1
1000396a:	d900      	bls.n	1000396e <__aeabi_ddiv+0x232>
1000396c:	e152      	b.n	10003c14 <__aeabi_ddiv+0x4d8>
1000396e:	428f      	cmp	r7, r1
10003970:	d800      	bhi.n	10003974 <__aeabi_ddiv+0x238>
10003972:	e14f      	b.n	10003c14 <__aeabi_ddiv+0x4d8>
10003974:	9b02      	ldr	r3, [sp, #8]
10003976:	1989      	adds	r1, r1, r6
10003978:	3b02      	subs	r3, #2
1000397a:	9302      	str	r3, [sp, #8]
1000397c:	1bcc      	subs	r4, r1, r7
1000397e:	1c20      	adds	r0, r4, #0
10003980:	4649      	mov	r1, r9
10003982:	f7fd fe01 	bl	10001588 <__aeabi_uidiv>
10003986:	9f00      	ldr	r7, [sp, #0]
10003988:	4683      	mov	fp, r0
1000398a:	4347      	muls	r7, r0
1000398c:	4649      	mov	r1, r9
1000398e:	1c20      	adds	r0, r4, #0
10003990:	f7fd fe04 	bl	1000159c <__aeabi_uidivmod>
10003994:	9a03      	ldr	r2, [sp, #12]
10003996:	040b      	lsls	r3, r1, #16
10003998:	0414      	lsls	r4, r2, #16
1000399a:	0c24      	lsrs	r4, r4, #16
1000399c:	4323      	orrs	r3, r4
1000399e:	429f      	cmp	r7, r3
100039a0:	d90d      	bls.n	100039be <__aeabi_ddiv+0x282>
100039a2:	465a      	mov	r2, fp
100039a4:	199b      	adds	r3, r3, r6
100039a6:	3a01      	subs	r2, #1
100039a8:	429e      	cmp	r6, r3
100039aa:	d900      	bls.n	100039ae <__aeabi_ddiv+0x272>
100039ac:	e130      	b.n	10003c10 <__aeabi_ddiv+0x4d4>
100039ae:	429f      	cmp	r7, r3
100039b0:	d800      	bhi.n	100039b4 <__aeabi_ddiv+0x278>
100039b2:	e12d      	b.n	10003c10 <__aeabi_ddiv+0x4d4>
100039b4:	2202      	movs	r2, #2
100039b6:	4252      	negs	r2, r2
100039b8:	4694      	mov	ip, r2
100039ba:	199b      	adds	r3, r3, r6
100039bc:	44e3      	add	fp, ip
100039be:	9a02      	ldr	r2, [sp, #8]
100039c0:	1bdb      	subs	r3, r3, r7
100039c2:	0417      	lsls	r7, r2, #16
100039c4:	465a      	mov	r2, fp
100039c6:	433a      	orrs	r2, r7
100039c8:	4693      	mov	fp, r2
100039ca:	9c01      	ldr	r4, [sp, #4]
100039cc:	0c17      	lsrs	r7, r2, #16
100039ce:	0c22      	lsrs	r2, r4, #16
100039d0:	1c10      	adds	r0, r2, #0
100039d2:	9204      	str	r2, [sp, #16]
100039d4:	465a      	mov	r2, fp
100039d6:	0411      	lsls	r1, r2, #16
100039d8:	0422      	lsls	r2, r4, #16
100039da:	0c12      	lsrs	r2, r2, #16
100039dc:	1c14      	adds	r4, r2, #0
100039de:	0c09      	lsrs	r1, r1, #16
100039e0:	437c      	muls	r4, r7
100039e2:	9205      	str	r2, [sp, #20]
100039e4:	434a      	muls	r2, r1
100039e6:	4341      	muls	r1, r0
100039e8:	4347      	muls	r7, r0
100039ea:	1861      	adds	r1, r4, r1
100039ec:	0c10      	lsrs	r0, r2, #16
100039ee:	1809      	adds	r1, r1, r0
100039f0:	428c      	cmp	r4, r1
100039f2:	d903      	bls.n	100039fc <__aeabi_ddiv+0x2c0>
100039f4:	2080      	movs	r0, #128	; 0x80
100039f6:	0240      	lsls	r0, r0, #9
100039f8:	4684      	mov	ip, r0
100039fa:	4467      	add	r7, ip
100039fc:	0c0c      	lsrs	r4, r1, #16
100039fe:	0412      	lsls	r2, r2, #16
10003a00:	0408      	lsls	r0, r1, #16
10003a02:	0c12      	lsrs	r2, r2, #16
10003a04:	193c      	adds	r4, r7, r4
10003a06:	1881      	adds	r1, r0, r2
10003a08:	42a3      	cmp	r3, r4
10003a0a:	d200      	bcs.n	10003a0e <__aeabi_ddiv+0x2d2>
10003a0c:	e0e5      	b.n	10003bda <__aeabi_ddiv+0x49e>
10003a0e:	d100      	bne.n	10003a12 <__aeabi_ddiv+0x2d6>
10003a10:	e0df      	b.n	10003bd2 <__aeabi_ddiv+0x496>
10003a12:	1b1f      	subs	r7, r3, r4
10003a14:	4643      	mov	r3, r8
10003a16:	1a5c      	subs	r4, r3, r1
10003a18:	45a0      	cmp	r8, r4
10003a1a:	4192      	sbcs	r2, r2
10003a1c:	4252      	negs	r2, r2
10003a1e:	1abf      	subs	r7, r7, r2
10003a20:	42b7      	cmp	r7, r6
10003a22:	d100      	bne.n	10003a26 <__aeabi_ddiv+0x2ea>
10003a24:	e10e      	b.n	10003c44 <__aeabi_ddiv+0x508>
10003a26:	1c38      	adds	r0, r7, #0
10003a28:	4649      	mov	r1, r9
10003a2a:	f7fd fdad 	bl	10001588 <__aeabi_uidiv>
10003a2e:	9b00      	ldr	r3, [sp, #0]
10003a30:	9002      	str	r0, [sp, #8]
10003a32:	4343      	muls	r3, r0
10003a34:	4649      	mov	r1, r9
10003a36:	1c38      	adds	r0, r7, #0
10003a38:	4698      	mov	r8, r3
10003a3a:	f7fd fdaf 	bl	1000159c <__aeabi_uidivmod>
10003a3e:	0c23      	lsrs	r3, r4, #16
10003a40:	040f      	lsls	r7, r1, #16
10003a42:	431f      	orrs	r7, r3
10003a44:	45b8      	cmp	r8, r7
10003a46:	d90c      	bls.n	10003a62 <__aeabi_ddiv+0x326>
10003a48:	9b02      	ldr	r3, [sp, #8]
10003a4a:	19bf      	adds	r7, r7, r6
10003a4c:	3b01      	subs	r3, #1
10003a4e:	42be      	cmp	r6, r7
10003a50:	d900      	bls.n	10003a54 <__aeabi_ddiv+0x318>
10003a52:	e0fb      	b.n	10003c4c <__aeabi_ddiv+0x510>
10003a54:	45b8      	cmp	r8, r7
10003a56:	d800      	bhi.n	10003a5a <__aeabi_ddiv+0x31e>
10003a58:	e0f8      	b.n	10003c4c <__aeabi_ddiv+0x510>
10003a5a:	9b02      	ldr	r3, [sp, #8]
10003a5c:	19bf      	adds	r7, r7, r6
10003a5e:	3b02      	subs	r3, #2
10003a60:	9302      	str	r3, [sp, #8]
10003a62:	4643      	mov	r3, r8
10003a64:	1aff      	subs	r7, r7, r3
10003a66:	4649      	mov	r1, r9
10003a68:	1c38      	adds	r0, r7, #0
10003a6a:	f7fd fd8d 	bl	10001588 <__aeabi_uidiv>
10003a6e:	9b00      	ldr	r3, [sp, #0]
10003a70:	9003      	str	r0, [sp, #12]
10003a72:	4343      	muls	r3, r0
10003a74:	4649      	mov	r1, r9
10003a76:	1c38      	adds	r0, r7, #0
10003a78:	4698      	mov	r8, r3
10003a7a:	f7fd fd8f 	bl	1000159c <__aeabi_uidivmod>
10003a7e:	0424      	lsls	r4, r4, #16
10003a80:	0409      	lsls	r1, r1, #16
10003a82:	0c24      	lsrs	r4, r4, #16
10003a84:	4321      	orrs	r1, r4
10003a86:	4588      	cmp	r8, r1
10003a88:	d90c      	bls.n	10003aa4 <__aeabi_ddiv+0x368>
10003a8a:	9b03      	ldr	r3, [sp, #12]
10003a8c:	1989      	adds	r1, r1, r6
10003a8e:	3b01      	subs	r3, #1
10003a90:	428e      	cmp	r6, r1
10003a92:	d900      	bls.n	10003a96 <__aeabi_ddiv+0x35a>
10003a94:	e0dc      	b.n	10003c50 <__aeabi_ddiv+0x514>
10003a96:	4588      	cmp	r8, r1
10003a98:	d800      	bhi.n	10003a9c <__aeabi_ddiv+0x360>
10003a9a:	e0d9      	b.n	10003c50 <__aeabi_ddiv+0x514>
10003a9c:	9b03      	ldr	r3, [sp, #12]
10003a9e:	1989      	adds	r1, r1, r6
10003aa0:	3b02      	subs	r3, #2
10003aa2:	9303      	str	r3, [sp, #12]
10003aa4:	4643      	mov	r3, r8
10003aa6:	1ac9      	subs	r1, r1, r3
10003aa8:	9b02      	ldr	r3, [sp, #8]
10003aaa:	9a03      	ldr	r2, [sp, #12]
10003aac:	041b      	lsls	r3, r3, #16
10003aae:	9c05      	ldr	r4, [sp, #20]
10003ab0:	431a      	orrs	r2, r3
10003ab2:	0c10      	lsrs	r0, r2, #16
10003ab4:	0413      	lsls	r3, r2, #16
10003ab6:	4691      	mov	r9, r2
10003ab8:	1c22      	adds	r2, r4, #0
10003aba:	9f04      	ldr	r7, [sp, #16]
10003abc:	0c1b      	lsrs	r3, r3, #16
10003abe:	435a      	muls	r2, r3
10003ac0:	4344      	muls	r4, r0
10003ac2:	437b      	muls	r3, r7
10003ac4:	4378      	muls	r0, r7
10003ac6:	18e3      	adds	r3, r4, r3
10003ac8:	0c17      	lsrs	r7, r2, #16
10003aca:	19db      	adds	r3, r3, r7
10003acc:	429c      	cmp	r4, r3
10003ace:	d903      	bls.n	10003ad8 <__aeabi_ddiv+0x39c>
10003ad0:	2480      	movs	r4, #128	; 0x80
10003ad2:	0264      	lsls	r4, r4, #9
10003ad4:	46a4      	mov	ip, r4
10003ad6:	4460      	add	r0, ip
10003ad8:	0c1c      	lsrs	r4, r3, #16
10003ada:	0412      	lsls	r2, r2, #16
10003adc:	041b      	lsls	r3, r3, #16
10003ade:	0c12      	lsrs	r2, r2, #16
10003ae0:	1900      	adds	r0, r0, r4
10003ae2:	189b      	adds	r3, r3, r2
10003ae4:	4281      	cmp	r1, r0
10003ae6:	d200      	bcs.n	10003aea <__aeabi_ddiv+0x3ae>
10003ae8:	e096      	b.n	10003c18 <__aeabi_ddiv+0x4dc>
10003aea:	d100      	bne.n	10003aee <__aeabi_ddiv+0x3b2>
10003aec:	e0fc      	b.n	10003ce8 <__aeabi_ddiv+0x5ac>
10003aee:	464a      	mov	r2, r9
10003af0:	2301      	movs	r3, #1
10003af2:	431a      	orrs	r2, r3
10003af4:	4691      	mov	r9, r2
10003af6:	4b9b      	ldr	r3, [pc, #620]	; (10003d64 <__aeabi_ddiv+0x628>)
10003af8:	18eb      	adds	r3, r5, r3
10003afa:	2b00      	cmp	r3, #0
10003afc:	dc00      	bgt.n	10003b00 <__aeabi_ddiv+0x3c4>
10003afe:	e099      	b.n	10003c34 <__aeabi_ddiv+0x4f8>
10003b00:	464a      	mov	r2, r9
10003b02:	0752      	lsls	r2, r2, #29
10003b04:	d00a      	beq.n	10003b1c <__aeabi_ddiv+0x3e0>
10003b06:	220f      	movs	r2, #15
10003b08:	4649      	mov	r1, r9
10003b0a:	400a      	ands	r2, r1
10003b0c:	2a04      	cmp	r2, #4
10003b0e:	d005      	beq.n	10003b1c <__aeabi_ddiv+0x3e0>
10003b10:	3104      	adds	r1, #4
10003b12:	4549      	cmp	r1, r9
10003b14:	4192      	sbcs	r2, r2
10003b16:	4689      	mov	r9, r1
10003b18:	4252      	negs	r2, r2
10003b1a:	4493      	add	fp, r2
10003b1c:	465a      	mov	r2, fp
10003b1e:	01d2      	lsls	r2, r2, #7
10003b20:	d506      	bpl.n	10003b30 <__aeabi_ddiv+0x3f4>
10003b22:	465a      	mov	r2, fp
10003b24:	4b90      	ldr	r3, [pc, #576]	; (10003d68 <__aeabi_ddiv+0x62c>)
10003b26:	401a      	ands	r2, r3
10003b28:	2380      	movs	r3, #128	; 0x80
10003b2a:	4693      	mov	fp, r2
10003b2c:	00db      	lsls	r3, r3, #3
10003b2e:	18eb      	adds	r3, r5, r3
10003b30:	4a8e      	ldr	r2, [pc, #568]	; (10003d6c <__aeabi_ddiv+0x630>)
10003b32:	4293      	cmp	r3, r2
10003b34:	dd00      	ble.n	10003b38 <__aeabi_ddiv+0x3fc>
10003b36:	e662      	b.n	100037fe <__aeabi_ddiv+0xc2>
10003b38:	464a      	mov	r2, r9
10003b3a:	4659      	mov	r1, fp
10003b3c:	08d2      	lsrs	r2, r2, #3
10003b3e:	0749      	lsls	r1, r1, #29
10003b40:	4311      	orrs	r1, r2
10003b42:	465a      	mov	r2, fp
10003b44:	4689      	mov	r9, r1
10003b46:	0257      	lsls	r7, r2, #9
10003b48:	4651      	mov	r1, sl
10003b4a:	2201      	movs	r2, #1
10003b4c:	055b      	lsls	r3, r3, #21
10003b4e:	0b3f      	lsrs	r7, r7, #12
10003b50:	0d5b      	lsrs	r3, r3, #21
10003b52:	400a      	ands	r2, r1
10003b54:	e65a      	b.n	1000380c <__aeabi_ddiv+0xd0>
10003b56:	2080      	movs	r0, #128	; 0x80
10003b58:	465a      	mov	r2, fp
10003b5a:	0300      	lsls	r0, r0, #12
10003b5c:	4202      	tst	r2, r0
10003b5e:	d008      	beq.n	10003b72 <__aeabi_ddiv+0x436>
10003b60:	4207      	tst	r7, r0
10003b62:	d106      	bne.n	10003b72 <__aeabi_ddiv+0x436>
10003b64:	4307      	orrs	r7, r0
10003b66:	033f      	lsls	r7, r7, #12
10003b68:	4699      	mov	r9, r3
10003b6a:	0b3f      	lsrs	r7, r7, #12
10003b6c:	4642      	mov	r2, r8
10003b6e:	4b80      	ldr	r3, [pc, #512]	; (10003d70 <__aeabi_ddiv+0x634>)
10003b70:	e64c      	b.n	1000380c <__aeabi_ddiv+0xd0>
10003b72:	465f      	mov	r7, fp
10003b74:	4307      	orrs	r7, r0
10003b76:	033f      	lsls	r7, r7, #12
10003b78:	0b3f      	lsrs	r7, r7, #12
10003b7a:	1c22      	adds	r2, r4, #0
10003b7c:	4b7c      	ldr	r3, [pc, #496]	; (10003d70 <__aeabi_ddiv+0x634>)
10003b7e:	e645      	b.n	1000380c <__aeabi_ddiv+0xd0>
10003b80:	f000 fcba 	bl	100044f8 <__clzsi2>
10003b84:	1c03      	adds	r3, r0, #0
10003b86:	3020      	adds	r0, #32
10003b88:	2827      	cmp	r0, #39	; 0x27
10003b8a:	dc00      	bgt.n	10003b8e <__aeabi_ddiv+0x452>
10003b8c:	e65e      	b.n	1000384c <__aeabi_ddiv+0x110>
10003b8e:	3b08      	subs	r3, #8
10003b90:	409e      	lsls	r6, r3
10003b92:	2300      	movs	r3, #0
10003b94:	46b3      	mov	fp, r6
10003b96:	4699      	mov	r9, r3
10003b98:	e665      	b.n	10003866 <__aeabi_ddiv+0x12a>
10003b9a:	4650      	mov	r0, sl
10003b9c:	f000 fcac 	bl	100044f8 <__clzsi2>
10003ba0:	1c02      	adds	r2, r0, #0
10003ba2:	3220      	adds	r2, #32
10003ba4:	2a27      	cmp	r2, #39	; 0x27
10003ba6:	dc00      	bgt.n	10003baa <__aeabi_ddiv+0x46e>
10003ba8:	e675      	b.n	10003896 <__aeabi_ddiv+0x15a>
10003baa:	4657      	mov	r7, sl
10003bac:	3808      	subs	r0, #8
10003bae:	4087      	lsls	r7, r0
10003bb0:	2300      	movs	r3, #0
10003bb2:	e67b      	b.n	100038ac <__aeabi_ddiv+0x170>
10003bb4:	4599      	cmp	r9, r3
10003bb6:	d200      	bcs.n	10003bba <__aeabi_ddiv+0x47e>
10003bb8:	e6af      	b.n	1000391a <__aeabi_ddiv+0x1de>
10003bba:	465a      	mov	r2, fp
10003bbc:	4659      	mov	r1, fp
10003bbe:	0854      	lsrs	r4, r2, #1
10003bc0:	464a      	mov	r2, r9
10003bc2:	07c8      	lsls	r0, r1, #31
10003bc4:	0852      	lsrs	r2, r2, #1
10003bc6:	4302      	orrs	r2, r0
10003bc8:	9203      	str	r2, [sp, #12]
10003bca:	464a      	mov	r2, r9
10003bcc:	07d2      	lsls	r2, r2, #31
10003bce:	4690      	mov	r8, r2
10003bd0:	e6a9      	b.n	10003926 <__aeabi_ddiv+0x1ea>
10003bd2:	2700      	movs	r7, #0
10003bd4:	4588      	cmp	r8, r1
10003bd6:	d300      	bcc.n	10003bda <__aeabi_ddiv+0x49e>
10003bd8:	e71c      	b.n	10003a14 <__aeabi_ddiv+0x2d8>
10003bda:	9f01      	ldr	r7, [sp, #4]
10003bdc:	465a      	mov	r2, fp
10003bde:	46bc      	mov	ip, r7
10003be0:	44e0      	add	r8, ip
10003be2:	45b8      	cmp	r8, r7
10003be4:	41bf      	sbcs	r7, r7
10003be6:	427f      	negs	r7, r7
10003be8:	19bf      	adds	r7, r7, r6
10003bea:	18ff      	adds	r7, r7, r3
10003bec:	3a01      	subs	r2, #1
10003bee:	42be      	cmp	r6, r7
10003bf0:	d206      	bcs.n	10003c00 <__aeabi_ddiv+0x4c4>
10003bf2:	42bc      	cmp	r4, r7
10003bf4:	d85f      	bhi.n	10003cb6 <__aeabi_ddiv+0x57a>
10003bf6:	d100      	bne.n	10003bfa <__aeabi_ddiv+0x4be>
10003bf8:	e09f      	b.n	10003d3a <__aeabi_ddiv+0x5fe>
10003bfa:	1b3f      	subs	r7, r7, r4
10003bfc:	4693      	mov	fp, r2
10003bfe:	e709      	b.n	10003a14 <__aeabi_ddiv+0x2d8>
10003c00:	42b7      	cmp	r7, r6
10003c02:	d1fa      	bne.n	10003bfa <__aeabi_ddiv+0x4be>
10003c04:	9b01      	ldr	r3, [sp, #4]
10003c06:	4543      	cmp	r3, r8
10003c08:	d9f3      	bls.n	10003bf2 <__aeabi_ddiv+0x4b6>
10003c0a:	1b37      	subs	r7, r6, r4
10003c0c:	4693      	mov	fp, r2
10003c0e:	e701      	b.n	10003a14 <__aeabi_ddiv+0x2d8>
10003c10:	4693      	mov	fp, r2
10003c12:	e6d4      	b.n	100039be <__aeabi_ddiv+0x282>
10003c14:	9302      	str	r3, [sp, #8]
10003c16:	e6b1      	b.n	1000397c <__aeabi_ddiv+0x240>
10003c18:	464a      	mov	r2, r9
10003c1a:	1989      	adds	r1, r1, r6
10003c1c:	3a01      	subs	r2, #1
10003c1e:	428e      	cmp	r6, r1
10003c20:	d918      	bls.n	10003c54 <__aeabi_ddiv+0x518>
10003c22:	4691      	mov	r9, r2
10003c24:	4281      	cmp	r1, r0
10003c26:	d000      	beq.n	10003c2a <__aeabi_ddiv+0x4ee>
10003c28:	e761      	b.n	10003aee <__aeabi_ddiv+0x3b2>
10003c2a:	9a01      	ldr	r2, [sp, #4]
10003c2c:	429a      	cmp	r2, r3
10003c2e:	d000      	beq.n	10003c32 <__aeabi_ddiv+0x4f6>
10003c30:	e75d      	b.n	10003aee <__aeabi_ddiv+0x3b2>
10003c32:	e760      	b.n	10003af6 <__aeabi_ddiv+0x3ba>
10003c34:	4f4f      	ldr	r7, [pc, #316]	; (10003d74 <__aeabi_ddiv+0x638>)
10003c36:	1b7f      	subs	r7, r7, r5
10003c38:	2f38      	cmp	r7, #56	; 0x38
10003c3a:	dd13      	ble.n	10003c64 <__aeabi_ddiv+0x528>
10003c3c:	2201      	movs	r2, #1
10003c3e:	4653      	mov	r3, sl
10003c40:	401a      	ands	r2, r3
10003c42:	e64f      	b.n	100038e4 <__aeabi_ddiv+0x1a8>
10003c44:	2301      	movs	r3, #1
10003c46:	425b      	negs	r3, r3
10003c48:	4699      	mov	r9, r3
10003c4a:	e754      	b.n	10003af6 <__aeabi_ddiv+0x3ba>
10003c4c:	9302      	str	r3, [sp, #8]
10003c4e:	e708      	b.n	10003a62 <__aeabi_ddiv+0x326>
10003c50:	9303      	str	r3, [sp, #12]
10003c52:	e727      	b.n	10003aa4 <__aeabi_ddiv+0x368>
10003c54:	4288      	cmp	r0, r1
10003c56:	d83c      	bhi.n	10003cd2 <__aeabi_ddiv+0x596>
10003c58:	d074      	beq.n	10003d44 <__aeabi_ddiv+0x608>
10003c5a:	4691      	mov	r9, r2
10003c5c:	e747      	b.n	10003aee <__aeabi_ddiv+0x3b2>
10003c5e:	9b01      	ldr	r3, [sp, #4]
10003c60:	469a      	mov	sl, r3
10003c62:	e748      	b.n	10003af6 <__aeabi_ddiv+0x3ba>
10003c64:	2f1f      	cmp	r7, #31
10003c66:	dc44      	bgt.n	10003cf2 <__aeabi_ddiv+0x5b6>
10003c68:	4b43      	ldr	r3, [pc, #268]	; (10003d78 <__aeabi_ddiv+0x63c>)
10003c6a:	464a      	mov	r2, r9
10003c6c:	469c      	mov	ip, r3
10003c6e:	465b      	mov	r3, fp
10003c70:	4465      	add	r5, ip
10003c72:	40fa      	lsrs	r2, r7
10003c74:	40ab      	lsls	r3, r5
10003c76:	4313      	orrs	r3, r2
10003c78:	464a      	mov	r2, r9
10003c7a:	40aa      	lsls	r2, r5
10003c7c:	1c15      	adds	r5, r2, #0
10003c7e:	1e6a      	subs	r2, r5, #1
10003c80:	4195      	sbcs	r5, r2
10003c82:	465a      	mov	r2, fp
10003c84:	40fa      	lsrs	r2, r7
10003c86:	432b      	orrs	r3, r5
10003c88:	1c17      	adds	r7, r2, #0
10003c8a:	075a      	lsls	r2, r3, #29
10003c8c:	d009      	beq.n	10003ca2 <__aeabi_ddiv+0x566>
10003c8e:	220f      	movs	r2, #15
10003c90:	401a      	ands	r2, r3
10003c92:	2a04      	cmp	r2, #4
10003c94:	d005      	beq.n	10003ca2 <__aeabi_ddiv+0x566>
10003c96:	1d1a      	adds	r2, r3, #4
10003c98:	429a      	cmp	r2, r3
10003c9a:	419b      	sbcs	r3, r3
10003c9c:	425b      	negs	r3, r3
10003c9e:	18ff      	adds	r7, r7, r3
10003ca0:	1c13      	adds	r3, r2, #0
10003ca2:	023a      	lsls	r2, r7, #8
10003ca4:	d53e      	bpl.n	10003d24 <__aeabi_ddiv+0x5e8>
10003ca6:	4653      	mov	r3, sl
10003ca8:	2201      	movs	r2, #1
10003caa:	2100      	movs	r1, #0
10003cac:	401a      	ands	r2, r3
10003cae:	2700      	movs	r7, #0
10003cb0:	2301      	movs	r3, #1
10003cb2:	4689      	mov	r9, r1
10003cb4:	e5aa      	b.n	1000380c <__aeabi_ddiv+0xd0>
10003cb6:	2302      	movs	r3, #2
10003cb8:	425b      	negs	r3, r3
10003cba:	469c      	mov	ip, r3
10003cbc:	9a01      	ldr	r2, [sp, #4]
10003cbe:	44e3      	add	fp, ip
10003cc0:	4694      	mov	ip, r2
10003cc2:	44e0      	add	r8, ip
10003cc4:	4590      	cmp	r8, r2
10003cc6:	419b      	sbcs	r3, r3
10003cc8:	425b      	negs	r3, r3
10003cca:	199b      	adds	r3, r3, r6
10003ccc:	19df      	adds	r7, r3, r7
10003cce:	1b3f      	subs	r7, r7, r4
10003cd0:	e6a0      	b.n	10003a14 <__aeabi_ddiv+0x2d8>
10003cd2:	9f01      	ldr	r7, [sp, #4]
10003cd4:	464a      	mov	r2, r9
10003cd6:	007c      	lsls	r4, r7, #1
10003cd8:	42bc      	cmp	r4, r7
10003cda:	41bf      	sbcs	r7, r7
10003cdc:	427f      	negs	r7, r7
10003cde:	19bf      	adds	r7, r7, r6
10003ce0:	3a02      	subs	r2, #2
10003ce2:	19c9      	adds	r1, r1, r7
10003ce4:	9401      	str	r4, [sp, #4]
10003ce6:	e79c      	b.n	10003c22 <__aeabi_ddiv+0x4e6>
10003ce8:	2b00      	cmp	r3, #0
10003cea:	d195      	bne.n	10003c18 <__aeabi_ddiv+0x4dc>
10003cec:	2200      	movs	r2, #0
10003cee:	9201      	str	r2, [sp, #4]
10003cf0:	e79b      	b.n	10003c2a <__aeabi_ddiv+0x4ee>
10003cf2:	465a      	mov	r2, fp
10003cf4:	4b21      	ldr	r3, [pc, #132]	; (10003d7c <__aeabi_ddiv+0x640>)
10003cf6:	1b5b      	subs	r3, r3, r5
10003cf8:	40da      	lsrs	r2, r3
10003cfa:	2f20      	cmp	r7, #32
10003cfc:	d027      	beq.n	10003d4e <__aeabi_ddiv+0x612>
10003cfe:	4b20      	ldr	r3, [pc, #128]	; (10003d80 <__aeabi_ddiv+0x644>)
10003d00:	469c      	mov	ip, r3
10003d02:	465b      	mov	r3, fp
10003d04:	4465      	add	r5, ip
10003d06:	40ab      	lsls	r3, r5
10003d08:	4649      	mov	r1, r9
10003d0a:	430b      	orrs	r3, r1
10003d0c:	1e59      	subs	r1, r3, #1
10003d0e:	418b      	sbcs	r3, r1
10003d10:	4313      	orrs	r3, r2
10003d12:	2207      	movs	r2, #7
10003d14:	2700      	movs	r7, #0
10003d16:	401a      	ands	r2, r3
10003d18:	d007      	beq.n	10003d2a <__aeabi_ddiv+0x5ee>
10003d1a:	220f      	movs	r2, #15
10003d1c:	2700      	movs	r7, #0
10003d1e:	401a      	ands	r2, r3
10003d20:	2a04      	cmp	r2, #4
10003d22:	d1b8      	bne.n	10003c96 <__aeabi_ddiv+0x55a>
10003d24:	077a      	lsls	r2, r7, #29
10003d26:	027f      	lsls	r7, r7, #9
10003d28:	0b3f      	lsrs	r7, r7, #12
10003d2a:	08db      	lsrs	r3, r3, #3
10003d2c:	4313      	orrs	r3, r2
10003d2e:	4699      	mov	r9, r3
10003d30:	2201      	movs	r2, #1
10003d32:	4653      	mov	r3, sl
10003d34:	401a      	ands	r2, r3
10003d36:	2300      	movs	r3, #0
10003d38:	e568      	b.n	1000380c <__aeabi_ddiv+0xd0>
10003d3a:	4541      	cmp	r1, r8
10003d3c:	d8bb      	bhi.n	10003cb6 <__aeabi_ddiv+0x57a>
10003d3e:	4693      	mov	fp, r2
10003d40:	2700      	movs	r7, #0
10003d42:	e667      	b.n	10003a14 <__aeabi_ddiv+0x2d8>
10003d44:	9c01      	ldr	r4, [sp, #4]
10003d46:	429c      	cmp	r4, r3
10003d48:	d3c3      	bcc.n	10003cd2 <__aeabi_ddiv+0x596>
10003d4a:	4691      	mov	r9, r2
10003d4c:	e76d      	b.n	10003c2a <__aeabi_ddiv+0x4ee>
10003d4e:	2300      	movs	r3, #0
10003d50:	e7da      	b.n	10003d08 <__aeabi_ddiv+0x5cc>
10003d52:	2780      	movs	r7, #128	; 0x80
10003d54:	465b      	mov	r3, fp
10003d56:	033f      	lsls	r7, r7, #12
10003d58:	431f      	orrs	r7, r3
10003d5a:	033f      	lsls	r7, r7, #12
10003d5c:	0b3f      	lsrs	r7, r7, #12
10003d5e:	9a01      	ldr	r2, [sp, #4]
10003d60:	4b03      	ldr	r3, [pc, #12]	; (10003d70 <__aeabi_ddiv+0x634>)
10003d62:	e553      	b.n	1000380c <__aeabi_ddiv+0xd0>
10003d64:	000003ff 	.word	0x000003ff
10003d68:	feffffff 	.word	0xfeffffff
10003d6c:	000007fe 	.word	0x000007fe
10003d70:	000007ff 	.word	0x000007ff
10003d74:	fffffc02 	.word	0xfffffc02
10003d78:	0000041e 	.word	0x0000041e
10003d7c:	fffffbe2 	.word	0xfffffbe2
10003d80:	0000043e 	.word	0x0000043e

10003d84 <__aeabi_dmul>:
10003d84:	b5f0      	push	{r4, r5, r6, r7, lr}
10003d86:	465f      	mov	r7, fp
10003d88:	4656      	mov	r6, sl
10003d8a:	464d      	mov	r5, r9
10003d8c:	4644      	mov	r4, r8
10003d8e:	b4f0      	push	{r4, r5, r6, r7}
10003d90:	1c05      	adds	r5, r0, #0
10003d92:	1c06      	adds	r6, r0, #0
10003d94:	0308      	lsls	r0, r1, #12
10003d96:	b087      	sub	sp, #28
10003d98:	4699      	mov	r9, r3
10003d9a:	004f      	lsls	r7, r1, #1
10003d9c:	0b03      	lsrs	r3, r0, #12
10003d9e:	0fcc      	lsrs	r4, r1, #31
10003da0:	4692      	mov	sl, r2
10003da2:	469b      	mov	fp, r3
10003da4:	0d7f      	lsrs	r7, r7, #21
10003da6:	9401      	str	r4, [sp, #4]
10003da8:	d067      	beq.n	10003e7a <__aeabi_dmul+0xf6>
10003daa:	4b6c      	ldr	r3, [pc, #432]	; (10003f5c <__aeabi_dmul+0x1d8>)
10003dac:	429f      	cmp	r7, r3
10003dae:	d036      	beq.n	10003e1e <__aeabi_dmul+0x9a>
10003db0:	2080      	movs	r0, #128	; 0x80
10003db2:	465b      	mov	r3, fp
10003db4:	0340      	lsls	r0, r0, #13
10003db6:	4318      	orrs	r0, r3
10003db8:	00c0      	lsls	r0, r0, #3
10003dba:	0f6b      	lsrs	r3, r5, #29
10003dbc:	4318      	orrs	r0, r3
10003dbe:	4b68      	ldr	r3, [pc, #416]	; (10003f60 <__aeabi_dmul+0x1dc>)
10003dc0:	4683      	mov	fp, r0
10003dc2:	469c      	mov	ip, r3
10003dc4:	2300      	movs	r3, #0
10003dc6:	4698      	mov	r8, r3
10003dc8:	00ee      	lsls	r6, r5, #3
10003dca:	4467      	add	r7, ip
10003dcc:	9300      	str	r3, [sp, #0]
10003dce:	464b      	mov	r3, r9
10003dd0:	4649      	mov	r1, r9
10003dd2:	031d      	lsls	r5, r3, #12
10003dd4:	0fc9      	lsrs	r1, r1, #31
10003dd6:	005b      	lsls	r3, r3, #1
10003dd8:	4652      	mov	r2, sl
10003dda:	0b2d      	lsrs	r5, r5, #12
10003ddc:	0d5b      	lsrs	r3, r3, #21
10003dde:	4689      	mov	r9, r1
10003de0:	d100      	bne.n	10003de4 <__aeabi_dmul+0x60>
10003de2:	e06e      	b.n	10003ec2 <__aeabi_dmul+0x13e>
10003de4:	495d      	ldr	r1, [pc, #372]	; (10003f5c <__aeabi_dmul+0x1d8>)
10003de6:	428b      	cmp	r3, r1
10003de8:	d064      	beq.n	10003eb4 <__aeabi_dmul+0x130>
10003dea:	2080      	movs	r0, #128	; 0x80
10003dec:	495c      	ldr	r1, [pc, #368]	; (10003f60 <__aeabi_dmul+0x1dc>)
10003dee:	0340      	lsls	r0, r0, #13
10003df0:	468c      	mov	ip, r1
10003df2:	2100      	movs	r1, #0
10003df4:	4305      	orrs	r5, r0
10003df6:	00ed      	lsls	r5, r5, #3
10003df8:	0f50      	lsrs	r0, r2, #29
10003dfa:	4305      	orrs	r5, r0
10003dfc:	00d2      	lsls	r2, r2, #3
10003dfe:	4463      	add	r3, ip
10003e00:	4648      	mov	r0, r9
10003e02:	18ff      	adds	r7, r7, r3
10003e04:	1c7b      	adds	r3, r7, #1
10003e06:	469a      	mov	sl, r3
10003e08:	9b00      	ldr	r3, [sp, #0]
10003e0a:	4060      	eors	r0, r4
10003e0c:	9002      	str	r0, [sp, #8]
10003e0e:	430b      	orrs	r3, r1
10003e10:	2b0f      	cmp	r3, #15
10003e12:	d900      	bls.n	10003e16 <__aeabi_dmul+0x92>
10003e14:	e0ac      	b.n	10003f70 <__aeabi_dmul+0x1ec>
10003e16:	4853      	ldr	r0, [pc, #332]	; (10003f64 <__aeabi_dmul+0x1e0>)
10003e18:	009b      	lsls	r3, r3, #2
10003e1a:	58c3      	ldr	r3, [r0, r3]
10003e1c:	469f      	mov	pc, r3
10003e1e:	465b      	mov	r3, fp
10003e20:	431d      	orrs	r5, r3
10003e22:	d000      	beq.n	10003e26 <__aeabi_dmul+0xa2>
10003e24:	e082      	b.n	10003f2c <__aeabi_dmul+0x1a8>
10003e26:	2308      	movs	r3, #8
10003e28:	9300      	str	r3, [sp, #0]
10003e2a:	2300      	movs	r3, #0
10003e2c:	469b      	mov	fp, r3
10003e2e:	3302      	adds	r3, #2
10003e30:	2600      	movs	r6, #0
10003e32:	4698      	mov	r8, r3
10003e34:	e7cb      	b.n	10003dce <__aeabi_dmul+0x4a>
10003e36:	9b02      	ldr	r3, [sp, #8]
10003e38:	9301      	str	r3, [sp, #4]
10003e3a:	4643      	mov	r3, r8
10003e3c:	2b02      	cmp	r3, #2
10003e3e:	d159      	bne.n	10003ef4 <__aeabi_dmul+0x170>
10003e40:	2401      	movs	r4, #1
10003e42:	2500      	movs	r5, #0
10003e44:	2600      	movs	r6, #0
10003e46:	9b01      	ldr	r3, [sp, #4]
10003e48:	401c      	ands	r4, r3
10003e4a:	4b44      	ldr	r3, [pc, #272]	; (10003f5c <__aeabi_dmul+0x1d8>)
10003e4c:	2100      	movs	r1, #0
10003e4e:	032d      	lsls	r5, r5, #12
10003e50:	0d0a      	lsrs	r2, r1, #20
10003e52:	0512      	lsls	r2, r2, #20
10003e54:	0b2d      	lsrs	r5, r5, #12
10003e56:	4315      	orrs	r5, r2
10003e58:	4a43      	ldr	r2, [pc, #268]	; (10003f68 <__aeabi_dmul+0x1e4>)
10003e5a:	051b      	lsls	r3, r3, #20
10003e5c:	4015      	ands	r5, r2
10003e5e:	431d      	orrs	r5, r3
10003e60:	006d      	lsls	r5, r5, #1
10003e62:	07e4      	lsls	r4, r4, #31
10003e64:	086d      	lsrs	r5, r5, #1
10003e66:	4325      	orrs	r5, r4
10003e68:	1c30      	adds	r0, r6, #0
10003e6a:	1c29      	adds	r1, r5, #0
10003e6c:	b007      	add	sp, #28
10003e6e:	bc3c      	pop	{r2, r3, r4, r5}
10003e70:	4690      	mov	r8, r2
10003e72:	4699      	mov	r9, r3
10003e74:	46a2      	mov	sl, r4
10003e76:	46ab      	mov	fp, r5
10003e78:	bdf0      	pop	{r4, r5, r6, r7, pc}
10003e7a:	432b      	orrs	r3, r5
10003e7c:	d04e      	beq.n	10003f1c <__aeabi_dmul+0x198>
10003e7e:	465b      	mov	r3, fp
10003e80:	2b00      	cmp	r3, #0
10003e82:	d100      	bne.n	10003e86 <__aeabi_dmul+0x102>
10003e84:	e185      	b.n	10004192 <__aeabi_dmul+0x40e>
10003e86:	4658      	mov	r0, fp
10003e88:	f000 fb36 	bl	100044f8 <__clzsi2>
10003e8c:	1c02      	adds	r2, r0, #0
10003e8e:	2328      	movs	r3, #40	; 0x28
10003e90:	1c29      	adds	r1, r5, #0
10003e92:	1a9b      	subs	r3, r3, r2
10003e94:	1c16      	adds	r6, r2, #0
10003e96:	4658      	mov	r0, fp
10003e98:	40d9      	lsrs	r1, r3
10003e9a:	3e08      	subs	r6, #8
10003e9c:	40b0      	lsls	r0, r6
10003e9e:	1c0b      	adds	r3, r1, #0
10003ea0:	40b5      	lsls	r5, r6
10003ea2:	4303      	orrs	r3, r0
10003ea4:	469b      	mov	fp, r3
10003ea6:	1c2e      	adds	r6, r5, #0
10003ea8:	2300      	movs	r3, #0
10003eaa:	4f30      	ldr	r7, [pc, #192]	; (10003f6c <__aeabi_dmul+0x1e8>)
10003eac:	9300      	str	r3, [sp, #0]
10003eae:	1abf      	subs	r7, r7, r2
10003eb0:	4698      	mov	r8, r3
10003eb2:	e78c      	b.n	10003dce <__aeabi_dmul+0x4a>
10003eb4:	4651      	mov	r1, sl
10003eb6:	4329      	orrs	r1, r5
10003eb8:	d12e      	bne.n	10003f18 <__aeabi_dmul+0x194>
10003eba:	2500      	movs	r5, #0
10003ebc:	2200      	movs	r2, #0
10003ebe:	2102      	movs	r1, #2
10003ec0:	e79e      	b.n	10003e00 <__aeabi_dmul+0x7c>
10003ec2:	4651      	mov	r1, sl
10003ec4:	4329      	orrs	r1, r5
10003ec6:	d023      	beq.n	10003f10 <__aeabi_dmul+0x18c>
10003ec8:	2d00      	cmp	r5, #0
10003eca:	d100      	bne.n	10003ece <__aeabi_dmul+0x14a>
10003ecc:	e154      	b.n	10004178 <__aeabi_dmul+0x3f4>
10003ece:	1c28      	adds	r0, r5, #0
10003ed0:	f000 fb12 	bl	100044f8 <__clzsi2>
10003ed4:	1c03      	adds	r3, r0, #0
10003ed6:	2128      	movs	r1, #40	; 0x28
10003ed8:	4650      	mov	r0, sl
10003eda:	1ac9      	subs	r1, r1, r3
10003edc:	1c1a      	adds	r2, r3, #0
10003ede:	40c8      	lsrs	r0, r1
10003ee0:	4651      	mov	r1, sl
10003ee2:	3a08      	subs	r2, #8
10003ee4:	4091      	lsls	r1, r2
10003ee6:	4095      	lsls	r5, r2
10003ee8:	1c0a      	adds	r2, r1, #0
10003eea:	4305      	orrs	r5, r0
10003eec:	481f      	ldr	r0, [pc, #124]	; (10003f6c <__aeabi_dmul+0x1e8>)
10003eee:	2100      	movs	r1, #0
10003ef0:	1ac3      	subs	r3, r0, r3
10003ef2:	e785      	b.n	10003e00 <__aeabi_dmul+0x7c>
10003ef4:	2b03      	cmp	r3, #3
10003ef6:	d100      	bne.n	10003efa <__aeabi_dmul+0x176>
10003ef8:	e1c2      	b.n	10004280 <__aeabi_dmul+0x4fc>
10003efa:	2b01      	cmp	r3, #1
10003efc:	d000      	beq.n	10003f00 <__aeabi_dmul+0x17c>
10003efe:	e16d      	b.n	100041dc <__aeabi_dmul+0x458>
10003f00:	4644      	mov	r4, r8
10003f02:	9b01      	ldr	r3, [sp, #4]
10003f04:	2500      	movs	r5, #0
10003f06:	401c      	ands	r4, r3
10003f08:	b2e4      	uxtb	r4, r4
10003f0a:	2300      	movs	r3, #0
10003f0c:	2600      	movs	r6, #0
10003f0e:	e79d      	b.n	10003e4c <__aeabi_dmul+0xc8>
10003f10:	2500      	movs	r5, #0
10003f12:	2200      	movs	r2, #0
10003f14:	2101      	movs	r1, #1
10003f16:	e773      	b.n	10003e00 <__aeabi_dmul+0x7c>
10003f18:	2103      	movs	r1, #3
10003f1a:	e771      	b.n	10003e00 <__aeabi_dmul+0x7c>
10003f1c:	2304      	movs	r3, #4
10003f1e:	9300      	str	r3, [sp, #0]
10003f20:	2300      	movs	r3, #0
10003f22:	469b      	mov	fp, r3
10003f24:	3301      	adds	r3, #1
10003f26:	2600      	movs	r6, #0
10003f28:	4698      	mov	r8, r3
10003f2a:	e750      	b.n	10003dce <__aeabi_dmul+0x4a>
10003f2c:	230c      	movs	r3, #12
10003f2e:	9300      	str	r3, [sp, #0]
10003f30:	3b09      	subs	r3, #9
10003f32:	4698      	mov	r8, r3
10003f34:	e74b      	b.n	10003dce <__aeabi_dmul+0x4a>
10003f36:	2580      	movs	r5, #128	; 0x80
10003f38:	2400      	movs	r4, #0
10003f3a:	032d      	lsls	r5, r5, #12
10003f3c:	2600      	movs	r6, #0
10003f3e:	4b07      	ldr	r3, [pc, #28]	; (10003f5c <__aeabi_dmul+0x1d8>)
10003f40:	e784      	b.n	10003e4c <__aeabi_dmul+0xc8>
10003f42:	464b      	mov	r3, r9
10003f44:	46ab      	mov	fp, r5
10003f46:	1c16      	adds	r6, r2, #0
10003f48:	9301      	str	r3, [sp, #4]
10003f4a:	4688      	mov	r8, r1
10003f4c:	e775      	b.n	10003e3a <__aeabi_dmul+0xb6>
10003f4e:	9b02      	ldr	r3, [sp, #8]
10003f50:	46ab      	mov	fp, r5
10003f52:	1c16      	adds	r6, r2, #0
10003f54:	9301      	str	r3, [sp, #4]
10003f56:	4688      	mov	r8, r1
10003f58:	e76f      	b.n	10003e3a <__aeabi_dmul+0xb6>
10003f5a:	46c0      	nop			; (mov r8, r8)
10003f5c:	000007ff 	.word	0x000007ff
10003f60:	fffffc01 	.word	0xfffffc01
10003f64:	10004a10 	.word	0x10004a10
10003f68:	800fffff 	.word	0x800fffff
10003f6c:	fffffc0d 	.word	0xfffffc0d
10003f70:	0c33      	lsrs	r3, r6, #16
10003f72:	0436      	lsls	r6, r6, #16
10003f74:	0c36      	lsrs	r6, r6, #16
10003f76:	469c      	mov	ip, r3
10003f78:	1c33      	adds	r3, r6, #0
10003f7a:	0c14      	lsrs	r4, r2, #16
10003f7c:	0412      	lsls	r2, r2, #16
10003f7e:	0c12      	lsrs	r2, r2, #16
10003f80:	4353      	muls	r3, r2
10003f82:	4698      	mov	r8, r3
10003f84:	4663      	mov	r3, ip
10003f86:	4353      	muls	r3, r2
10003f88:	4699      	mov	r9, r3
10003f8a:	4663      	mov	r3, ip
10003f8c:	4363      	muls	r3, r4
10003f8e:	9301      	str	r3, [sp, #4]
10003f90:	1c33      	adds	r3, r6, #0
10003f92:	4641      	mov	r1, r8
10003f94:	4363      	muls	r3, r4
10003f96:	0c09      	lsrs	r1, r1, #16
10003f98:	444b      	add	r3, r9
10003f9a:	185b      	adds	r3, r3, r1
10003f9c:	4599      	cmp	r9, r3
10003f9e:	d905      	bls.n	10003fac <__aeabi_dmul+0x228>
10003fa0:	2080      	movs	r0, #128	; 0x80
10003fa2:	0240      	lsls	r0, r0, #9
10003fa4:	4681      	mov	r9, r0
10003fa6:	9901      	ldr	r1, [sp, #4]
10003fa8:	4449      	add	r1, r9
10003faa:	9101      	str	r1, [sp, #4]
10003fac:	0c19      	lsrs	r1, r3, #16
10003fae:	9103      	str	r1, [sp, #12]
10003fb0:	4641      	mov	r1, r8
10003fb2:	0409      	lsls	r1, r1, #16
10003fb4:	0c09      	lsrs	r1, r1, #16
10003fb6:	041b      	lsls	r3, r3, #16
10003fb8:	185b      	adds	r3, r3, r1
10003fba:	9304      	str	r3, [sp, #16]
10003fbc:	0c2b      	lsrs	r3, r5, #16
10003fbe:	4698      	mov	r8, r3
10003fc0:	1c33      	adds	r3, r6, #0
10003fc2:	042d      	lsls	r5, r5, #16
10003fc4:	0c29      	lsrs	r1, r5, #16
10003fc6:	434b      	muls	r3, r1
10003fc8:	4660      	mov	r0, ip
10003fca:	9300      	str	r3, [sp, #0]
10003fcc:	4643      	mov	r3, r8
10003fce:	4665      	mov	r5, ip
10003fd0:	4358      	muls	r0, r3
10003fd2:	435e      	muls	r6, r3
10003fd4:	9b00      	ldr	r3, [sp, #0]
10003fd6:	434d      	muls	r5, r1
10003fd8:	0c1b      	lsrs	r3, r3, #16
10003fda:	4699      	mov	r9, r3
10003fdc:	19ae      	adds	r6, r5, r6
10003fde:	444e      	add	r6, r9
10003fe0:	4684      	mov	ip, r0
10003fe2:	42b5      	cmp	r5, r6
10003fe4:	d903      	bls.n	10003fee <__aeabi_dmul+0x26a>
10003fe6:	2380      	movs	r3, #128	; 0x80
10003fe8:	025b      	lsls	r3, r3, #9
10003fea:	4699      	mov	r9, r3
10003fec:	44cc      	add	ip, r9
10003fee:	0c35      	lsrs	r5, r6, #16
10003ff0:	1c2b      	adds	r3, r5, #0
10003ff2:	9803      	ldr	r0, [sp, #12]
10003ff4:	4463      	add	r3, ip
10003ff6:	4684      	mov	ip, r0
10003ff8:	9305      	str	r3, [sp, #20]
10003ffa:	9b00      	ldr	r3, [sp, #0]
10003ffc:	0436      	lsls	r6, r6, #16
10003ffe:	041b      	lsls	r3, r3, #16
10004000:	0c1b      	lsrs	r3, r3, #16
10004002:	18f3      	adds	r3, r6, r3
10004004:	449c      	add	ip, r3
10004006:	4660      	mov	r0, ip
10004008:	9003      	str	r0, [sp, #12]
1000400a:	4658      	mov	r0, fp
1000400c:	0405      	lsls	r5, r0, #16
1000400e:	0c06      	lsrs	r6, r0, #16
10004010:	0c28      	lsrs	r0, r5, #16
10004012:	4684      	mov	ip, r0
10004014:	4350      	muls	r0, r2
10004016:	1c35      	adds	r5, r6, #0
10004018:	4681      	mov	r9, r0
1000401a:	4660      	mov	r0, ip
1000401c:	4365      	muls	r5, r4
1000401e:	4344      	muls	r4, r0
10004020:	4648      	mov	r0, r9
10004022:	0c00      	lsrs	r0, r0, #16
10004024:	4683      	mov	fp, r0
10004026:	4372      	muls	r2, r6
10004028:	1914      	adds	r4, r2, r4
1000402a:	445c      	add	r4, fp
1000402c:	42a2      	cmp	r2, r4
1000402e:	d903      	bls.n	10004038 <__aeabi_dmul+0x2b4>
10004030:	2280      	movs	r2, #128	; 0x80
10004032:	0252      	lsls	r2, r2, #9
10004034:	4693      	mov	fp, r2
10004036:	445d      	add	r5, fp
10004038:	0c22      	lsrs	r2, r4, #16
1000403a:	18ad      	adds	r5, r5, r2
1000403c:	464a      	mov	r2, r9
1000403e:	0412      	lsls	r2, r2, #16
10004040:	0c12      	lsrs	r2, r2, #16
10004042:	0424      	lsls	r4, r4, #16
10004044:	4640      	mov	r0, r8
10004046:	18a4      	adds	r4, r4, r2
10004048:	4662      	mov	r2, ip
1000404a:	434a      	muls	r2, r1
1000404c:	4371      	muls	r1, r6
1000404e:	4346      	muls	r6, r0
10004050:	4660      	mov	r0, ip
10004052:	9600      	str	r6, [sp, #0]
10004054:	4646      	mov	r6, r8
10004056:	4370      	muls	r0, r6
10004058:	4680      	mov	r8, r0
1000405a:	0c10      	lsrs	r0, r2, #16
1000405c:	4684      	mov	ip, r0
1000405e:	4488      	add	r8, r1
10004060:	44e0      	add	r8, ip
10004062:	4541      	cmp	r1, r8
10004064:	d905      	bls.n	10004072 <__aeabi_dmul+0x2ee>
10004066:	2180      	movs	r1, #128	; 0x80
10004068:	0249      	lsls	r1, r1, #9
1000406a:	468c      	mov	ip, r1
1000406c:	9900      	ldr	r1, [sp, #0]
1000406e:	4461      	add	r1, ip
10004070:	9100      	str	r1, [sp, #0]
10004072:	9801      	ldr	r0, [sp, #4]
10004074:	9903      	ldr	r1, [sp, #12]
10004076:	4684      	mov	ip, r0
10004078:	4461      	add	r1, ip
1000407a:	4299      	cmp	r1, r3
1000407c:	419b      	sbcs	r3, r3
1000407e:	425b      	negs	r3, r3
10004080:	4699      	mov	r9, r3
10004082:	9805      	ldr	r0, [sp, #20]
10004084:	4643      	mov	r3, r8
10004086:	4684      	mov	ip, r0
10004088:	0412      	lsls	r2, r2, #16
1000408a:	0c12      	lsrs	r2, r2, #16
1000408c:	041b      	lsls	r3, r3, #16
1000408e:	189b      	adds	r3, r3, r2
10004090:	4463      	add	r3, ip
10004092:	469c      	mov	ip, r3
10004094:	46ab      	mov	fp, r5
10004096:	4283      	cmp	r3, r0
10004098:	419b      	sbcs	r3, r3
1000409a:	4640      	mov	r0, r8
1000409c:	190a      	adds	r2, r1, r4
1000409e:	44cc      	add	ip, r9
100040a0:	42a2      	cmp	r2, r4
100040a2:	4189      	sbcs	r1, r1
100040a4:	44e3      	add	fp, ip
100040a6:	45cc      	cmp	ip, r9
100040a8:	41b6      	sbcs	r6, r6
100040aa:	465c      	mov	r4, fp
100040ac:	0c00      	lsrs	r0, r0, #16
100040ae:	4680      	mov	r8, r0
100040b0:	4249      	negs	r1, r1
100040b2:	4276      	negs	r6, r6
100040b4:	425b      	negs	r3, r3
100040b6:	1864      	adds	r4, r4, r1
100040b8:	4333      	orrs	r3, r6
100040ba:	4498      	add	r8, r3
100040bc:	428c      	cmp	r4, r1
100040be:	4189      	sbcs	r1, r1
100040c0:	45ab      	cmp	fp, r5
100040c2:	419b      	sbcs	r3, r3
100040c4:	4249      	negs	r1, r1
100040c6:	425b      	negs	r3, r3
100040c8:	4319      	orrs	r1, r3
100040ca:	1c0d      	adds	r5, r1, #0
100040cc:	9b00      	ldr	r3, [sp, #0]
100040ce:	4445      	add	r5, r8
100040d0:	18ee      	adds	r6, r5, r3
100040d2:	0276      	lsls	r6, r6, #9
100040d4:	0de5      	lsrs	r5, r4, #23
100040d6:	432e      	orrs	r6, r5
100040d8:	46b3      	mov	fp, r6
100040da:	9b04      	ldr	r3, [sp, #16]
100040dc:	0256      	lsls	r6, r2, #9
100040de:	431e      	orrs	r6, r3
100040e0:	1e73      	subs	r3, r6, #1
100040e2:	419e      	sbcs	r6, r3
100040e4:	465b      	mov	r3, fp
100040e6:	0dd2      	lsrs	r2, r2, #23
100040e8:	4332      	orrs	r2, r6
100040ea:	0266      	lsls	r6, r4, #9
100040ec:	4316      	orrs	r6, r2
100040ee:	01db      	lsls	r3, r3, #7
100040f0:	d50a      	bpl.n	10004108 <__aeabi_dmul+0x384>
100040f2:	2301      	movs	r3, #1
100040f4:	4033      	ands	r3, r6
100040f6:	0876      	lsrs	r6, r6, #1
100040f8:	431e      	orrs	r6, r3
100040fa:	465b      	mov	r3, fp
100040fc:	07db      	lsls	r3, r3, #31
100040fe:	431e      	orrs	r6, r3
10004100:	465b      	mov	r3, fp
10004102:	085b      	lsrs	r3, r3, #1
10004104:	469b      	mov	fp, r3
10004106:	4657      	mov	r7, sl
10004108:	4b63      	ldr	r3, [pc, #396]	; (10004298 <__aeabi_dmul+0x514>)
1000410a:	18fb      	adds	r3, r7, r3
1000410c:	2b00      	cmp	r3, #0
1000410e:	dd5a      	ble.n	100041c6 <__aeabi_dmul+0x442>
10004110:	0772      	lsls	r2, r6, #29
10004112:	d009      	beq.n	10004128 <__aeabi_dmul+0x3a4>
10004114:	220f      	movs	r2, #15
10004116:	4032      	ands	r2, r6
10004118:	2a04      	cmp	r2, #4
1000411a:	d005      	beq.n	10004128 <__aeabi_dmul+0x3a4>
1000411c:	1d32      	adds	r2, r6, #4
1000411e:	42b2      	cmp	r2, r6
10004120:	41b6      	sbcs	r6, r6
10004122:	4276      	negs	r6, r6
10004124:	44b3      	add	fp, r6
10004126:	1c16      	adds	r6, r2, #0
10004128:	465a      	mov	r2, fp
1000412a:	01d2      	lsls	r2, r2, #7
1000412c:	d506      	bpl.n	1000413c <__aeabi_dmul+0x3b8>
1000412e:	465a      	mov	r2, fp
10004130:	4b5a      	ldr	r3, [pc, #360]	; (1000429c <__aeabi_dmul+0x518>)
10004132:	401a      	ands	r2, r3
10004134:	2380      	movs	r3, #128	; 0x80
10004136:	4693      	mov	fp, r2
10004138:	00db      	lsls	r3, r3, #3
1000413a:	18fb      	adds	r3, r7, r3
1000413c:	4a58      	ldr	r2, [pc, #352]	; (100042a0 <__aeabi_dmul+0x51c>)
1000413e:	4293      	cmp	r3, r2
10004140:	dd34      	ble.n	100041ac <__aeabi_dmul+0x428>
10004142:	2401      	movs	r4, #1
10004144:	9b02      	ldr	r3, [sp, #8]
10004146:	2500      	movs	r5, #0
10004148:	401c      	ands	r4, r3
1000414a:	2600      	movs	r6, #0
1000414c:	4b55      	ldr	r3, [pc, #340]	; (100042a4 <__aeabi_dmul+0x520>)
1000414e:	e67d      	b.n	10003e4c <__aeabi_dmul+0xc8>
10004150:	2080      	movs	r0, #128	; 0x80
10004152:	465b      	mov	r3, fp
10004154:	0300      	lsls	r0, r0, #12
10004156:	4203      	tst	r3, r0
10004158:	d008      	beq.n	1000416c <__aeabi_dmul+0x3e8>
1000415a:	4205      	tst	r5, r0
1000415c:	d106      	bne.n	1000416c <__aeabi_dmul+0x3e8>
1000415e:	4305      	orrs	r5, r0
10004160:	032d      	lsls	r5, r5, #12
10004162:	0b2d      	lsrs	r5, r5, #12
10004164:	464c      	mov	r4, r9
10004166:	1c16      	adds	r6, r2, #0
10004168:	4b4e      	ldr	r3, [pc, #312]	; (100042a4 <__aeabi_dmul+0x520>)
1000416a:	e66f      	b.n	10003e4c <__aeabi_dmul+0xc8>
1000416c:	465d      	mov	r5, fp
1000416e:	4305      	orrs	r5, r0
10004170:	032d      	lsls	r5, r5, #12
10004172:	0b2d      	lsrs	r5, r5, #12
10004174:	4b4b      	ldr	r3, [pc, #300]	; (100042a4 <__aeabi_dmul+0x520>)
10004176:	e669      	b.n	10003e4c <__aeabi_dmul+0xc8>
10004178:	4650      	mov	r0, sl
1000417a:	f000 f9bd 	bl	100044f8 <__clzsi2>
1000417e:	1c03      	adds	r3, r0, #0
10004180:	3320      	adds	r3, #32
10004182:	2b27      	cmp	r3, #39	; 0x27
10004184:	dc00      	bgt.n	10004188 <__aeabi_dmul+0x404>
10004186:	e6a6      	b.n	10003ed6 <__aeabi_dmul+0x152>
10004188:	4655      	mov	r5, sl
1000418a:	3808      	subs	r0, #8
1000418c:	4085      	lsls	r5, r0
1000418e:	2200      	movs	r2, #0
10004190:	e6ac      	b.n	10003eec <__aeabi_dmul+0x168>
10004192:	1c28      	adds	r0, r5, #0
10004194:	f000 f9b0 	bl	100044f8 <__clzsi2>
10004198:	1c02      	adds	r2, r0, #0
1000419a:	3220      	adds	r2, #32
1000419c:	2a27      	cmp	r2, #39	; 0x27
1000419e:	dc00      	bgt.n	100041a2 <__aeabi_dmul+0x41e>
100041a0:	e675      	b.n	10003e8e <__aeabi_dmul+0x10a>
100041a2:	3808      	subs	r0, #8
100041a4:	4085      	lsls	r5, r0
100041a6:	2600      	movs	r6, #0
100041a8:	46ab      	mov	fp, r5
100041aa:	e67d      	b.n	10003ea8 <__aeabi_dmul+0x124>
100041ac:	465a      	mov	r2, fp
100041ae:	08f6      	lsrs	r6, r6, #3
100041b0:	0752      	lsls	r2, r2, #29
100041b2:	4316      	orrs	r6, r2
100041b4:	465a      	mov	r2, fp
100041b6:	2401      	movs	r4, #1
100041b8:	0255      	lsls	r5, r2, #9
100041ba:	9a02      	ldr	r2, [sp, #8]
100041bc:	055b      	lsls	r3, r3, #21
100041be:	0b2d      	lsrs	r5, r5, #12
100041c0:	0d5b      	lsrs	r3, r3, #21
100041c2:	4014      	ands	r4, r2
100041c4:	e642      	b.n	10003e4c <__aeabi_dmul+0xc8>
100041c6:	4d38      	ldr	r5, [pc, #224]	; (100042a8 <__aeabi_dmul+0x524>)
100041c8:	1bed      	subs	r5, r5, r7
100041ca:	2d38      	cmp	r5, #56	; 0x38
100041cc:	dd0a      	ble.n	100041e4 <__aeabi_dmul+0x460>
100041ce:	2401      	movs	r4, #1
100041d0:	9b02      	ldr	r3, [sp, #8]
100041d2:	2500      	movs	r5, #0
100041d4:	401c      	ands	r4, r3
100041d6:	2600      	movs	r6, #0
100041d8:	2300      	movs	r3, #0
100041da:	e637      	b.n	10003e4c <__aeabi_dmul+0xc8>
100041dc:	9b01      	ldr	r3, [sp, #4]
100041de:	4657      	mov	r7, sl
100041e0:	9302      	str	r3, [sp, #8]
100041e2:	e791      	b.n	10004108 <__aeabi_dmul+0x384>
100041e4:	2d1f      	cmp	r5, #31
100041e6:	dc25      	bgt.n	10004234 <__aeabi_dmul+0x4b0>
100041e8:	4b30      	ldr	r3, [pc, #192]	; (100042ac <__aeabi_dmul+0x528>)
100041ea:	1c32      	adds	r2, r6, #0
100041ec:	469c      	mov	ip, r3
100041ee:	4467      	add	r7, ip
100041f0:	40be      	lsls	r6, r7
100041f2:	465b      	mov	r3, fp
100041f4:	40bb      	lsls	r3, r7
100041f6:	1c37      	adds	r7, r6, #0
100041f8:	40ea      	lsrs	r2, r5
100041fa:	1e7e      	subs	r6, r7, #1
100041fc:	41b7      	sbcs	r7, r6
100041fe:	4313      	orrs	r3, r2
10004200:	433b      	orrs	r3, r7
10004202:	1c1e      	adds	r6, r3, #0
10004204:	465b      	mov	r3, fp
10004206:	40eb      	lsrs	r3, r5
10004208:	1c1d      	adds	r5, r3, #0
1000420a:	0773      	lsls	r3, r6, #29
1000420c:	d009      	beq.n	10004222 <__aeabi_dmul+0x49e>
1000420e:	230f      	movs	r3, #15
10004210:	4033      	ands	r3, r6
10004212:	2b04      	cmp	r3, #4
10004214:	d005      	beq.n	10004222 <__aeabi_dmul+0x49e>
10004216:	1d33      	adds	r3, r6, #4
10004218:	42b3      	cmp	r3, r6
1000421a:	41b6      	sbcs	r6, r6
1000421c:	4276      	negs	r6, r6
1000421e:	19ad      	adds	r5, r5, r6
10004220:	1c1e      	adds	r6, r3, #0
10004222:	022b      	lsls	r3, r5, #8
10004224:	d520      	bpl.n	10004268 <__aeabi_dmul+0x4e4>
10004226:	2401      	movs	r4, #1
10004228:	9b02      	ldr	r3, [sp, #8]
1000422a:	2500      	movs	r5, #0
1000422c:	401c      	ands	r4, r3
1000422e:	2600      	movs	r6, #0
10004230:	2301      	movs	r3, #1
10004232:	e60b      	b.n	10003e4c <__aeabi_dmul+0xc8>
10004234:	465a      	mov	r2, fp
10004236:	4b1e      	ldr	r3, [pc, #120]	; (100042b0 <__aeabi_dmul+0x52c>)
10004238:	1bdb      	subs	r3, r3, r7
1000423a:	40da      	lsrs	r2, r3
1000423c:	1c13      	adds	r3, r2, #0
1000423e:	2d20      	cmp	r5, #32
10004240:	d01c      	beq.n	1000427c <__aeabi_dmul+0x4f8>
10004242:	4a1c      	ldr	r2, [pc, #112]	; (100042b4 <__aeabi_dmul+0x530>)
10004244:	4694      	mov	ip, r2
10004246:	465a      	mov	r2, fp
10004248:	4467      	add	r7, ip
1000424a:	40ba      	lsls	r2, r7
1000424c:	1c17      	adds	r7, r2, #0
1000424e:	433e      	orrs	r6, r7
10004250:	1e72      	subs	r2, r6, #1
10004252:	4196      	sbcs	r6, r2
10004254:	431e      	orrs	r6, r3
10004256:	2307      	movs	r3, #7
10004258:	2500      	movs	r5, #0
1000425a:	4033      	ands	r3, r6
1000425c:	d007      	beq.n	1000426e <__aeabi_dmul+0x4ea>
1000425e:	230f      	movs	r3, #15
10004260:	2500      	movs	r5, #0
10004262:	4033      	ands	r3, r6
10004264:	2b04      	cmp	r3, #4
10004266:	d1d6      	bne.n	10004216 <__aeabi_dmul+0x492>
10004268:	076b      	lsls	r3, r5, #29
1000426a:	026d      	lsls	r5, r5, #9
1000426c:	0b2d      	lsrs	r5, r5, #12
1000426e:	2401      	movs	r4, #1
10004270:	08f6      	lsrs	r6, r6, #3
10004272:	431e      	orrs	r6, r3
10004274:	9b02      	ldr	r3, [sp, #8]
10004276:	401c      	ands	r4, r3
10004278:	2300      	movs	r3, #0
1000427a:	e5e7      	b.n	10003e4c <__aeabi_dmul+0xc8>
1000427c:	2700      	movs	r7, #0
1000427e:	e7e6      	b.n	1000424e <__aeabi_dmul+0x4ca>
10004280:	2580      	movs	r5, #128	; 0x80
10004282:	465b      	mov	r3, fp
10004284:	2401      	movs	r4, #1
10004286:	032d      	lsls	r5, r5, #12
10004288:	431d      	orrs	r5, r3
1000428a:	9b01      	ldr	r3, [sp, #4]
1000428c:	032d      	lsls	r5, r5, #12
1000428e:	4023      	ands	r3, r4
10004290:	1c1c      	adds	r4, r3, #0
10004292:	0b2d      	lsrs	r5, r5, #12
10004294:	4b03      	ldr	r3, [pc, #12]	; (100042a4 <__aeabi_dmul+0x520>)
10004296:	e5d9      	b.n	10003e4c <__aeabi_dmul+0xc8>
10004298:	000003ff 	.word	0x000003ff
1000429c:	feffffff 	.word	0xfeffffff
100042a0:	000007fe 	.word	0x000007fe
100042a4:	000007ff 	.word	0x000007ff
100042a8:	fffffc02 	.word	0xfffffc02
100042ac:	0000041e 	.word	0x0000041e
100042b0:	fffffbe2 	.word	0xfffffbe2
100042b4:	0000043e 	.word	0x0000043e

100042b8 <__aeabi_i2d>:
100042b8:	b538      	push	{r3, r4, r5, lr}
100042ba:	1e04      	subs	r4, r0, #0
100042bc:	d016      	beq.n	100042ec <__aeabi_i2d+0x34>
100042be:	0fc5      	lsrs	r5, r0, #31
100042c0:	d000      	beq.n	100042c4 <__aeabi_i2d+0xc>
100042c2:	4244      	negs	r4, r0
100042c4:	1c20      	adds	r0, r4, #0
100042c6:	f000 f917 	bl	100044f8 <__clzsi2>
100042ca:	4b17      	ldr	r3, [pc, #92]	; (10004328 <__aeabi_i2d+0x70>)
100042cc:	1a1b      	subs	r3, r3, r0
100042ce:	280a      	cmp	r0, #10
100042d0:	dc21      	bgt.n	10004316 <__aeabi_i2d+0x5e>
100042d2:	1c02      	adds	r2, r0, #0
100042d4:	1c21      	adds	r1, r4, #0
100042d6:	3215      	adds	r2, #21
100042d8:	4091      	lsls	r1, r2
100042da:	1c0a      	adds	r2, r1, #0
100042dc:	210b      	movs	r1, #11
100042de:	1a08      	subs	r0, r1, r0
100042e0:	40c4      	lsrs	r4, r0
100042e2:	055b      	lsls	r3, r3, #21
100042e4:	0324      	lsls	r4, r4, #12
100042e6:	0b24      	lsrs	r4, r4, #12
100042e8:	0d5b      	lsrs	r3, r3, #21
100042ea:	e003      	b.n	100042f4 <__aeabi_i2d+0x3c>
100042ec:	2500      	movs	r5, #0
100042ee:	2300      	movs	r3, #0
100042f0:	2400      	movs	r4, #0
100042f2:	2200      	movs	r2, #0
100042f4:	2100      	movs	r1, #0
100042f6:	1c10      	adds	r0, r2, #0
100042f8:	0324      	lsls	r4, r4, #12
100042fa:	0d0a      	lsrs	r2, r1, #20
100042fc:	0512      	lsls	r2, r2, #20
100042fe:	0b24      	lsrs	r4, r4, #12
10004300:	4314      	orrs	r4, r2
10004302:	4a0a      	ldr	r2, [pc, #40]	; (1000432c <__aeabi_i2d+0x74>)
10004304:	051b      	lsls	r3, r3, #20
10004306:	4014      	ands	r4, r2
10004308:	431c      	orrs	r4, r3
1000430a:	0064      	lsls	r4, r4, #1
1000430c:	07ed      	lsls	r5, r5, #31
1000430e:	0864      	lsrs	r4, r4, #1
10004310:	432c      	orrs	r4, r5
10004312:	1c21      	adds	r1, r4, #0
10004314:	bd38      	pop	{r3, r4, r5, pc}
10004316:	380b      	subs	r0, #11
10004318:	4084      	lsls	r4, r0
1000431a:	055b      	lsls	r3, r3, #21
1000431c:	0324      	lsls	r4, r4, #12
1000431e:	0b24      	lsrs	r4, r4, #12
10004320:	0d5b      	lsrs	r3, r3, #21
10004322:	2200      	movs	r2, #0
10004324:	e7e6      	b.n	100042f4 <__aeabi_i2d+0x3c>
10004326:	46c0      	nop			; (mov r8, r8)
10004328:	0000041e 	.word	0x0000041e
1000432c:	800fffff 	.word	0x800fffff

10004330 <__aeabi_f2d>:
10004330:	0042      	lsls	r2, r0, #1
10004332:	0e12      	lsrs	r2, r2, #24
10004334:	1c51      	adds	r1, r2, #1
10004336:	b538      	push	{r3, r4, r5, lr}
10004338:	b2c9      	uxtb	r1, r1
1000433a:	0243      	lsls	r3, r0, #9
1000433c:	0a5d      	lsrs	r5, r3, #9
1000433e:	0fc4      	lsrs	r4, r0, #31
10004340:	2901      	cmp	r1, #1
10004342:	dd15      	ble.n	10004370 <__aeabi_f2d+0x40>
10004344:	21e0      	movs	r1, #224	; 0xe0
10004346:	0089      	lsls	r1, r1, #2
10004348:	468c      	mov	ip, r1
1000434a:	076d      	lsls	r5, r5, #29
1000434c:	0b1b      	lsrs	r3, r3, #12
1000434e:	4462      	add	r2, ip
10004350:	2100      	movs	r1, #0
10004352:	1c28      	adds	r0, r5, #0
10004354:	0d0d      	lsrs	r5, r1, #20
10004356:	052d      	lsls	r5, r5, #20
10004358:	432b      	orrs	r3, r5
1000435a:	4d1c      	ldr	r5, [pc, #112]	; (100043cc <__aeabi_f2d+0x9c>)
1000435c:	0552      	lsls	r2, r2, #21
1000435e:	402b      	ands	r3, r5
10004360:	0852      	lsrs	r2, r2, #1
10004362:	4313      	orrs	r3, r2
10004364:	005b      	lsls	r3, r3, #1
10004366:	07e4      	lsls	r4, r4, #31
10004368:	085b      	lsrs	r3, r3, #1
1000436a:	4323      	orrs	r3, r4
1000436c:	1c19      	adds	r1, r3, #0
1000436e:	bd38      	pop	{r3, r4, r5, pc}
10004370:	2a00      	cmp	r2, #0
10004372:	d115      	bne.n	100043a0 <__aeabi_f2d+0x70>
10004374:	2d00      	cmp	r5, #0
10004376:	d01f      	beq.n	100043b8 <__aeabi_f2d+0x88>
10004378:	1c28      	adds	r0, r5, #0
1000437a:	f000 f8bd 	bl	100044f8 <__clzsi2>
1000437e:	280a      	cmp	r0, #10
10004380:	dc1d      	bgt.n	100043be <__aeabi_f2d+0x8e>
10004382:	230b      	movs	r3, #11
10004384:	1c2a      	adds	r2, r5, #0
10004386:	1a1b      	subs	r3, r3, r0
10004388:	40da      	lsrs	r2, r3
1000438a:	1c13      	adds	r3, r2, #0
1000438c:	1c02      	adds	r2, r0, #0
1000438e:	3215      	adds	r2, #21
10004390:	4095      	lsls	r5, r2
10004392:	4a0f      	ldr	r2, [pc, #60]	; (100043d0 <__aeabi_f2d+0xa0>)
10004394:	031b      	lsls	r3, r3, #12
10004396:	1a12      	subs	r2, r2, r0
10004398:	0552      	lsls	r2, r2, #21
1000439a:	0b1b      	lsrs	r3, r3, #12
1000439c:	0d52      	lsrs	r2, r2, #21
1000439e:	e7d7      	b.n	10004350 <__aeabi_f2d+0x20>
100043a0:	2d00      	cmp	r5, #0
100043a2:	d006      	beq.n	100043b2 <__aeabi_f2d+0x82>
100043a4:	2280      	movs	r2, #128	; 0x80
100043a6:	0b1b      	lsrs	r3, r3, #12
100043a8:	0312      	lsls	r2, r2, #12
100043aa:	4313      	orrs	r3, r2
100043ac:	076d      	lsls	r5, r5, #29
100043ae:	4a09      	ldr	r2, [pc, #36]	; (100043d4 <__aeabi_f2d+0xa4>)
100043b0:	e7ce      	b.n	10004350 <__aeabi_f2d+0x20>
100043b2:	4a08      	ldr	r2, [pc, #32]	; (100043d4 <__aeabi_f2d+0xa4>)
100043b4:	2300      	movs	r3, #0
100043b6:	e7cb      	b.n	10004350 <__aeabi_f2d+0x20>
100043b8:	2200      	movs	r2, #0
100043ba:	2300      	movs	r3, #0
100043bc:	e7c8      	b.n	10004350 <__aeabi_f2d+0x20>
100043be:	1c03      	adds	r3, r0, #0
100043c0:	3b0b      	subs	r3, #11
100043c2:	409d      	lsls	r5, r3
100043c4:	1c2b      	adds	r3, r5, #0
100043c6:	2500      	movs	r5, #0
100043c8:	e7e3      	b.n	10004392 <__aeabi_f2d+0x62>
100043ca:	46c0      	nop			; (mov r8, r8)
100043cc:	800fffff 	.word	0x800fffff
100043d0:	00000389 	.word	0x00000389
100043d4:	000007ff 	.word	0x000007ff

100043d8 <__aeabi_d2f>:
100043d8:	b570      	push	{r4, r5, r6, lr}
100043da:	030b      	lsls	r3, r1, #12
100043dc:	004d      	lsls	r5, r1, #1
100043de:	0f44      	lsrs	r4, r0, #29
100043e0:	0d6d      	lsrs	r5, r5, #21
100043e2:	0a5b      	lsrs	r3, r3, #9
100043e4:	4323      	orrs	r3, r4
100043e6:	1c6c      	adds	r4, r5, #1
100043e8:	0564      	lsls	r4, r4, #21
100043ea:	0fc9      	lsrs	r1, r1, #31
100043ec:	00c2      	lsls	r2, r0, #3
100043ee:	0d64      	lsrs	r4, r4, #21
100043f0:	2c01      	cmp	r4, #1
100043f2:	dd2a      	ble.n	1000444a <__aeabi_d2f+0x72>
100043f4:	4c3b      	ldr	r4, [pc, #236]	; (100044e4 <__aeabi_d2f+0x10c>)
100043f6:	192c      	adds	r4, r5, r4
100043f8:	2cfe      	cmp	r4, #254	; 0xfe
100043fa:	dc1a      	bgt.n	10004432 <__aeabi_d2f+0x5a>
100043fc:	2c00      	cmp	r4, #0
100043fe:	dd35      	ble.n	1000446c <__aeabi_d2f+0x94>
10004400:	0180      	lsls	r0, r0, #6
10004402:	1e45      	subs	r5, r0, #1
10004404:	41a8      	sbcs	r0, r5
10004406:	00db      	lsls	r3, r3, #3
10004408:	4303      	orrs	r3, r0
1000440a:	0f52      	lsrs	r2, r2, #29
1000440c:	4313      	orrs	r3, r2
1000440e:	075a      	lsls	r2, r3, #29
10004410:	d004      	beq.n	1000441c <__aeabi_d2f+0x44>
10004412:	220f      	movs	r2, #15
10004414:	401a      	ands	r2, r3
10004416:	2a04      	cmp	r2, #4
10004418:	d000      	beq.n	1000441c <__aeabi_d2f+0x44>
1000441a:	3304      	adds	r3, #4
1000441c:	2280      	movs	r2, #128	; 0x80
1000441e:	04d2      	lsls	r2, r2, #19
10004420:	401a      	ands	r2, r3
10004422:	d027      	beq.n	10004474 <__aeabi_d2f+0x9c>
10004424:	3401      	adds	r4, #1
10004426:	2cff      	cmp	r4, #255	; 0xff
10004428:	d003      	beq.n	10004432 <__aeabi_d2f+0x5a>
1000442a:	019b      	lsls	r3, r3, #6
1000442c:	0a5b      	lsrs	r3, r3, #9
1000442e:	b2e4      	uxtb	r4, r4
10004430:	e001      	b.n	10004436 <__aeabi_d2f+0x5e>
10004432:	24ff      	movs	r4, #255	; 0xff
10004434:	2300      	movs	r3, #0
10004436:	025b      	lsls	r3, r3, #9
10004438:	05e4      	lsls	r4, r4, #23
1000443a:	0a5b      	lsrs	r3, r3, #9
1000443c:	4323      	orrs	r3, r4
1000443e:	005b      	lsls	r3, r3, #1
10004440:	07c9      	lsls	r1, r1, #31
10004442:	085b      	lsrs	r3, r3, #1
10004444:	430b      	orrs	r3, r1
10004446:	1c18      	adds	r0, r3, #0
10004448:	bd70      	pop	{r4, r5, r6, pc}
1000444a:	2d00      	cmp	r5, #0
1000444c:	d106      	bne.n	1000445c <__aeabi_d2f+0x84>
1000444e:	4313      	orrs	r3, r2
10004450:	d10e      	bne.n	10004470 <__aeabi_d2f+0x98>
10004452:	2400      	movs	r4, #0
10004454:	025b      	lsls	r3, r3, #9
10004456:	0a5b      	lsrs	r3, r3, #9
10004458:	b2e4      	uxtb	r4, r4
1000445a:	e7ec      	b.n	10004436 <__aeabi_d2f+0x5e>
1000445c:	431a      	orrs	r2, r3
1000445e:	d0e8      	beq.n	10004432 <__aeabi_d2f+0x5a>
10004460:	2080      	movs	r0, #128	; 0x80
10004462:	00db      	lsls	r3, r3, #3
10004464:	0480      	lsls	r0, r0, #18
10004466:	4303      	orrs	r3, r0
10004468:	24ff      	movs	r4, #255	; 0xff
1000446a:	e7d0      	b.n	1000440e <__aeabi_d2f+0x36>
1000446c:	3417      	adds	r4, #23
1000446e:	da0c      	bge.n	1000448a <__aeabi_d2f+0xb2>
10004470:	2305      	movs	r3, #5
10004472:	2400      	movs	r4, #0
10004474:	08db      	lsrs	r3, r3, #3
10004476:	2cff      	cmp	r4, #255	; 0xff
10004478:	d1ec      	bne.n	10004454 <__aeabi_d2f+0x7c>
1000447a:	2b00      	cmp	r3, #0
1000447c:	d02d      	beq.n	100044da <__aeabi_d2f+0x102>
1000447e:	2280      	movs	r2, #128	; 0x80
10004480:	03d2      	lsls	r2, r2, #15
10004482:	4313      	orrs	r3, r2
10004484:	025b      	lsls	r3, r3, #9
10004486:	0a5b      	lsrs	r3, r3, #9
10004488:	e7d5      	b.n	10004436 <__aeabi_d2f+0x5e>
1000448a:	2480      	movs	r4, #128	; 0x80
1000448c:	4816      	ldr	r0, [pc, #88]	; (100044e8 <__aeabi_d2f+0x110>)
1000448e:	0424      	lsls	r4, r4, #16
10004490:	4323      	orrs	r3, r4
10004492:	1b40      	subs	r0, r0, r5
10004494:	281f      	cmp	r0, #31
10004496:	dc0d      	bgt.n	100044b4 <__aeabi_d2f+0xdc>
10004498:	4c14      	ldr	r4, [pc, #80]	; (100044ec <__aeabi_d2f+0x114>)
1000449a:	46a4      	mov	ip, r4
1000449c:	4465      	add	r5, ip
1000449e:	40ab      	lsls	r3, r5
100044a0:	1c1c      	adds	r4, r3, #0
100044a2:	1c13      	adds	r3, r2, #0
100044a4:	40ab      	lsls	r3, r5
100044a6:	1e5d      	subs	r5, r3, #1
100044a8:	41ab      	sbcs	r3, r5
100044aa:	40c2      	lsrs	r2, r0
100044ac:	4323      	orrs	r3, r4
100044ae:	4313      	orrs	r3, r2
100044b0:	2400      	movs	r4, #0
100044b2:	e7ac      	b.n	1000440e <__aeabi_d2f+0x36>
100044b4:	1c1e      	adds	r6, r3, #0
100044b6:	4c0e      	ldr	r4, [pc, #56]	; (100044f0 <__aeabi_d2f+0x118>)
100044b8:	1b64      	subs	r4, r4, r5
100044ba:	40e6      	lsrs	r6, r4
100044bc:	1c34      	adds	r4, r6, #0
100044be:	2820      	cmp	r0, #32
100044c0:	d00d      	beq.n	100044de <__aeabi_d2f+0x106>
100044c2:	480c      	ldr	r0, [pc, #48]	; (100044f4 <__aeabi_d2f+0x11c>)
100044c4:	4684      	mov	ip, r0
100044c6:	4465      	add	r5, ip
100044c8:	40ab      	lsls	r3, r5
100044ca:	1c1d      	adds	r5, r3, #0
100044cc:	432a      	orrs	r2, r5
100044ce:	1e53      	subs	r3, r2, #1
100044d0:	419a      	sbcs	r2, r3
100044d2:	1c13      	adds	r3, r2, #0
100044d4:	4323      	orrs	r3, r4
100044d6:	2400      	movs	r4, #0
100044d8:	e799      	b.n	1000440e <__aeabi_d2f+0x36>
100044da:	2300      	movs	r3, #0
100044dc:	e7ab      	b.n	10004436 <__aeabi_d2f+0x5e>
100044de:	2500      	movs	r5, #0
100044e0:	e7f4      	b.n	100044cc <__aeabi_d2f+0xf4>
100044e2:	46c0      	nop			; (mov r8, r8)
100044e4:	fffffc80 	.word	0xfffffc80
100044e8:	0000039e 	.word	0x0000039e
100044ec:	fffffc82 	.word	0xfffffc82
100044f0:	0000037e 	.word	0x0000037e
100044f4:	fffffca2 	.word	0xfffffca2

100044f8 <__clzsi2>:
100044f8:	211c      	movs	r1, #28
100044fa:	2301      	movs	r3, #1
100044fc:	041b      	lsls	r3, r3, #16
100044fe:	4298      	cmp	r0, r3
10004500:	d301      	bcc.n	10004506 <__clzsi2+0xe>
10004502:	0c00      	lsrs	r0, r0, #16
10004504:	3910      	subs	r1, #16
10004506:	0a1b      	lsrs	r3, r3, #8
10004508:	4298      	cmp	r0, r3
1000450a:	d301      	bcc.n	10004510 <__clzsi2+0x18>
1000450c:	0a00      	lsrs	r0, r0, #8
1000450e:	3908      	subs	r1, #8
10004510:	091b      	lsrs	r3, r3, #4
10004512:	4298      	cmp	r0, r3
10004514:	d301      	bcc.n	1000451a <__clzsi2+0x22>
10004516:	0900      	lsrs	r0, r0, #4
10004518:	3904      	subs	r1, #4
1000451a:	a202      	add	r2, pc, #8	; (adr r2, 10004524 <__clzsi2+0x2c>)
1000451c:	5c10      	ldrb	r0, [r2, r0]
1000451e:	1840      	adds	r0, r0, r1
10004520:	4770      	bx	lr
10004522:	46c0      	nop			; (mov r8, r8)
10004524:	02020304 	.word	0x02020304
10004528:	01010101 	.word	0x01010101
	...

10004534 <__libc_init_array>:
10004534:	4b0e      	ldr	r3, [pc, #56]	; (10004570 <__libc_init_array+0x3c>)
10004536:	b570      	push	{r4, r5, r6, lr}
10004538:	2500      	movs	r5, #0
1000453a:	1c1e      	adds	r6, r3, #0
1000453c:	4c0d      	ldr	r4, [pc, #52]	; (10004574 <__libc_init_array+0x40>)
1000453e:	1ae4      	subs	r4, r4, r3
10004540:	10a4      	asrs	r4, r4, #2
10004542:	42a5      	cmp	r5, r4
10004544:	d004      	beq.n	10004550 <__libc_init_array+0x1c>
10004546:	00ab      	lsls	r3, r5, #2
10004548:	58f3      	ldr	r3, [r6, r3]
1000454a:	4798      	blx	r3
1000454c:	3501      	adds	r5, #1
1000454e:	e7f8      	b.n	10004542 <__libc_init_array+0xe>
10004550:	f7fd fae0 	bl	10001b14 <_init>
10004554:	4b08      	ldr	r3, [pc, #32]	; (10004578 <__libc_init_array+0x44>)
10004556:	2500      	movs	r5, #0
10004558:	1c1e      	adds	r6, r3, #0
1000455a:	4c08      	ldr	r4, [pc, #32]	; (1000457c <__libc_init_array+0x48>)
1000455c:	1ae4      	subs	r4, r4, r3
1000455e:	10a4      	asrs	r4, r4, #2
10004560:	42a5      	cmp	r5, r4
10004562:	d004      	beq.n	1000456e <__libc_init_array+0x3a>
10004564:	00ab      	lsls	r3, r5, #2
10004566:	58f3      	ldr	r3, [r6, r3]
10004568:	4798      	blx	r3
1000456a:	3501      	adds	r5, #1
1000456c:	e7f8      	b.n	10004560 <__libc_init_array+0x2c>
1000456e:	bd70      	pop	{r4, r5, r6, pc}
10004570:	20000620 	.word	0x20000620
10004574:	20000620 	.word	0x20000620
10004578:	20000620 	.word	0x20000620
1000457c:	20000620 	.word	0x20000620

10004580 <CSWTCH.36>:
10004580:	00000003 00000003 0000000c 0000000c     ................
10004590:	00003000 00003000 00003000 00003000     .0...0...0...0..
100045a0:	00000300 00000c00                       ........

100045a8 <CSWTCH.35>:
	...
100045b0:	00000002 00000002 0000000c 0000000c     ................
100045c0:	0000000c 0000000c 00000008 0000000a     ................

100045d0 <COM_channel_config>:
100045d0:	00000960 10020808 00000200              `...........

100045dc <COM_config>:
100045dc:	100045d0 10001bd5 00000000 00000000     .E..............
	...
100045f8:	1000460c 04020200 00000004              .F..........

10004604 <COM_tx_pin_config>:
10004604:	000000b8 00000001                       ........

1000460c <COM_tx_pin>:
1000460c:	40040000 00000007 10004604              ...@.....F..

10004618 <COM_rx_pin_config>:
10004618:	00000000 00000001                       ........

10004620 <PULSE_250US_event2_config>:
10004620:	00010000                                ....

10004624 <PULSE_250US_event0_config>:
10004624:	00010000                                ....

10004628 <PULSE_5MS_config_handle>:
10004628:	13870001 000109c4 00000000 00000300     ................
10004638:	00000003 100046d0 100046cc 100046d4     .....F...F...F..
	...
10004654:	01000000 00000000 04000000 100046e0     .............F..
	...
10004674:	200005a4                                ... 

10004678 <PULSE_250US_event1_config>:
10004678:	00010000                                ....

1000467c <PULSE_250US_config_handle>:
1000467c:	00f90001 0001007d 00000000 00000200     ....}...........
1000468c:	00000002 10004624 10004678 10004620     ....$F..xF.. F..
	...
100046a8:	01000000 00000000 08000000 100046d8     .............F..
	...
100046c8:	200005a4                                ... 

100046cc <PULSE_5MS_event1_config>:
100046cc:	00010000                                ....

100046d0 <PULSE_5MS_event0_config>:
100046d0:	00010000                                ....

100046d4 <PULSE_5MS_event2_config>:
100046d4:	00010000                                ....

100046d8 <PULSE_250US_timer_handle>:
100046d8:	00000000 00000006                       ........

100046e0 <PULSE_5MS_timer_handle>:
100046e0:	00000000 00000006                       ........

100046e8 <ACOMP_1MS>:
100046e8:	00010312                                ....

100046ec <TASK_20MS>:
100046ec:	00010314                                ....

100046f0 <group_init_handle0>:
	...

10004704 <group_init_handle1>:
	...

10004718 <global_config>:
	...

10004730 <DOWN_LED>:
10004730:	40040100 00000080 00010000 00000004     ...@............

10004740 <G_LED>:
10004740:	40040100 00000080 00010000 00000005     ...@............

10004750 <CLAMP>:
10004750:	40040000 00000080 00010000 00000002     ...@............

10004760 <UP_LED>:
10004760:	40040100 00000080 00010000 00000003     ...@............

10004770 <R_LED>:
10004770:	40040100 00000080 00010000 00000002     ...@............

10004780 <JMP1>:
10004780:	40040000 00000010 00000000 0000000a     ...@............

10004790 <JMP2>:
10004790:	40040000 00000000 00000000 0000000b     ...@............

100047a0 <JMP3>:
100047a0:	40040000 00000000 00000000 0000000c     ...@............

100047b0 <JMP4>:
100047b0:	40040000 00000010 00000000 0000000d     ...@............
100047c0:	00000100 00010000 00000000              ............

100047cc <group_ptrs>:
100047cc:	48030400 48030800                       ...H...H

100047d4 <VOLT_CURR_TEMP_Temperature_queue_entry_2>:
100047d4:	00000027                                '...

100047d8 <ACOMP_VRef_queue_entry_1>:
100047d8:	00000020                                 ...

100047dc <VOLT_CURR_TEMP_Current_handle>:
100047dc:	10004838 10004810 00000601              8H...H......

100047e8 <VOLT_CURR_TEMP_Temperature_ch_config>:
100047e8:	002a0000 00000000 00000000 0000ff01     ..*.............

100047f8 <VOLT_CURR_TEMP_Voltage_queue_entry_0>:
100047f8:	000000a5                                ....

100047fc <ACOMP_VRef_res_config>:
100047fc:	80030000                                ....

10004800 <VOLT_CURR_TEMP_queue_config>:
10004800:	00000000 00004100 00000004              .....A......

1000480c <VOLT_CURR_TEMP_Temperature_res_config>:
1000480c:	80030000                                ....

10004810 <VOLT_CURR_TEMP_Current_res_config>:
10004810:	00030000                                ....

10004814 <ACOMP_queue_config>:
10004814:	00000000 00004000 00000004              .....@......

10004820 <VOLT_CURR_TEMP_queue_handle>:
	...
1000482c:	00000002 10004800 00000001              .....H......

10004838 <VOLT_CURR_TEMP_Current_ch_config>:
10004838:	00240000 00000000 00000000 0000ff01     ..$.............

10004848 <VOLT_CURR_TEMP_Current_queue_entry_1>:
10004848:	00000026                                &...

1000484c <ACOMP_queue_handle>:
	...
10004858:	00000002 10004814 00000001              .....H......

10004864 <VOLT_CURR_TEMP_Voltage_handle>:
10004864:	10004870 100048f4 00000501              pH...H......

10004870 <VOLT_CURR_TEMP_Voltage_ch_config>:
10004870:	002b0000 00000000 00000000 0000ff01     ..+.............

10004880 <ACOMP_VRef_handle>:
10004880:	100048c8 100047fc 00000000              .H...G......

1000488c <VOLT_CURR_TEMP_Temperature_handle>:
1000488c:	100047e8 1000480c 00000701              .G...H......

10004898 <ACOMP_ACOMP_res_config>:
10004898:	00030000                                ....

1000489c <VOLT_CURR_TEMP>:
1000489c:	200005fc 20000608 100022f1 10004820     ... ... .".. H..
100048ac:	200005e8 03030103 00000001              ... ........

100048b8 <ACOMP_ACOMP_ch_config>:
100048b8:	00270000 00000000 00000000 00000601     ..'.............

100048c8 <ACOMP_VRef_ch_config>:
100048c8:	00290000 00000000 00000000 0000ff01     ..).............

100048d8 <ACOMP>:
100048d8:	200005ec 200005f4 10002305 1000484c     ... ... .#..LH..
100048e8:	200005e9 02020003 00000001              ... ........

100048f4 <VOLT_CURR_TEMP_Voltage_res_config>:
100048f4:	00030000                                ....

100048f8 <ACOMP_ACOMP_handle>:
100048f8:	100048b8 10004898 00000100              .H...H......

10004904 <ACOMP_ACOMP_queue_entry_0>:
10004904:	000000a1 00000038 00000066 10002e7e     ....8...f...~...
10004914:	10002e46 10002e62 10002e3a 10002e62     F...b...:...b...
10004924:	10002da6 10002e62 10002e3a 10002e46     .-..b...:...F...
10004934:	10002e46 10002da6 10002e3a 10002ee4     F....-..:.......
10004944:	10002ee4 10002ee4 10002e68 10002e46     ........h...F...
10004954:	10002e46 10002f2e 10002e38 10002f2e     F..../..8..../..
10004964:	10002da6 10002f2e 10002e38 10002e46     .-.../..8...F...
10004974:	10002e46 10002da6 10002e38 10002ee4     F....-..8.......
10004984:	10002ee4 10002ee4 10002f12 10003246     ........./..F2..
10004994:	1000323e 1000323e 10003236 10003188     >2..>2..62...1..
100049a4:	10003188 1000322c 10003236 10003188     .1..,2..62...1..
100049b4:	1000322c 10003188 10003236 1000318a     ,2...1..62...1..
100049c4:	1000318a 1000318a 100032d0 10003910     .1...1...2...9..
100049d4:	100037fe 100038e4 100037ea 100038e4     .7...8...7...8..
100049e4:	100038ee 100038e4 100037ea 100037fe     .8...8...7...7..
100049f4:	100037fe 100038ee 100037ea 100037f4     .7...8...7...7..
10004a04:	100037f4 100037f4 10003b56 10003f70     .7...7..V;..p?..
10004a14:	10003f4e 10003f4e 10003f42 10003e36     N?..N?..B?..6>..
10004a24:	10003e36 10003f36 10003f42 10003e36     6>..6?..B?..6>..
10004a34:	10003f36 10003e36 10003f42 10003e3a     6?..6>..B?..:>..
10004a44:	10003e3a 10003e3a 10004150              :>..:>..PA..

Disassembly of section .VENEER_Code:

2000000c <HardFault_Veneer>:
    
    .align 1
    
    .globl HardFault_Veneer
HardFault_Veneer:
    LDR R0, =HardFault_Handler
2000000c:	482c      	ldr	r0, [pc, #176]	; (200000c0 <BCCU0_0_Veneer+0x4>)
    MOV PC,R0
2000000e:	4687      	mov	pc, r0
	...

2000002c <SVC_Veneer>:
    .long 0
    .long 0
/* ======================================================================== */
    .globl SVC_Veneer
SVC_Veneer:
    LDR R0, =SVC_Handler
2000002c:	4825      	ldr	r0, [pc, #148]	; (200000c4 <BCCU0_0_Veneer+0x8>)
    MOV PC,R0
2000002e:	4687      	mov	pc, r0
	...

20000038 <PendSV_Veneer>:
    .long 0
    .long 0
/* ======================================================================== */
    .globl PendSV_Veneer
PendSV_Veneer:
    LDR R0, =PendSV_Handler
20000038:	4823      	ldr	r0, [pc, #140]	; (200000c8 <BCCU0_0_Veneer+0xc>)
    MOV PC,R0
2000003a:	4687      	mov	pc, r0

2000003c <SysTick_Veneer>:
/* ======================================================================== */
    .globl SysTick_Veneer 
SysTick_Veneer:
    LDR R0, =SysTick_Handler
2000003c:	4823      	ldr	r0, [pc, #140]	; (200000cc <BCCU0_0_Veneer+0x10>)
    MOV PC,R0
2000003e:	4687      	mov	pc, r0

20000040 <SCU_0_Veneer>:
/* ======================================================================== */
    .globl SCU_0_Veneer 
SCU_0_Veneer:
    LDR R0, =SCU_0_IRQHandler
20000040:	4823      	ldr	r0, [pc, #140]	; (200000d0 <BCCU0_0_Veneer+0x14>)
    MOV PC,R0
20000042:	4687      	mov	pc, r0

20000044 <SCU_1_Veneer>:
/* ======================================================================== */
    .globl SCU_1_Veneer 
SCU_1_Veneer:
    LDR R0, =SCU_1_IRQHandler
20000044:	4823      	ldr	r0, [pc, #140]	; (200000d4 <BCCU0_0_Veneer+0x18>)
    MOV PC,R0
20000046:	4687      	mov	pc, r0

20000048 <SCU_2_Veneer>:
/* ======================================================================== */
    .globl SCU_2_Veneer
SCU_2_Veneer:
    LDR R0, =SCU_2_IRQHandler
20000048:	4823      	ldr	r0, [pc, #140]	; (200000d8 <BCCU0_0_Veneer+0x1c>)
    MOV PC,R0
2000004a:	4687      	mov	pc, r0

2000004c <SCU_3_Veneer>:
/* ======================================================================== */
    .globl SCU_3_Veneer 
SCU_3_Veneer:
    LDR R0, =ERU0_0_IRQHandler
2000004c:	4823      	ldr	r0, [pc, #140]	; (200000dc <BCCU0_0_Veneer+0x20>)
    MOV PC,R0
2000004e:	4687      	mov	pc, r0

20000050 <SCU_4_Veneer>:
/* ======================================================================== */
    .globl SCU_4_Veneer 
SCU_4_Veneer:
    LDR R0, =ERU0_1_IRQHandler
20000050:	4823      	ldr	r0, [pc, #140]	; (200000e0 <BCCU0_0_Veneer+0x24>)
    MOV PC,R0
20000052:	4687      	mov	pc, r0

20000054 <SCU_5_Veneer>:
/* ======================================================================== */
    .globl SCU_5_Veneer 
SCU_5_Veneer:
    LDR R0, =ERU0_2_IRQHandler
20000054:	4823      	ldr	r0, [pc, #140]	; (200000e4 <BCCU0_0_Veneer+0x28>)
    MOV PC,R0
20000056:	4687      	mov	pc, r0

20000058 <SCU_6_Veneer>:
/* ======================================================================== */
    .globl SCU_6_Veneer 
SCU_6_Veneer:
    LDR R0, =ERU0_3_IRQHandler
20000058:	4823      	ldr	r0, [pc, #140]	; (200000e8 <BCCU0_0_Veneer+0x2c>)
    MOV PC,R0
2000005a:	4687      	mov	pc, r0

2000005c <MATH_Veneer>:
/* ======================================================================== */
    .globl MATH_Veneer 
MATH_Veneer:
    LDR R0, =MATH0_0_IRQHandler
2000005c:	4823      	ldr	r0, [pc, #140]	; (200000ec <BCCU0_0_Veneer+0x30>)
    MOV PC,R0
2000005e:	4687      	mov	pc, r0
20000060:	00000000 	.word	0x00000000

20000064 <USIC0_0_Veneer>:
    .long 0
/* ======================================================================== */
    .globl USIC0_0_Veneer
USIC0_0_Veneer:
    LDR R0, =USIC0_0_IRQHandler
20000064:	4822      	ldr	r0, [pc, #136]	; (200000f0 <BCCU0_0_Veneer+0x34>)
    MOV PC,R0
20000066:	4687      	mov	pc, r0

20000068 <USIC0_1_Veneer>:
/* ======================================================================== */
    .globl USIC0_1_Veneer
USIC0_1_Veneer:
    LDR R0, =USIC0_1_IRQHandler
20000068:	4822      	ldr	r0, [pc, #136]	; (200000f4 <BCCU0_0_Veneer+0x38>)
    MOV PC,R0
2000006a:	4687      	mov	pc, r0

2000006c <USIC0_2_Veneer>:
/* ======================================================================== */
    .globl USIC0_2_Veneer
USIC0_2_Veneer:
    LDR R0, =USIC0_2_IRQHandler
2000006c:	4822      	ldr	r0, [pc, #136]	; (200000f8 <BCCU0_0_Veneer+0x3c>)
    MOV PC,R0
2000006e:	4687      	mov	pc, r0

20000070 <USIC0_3_Veneer>:
/* ======================================================================== */
    .globl USIC0_3_Veneer
USIC0_3_Veneer:
    LDR R0, =USIC0_3_IRQHandler
20000070:	4822      	ldr	r0, [pc, #136]	; (200000fc <BCCU0_0_Veneer+0x40>)
    MOV PC,R0
20000072:	4687      	mov	pc, r0

20000074 <USIC0_4_Veneer>:
/* ======================================================================== */
    .globl USIC0_4_Veneer
USIC0_4_Veneer:
    LDR R0, =USIC0_4_IRQHandler
20000074:	4822      	ldr	r0, [pc, #136]	; (20000100 <BCCU0_0_Veneer+0x44>)
    MOV PC,R0
20000076:	4687      	mov	pc, r0

20000078 <USIC0_5_Veneer>:
/* ======================================================================== */
    .globl USIC0_5_Veneer
USIC0_5_Veneer:
    LDR R0, =USIC0_5_IRQHandler
20000078:	4822      	ldr	r0, [pc, #136]	; (20000104 <BCCU0_0_Veneer+0x48>)
    MOV PC,R0
2000007a:	4687      	mov	pc, r0

2000007c <VADC0_C0_0_Veneer>:
/* ======================================================================== */
    .globl VADC0_C0_0_Veneer 
VADC0_C0_0_Veneer:
    LDR R0, =VADC0_C0_0_IRQHandler
2000007c:	4822      	ldr	r0, [pc, #136]	; (20000108 <BCCU0_0_Veneer+0x4c>)
    MOV PC,R0
2000007e:	4687      	mov	pc, r0

20000080 <VADC0_C0_1_Veneer>:
/* ======================================================================== */
    .globl VADC0_C0_1_Veneer
VADC0_C0_1_Veneer:
    LDR R0, =VADC0_C0_1_IRQHandler
20000080:	4822      	ldr	r0, [pc, #136]	; (2000010c <BCCU0_0_Veneer+0x50>)
    MOV PC,R0
20000082:	4687      	mov	pc, r0

20000084 <VADC0_G0_0_Veneer>:
/* ======================================================================== */
    .globl VADC0_G0_0_Veneer
VADC0_G0_0_Veneer:
    LDR R0, =VADC0_G0_0_IRQHandler
20000084:	4822      	ldr	r0, [pc, #136]	; (20000110 <BCCU0_0_Veneer+0x54>)
    MOV PC,R0
20000086:	4687      	mov	pc, r0

20000088 <VADC0_G0_1_Veneer>:
/* ======================================================================== */
    .globl VADC0_G0_1_Veneer
VADC0_G0_1_Veneer:
    LDR R0, =VADC0_G0_1_IRQHandler
20000088:	4822      	ldr	r0, [pc, #136]	; (20000114 <BCCU0_0_Veneer+0x58>)
    MOV PC,R0
2000008a:	4687      	mov	pc, r0

2000008c <VADC0_G1_0_Veneer>:
/* ======================================================================== */
    .globl VADC0_G1_0_Veneer
VADC0_G1_0_Veneer:
    LDR R0, =VADC0_G1_0_IRQHandler
2000008c:	4822      	ldr	r0, [pc, #136]	; (20000118 <BCCU0_0_Veneer+0x5c>)
    MOV PC,R0
2000008e:	4687      	mov	pc, r0

20000090 <VADC0_G1_1_Veneer>:
/* ======================================================================== */
    .globl VADC0_G1_1_Veneer
VADC0_G1_1_Veneer:
    LDR R0, =VADC0_G1_1_IRQHandler
20000090:	4822      	ldr	r0, [pc, #136]	; (2000011c <BCCU0_0_Veneer+0x60>)
    MOV PC,R0
20000092:	4687      	mov	pc, r0

20000094 <CCU40_0_Veneer>:
/* ======================================================================== */
    .globl CCU40_0_Veneer
CCU40_0_Veneer:
    LDR R0, =CCU40_0_IRQHandler
20000094:	4822      	ldr	r0, [pc, #136]	; (20000120 <BCCU0_0_Veneer+0x64>)
    MOV PC,R0
20000096:	4687      	mov	pc, r0

20000098 <CCU40_1_Veneer>:
/* ======================================================================== */
    .globl CCU40_1_Veneer
CCU40_1_Veneer:
    LDR R0, =CCU40_1_IRQHandler
20000098:	4822      	ldr	r0, [pc, #136]	; (20000124 <BCCU0_0_Veneer+0x68>)
    MOV PC,R0
2000009a:	4687      	mov	pc, r0

2000009c <CCU40_2_Veneer>:
/* ======================================================================== */
    .globl CCU40_2_Veneer
CCU40_2_Veneer:
    LDR R0, =CCU40_2_IRQHandler
2000009c:	4822      	ldr	r0, [pc, #136]	; (20000128 <BCCU0_0_Veneer+0x6c>)
    MOV PC,R0
2000009e:	4687      	mov	pc, r0

200000a0 <CCU40_3_Veneer>:
/* ======================================================================== */
    .globl CCU40_3_Veneer
CCU40_3_Veneer:
    LDR R0, =CCU40_3_IRQHandler
200000a0:	4822      	ldr	r0, [pc, #136]	; (2000012c <BCCU0_0_Veneer+0x70>)
    MOV PC,R0
200000a2:	4687      	mov	pc, r0

200000a4 <CCU80_0_Veneer>:
/* ======================================================================== */
    .globl CCU80_0_Veneer
CCU80_0_Veneer:
    LDR R0, =CCU80_0_IRQHandler
200000a4:	4822      	ldr	r0, [pc, #136]	; (20000130 <BCCU0_0_Veneer+0x74>)
    MOV PC,R0
200000a6:	4687      	mov	pc, r0

200000a8 <CCU80_1_Veneer>:
/* ======================================================================== */
    .globl CCU80_1_Veneer
CCU80_1_Veneer:
    LDR R0, =CCU80_1_IRQHandler
200000a8:	4822      	ldr	r0, [pc, #136]	; (20000134 <BCCU0_0_Veneer+0x78>)
    MOV PC,R0
200000aa:	4687      	mov	pc, r0

200000ac <POSIF0_0_Veneer>:
/* ======================================================================== */
    .globl POSIF0_0_Veneer
POSIF0_0_Veneer:
    LDR R0, =POSIF0_0_IRQHandler
200000ac:	4822      	ldr	r0, [pc, #136]	; (20000138 <BCCU0_0_Veneer+0x7c>)
    MOV PC,R0
200000ae:	4687      	mov	pc, r0

200000b0 <POSIF0_1_Veneer>:
/* ======================================================================== */
    .globl POSIF0_1_Veneer
POSIF0_1_Veneer:
    LDR R0, =POSIF0_1_IRQHandler
200000b0:	4822      	ldr	r0, [pc, #136]	; (2000013c <BCCU0_0_Veneer+0x80>)
    MOV PC,R0
200000b2:	4687      	mov	pc, r0
	...

200000bc <BCCU0_0_Veneer>:
    .long 0
    .long 0
/* ======================================================================== */
    .globl BCCU0_0_Veneer
BCCU0_0_Veneer:
    LDR R0, =BCCU0_0_IRQHandler
200000bc:	4820      	ldr	r0, [pc, #128]	; (20000140 <BCCU0_0_Veneer+0x84>)
    MOV PC,R0
200000be:	4687      	mov	pc, r0
    
    .align 1
    
    .globl HardFault_Veneer
HardFault_Veneer:
    LDR R0, =HardFault_Handler
200000c0:	10001099 	.word	0x10001099
    .long 0
    .long 0
/* ======================================================================== */
    .globl SVC_Veneer
SVC_Veneer:
    LDR R0, =SVC_Handler
200000c4:	10001099 	.word	0x10001099
    .long 0
    .long 0
/* ======================================================================== */
    .globl PendSV_Veneer
PendSV_Veneer:
    LDR R0, =PendSV_Handler
200000c8:	10001099 	.word	0x10001099
    MOV PC,R0
/* ======================================================================== */
    .globl SysTick_Veneer 
SysTick_Veneer:
    LDR R0, =SysTick_Handler
200000cc:	10001099 	.word	0x10001099
    MOV PC,R0
/* ======================================================================== */
    .globl SCU_0_Veneer 
SCU_0_Veneer:
    LDR R0, =SCU_0_IRQHandler
200000d0:	10001099 	.word	0x10001099
    MOV PC,R0
/* ======================================================================== */
    .globl SCU_1_Veneer 
SCU_1_Veneer:
    LDR R0, =SCU_1_IRQHandler
200000d4:	10001099 	.word	0x10001099
    MOV PC,R0
/* ======================================================================== */
    .globl SCU_2_Veneer
SCU_2_Veneer:
    LDR R0, =SCU_2_IRQHandler
200000d8:	10001099 	.word	0x10001099
    MOV PC,R0
/* ======================================================================== */
    .globl SCU_3_Veneer 
SCU_3_Veneer:
    LDR R0, =ERU0_0_IRQHandler
200000dc:	10001099 	.word	0x10001099
    MOV PC,R0
/* ======================================================================== */
    .globl SCU_4_Veneer 
SCU_4_Veneer:
    LDR R0, =ERU0_1_IRQHandler
200000e0:	10001099 	.word	0x10001099
    MOV PC,R0
/* ======================================================================== */
    .globl SCU_5_Veneer 
SCU_5_Veneer:
    LDR R0, =ERU0_2_IRQHandler
200000e4:	10001099 	.word	0x10001099
    MOV PC,R0
/* ======================================================================== */
    .globl SCU_6_Veneer 
SCU_6_Veneer:
    LDR R0, =ERU0_3_IRQHandler
200000e8:	10001099 	.word	0x10001099
    MOV PC,R0
/* ======================================================================== */
    .globl MATH_Veneer 
MATH_Veneer:
    LDR R0, =MATH0_0_IRQHandler
200000ec:	10001099 	.word	0x10001099
    MOV PC,R0
    .long 0
/* ======================================================================== */
    .globl USIC0_0_Veneer
USIC0_0_Veneer:
    LDR R0, =USIC0_0_IRQHandler
200000f0:	10001099 	.word	0x10001099
    MOV PC,R0
/* ======================================================================== */
    .globl USIC0_1_Veneer
USIC0_1_Veneer:
    LDR R0, =USIC0_1_IRQHandler
200000f4:	10001099 	.word	0x10001099
    MOV PC,R0
/* ======================================================================== */
    .globl USIC0_2_Veneer
USIC0_2_Veneer:
    LDR R0, =USIC0_2_IRQHandler
200000f8:	10001099 	.word	0x10001099
    MOV PC,R0
/* ======================================================================== */
    .globl USIC0_3_Veneer
USIC0_3_Veneer:
    LDR R0, =USIC0_3_IRQHandler
200000fc:	10001099 	.word	0x10001099
    MOV PC,R0
/* ======================================================================== */
    .globl USIC0_4_Veneer
USIC0_4_Veneer:
    LDR R0, =USIC0_4_IRQHandler
20000100:	10001099 	.word	0x10001099
    MOV PC,R0
/* ======================================================================== */
    .globl USIC0_5_Veneer
USIC0_5_Veneer:
    LDR R0, =USIC0_5_IRQHandler
20000104:	10001099 	.word	0x10001099
    MOV PC,R0
/* ======================================================================== */
    .globl VADC0_C0_0_Veneer 
VADC0_C0_0_Veneer:
    LDR R0, =VADC0_C0_0_IRQHandler
20000108:	10001099 	.word	0x10001099
    MOV PC,R0
/* ======================================================================== */
    .globl VADC0_C0_1_Veneer
VADC0_C0_1_Veneer:
    LDR R0, =VADC0_C0_1_IRQHandler
2000010c:	10001099 	.word	0x10001099
    MOV PC,R0
/* ======================================================================== */
    .globl VADC0_G0_0_Veneer
VADC0_G0_0_Veneer:
    LDR R0, =VADC0_G0_0_IRQHandler
20000110:	10001099 	.word	0x10001099
    MOV PC,R0
/* ======================================================================== */
    .globl VADC0_G0_1_Veneer
VADC0_G0_1_Veneer:
    LDR R0, =VADC0_G0_1_IRQHandler
20000114:	10002859 	.word	0x10002859
    MOV PC,R0
/* ======================================================================== */
    .globl VADC0_G1_0_Veneer
VADC0_G1_0_Veneer:
    LDR R0, =VADC0_G1_0_IRQHandler
20000118:	10001099 	.word	0x10001099
    MOV PC,R0
/* ======================================================================== */
    .globl VADC0_G1_1_Veneer
VADC0_G1_1_Veneer:
    LDR R0, =VADC0_G1_1_IRQHandler
2000011c:	10002669 	.word	0x10002669
    MOV PC,R0
/* ======================================================================== */
    .globl CCU40_0_Veneer
CCU40_0_Veneer:
    LDR R0, =CCU40_0_IRQHandler
20000120:	10001099 	.word	0x10001099
    MOV PC,R0
/* ======================================================================== */
    .globl CCU40_1_Veneer
CCU40_1_Veneer:
    LDR R0, =CCU40_1_IRQHandler
20000124:	10001099 	.word	0x10001099
    MOV PC,R0
/* ======================================================================== */
    .globl CCU40_2_Veneer
CCU40_2_Veneer:
    LDR R0, =CCU40_2_IRQHandler
20000128:	10001099 	.word	0x10001099
    MOV PC,R0
/* ======================================================================== */
    .globl CCU40_3_Veneer
CCU40_3_Veneer:
    LDR R0, =CCU40_3_IRQHandler
2000012c:	10001099 	.word	0x10001099
    MOV PC,R0
/* ======================================================================== */
    .globl CCU80_0_Veneer
CCU80_0_Veneer:
    LDR R0, =CCU80_0_IRQHandler
20000130:	10001099 	.word	0x10001099
    MOV PC,R0
/* ======================================================================== */
    .globl CCU80_1_Veneer
CCU80_1_Veneer:
    LDR R0, =CCU80_1_IRQHandler
20000134:	10001099 	.word	0x10001099
    MOV PC,R0
/* ======================================================================== */
    .globl POSIF0_0_Veneer
POSIF0_0_Veneer:
    LDR R0, =POSIF0_0_IRQHandler
20000138:	10001099 	.word	0x10001099
    MOV PC,R0
/* ======================================================================== */
    .globl POSIF0_1_Veneer
POSIF0_1_Veneer:
    LDR R0, =POSIF0_1_IRQHandler
2000013c:	10001099 	.word	0x10001099
    .long 0
    .long 0
/* ======================================================================== */
    .globl BCCU0_0_Veneer
BCCU0_0_Veneer:
    LDR R0, =BCCU0_0_IRQHandler
20000140:	10001099 	.word	0x10001099
