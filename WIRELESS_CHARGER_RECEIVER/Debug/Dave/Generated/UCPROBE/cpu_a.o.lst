   1              	# 1 "../Dave/Generated/UCPROBE/cpu_a.S"
   1              	/**************************************************************************************************
   0              	
   0              	
   0              	
   2              	                                                 uC/CPU
   3              	                                     CPU CONFIGURATION & PORT LAYER
   4              	 
   5              	                           (c) Copyright 2004-2015  Micrium, Inc.  Weston, FL
   6              	 
   7              	                All rights reserved.  Protected by international copyright laws.
   8              	 
   9              	                uC/CPU is provided in source form to registered licensees ONLY.  It is
  10              	                illegal to distribute this source code to any third party unless you receive
  11              	                written permission by an authorized Micrium representative.  Knowledge of
  12              	                the source code may NOT be used to develop a similar product.
  13              	 
  14              	                Please help us continue to provide the Embedded community with the finest
  15              	                software available.  Your honesty is greatly appreciated.
  16              	 
  17              	                You can find our product's user manual, API reference, release notes and
  18              	                more information at https://doc.micrium.com.
  19              	                You can contact us at www.micrium.com.
  20              	***************************************************************************************************
  21              	
  22              	#if defined(__GNUC__)
  23              	//*************************************************************************************************
  24              	//
  25              	//                                            CPU PORT FILE
  26              	//
  27              	//                                            ARM-Cortex-M0
  28              	//                                           GNU C Compiler
  29              	//
  30              	// Filename      : cpu_a.s
  31              	// Version       : V1.30.02.00
  32              	// Programmer(s) : JJL
  33              	//                 MD
  34              	//*************************************************************************************************
  35              	
  36              	
  37              	
  38              	//*************************************************************************************************
  39              	//                                           PUBLIC FUNCTIONS
  40              	//*************************************************************************************************
  41              	
  42              	.global  CPU_IntDis
  43              	.global  CPU_IntEn
  44              	
  45              	.global  CPU_SR_Save
  46              	.global  CPU_SR_Restore
  47              	
  48              	.global  CPU_WaitForInt
  49              	.global  CPU_WaitForExcept
  50              	
  51              	
  52              	//*************************************************************************************************
  53              	//                                      CODE GENERATION DIRECTIVES
  54              	//*************************************************************************************************
  55              	
  56              	.text
  57              	.align 2
  58              	.thumb
  59              	.syntax unified
  60              	
  61              	
  62              	//*************************************************************************************************
  63              	//                                    DISABLE and ENABLE INTERRUPTS
  64              	//
  65              	// Description : Disable/Enable interrupts.
  66              	//
  67              	// Prototypes  : void  CPU_IntDis(void);
  68              	//               void  CPU_IntEn (void);
  69              	//*************************************************************************************************
  70              	
  71              	.thumb_func
  72              	CPU_IntDis:
  73 0000 72B6     	        CPSID   I
  74 0002 7047     	        BX      LR
  75              	
  76              	.thumb_func
  77              	CPU_IntEn:
  78 0004 62B6     	        CPSIE   I
  79 0006 7047     	        BX      LR
  80              	
  81              	
  82              	//*************************************************************************************************
  83              	//                                      CRITICAL SECTION FUNCTIONS
  84              	//
  85              	// Description : Disable/Enable interrupts by preserving the state of interrupts.  Generally speaki
  86              	//               state of the interrupt disable flag is stored in the local variable 'cpu_sr' & int
  87              	//               are then disabled ('cpu_sr' is allocated in all functions that need to disable int
  88              	//               The previous interrupt state is restored by copying 'cpu_sr' into the CPU's status
  89              	//
  90              	// Prototypes  : CPU_SR  CPU_SR_Save   (void);
  91              	//               void    CPU_SR_Restore(CPU_SR  cpu_sr);
  92              	//
  93              	// Note(s)     : (1) These functions are used in general like this :
  94              	//
  95              	//                       void  Task (void  *p_arg)
  96              	//                       {
  97              	//                           CPU_SR_ALLOC();                     /* Allocate storage for CPU status
  98              	//                               :
  99              	//                               :
 100              	//                           CPU_CRITICAL_ENTER();               /* cpu_sr = CPU_SR_Save();        
 101              	//                               :
 102              	//                               :
 103              	//                           CPU_CRITICAL_EXIT();                /* CPU_SR_Restore(cpu_sr);        
 104              	//                               :
 105              	//                       }
 106              	//*************************************************************************************************
 107              	
 108              	.thumb_func
 109              	CPU_SR_Save:
 110 0008 EFF31080 	        MRS     R0, PRIMASK                     // Set prio int mask to mask all (except faults)
 111 000c 72B6     	        CPSID   I
 112 000e 7047     	        BX      LR
 113              	
 114              	
 115              	.thumb_func
 116              	CPU_SR_Restore:                                  // See Note #2.
 117 0010 80F31088 	        MSR     PRIMASK, R0
 118 0014 7047     	        BX      LR
 119              	
 120              	
 121              	//*************************************************************************************************
 122              	//                                         WAIT FOR INTERRUPT
 123              	//
 124              	// Description : Enters sleep state, which will be exited when an interrupt is received.
 125              	//
 126              	// Prototypes  : void  CPU_WaitForInt (void)
 127              	//
 128              	// Argument(s) : none.
 129              	//*************************************************************************************************
 130              	
 131              	.thumb_func
 132              	CPU_WaitForInt:
 133 0016 30BF     	        WFI                                     // Wait for interrupt
 134 0018 7047     	        BX      LR
 135              	
 136              	
 137              	//*************************************************************************************************
 138              	//                                         WAIT FOR EXCEPTION
 139              	//
 140              	// Description : Enters sleep state, which will be exited when an exception is received.
 141              	//
 142              	// Prototypes  : void  CPU_WaitForExcept (void)
 143              	//
 144              	// Argument(s) : none.
 145              	//*************************************************************************************************
 146              	
 147              	.thumb_func
 148              	CPU_WaitForExcept:
 149 001a 20BF     	        WFE                                     // Wait for exception
 150 001c 7047     	        BX      LR
 151              	
 152              	
 153              	//*************************************************************************************************
 154              	//                                     CPU ASSEMBLY PORT FILE END
 155              	//*************************************************************************************************
 156              	
 157 001e C046     	.end
DEFINED SYMBOLS
../Dave/Generated/UCPROBE/cpu_a.S:72     .text:00000000 CPU_IntDis
../Dave/Generated/UCPROBE/cpu_a.S:77     .text:00000004 CPU_IntEn
../Dave/Generated/UCPROBE/cpu_a.S:109    .text:00000008 CPU_SR_Save
../Dave/Generated/UCPROBE/cpu_a.S:116    .text:00000010 CPU_SR_Restore
../Dave/Generated/UCPROBE/cpu_a.S:132    .text:00000016 CPU_WaitForInt
../Dave/Generated/UCPROBE/cpu_a.S:148    .text:0000001a CPU_WaitForExcept
../Dave/Generated/UCPROBE/cpu_a.S:57     .text:00000000 $t
                   .debug_aranges:0000000c $d

NO UNDEFINED SYMBOLS
